{"version":3,"file":"asta-b104.js","sources":["../../node_modules/svelte/internal/index.mjs","../../node_modules/mdatools/stat/index.js","../../node_modules/svelte/store/index.mjs","../../node_modules/svelte-plots-basic/src/Axes.svelte","../../node_modules/svelte-plots-basic/src/Colors.js","../../node_modules/svelte-plots-basic/src/XAxis.svelte","../../node_modules/svelte-plots-basic/src/YAxis.svelte","../../node_modules/svelte-plots-basic/src/Rectangles.svelte","../../node_modules/svelte-plots-basic/src/Box.svelte","../../node_modules/mdatools/matrix/index.js","../../node_modules/svelte-plots-basic/src/TextLabels.svelte","../../node_modules/svelte-plots-basic/src/ScatterSeries.svelte","../../node_modules/svelte-plots-basic/src/LineSeries.svelte","../../shared/StatApp.svelte","../../shared/graasta.js","../../shared/controls/AppControlArea.svelte","../../shared/controls/AppControl.svelte","../../shared/controls/AppControlButton.svelte","../../shared/controls/AppControlSwitch.svelte","../../shared/plots/QQPlot.svelte","../../shared/tables/DataTableValues.svelte","../../shared/tables/DataTable.svelte","../src/App.svelte","../src/main.js"],"sourcesContent":["function noop() { }\nconst identity = x => x;\nfunction assign(tar, src) {\n    // @ts-ignore\n    for (const k in src)\n        tar[k] = src[k];\n    return tar;\n}\nfunction is_promise(value) {\n    return value && typeof value === 'object' && typeof value.then === 'function';\n}\nfunction add_location(element, file, line, column, char) {\n    element.__svelte_meta = {\n        loc: { file, line, column, char }\n    };\n}\nfunction run(fn) {\n    return fn();\n}\nfunction blank_object() {\n    return Object.create(null);\n}\nfunction run_all(fns) {\n    fns.forEach(run);\n}\nfunction is_function(thing) {\n    return typeof thing === 'function';\n}\nfunction safe_not_equal(a, b) {\n    return a != a ? b == b : a !== b || ((a && typeof a === 'object') || typeof a === 'function');\n}\nlet src_url_equal_anchor;\nfunction src_url_equal(element_src, url) {\n    if (!src_url_equal_anchor) {\n        src_url_equal_anchor = document.createElement('a');\n    }\n    src_url_equal_anchor.href = url;\n    return element_src === src_url_equal_anchor.href;\n}\nfunction not_equal(a, b) {\n    return a != a ? b == b : a !== b;\n}\nfunction is_empty(obj) {\n    return Object.keys(obj).length === 0;\n}\nfunction validate_store(store, name) {\n    if (store != null && typeof store.subscribe !== 'function') {\n        throw new Error(`'${name}' is not a store with a 'subscribe' method`);\n    }\n}\nfunction subscribe(store, ...callbacks) {\n    if (store == null) {\n        return noop;\n    }\n    const unsub = store.subscribe(...callbacks);\n    return unsub.unsubscribe ? () => unsub.unsubscribe() : unsub;\n}\nfunction get_store_value(store) {\n    let value;\n    subscribe(store, _ => value = _)();\n    return value;\n}\nfunction component_subscribe(component, store, callback) {\n    component.$$.on_destroy.push(subscribe(store, callback));\n}\nfunction create_slot(definition, ctx, $$scope, fn) {\n    if (definition) {\n        const slot_ctx = get_slot_context(definition, ctx, $$scope, fn);\n        return definition[0](slot_ctx);\n    }\n}\nfunction get_slot_context(definition, ctx, $$scope, fn) {\n    return definition[1] && fn\n        ? assign($$scope.ctx.slice(), definition[1](fn(ctx)))\n        : $$scope.ctx;\n}\nfunction get_slot_changes(definition, $$scope, dirty, fn) {\n    if (definition[2] && fn) {\n        const lets = definition[2](fn(dirty));\n        if ($$scope.dirty === undefined) {\n            return lets;\n        }\n        if (typeof lets === 'object') {\n            const merged = [];\n            const len = Math.max($$scope.dirty.length, lets.length);\n            for (let i = 0; i < len; i += 1) {\n                merged[i] = $$scope.dirty[i] | lets[i];\n            }\n            return merged;\n        }\n        return $$scope.dirty | lets;\n    }\n    return $$scope.dirty;\n}\nfunction update_slot_base(slot, slot_definition, ctx, $$scope, slot_changes, get_slot_context_fn) {\n    if (slot_changes) {\n        const slot_context = get_slot_context(slot_definition, ctx, $$scope, get_slot_context_fn);\n        slot.p(slot_context, slot_changes);\n    }\n}\nfunction update_slot(slot, slot_definition, ctx, $$scope, dirty, get_slot_changes_fn, get_slot_context_fn) {\n    const slot_changes = get_slot_changes(slot_definition, $$scope, dirty, get_slot_changes_fn);\n    update_slot_base(slot, slot_definition, ctx, $$scope, slot_changes, get_slot_context_fn);\n}\nfunction get_all_dirty_from_scope($$scope) {\n    if ($$scope.ctx.length > 32) {\n        const dirty = [];\n        const length = $$scope.ctx.length / 32;\n        for (let i = 0; i < length; i++) {\n            dirty[i] = -1;\n        }\n        return dirty;\n    }\n    return -1;\n}\nfunction exclude_internal_props(props) {\n    const result = {};\n    for (const k in props)\n        if (k[0] !== '$')\n            result[k] = props[k];\n    return result;\n}\nfunction compute_rest_props(props, keys) {\n    const rest = {};\n    keys = new Set(keys);\n    for (const k in props)\n        if (!keys.has(k) && k[0] !== '$')\n            rest[k] = props[k];\n    return rest;\n}\nfunction compute_slots(slots) {\n    const result = {};\n    for (const key in slots) {\n        result[key] = true;\n    }\n    return result;\n}\nfunction once(fn) {\n    let ran = false;\n    return function (...args) {\n        if (ran)\n            return;\n        ran = true;\n        fn.call(this, ...args);\n    };\n}\nfunction null_to_empty(value) {\n    return value == null ? '' : value;\n}\nfunction set_store_value(store, ret, value) {\n    store.set(value);\n    return ret;\n}\nconst has_prop = (obj, prop) => Object.prototype.hasOwnProperty.call(obj, prop);\nfunction action_destroyer(action_result) {\n    return action_result && is_function(action_result.destroy) ? action_result.destroy : noop;\n}\n\nconst is_client = typeof window !== 'undefined';\nlet now = is_client\n    ? () => window.performance.now()\n    : () => Date.now();\nlet raf = is_client ? cb => requestAnimationFrame(cb) : noop;\n// used internally for testing\nfunction set_now(fn) {\n    now = fn;\n}\nfunction set_raf(fn) {\n    raf = fn;\n}\n\nconst tasks = new Set();\nfunction run_tasks(now) {\n    tasks.forEach(task => {\n        if (!task.c(now)) {\n            tasks.delete(task);\n            task.f();\n        }\n    });\n    if (tasks.size !== 0)\n        raf(run_tasks);\n}\n/**\n * For testing purposes only!\n */\nfunction clear_loops() {\n    tasks.clear();\n}\n/**\n * Creates a new task that runs on each raf frame\n * until it returns a falsy value or is aborted\n */\nfunction loop(callback) {\n    let task;\n    if (tasks.size === 0)\n        raf(run_tasks);\n    return {\n        promise: new Promise(fulfill => {\n            tasks.add(task = { c: callback, f: fulfill });\n        }),\n        abort() {\n            tasks.delete(task);\n        }\n    };\n}\n\n// Track which nodes are claimed during hydration. Unclaimed nodes can then be removed from the DOM\n// at the end of hydration without touching the remaining nodes.\nlet is_hydrating = false;\nfunction start_hydrating() {\n    is_hydrating = true;\n}\nfunction end_hydrating() {\n    is_hydrating = false;\n}\nfunction upper_bound(low, high, key, value) {\n    // Return first index of value larger than input value in the range [low, high)\n    while (low < high) {\n        const mid = low + ((high - low) >> 1);\n        if (key(mid) <= value) {\n            low = mid + 1;\n        }\n        else {\n            high = mid;\n        }\n    }\n    return low;\n}\nfunction init_hydrate(target) {\n    if (target.hydrate_init)\n        return;\n    target.hydrate_init = true;\n    // We know that all children have claim_order values since the unclaimed have been detached if target is not <head>\n    let children = target.childNodes;\n    // If target is <head>, there may be children without claim_order\n    if (target.nodeName === 'HEAD') {\n        const myChildren = [];\n        for (let i = 0; i < children.length; i++) {\n            const node = children[i];\n            if (node.claim_order !== undefined) {\n                myChildren.push(node);\n            }\n        }\n        children = myChildren;\n    }\n    /*\n    * Reorder claimed children optimally.\n    * We can reorder claimed children optimally by finding the longest subsequence of\n    * nodes that are already claimed in order and only moving the rest. The longest\n    * subsequence of nodes that are claimed in order can be found by\n    * computing the longest increasing subsequence of .claim_order values.\n    *\n    * This algorithm is optimal in generating the least amount of reorder operations\n    * possible.\n    *\n    * Proof:\n    * We know that, given a set of reordering operations, the nodes that do not move\n    * always form an increasing subsequence, since they do not move among each other\n    * meaning that they must be already ordered among each other. Thus, the maximal\n    * set of nodes that do not move form a longest increasing subsequence.\n    */\n    // Compute longest increasing subsequence\n    // m: subsequence length j => index k of smallest value that ends an increasing subsequence of length j\n    const m = new Int32Array(children.length + 1);\n    // Predecessor indices + 1\n    const p = new Int32Array(children.length);\n    m[0] = -1;\n    let longest = 0;\n    for (let i = 0; i < children.length; i++) {\n        const current = children[i].claim_order;\n        // Find the largest subsequence length such that it ends in a value less than our current value\n        // upper_bound returns first greater value, so we subtract one\n        // with fast path for when we are on the current longest subsequence\n        const seqLen = ((longest > 0 && children[m[longest]].claim_order <= current) ? longest + 1 : upper_bound(1, longest, idx => children[m[idx]].claim_order, current)) - 1;\n        p[i] = m[seqLen] + 1;\n        const newLen = seqLen + 1;\n        // We can guarantee that current is the smallest value. Otherwise, we would have generated a longer sequence.\n        m[newLen] = i;\n        longest = Math.max(newLen, longest);\n    }\n    // The longest increasing subsequence of nodes (initially reversed)\n    const lis = [];\n    // The rest of the nodes, nodes that will be moved\n    const toMove = [];\n    let last = children.length - 1;\n    for (let cur = m[longest] + 1; cur != 0; cur = p[cur - 1]) {\n        lis.push(children[cur - 1]);\n        for (; last >= cur; last--) {\n            toMove.push(children[last]);\n        }\n        last--;\n    }\n    for (; last >= 0; last--) {\n        toMove.push(children[last]);\n    }\n    lis.reverse();\n    // We sort the nodes being moved to guarantee that their insertion order matches the claim order\n    toMove.sort((a, b) => a.claim_order - b.claim_order);\n    // Finally, we move the nodes\n    for (let i = 0, j = 0; i < toMove.length; i++) {\n        while (j < lis.length && toMove[i].claim_order >= lis[j].claim_order) {\n            j++;\n        }\n        const anchor = j < lis.length ? lis[j] : null;\n        target.insertBefore(toMove[i], anchor);\n    }\n}\nfunction append(target, node) {\n    target.appendChild(node);\n}\nfunction append_styles(target, style_sheet_id, styles) {\n    const append_styles_to = get_root_for_style(target);\n    if (!append_styles_to.getElementById(style_sheet_id)) {\n        const style = element('style');\n        style.id = style_sheet_id;\n        style.textContent = styles;\n        append_stylesheet(append_styles_to, style);\n    }\n}\nfunction get_root_for_style(node) {\n    if (!node)\n        return document;\n    const root = node.getRootNode ? node.getRootNode() : node.ownerDocument;\n    if (root && root.host) {\n        return root;\n    }\n    return node.ownerDocument;\n}\nfunction append_empty_stylesheet(node) {\n    const style_element = element('style');\n    append_stylesheet(get_root_for_style(node), style_element);\n    return style_element.sheet;\n}\nfunction append_stylesheet(node, style) {\n    append(node.head || node, style);\n    return style.sheet;\n}\nfunction append_hydration(target, node) {\n    if (is_hydrating) {\n        init_hydrate(target);\n        if ((target.actual_end_child === undefined) || ((target.actual_end_child !== null) && (target.actual_end_child.parentNode !== target))) {\n            target.actual_end_child = target.firstChild;\n        }\n        // Skip nodes of undefined ordering\n        while ((target.actual_end_child !== null) && (target.actual_end_child.claim_order === undefined)) {\n            target.actual_end_child = target.actual_end_child.nextSibling;\n        }\n        if (node !== target.actual_end_child) {\n            // We only insert if the ordering of this node should be modified or the parent node is not target\n            if (node.claim_order !== undefined || node.parentNode !== target) {\n                target.insertBefore(node, target.actual_end_child);\n            }\n        }\n        else {\n            target.actual_end_child = node.nextSibling;\n        }\n    }\n    else if (node.parentNode !== target || node.nextSibling !== null) {\n        target.appendChild(node);\n    }\n}\nfunction insert(target, node, anchor) {\n    target.insertBefore(node, anchor || null);\n}\nfunction insert_hydration(target, node, anchor) {\n    if (is_hydrating && !anchor) {\n        append_hydration(target, node);\n    }\n    else if (node.parentNode !== target || node.nextSibling != anchor) {\n        target.insertBefore(node, anchor || null);\n    }\n}\nfunction detach(node) {\n    if (node.parentNode) {\n        node.parentNode.removeChild(node);\n    }\n}\nfunction destroy_each(iterations, detaching) {\n    for (let i = 0; i < iterations.length; i += 1) {\n        if (iterations[i])\n            iterations[i].d(detaching);\n    }\n}\nfunction element(name) {\n    return document.createElement(name);\n}\nfunction element_is(name, is) {\n    return document.createElement(name, { is });\n}\nfunction object_without_properties(obj, exclude) {\n    const target = {};\n    for (const k in obj) {\n        if (has_prop(obj, k)\n            // @ts-ignore\n            && exclude.indexOf(k) === -1) {\n            // @ts-ignore\n            target[k] = obj[k];\n        }\n    }\n    return target;\n}\nfunction svg_element(name) {\n    return document.createElementNS('http://www.w3.org/2000/svg', name);\n}\nfunction text(data) {\n    return document.createTextNode(data);\n}\nfunction space() {\n    return text(' ');\n}\nfunction empty() {\n    return text('');\n}\nfunction listen(node, event, handler, options) {\n    node.addEventListener(event, handler, options);\n    return () => node.removeEventListener(event, handler, options);\n}\nfunction prevent_default(fn) {\n    return function (event) {\n        event.preventDefault();\n        // @ts-ignore\n        return fn.call(this, event);\n    };\n}\nfunction stop_propagation(fn) {\n    return function (event) {\n        event.stopPropagation();\n        // @ts-ignore\n        return fn.call(this, event);\n    };\n}\nfunction self(fn) {\n    return function (event) {\n        // @ts-ignore\n        if (event.target === this)\n            fn.call(this, event);\n    };\n}\nfunction trusted(fn) {\n    return function (event) {\n        // @ts-ignore\n        if (event.isTrusted)\n            fn.call(this, event);\n    };\n}\nfunction attr(node, attribute, value) {\n    if (value == null)\n        node.removeAttribute(attribute);\n    else if (node.getAttribute(attribute) !== value)\n        node.setAttribute(attribute, value);\n}\nfunction set_attributes(node, attributes) {\n    // @ts-ignore\n    const descriptors = Object.getOwnPropertyDescriptors(node.__proto__);\n    for (const key in attributes) {\n        if (attributes[key] == null) {\n            node.removeAttribute(key);\n        }\n        else if (key === 'style') {\n            node.style.cssText = attributes[key];\n        }\n        else if (key === '__value') {\n            node.value = node[key] = attributes[key];\n        }\n        else if (descriptors[key] && descriptors[key].set) {\n            node[key] = attributes[key];\n        }\n        else {\n            attr(node, key, attributes[key]);\n        }\n    }\n}\nfunction set_svg_attributes(node, attributes) {\n    for (const key in attributes) {\n        attr(node, key, attributes[key]);\n    }\n}\nfunction set_custom_element_data_map(node, data_map) {\n    Object.keys(data_map).forEach((key) => {\n        set_custom_element_data(node, key, data_map[key]);\n    });\n}\nfunction set_custom_element_data(node, prop, value) {\n    if (prop in node) {\n        node[prop] = typeof node[prop] === 'boolean' && value === '' ? true : value;\n    }\n    else {\n        attr(node, prop, value);\n    }\n}\nfunction xlink_attr(node, attribute, value) {\n    node.setAttributeNS('http://www.w3.org/1999/xlink', attribute, value);\n}\nfunction get_binding_group_value(group, __value, checked) {\n    const value = new Set();\n    for (let i = 0; i < group.length; i += 1) {\n        if (group[i].checked)\n            value.add(group[i].__value);\n    }\n    if (!checked) {\n        value.delete(__value);\n    }\n    return Array.from(value);\n}\nfunction to_number(value) {\n    return value === '' ? null : +value;\n}\nfunction time_ranges_to_array(ranges) {\n    const array = [];\n    for (let i = 0; i < ranges.length; i += 1) {\n        array.push({ start: ranges.start(i), end: ranges.end(i) });\n    }\n    return array;\n}\nfunction children(element) {\n    return Array.from(element.childNodes);\n}\nfunction init_claim_info(nodes) {\n    if (nodes.claim_info === undefined) {\n        nodes.claim_info = { last_index: 0, total_claimed: 0 };\n    }\n}\nfunction claim_node(nodes, predicate, processNode, createNode, dontUpdateLastIndex = false) {\n    // Try to find nodes in an order such that we lengthen the longest increasing subsequence\n    init_claim_info(nodes);\n    const resultNode = (() => {\n        // We first try to find an element after the previous one\n        for (let i = nodes.claim_info.last_index; i < nodes.length; i++) {\n            const node = nodes[i];\n            if (predicate(node)) {\n                const replacement = processNode(node);\n                if (replacement === undefined) {\n                    nodes.splice(i, 1);\n                }\n                else {\n                    nodes[i] = replacement;\n                }\n                if (!dontUpdateLastIndex) {\n                    nodes.claim_info.last_index = i;\n                }\n                return node;\n            }\n        }\n        // Otherwise, we try to find one before\n        // We iterate in reverse so that we don't go too far back\n        for (let i = nodes.claim_info.last_index - 1; i >= 0; i--) {\n            const node = nodes[i];\n            if (predicate(node)) {\n                const replacement = processNode(node);\n                if (replacement === undefined) {\n                    nodes.splice(i, 1);\n                }\n                else {\n                    nodes[i] = replacement;\n                }\n                if (!dontUpdateLastIndex) {\n                    nodes.claim_info.last_index = i;\n                }\n                else if (replacement === undefined) {\n                    // Since we spliced before the last_index, we decrease it\n                    nodes.claim_info.last_index--;\n                }\n                return node;\n            }\n        }\n        // If we can't find any matching node, we create a new one\n        return createNode();\n    })();\n    resultNode.claim_order = nodes.claim_info.total_claimed;\n    nodes.claim_info.total_claimed += 1;\n    return resultNode;\n}\nfunction claim_element_base(nodes, name, attributes, create_element) {\n    return claim_node(nodes, (node) => node.nodeName === name, (node) => {\n        const remove = [];\n        for (let j = 0; j < node.attributes.length; j++) {\n            const attribute = node.attributes[j];\n            if (!attributes[attribute.name]) {\n                remove.push(attribute.name);\n            }\n        }\n        remove.forEach(v => node.removeAttribute(v));\n        return undefined;\n    }, () => create_element(name));\n}\nfunction claim_element(nodes, name, attributes) {\n    return claim_element_base(nodes, name, attributes, element);\n}\nfunction claim_svg_element(nodes, name, attributes) {\n    return claim_element_base(nodes, name, attributes, svg_element);\n}\nfunction claim_text(nodes, data) {\n    return claim_node(nodes, (node) => node.nodeType === 3, (node) => {\n        const dataStr = '' + data;\n        if (node.data.startsWith(dataStr)) {\n            if (node.data.length !== dataStr.length) {\n                return node.splitText(dataStr.length);\n            }\n        }\n        else {\n            node.data = dataStr;\n        }\n    }, () => text(data), true // Text nodes should not update last index since it is likely not worth it to eliminate an increasing subsequence of actual elements\n    );\n}\nfunction claim_space(nodes) {\n    return claim_text(nodes, ' ');\n}\nfunction find_comment(nodes, text, start) {\n    for (let i = start; i < nodes.length; i += 1) {\n        const node = nodes[i];\n        if (node.nodeType === 8 /* comment node */ && node.textContent.trim() === text) {\n            return i;\n        }\n    }\n    return nodes.length;\n}\nfunction claim_html_tag(nodes, is_svg) {\n    // find html opening tag\n    const start_index = find_comment(nodes, 'HTML_TAG_START', 0);\n    const end_index = find_comment(nodes, 'HTML_TAG_END', start_index);\n    if (start_index === end_index) {\n        return new HtmlTagHydration(undefined, is_svg);\n    }\n    init_claim_info(nodes);\n    const html_tag_nodes = nodes.splice(start_index, end_index - start_index + 1);\n    detach(html_tag_nodes[0]);\n    detach(html_tag_nodes[html_tag_nodes.length - 1]);\n    const claimed_nodes = html_tag_nodes.slice(1, html_tag_nodes.length - 1);\n    for (const n of claimed_nodes) {\n        n.claim_order = nodes.claim_info.total_claimed;\n        nodes.claim_info.total_claimed += 1;\n    }\n    return new HtmlTagHydration(claimed_nodes, is_svg);\n}\nfunction set_data(text, data) {\n    data = '' + data;\n    if (text.wholeText !== data)\n        text.data = data;\n}\nfunction set_input_value(input, value) {\n    input.value = value == null ? '' : value;\n}\nfunction set_input_type(input, type) {\n    try {\n        input.type = type;\n    }\n    catch (e) {\n        // do nothing\n    }\n}\nfunction set_style(node, key, value, important) {\n    if (value === null) {\n        node.style.removeProperty(key);\n    }\n    else {\n        node.style.setProperty(key, value, important ? 'important' : '');\n    }\n}\nfunction select_option(select, value) {\n    for (let i = 0; i < select.options.length; i += 1) {\n        const option = select.options[i];\n        if (option.__value === value) {\n            option.selected = true;\n            return;\n        }\n    }\n    select.selectedIndex = -1; // no option should be selected\n}\nfunction select_options(select, value) {\n    for (let i = 0; i < select.options.length; i += 1) {\n        const option = select.options[i];\n        option.selected = ~value.indexOf(option.__value);\n    }\n}\nfunction select_value(select) {\n    const selected_option = select.querySelector(':checked') || select.options[0];\n    return selected_option && selected_option.__value;\n}\nfunction select_multiple_value(select) {\n    return [].map.call(select.querySelectorAll(':checked'), option => option.__value);\n}\n// unfortunately this can't be a constant as that wouldn't be tree-shakeable\n// so we cache the result instead\nlet crossorigin;\nfunction is_crossorigin() {\n    if (crossorigin === undefined) {\n        crossorigin = false;\n        try {\n            if (typeof window !== 'undefined' && window.parent) {\n                void window.parent.document;\n            }\n        }\n        catch (error) {\n            crossorigin = true;\n        }\n    }\n    return crossorigin;\n}\nfunction add_resize_listener(node, fn) {\n    const computed_style = getComputedStyle(node);\n    if (computed_style.position === 'static') {\n        node.style.position = 'relative';\n    }\n    const iframe = element('iframe');\n    iframe.setAttribute('style', 'display: block; position: absolute; top: 0; left: 0; width: 100%; height: 100%; ' +\n        'overflow: hidden; border: 0; opacity: 0; pointer-events: none; z-index: -1;');\n    iframe.setAttribute('aria-hidden', 'true');\n    iframe.tabIndex = -1;\n    const crossorigin = is_crossorigin();\n    let unsubscribe;\n    if (crossorigin) {\n        iframe.src = \"data:text/html,<script>onresize=function(){parent.postMessage(0,'*')}</script>\";\n        unsubscribe = listen(window, 'message', (event) => {\n            if (event.source === iframe.contentWindow)\n                fn();\n        });\n    }\n    else {\n        iframe.src = 'about:blank';\n        iframe.onload = () => {\n            unsubscribe = listen(iframe.contentWindow, 'resize', fn);\n        };\n    }\n    append(node, iframe);\n    return () => {\n        if (crossorigin) {\n            unsubscribe();\n        }\n        else if (unsubscribe && iframe.contentWindow) {\n            unsubscribe();\n        }\n        detach(iframe);\n    };\n}\nfunction toggle_class(element, name, toggle) {\n    element.classList[toggle ? 'add' : 'remove'](name);\n}\nfunction custom_event(type, detail, { bubbles = false, cancelable = false } = {}) {\n    const e = document.createEvent('CustomEvent');\n    e.initCustomEvent(type, bubbles, cancelable, detail);\n    return e;\n}\nfunction query_selector_all(selector, parent = document.body) {\n    return Array.from(parent.querySelectorAll(selector));\n}\nfunction head_selector(nodeId, head) {\n    const result = [];\n    let started = 0;\n    for (const node of head.childNodes) {\n        if (node.nodeType === 8 /* comment node */) {\n            const comment = node.textContent.trim();\n            if (comment === `HEAD_${nodeId}_END`) {\n                started -= 1;\n                result.push(node);\n            }\n            else if (comment === `HEAD_${nodeId}_START`) {\n                started += 1;\n                result.push(node);\n            }\n        }\n        else if (started > 0) {\n            result.push(node);\n        }\n    }\n    return result;\n}\nclass HtmlTag {\n    constructor(is_svg = false) {\n        this.is_svg = false;\n        this.is_svg = is_svg;\n        this.e = this.n = null;\n    }\n    c(html) {\n        this.h(html);\n    }\n    m(html, target, anchor = null) {\n        if (!this.e) {\n            if (this.is_svg)\n                this.e = svg_element(target.nodeName);\n            else\n                this.e = element(target.nodeName);\n            this.t = target;\n            this.c(html);\n        }\n        this.i(anchor);\n    }\n    h(html) {\n        this.e.innerHTML = html;\n        this.n = Array.from(this.e.childNodes);\n    }\n    i(anchor) {\n        for (let i = 0; i < this.n.length; i += 1) {\n            insert(this.t, this.n[i], anchor);\n        }\n    }\n    p(html) {\n        this.d();\n        this.h(html);\n        this.i(this.a);\n    }\n    d() {\n        this.n.forEach(detach);\n    }\n}\nclass HtmlTagHydration extends HtmlTag {\n    constructor(claimed_nodes, is_svg = false) {\n        super(is_svg);\n        this.e = this.n = null;\n        this.l = claimed_nodes;\n    }\n    c(html) {\n        if (this.l) {\n            this.n = this.l;\n        }\n        else {\n            super.c(html);\n        }\n    }\n    i(anchor) {\n        for (let i = 0; i < this.n.length; i += 1) {\n            insert_hydration(this.t, this.n[i], anchor);\n        }\n    }\n}\nfunction attribute_to_object(attributes) {\n    const result = {};\n    for (const attribute of attributes) {\n        result[attribute.name] = attribute.value;\n    }\n    return result;\n}\nfunction get_custom_elements_slots(element) {\n    const result = {};\n    element.childNodes.forEach((node) => {\n        result[node.slot || 'default'] = true;\n    });\n    return result;\n}\nfunction construct_svelte_component(component, props) {\n    return new component(props);\n}\n\n// we need to store the information for multiple documents because a Svelte application could also contain iframes\n// https://github.com/sveltejs/svelte/issues/3624\nconst managed_styles = new Map();\nlet active = 0;\n// https://github.com/darkskyapp/string-hash/blob/master/index.js\nfunction hash(str) {\n    let hash = 5381;\n    let i = str.length;\n    while (i--)\n        hash = ((hash << 5) - hash) ^ str.charCodeAt(i);\n    return hash >>> 0;\n}\nfunction create_style_information(doc, node) {\n    const info = { stylesheet: append_empty_stylesheet(node), rules: {} };\n    managed_styles.set(doc, info);\n    return info;\n}\nfunction create_rule(node, a, b, duration, delay, ease, fn, uid = 0) {\n    const step = 16.666 / duration;\n    let keyframes = '{\\n';\n    for (let p = 0; p <= 1; p += step) {\n        const t = a + (b - a) * ease(p);\n        keyframes += p * 100 + `%{${fn(t, 1 - t)}}\\n`;\n    }\n    const rule = keyframes + `100% {${fn(b, 1 - b)}}\\n}`;\n    const name = `__svelte_${hash(rule)}_${uid}`;\n    const doc = get_root_for_style(node);\n    const { stylesheet, rules } = managed_styles.get(doc) || create_style_information(doc, node);\n    if (!rules[name]) {\n        rules[name] = true;\n        stylesheet.insertRule(`@keyframes ${name} ${rule}`, stylesheet.cssRules.length);\n    }\n    const animation = node.style.animation || '';\n    node.style.animation = `${animation ? `${animation}, ` : ''}${name} ${duration}ms linear ${delay}ms 1 both`;\n    active += 1;\n    return name;\n}\nfunction delete_rule(node, name) {\n    const previous = (node.style.animation || '').split(', ');\n    const next = previous.filter(name\n        ? anim => anim.indexOf(name) < 0 // remove specific animation\n        : anim => anim.indexOf('__svelte') === -1 // remove all Svelte animations\n    );\n    const deleted = previous.length - next.length;\n    if (deleted) {\n        node.style.animation = next.join(', ');\n        active -= deleted;\n        if (!active)\n            clear_rules();\n    }\n}\nfunction clear_rules() {\n    raf(() => {\n        if (active)\n            return;\n        managed_styles.forEach(info => {\n            const { ownerNode } = info.stylesheet;\n            // there is no ownerNode if it runs on jsdom.\n            if (ownerNode)\n                detach(ownerNode);\n        });\n        managed_styles.clear();\n    });\n}\n\nfunction create_animation(node, from, fn, params) {\n    if (!from)\n        return noop;\n    const to = node.getBoundingClientRect();\n    if (from.left === to.left && from.right === to.right && from.top === to.top && from.bottom === to.bottom)\n        return noop;\n    const { delay = 0, duration = 300, easing = identity, \n    // @ts-ignore todo: should this be separated from destructuring? Or start/end added to public api and documentation?\n    start: start_time = now() + delay, \n    // @ts-ignore todo:\n    end = start_time + duration, tick = noop, css } = fn(node, { from, to }, params);\n    let running = true;\n    let started = false;\n    let name;\n    function start() {\n        if (css) {\n            name = create_rule(node, 0, 1, duration, delay, easing, css);\n        }\n        if (!delay) {\n            started = true;\n        }\n    }\n    function stop() {\n        if (css)\n            delete_rule(node, name);\n        running = false;\n    }\n    loop(now => {\n        if (!started && now >= start_time) {\n            started = true;\n        }\n        if (started && now >= end) {\n            tick(1, 0);\n            stop();\n        }\n        if (!running) {\n            return false;\n        }\n        if (started) {\n            const p = now - start_time;\n            const t = 0 + 1 * easing(p / duration);\n            tick(t, 1 - t);\n        }\n        return true;\n    });\n    start();\n    tick(0, 1);\n    return stop;\n}\nfunction fix_position(node) {\n    const style = getComputedStyle(node);\n    if (style.position !== 'absolute' && style.position !== 'fixed') {\n        const { width, height } = style;\n        const a = node.getBoundingClientRect();\n        node.style.position = 'absolute';\n        node.style.width = width;\n        node.style.height = height;\n        add_transform(node, a);\n    }\n}\nfunction add_transform(node, a) {\n    const b = node.getBoundingClientRect();\n    if (a.left !== b.left || a.top !== b.top) {\n        const style = getComputedStyle(node);\n        const transform = style.transform === 'none' ? '' : style.transform;\n        node.style.transform = `${transform} translate(${a.left - b.left}px, ${a.top - b.top}px)`;\n    }\n}\n\nlet current_component;\nfunction set_current_component(component) {\n    current_component = component;\n}\nfunction get_current_component() {\n    if (!current_component)\n        throw new Error('Function called outside component initialization');\n    return current_component;\n}\n/**\n * Schedules a callback to run immediately before the component is updated after any state change.\n *\n * The first time the callback runs will be before the initial `onMount`\n *\n * https://svelte.dev/docs#run-time-svelte-beforeupdate\n */\nfunction beforeUpdate(fn) {\n    get_current_component().$$.before_update.push(fn);\n}\n/**\n * The `onMount` function schedules a callback to run as soon as the component has been mounted to the DOM.\n * It must be called during the component's initialisation (but doesn't need to live *inside* the component;\n * it can be called from an external module).\n *\n * `onMount` does not run inside a [server-side component](/docs#run-time-server-side-component-api).\n *\n * https://svelte.dev/docs#run-time-svelte-onmount\n */\nfunction onMount(fn) {\n    get_current_component().$$.on_mount.push(fn);\n}\n/**\n * Schedules a callback to run immediately after the component has been updated.\n *\n * The first time the callback runs will be after the initial `onMount`\n */\nfunction afterUpdate(fn) {\n    get_current_component().$$.after_update.push(fn);\n}\n/**\n * Schedules a callback to run immediately before the component is unmounted.\n *\n * Out of `onMount`, `beforeUpdate`, `afterUpdate` and `onDestroy`, this is the\n * only one that runs inside a server-side component.\n *\n * https://svelte.dev/docs#run-time-svelte-ondestroy\n */\nfunction onDestroy(fn) {\n    get_current_component().$$.on_destroy.push(fn);\n}\n/**\n * Creates an event dispatcher that can be used to dispatch [component events](/docs#template-syntax-component-directives-on-eventname).\n * Event dispatchers are functions that can take two arguments: `name` and `detail`.\n *\n * Component events created with `createEventDispatcher` create a\n * [CustomEvent](https://developer.mozilla.org/en-US/docs/Web/API/CustomEvent).\n * These events do not [bubble](https://developer.mozilla.org/en-US/docs/Learn/JavaScript/Building_blocks/Events#Event_bubbling_and_capture).\n * The `detail` argument corresponds to the [CustomEvent.detail](https://developer.mozilla.org/en-US/docs/Web/API/CustomEvent/detail)\n * property and can contain any type of data.\n *\n * https://svelte.dev/docs#run-time-svelte-createeventdispatcher\n */\nfunction createEventDispatcher() {\n    const component = get_current_component();\n    return (type, detail, { cancelable = false } = {}) => {\n        const callbacks = component.$$.callbacks[type];\n        if (callbacks) {\n            // TODO are there situations where events could be dispatched\n            // in a server (non-DOM) environment?\n            const event = custom_event(type, detail, { cancelable });\n            callbacks.slice().forEach(fn => {\n                fn.call(component, event);\n            });\n            return !event.defaultPrevented;\n        }\n        return true;\n    };\n}\n/**\n * Associates an arbitrary `context` object with the current component and the specified `key`\n * and returns that object. The context is then available to children of the component\n * (including slotted content) with `getContext`.\n *\n * Like lifecycle functions, this must be called during component initialisation.\n *\n * https://svelte.dev/docs#run-time-svelte-setcontext\n */\nfunction setContext(key, context) {\n    get_current_component().$$.context.set(key, context);\n    return context;\n}\n/**\n * Retrieves the context that belongs to the closest parent component with the specified `key`.\n * Must be called during component initialisation.\n *\n * https://svelte.dev/docs#run-time-svelte-getcontext\n */\nfunction getContext(key) {\n    return get_current_component().$$.context.get(key);\n}\n/**\n * Retrieves the whole context map that belongs to the closest parent component.\n * Must be called during component initialisation. Useful, for example, if you\n * programmatically create a component and want to pass the existing context to it.\n *\n * https://svelte.dev/docs#run-time-svelte-getallcontexts\n */\nfunction getAllContexts() {\n    return get_current_component().$$.context;\n}\n/**\n * Checks whether a given `key` has been set in the context of a parent component.\n * Must be called during component initialisation.\n *\n * https://svelte.dev/docs#run-time-svelte-hascontext\n */\nfunction hasContext(key) {\n    return get_current_component().$$.context.has(key);\n}\n// TODO figure out if we still want to support\n// shorthand events, or if we want to implement\n// a real bubbling mechanism\nfunction bubble(component, event) {\n    const callbacks = component.$$.callbacks[event.type];\n    if (callbacks) {\n        // @ts-ignore\n        callbacks.slice().forEach(fn => fn.call(this, event));\n    }\n}\n\nconst dirty_components = [];\nconst intros = { enabled: false };\nconst binding_callbacks = [];\nconst render_callbacks = [];\nconst flush_callbacks = [];\nconst resolved_promise = Promise.resolve();\nlet update_scheduled = false;\nfunction schedule_update() {\n    if (!update_scheduled) {\n        update_scheduled = true;\n        resolved_promise.then(flush);\n    }\n}\nfunction tick() {\n    schedule_update();\n    return resolved_promise;\n}\nfunction add_render_callback(fn) {\n    render_callbacks.push(fn);\n}\nfunction add_flush_callback(fn) {\n    flush_callbacks.push(fn);\n}\n// flush() calls callbacks in this order:\n// 1. All beforeUpdate callbacks, in order: parents before children\n// 2. All bind:this callbacks, in reverse order: children before parents.\n// 3. All afterUpdate callbacks, in order: parents before children. EXCEPT\n//    for afterUpdates called during the initial onMount, which are called in\n//    reverse order: children before parents.\n// Since callbacks might update component values, which could trigger another\n// call to flush(), the following steps guard against this:\n// 1. During beforeUpdate, any updated components will be added to the\n//    dirty_components array and will cause a reentrant call to flush(). Because\n//    the flush index is kept outside the function, the reentrant call will pick\n//    up where the earlier call left off and go through all dirty components. The\n//    current_component value is saved and restored so that the reentrant call will\n//    not interfere with the \"parent\" flush() call.\n// 2. bind:this callbacks cannot trigger new flush() calls.\n// 3. During afterUpdate, any updated components will NOT have their afterUpdate\n//    callback called a second time; the seen_callbacks set, outside the flush()\n//    function, guarantees this behavior.\nconst seen_callbacks = new Set();\nlet flushidx = 0; // Do *not* move this inside the flush() function\nfunction flush() {\n    const saved_component = current_component;\n    do {\n        // first, call beforeUpdate functions\n        // and update components\n        while (flushidx < dirty_components.length) {\n            const component = dirty_components[flushidx];\n            flushidx++;\n            set_current_component(component);\n            update(component.$$);\n        }\n        set_current_component(null);\n        dirty_components.length = 0;\n        flushidx = 0;\n        while (binding_callbacks.length)\n            binding_callbacks.pop()();\n        // then, once components are updated, call\n        // afterUpdate functions. This may cause\n        // subsequent updates...\n        for (let i = 0; i < render_callbacks.length; i += 1) {\n            const callback = render_callbacks[i];\n            if (!seen_callbacks.has(callback)) {\n                // ...so guard against infinite loops\n                seen_callbacks.add(callback);\n                callback();\n            }\n        }\n        render_callbacks.length = 0;\n    } while (dirty_components.length);\n    while (flush_callbacks.length) {\n        flush_callbacks.pop()();\n    }\n    update_scheduled = false;\n    seen_callbacks.clear();\n    set_current_component(saved_component);\n}\nfunction update($$) {\n    if ($$.fragment !== null) {\n        $$.update();\n        run_all($$.before_update);\n        const dirty = $$.dirty;\n        $$.dirty = [-1];\n        $$.fragment && $$.fragment.p($$.ctx, dirty);\n        $$.after_update.forEach(add_render_callback);\n    }\n}\n\nlet promise;\nfunction wait() {\n    if (!promise) {\n        promise = Promise.resolve();\n        promise.then(() => {\n            promise = null;\n        });\n    }\n    return promise;\n}\nfunction dispatch(node, direction, kind) {\n    node.dispatchEvent(custom_event(`${direction ? 'intro' : 'outro'}${kind}`));\n}\nconst outroing = new Set();\nlet outros;\nfunction group_outros() {\n    outros = {\n        r: 0,\n        c: [],\n        p: outros // parent group\n    };\n}\nfunction check_outros() {\n    if (!outros.r) {\n        run_all(outros.c);\n    }\n    outros = outros.p;\n}\nfunction transition_in(block, local) {\n    if (block && block.i) {\n        outroing.delete(block);\n        block.i(local);\n    }\n}\nfunction transition_out(block, local, detach, callback) {\n    if (block && block.o) {\n        if (outroing.has(block))\n            return;\n        outroing.add(block);\n        outros.c.push(() => {\n            outroing.delete(block);\n            if (callback) {\n                if (detach)\n                    block.d(1);\n                callback();\n            }\n        });\n        block.o(local);\n    }\n    else if (callback) {\n        callback();\n    }\n}\nconst null_transition = { duration: 0 };\nfunction create_in_transition(node, fn, params) {\n    let config = fn(node, params);\n    let running = false;\n    let animation_name;\n    let task;\n    let uid = 0;\n    function cleanup() {\n        if (animation_name)\n            delete_rule(node, animation_name);\n    }\n    function go() {\n        const { delay = 0, duration = 300, easing = identity, tick = noop, css } = config || null_transition;\n        if (css)\n            animation_name = create_rule(node, 0, 1, duration, delay, easing, css, uid++);\n        tick(0, 1);\n        const start_time = now() + delay;\n        const end_time = start_time + duration;\n        if (task)\n            task.abort();\n        running = true;\n        add_render_callback(() => dispatch(node, true, 'start'));\n        task = loop(now => {\n            if (running) {\n                if (now >= end_time) {\n                    tick(1, 0);\n                    dispatch(node, true, 'end');\n                    cleanup();\n                    return running = false;\n                }\n                if (now >= start_time) {\n                    const t = easing((now - start_time) / duration);\n                    tick(t, 1 - t);\n                }\n            }\n            return running;\n        });\n    }\n    let started = false;\n    return {\n        start() {\n            if (started)\n                return;\n            started = true;\n            delete_rule(node);\n            if (is_function(config)) {\n                config = config();\n                wait().then(go);\n            }\n            else {\n                go();\n            }\n        },\n        invalidate() {\n            started = false;\n        },\n        end() {\n            if (running) {\n                cleanup();\n                running = false;\n            }\n        }\n    };\n}\nfunction create_out_transition(node, fn, params) {\n    let config = fn(node, params);\n    let running = true;\n    let animation_name;\n    const group = outros;\n    group.r += 1;\n    function go() {\n        const { delay = 0, duration = 300, easing = identity, tick = noop, css } = config || null_transition;\n        if (css)\n            animation_name = create_rule(node, 1, 0, duration, delay, easing, css);\n        const start_time = now() + delay;\n        const end_time = start_time + duration;\n        add_render_callback(() => dispatch(node, false, 'start'));\n        loop(now => {\n            if (running) {\n                if (now >= end_time) {\n                    tick(0, 1);\n                    dispatch(node, false, 'end');\n                    if (!--group.r) {\n                        // this will result in `end()` being called,\n                        // so we don't need to clean up here\n                        run_all(group.c);\n                    }\n                    return false;\n                }\n                if (now >= start_time) {\n                    const t = easing((now - start_time) / duration);\n                    tick(1 - t, t);\n                }\n            }\n            return running;\n        });\n    }\n    if (is_function(config)) {\n        wait().then(() => {\n            // @ts-ignore\n            config = config();\n            go();\n        });\n    }\n    else {\n        go();\n    }\n    return {\n        end(reset) {\n            if (reset && config.tick) {\n                config.tick(1, 0);\n            }\n            if (running) {\n                if (animation_name)\n                    delete_rule(node, animation_name);\n                running = false;\n            }\n        }\n    };\n}\nfunction create_bidirectional_transition(node, fn, params, intro) {\n    let config = fn(node, params);\n    let t = intro ? 0 : 1;\n    let running_program = null;\n    let pending_program = null;\n    let animation_name = null;\n    function clear_animation() {\n        if (animation_name)\n            delete_rule(node, animation_name);\n    }\n    function init(program, duration) {\n        const d = (program.b - t);\n        duration *= Math.abs(d);\n        return {\n            a: t,\n            b: program.b,\n            d,\n            duration,\n            start: program.start,\n            end: program.start + duration,\n            group: program.group\n        };\n    }\n    function go(b) {\n        const { delay = 0, duration = 300, easing = identity, tick = noop, css } = config || null_transition;\n        const program = {\n            start: now() + delay,\n            b\n        };\n        if (!b) {\n            // @ts-ignore todo: improve typings\n            program.group = outros;\n            outros.r += 1;\n        }\n        if (running_program || pending_program) {\n            pending_program = program;\n        }\n        else {\n            // if this is an intro, and there's a delay, we need to do\n            // an initial tick and/or apply CSS animation immediately\n            if (css) {\n                clear_animation();\n                animation_name = create_rule(node, t, b, duration, delay, easing, css);\n            }\n            if (b)\n                tick(0, 1);\n            running_program = init(program, duration);\n            add_render_callback(() => dispatch(node, b, 'start'));\n            loop(now => {\n                if (pending_program && now > pending_program.start) {\n                    running_program = init(pending_program, duration);\n                    pending_program = null;\n                    dispatch(node, running_program.b, 'start');\n                    if (css) {\n                        clear_animation();\n                        animation_name = create_rule(node, t, running_program.b, running_program.duration, 0, easing, config.css);\n                    }\n                }\n                if (running_program) {\n                    if (now >= running_program.end) {\n                        tick(t = running_program.b, 1 - t);\n                        dispatch(node, running_program.b, 'end');\n                        if (!pending_program) {\n                            // we're done\n                            if (running_program.b) {\n                                // intro — we can tidy up immediately\n                                clear_animation();\n                            }\n                            else {\n                                // outro — needs to be coordinated\n                                if (!--running_program.group.r)\n                                    run_all(running_program.group.c);\n                            }\n                        }\n                        running_program = null;\n                    }\n                    else if (now >= running_program.start) {\n                        const p = now - running_program.start;\n                        t = running_program.a + running_program.d * easing(p / running_program.duration);\n                        tick(t, 1 - t);\n                    }\n                }\n                return !!(running_program || pending_program);\n            });\n        }\n    }\n    return {\n        run(b) {\n            if (is_function(config)) {\n                wait().then(() => {\n                    // @ts-ignore\n                    config = config();\n                    go(b);\n                });\n            }\n            else {\n                go(b);\n            }\n        },\n        end() {\n            clear_animation();\n            running_program = pending_program = null;\n        }\n    };\n}\n\nfunction handle_promise(promise, info) {\n    const token = info.token = {};\n    function update(type, index, key, value) {\n        if (info.token !== token)\n            return;\n        info.resolved = value;\n        let child_ctx = info.ctx;\n        if (key !== undefined) {\n            child_ctx = child_ctx.slice();\n            child_ctx[key] = value;\n        }\n        const block = type && (info.current = type)(child_ctx);\n        let needs_flush = false;\n        if (info.block) {\n            if (info.blocks) {\n                info.blocks.forEach((block, i) => {\n                    if (i !== index && block) {\n                        group_outros();\n                        transition_out(block, 1, 1, () => {\n                            if (info.blocks[i] === block) {\n                                info.blocks[i] = null;\n                            }\n                        });\n                        check_outros();\n                    }\n                });\n            }\n            else {\n                info.block.d(1);\n            }\n            block.c();\n            transition_in(block, 1);\n            block.m(info.mount(), info.anchor);\n            needs_flush = true;\n        }\n        info.block = block;\n        if (info.blocks)\n            info.blocks[index] = block;\n        if (needs_flush) {\n            flush();\n        }\n    }\n    if (is_promise(promise)) {\n        const current_component = get_current_component();\n        promise.then(value => {\n            set_current_component(current_component);\n            update(info.then, 1, info.value, value);\n            set_current_component(null);\n        }, error => {\n            set_current_component(current_component);\n            update(info.catch, 2, info.error, error);\n            set_current_component(null);\n            if (!info.hasCatch) {\n                throw error;\n            }\n        });\n        // if we previously had a then/catch block, destroy it\n        if (info.current !== info.pending) {\n            update(info.pending, 0);\n            return true;\n        }\n    }\n    else {\n        if (info.current !== info.then) {\n            update(info.then, 1, info.value, promise);\n            return true;\n        }\n        info.resolved = promise;\n    }\n}\nfunction update_await_block_branch(info, ctx, dirty) {\n    const child_ctx = ctx.slice();\n    const { resolved } = info;\n    if (info.current === info.then) {\n        child_ctx[info.value] = resolved;\n    }\n    if (info.current === info.catch) {\n        child_ctx[info.error] = resolved;\n    }\n    info.block.p(child_ctx, dirty);\n}\n\nconst globals = (typeof window !== 'undefined'\n    ? window\n    : typeof globalThis !== 'undefined'\n        ? globalThis\n        : global);\n\nfunction destroy_block(block, lookup) {\n    block.d(1);\n    lookup.delete(block.key);\n}\nfunction outro_and_destroy_block(block, lookup) {\n    transition_out(block, 1, 1, () => {\n        lookup.delete(block.key);\n    });\n}\nfunction fix_and_destroy_block(block, lookup) {\n    block.f();\n    destroy_block(block, lookup);\n}\nfunction fix_and_outro_and_destroy_block(block, lookup) {\n    block.f();\n    outro_and_destroy_block(block, lookup);\n}\nfunction update_keyed_each(old_blocks, dirty, get_key, dynamic, ctx, list, lookup, node, destroy, create_each_block, next, get_context) {\n    let o = old_blocks.length;\n    let n = list.length;\n    let i = o;\n    const old_indexes = {};\n    while (i--)\n        old_indexes[old_blocks[i].key] = i;\n    const new_blocks = [];\n    const new_lookup = new Map();\n    const deltas = new Map();\n    i = n;\n    while (i--) {\n        const child_ctx = get_context(ctx, list, i);\n        const key = get_key(child_ctx);\n        let block = lookup.get(key);\n        if (!block) {\n            block = create_each_block(key, child_ctx);\n            block.c();\n        }\n        else if (dynamic) {\n            block.p(child_ctx, dirty);\n        }\n        new_lookup.set(key, new_blocks[i] = block);\n        if (key in old_indexes)\n            deltas.set(key, Math.abs(i - old_indexes[key]));\n    }\n    const will_move = new Set();\n    const did_move = new Set();\n    function insert(block) {\n        transition_in(block, 1);\n        block.m(node, next);\n        lookup.set(block.key, block);\n        next = block.first;\n        n--;\n    }\n    while (o && n) {\n        const new_block = new_blocks[n - 1];\n        const old_block = old_blocks[o - 1];\n        const new_key = new_block.key;\n        const old_key = old_block.key;\n        if (new_block === old_block) {\n            // do nothing\n            next = new_block.first;\n            o--;\n            n--;\n        }\n        else if (!new_lookup.has(old_key)) {\n            // remove old block\n            destroy(old_block, lookup);\n            o--;\n        }\n        else if (!lookup.has(new_key) || will_move.has(new_key)) {\n            insert(new_block);\n        }\n        else if (did_move.has(old_key)) {\n            o--;\n        }\n        else if (deltas.get(new_key) > deltas.get(old_key)) {\n            did_move.add(new_key);\n            insert(new_block);\n        }\n        else {\n            will_move.add(old_key);\n            o--;\n        }\n    }\n    while (o--) {\n        const old_block = old_blocks[o];\n        if (!new_lookup.has(old_block.key))\n            destroy(old_block, lookup);\n    }\n    while (n)\n        insert(new_blocks[n - 1]);\n    return new_blocks;\n}\nfunction validate_each_keys(ctx, list, get_context, get_key) {\n    const keys = new Set();\n    for (let i = 0; i < list.length; i++) {\n        const key = get_key(get_context(ctx, list, i));\n        if (keys.has(key)) {\n            throw new Error('Cannot have duplicate keys in a keyed each');\n        }\n        keys.add(key);\n    }\n}\n\nfunction get_spread_update(levels, updates) {\n    const update = {};\n    const to_null_out = {};\n    const accounted_for = { $$scope: 1 };\n    let i = levels.length;\n    while (i--) {\n        const o = levels[i];\n        const n = updates[i];\n        if (n) {\n            for (const key in o) {\n                if (!(key in n))\n                    to_null_out[key] = 1;\n            }\n            for (const key in n) {\n                if (!accounted_for[key]) {\n                    update[key] = n[key];\n                    accounted_for[key] = 1;\n                }\n            }\n            levels[i] = n;\n        }\n        else {\n            for (const key in o) {\n                accounted_for[key] = 1;\n            }\n        }\n    }\n    for (const key in to_null_out) {\n        if (!(key in update))\n            update[key] = undefined;\n    }\n    return update;\n}\nfunction get_spread_object(spread_props) {\n    return typeof spread_props === 'object' && spread_props !== null ? spread_props : {};\n}\n\n// source: https://html.spec.whatwg.org/multipage/indices.html\nconst boolean_attributes = new Set([\n    'allowfullscreen',\n    'allowpaymentrequest',\n    'async',\n    'autofocus',\n    'autoplay',\n    'checked',\n    'controls',\n    'default',\n    'defer',\n    'disabled',\n    'formnovalidate',\n    'hidden',\n    'inert',\n    'ismap',\n    'itemscope',\n    'loop',\n    'multiple',\n    'muted',\n    'nomodule',\n    'novalidate',\n    'open',\n    'playsinline',\n    'readonly',\n    'required',\n    'reversed',\n    'selected'\n]);\n\n/** regex of all html void element names */\nconst void_element_names = /^(?:area|base|br|col|command|embed|hr|img|input|keygen|link|meta|param|source|track|wbr)$/;\nfunction is_void(name) {\n    return void_element_names.test(name) || name.toLowerCase() === '!doctype';\n}\n\nconst invalid_attribute_name_character = /[\\s'\">/=\\u{FDD0}-\\u{FDEF}\\u{FFFE}\\u{FFFF}\\u{1FFFE}\\u{1FFFF}\\u{2FFFE}\\u{2FFFF}\\u{3FFFE}\\u{3FFFF}\\u{4FFFE}\\u{4FFFF}\\u{5FFFE}\\u{5FFFF}\\u{6FFFE}\\u{6FFFF}\\u{7FFFE}\\u{7FFFF}\\u{8FFFE}\\u{8FFFF}\\u{9FFFE}\\u{9FFFF}\\u{AFFFE}\\u{AFFFF}\\u{BFFFE}\\u{BFFFF}\\u{CFFFE}\\u{CFFFF}\\u{DFFFE}\\u{DFFFF}\\u{EFFFE}\\u{EFFFF}\\u{FFFFE}\\u{FFFFF}\\u{10FFFE}\\u{10FFFF}]/u;\n// https://html.spec.whatwg.org/multipage/syntax.html#attributes-2\n// https://infra.spec.whatwg.org/#noncharacter\nfunction spread(args, attrs_to_add) {\n    const attributes = Object.assign({}, ...args);\n    if (attrs_to_add) {\n        const classes_to_add = attrs_to_add.classes;\n        const styles_to_add = attrs_to_add.styles;\n        if (classes_to_add) {\n            if (attributes.class == null) {\n                attributes.class = classes_to_add;\n            }\n            else {\n                attributes.class += ' ' + classes_to_add;\n            }\n        }\n        if (styles_to_add) {\n            if (attributes.style == null) {\n                attributes.style = style_object_to_string(styles_to_add);\n            }\n            else {\n                attributes.style = style_object_to_string(merge_ssr_styles(attributes.style, styles_to_add));\n            }\n        }\n    }\n    let str = '';\n    Object.keys(attributes).forEach(name => {\n        if (invalid_attribute_name_character.test(name))\n            return;\n        const value = attributes[name];\n        if (value === true)\n            str += ' ' + name;\n        else if (boolean_attributes.has(name.toLowerCase())) {\n            if (value)\n                str += ' ' + name;\n        }\n        else if (value != null) {\n            str += ` ${name}=\"${value}\"`;\n        }\n    });\n    return str;\n}\nfunction merge_ssr_styles(style_attribute, style_directive) {\n    const style_object = {};\n    for (const individual_style of style_attribute.split(';')) {\n        const colon_index = individual_style.indexOf(':');\n        const name = individual_style.slice(0, colon_index).trim();\n        const value = individual_style.slice(colon_index + 1).trim();\n        if (!name)\n            continue;\n        style_object[name] = value;\n    }\n    for (const name in style_directive) {\n        const value = style_directive[name];\n        if (value) {\n            style_object[name] = value;\n        }\n        else {\n            delete style_object[name];\n        }\n    }\n    return style_object;\n}\nconst ATTR_REGEX = /[&\"]/g;\nconst CONTENT_REGEX = /[&<]/g;\n/**\n * Note: this method is performance sensitive and has been optimized\n * https://github.com/sveltejs/svelte/pull/5701\n */\nfunction escape(value, is_attr = false) {\n    const str = String(value);\n    const pattern = is_attr ? ATTR_REGEX : CONTENT_REGEX;\n    pattern.lastIndex = 0;\n    let escaped = '';\n    let last = 0;\n    while (pattern.test(str)) {\n        const i = pattern.lastIndex - 1;\n        const ch = str[i];\n        escaped += str.substring(last, i) + (ch === '&' ? '&amp;' : (ch === '\"' ? '&quot;' : '&lt;'));\n        last = i + 1;\n    }\n    return escaped + str.substring(last);\n}\nfunction escape_attribute_value(value) {\n    // keep booleans, null, and undefined for the sake of `spread`\n    const should_escape = typeof value === 'string' || (value && typeof value === 'object');\n    return should_escape ? escape(value, true) : value;\n}\nfunction escape_object(obj) {\n    const result = {};\n    for (const key in obj) {\n        result[key] = escape_attribute_value(obj[key]);\n    }\n    return result;\n}\nfunction each(items, fn) {\n    let str = '';\n    for (let i = 0; i < items.length; i += 1) {\n        str += fn(items[i], i);\n    }\n    return str;\n}\nconst missing_component = {\n    $$render: () => ''\n};\nfunction validate_component(component, name) {\n    if (!component || !component.$$render) {\n        if (name === 'svelte:component')\n            name += ' this={...}';\n        throw new Error(`<${name}> is not a valid SSR component. You may need to review your build config to ensure that dependencies are compiled, rather than imported as pre-compiled modules. Otherwise you may need to fix a <${name}>.`);\n    }\n    return component;\n}\nfunction debug(file, line, column, values) {\n    console.log(`{@debug} ${file ? file + ' ' : ''}(${line}:${column})`); // eslint-disable-line no-console\n    console.log(values); // eslint-disable-line no-console\n    return '';\n}\nlet on_destroy;\nfunction create_ssr_component(fn) {\n    function $$render(result, props, bindings, slots, context) {\n        const parent_component = current_component;\n        const $$ = {\n            on_destroy,\n            context: new Map(context || (parent_component ? parent_component.$$.context : [])),\n            // these will be immediately discarded\n            on_mount: [],\n            before_update: [],\n            after_update: [],\n            callbacks: blank_object()\n        };\n        set_current_component({ $$ });\n        const html = fn(result, props, bindings, slots);\n        set_current_component(parent_component);\n        return html;\n    }\n    return {\n        render: (props = {}, { $$slots = {}, context = new Map() } = {}) => {\n            on_destroy = [];\n            const result = { title: '', head: '', css: new Set() };\n            const html = $$render(result, props, {}, $$slots, context);\n            run_all(on_destroy);\n            return {\n                html,\n                css: {\n                    code: Array.from(result.css).map(css => css.code).join('\\n'),\n                    map: null // TODO\n                },\n                head: result.title + result.head\n            };\n        },\n        $$render\n    };\n}\nfunction add_attribute(name, value, boolean) {\n    if (value == null || (boolean && !value))\n        return '';\n    const assignment = (boolean && value === true) ? '' : `=\"${escape(value, true)}\"`;\n    return ` ${name}${assignment}`;\n}\nfunction add_classes(classes) {\n    return classes ? ` class=\"${classes}\"` : '';\n}\nfunction style_object_to_string(style_object) {\n    return Object.keys(style_object)\n        .filter(key => style_object[key])\n        .map(key => `${key}: ${style_object[key]};`)\n        .join(' ');\n}\nfunction add_styles(style_object) {\n    const styles = style_object_to_string(style_object);\n    return styles ? ` style=\"${styles}\"` : '';\n}\n\nfunction bind(component, name, callback) {\n    const index = component.$$.props[name];\n    if (index !== undefined) {\n        component.$$.bound[index] = callback;\n        callback(component.$$.ctx[index]);\n    }\n}\nfunction create_component(block) {\n    block && block.c();\n}\nfunction claim_component(block, parent_nodes) {\n    block && block.l(parent_nodes);\n}\nfunction mount_component(component, target, anchor, customElement) {\n    const { fragment, after_update } = component.$$;\n    fragment && fragment.m(target, anchor);\n    if (!customElement) {\n        // onMount happens before the initial afterUpdate\n        add_render_callback(() => {\n            const new_on_destroy = component.$$.on_mount.map(run).filter(is_function);\n            // if the component was destroyed immediately\n            // it will update the `$$.on_destroy` reference to `null`.\n            // the destructured on_destroy may still reference to the old array\n            if (component.$$.on_destroy) {\n                component.$$.on_destroy.push(...new_on_destroy);\n            }\n            else {\n                // Edge case - component was destroyed immediately,\n                // most likely as a result of a binding initialising\n                run_all(new_on_destroy);\n            }\n            component.$$.on_mount = [];\n        });\n    }\n    after_update.forEach(add_render_callback);\n}\nfunction destroy_component(component, detaching) {\n    const $$ = component.$$;\n    if ($$.fragment !== null) {\n        run_all($$.on_destroy);\n        $$.fragment && $$.fragment.d(detaching);\n        // TODO null out other refs, including component.$$ (but need to\n        // preserve final state?)\n        $$.on_destroy = $$.fragment = null;\n        $$.ctx = [];\n    }\n}\nfunction make_dirty(component, i) {\n    if (component.$$.dirty[0] === -1) {\n        dirty_components.push(component);\n        schedule_update();\n        component.$$.dirty.fill(0);\n    }\n    component.$$.dirty[(i / 31) | 0] |= (1 << (i % 31));\n}\nfunction init(component, options, instance, create_fragment, not_equal, props, append_styles, dirty = [-1]) {\n    const parent_component = current_component;\n    set_current_component(component);\n    const $$ = component.$$ = {\n        fragment: null,\n        ctx: [],\n        // state\n        props,\n        update: noop,\n        not_equal,\n        bound: blank_object(),\n        // lifecycle\n        on_mount: [],\n        on_destroy: [],\n        on_disconnect: [],\n        before_update: [],\n        after_update: [],\n        context: new Map(options.context || (parent_component ? parent_component.$$.context : [])),\n        // everything else\n        callbacks: blank_object(),\n        dirty,\n        skip_bound: false,\n        root: options.target || parent_component.$$.root\n    };\n    append_styles && append_styles($$.root);\n    let ready = false;\n    $$.ctx = instance\n        ? instance(component, options.props || {}, (i, ret, ...rest) => {\n            const value = rest.length ? rest[0] : ret;\n            if ($$.ctx && not_equal($$.ctx[i], $$.ctx[i] = value)) {\n                if (!$$.skip_bound && $$.bound[i])\n                    $$.bound[i](value);\n                if (ready)\n                    make_dirty(component, i);\n            }\n            return ret;\n        })\n        : [];\n    $$.update();\n    ready = true;\n    run_all($$.before_update);\n    // `false` as a special case of no DOM component\n    $$.fragment = create_fragment ? create_fragment($$.ctx) : false;\n    if (options.target) {\n        if (options.hydrate) {\n            start_hydrating();\n            const nodes = children(options.target);\n            // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n            $$.fragment && $$.fragment.l(nodes);\n            nodes.forEach(detach);\n        }\n        else {\n            // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n            $$.fragment && $$.fragment.c();\n        }\n        if (options.intro)\n            transition_in(component.$$.fragment);\n        mount_component(component, options.target, options.anchor, options.customElement);\n        end_hydrating();\n        flush();\n    }\n    set_current_component(parent_component);\n}\nlet SvelteElement;\nif (typeof HTMLElement === 'function') {\n    SvelteElement = class extends HTMLElement {\n        constructor() {\n            super();\n            this.attachShadow({ mode: 'open' });\n        }\n        connectedCallback() {\n            const { on_mount } = this.$$;\n            this.$$.on_disconnect = on_mount.map(run).filter(is_function);\n            // @ts-ignore todo: improve typings\n            for (const key in this.$$.slotted) {\n                // @ts-ignore todo: improve typings\n                this.appendChild(this.$$.slotted[key]);\n            }\n        }\n        attributeChangedCallback(attr, _oldValue, newValue) {\n            this[attr] = newValue;\n        }\n        disconnectedCallback() {\n            run_all(this.$$.on_disconnect);\n        }\n        $destroy() {\n            destroy_component(this, 1);\n            this.$destroy = noop;\n        }\n        $on(type, callback) {\n            // TODO should this delegate to addEventListener?\n            if (!is_function(callback)) {\n                return noop;\n            }\n            const callbacks = (this.$$.callbacks[type] || (this.$$.callbacks[type] = []));\n            callbacks.push(callback);\n            return () => {\n                const index = callbacks.indexOf(callback);\n                if (index !== -1)\n                    callbacks.splice(index, 1);\n            };\n        }\n        $set($$props) {\n            if (this.$$set && !is_empty($$props)) {\n                this.$$.skip_bound = true;\n                this.$$set($$props);\n                this.$$.skip_bound = false;\n            }\n        }\n    };\n}\n/**\n * Base class for Svelte components. Used when dev=false.\n */\nclass SvelteComponent {\n    $destroy() {\n        destroy_component(this, 1);\n        this.$destroy = noop;\n    }\n    $on(type, callback) {\n        if (!is_function(callback)) {\n            return noop;\n        }\n        const callbacks = (this.$$.callbacks[type] || (this.$$.callbacks[type] = []));\n        callbacks.push(callback);\n        return () => {\n            const index = callbacks.indexOf(callback);\n            if (index !== -1)\n                callbacks.splice(index, 1);\n        };\n    }\n    $set($$props) {\n        if (this.$$set && !is_empty($$props)) {\n            this.$$.skip_bound = true;\n            this.$$set($$props);\n            this.$$.skip_bound = false;\n        }\n    }\n}\n\nfunction dispatch_dev(type, detail) {\n    document.dispatchEvent(custom_event(type, Object.assign({ version: '3.53.1' }, detail), { bubbles: true }));\n}\nfunction append_dev(target, node) {\n    dispatch_dev('SvelteDOMInsert', { target, node });\n    append(target, node);\n}\nfunction append_hydration_dev(target, node) {\n    dispatch_dev('SvelteDOMInsert', { target, node });\n    append_hydration(target, node);\n}\nfunction insert_dev(target, node, anchor) {\n    dispatch_dev('SvelteDOMInsert', { target, node, anchor });\n    insert(target, node, anchor);\n}\nfunction insert_hydration_dev(target, node, anchor) {\n    dispatch_dev('SvelteDOMInsert', { target, node, anchor });\n    insert_hydration(target, node, anchor);\n}\nfunction detach_dev(node) {\n    dispatch_dev('SvelteDOMRemove', { node });\n    detach(node);\n}\nfunction detach_between_dev(before, after) {\n    while (before.nextSibling && before.nextSibling !== after) {\n        detach_dev(before.nextSibling);\n    }\n}\nfunction detach_before_dev(after) {\n    while (after.previousSibling) {\n        detach_dev(after.previousSibling);\n    }\n}\nfunction detach_after_dev(before) {\n    while (before.nextSibling) {\n        detach_dev(before.nextSibling);\n    }\n}\nfunction listen_dev(node, event, handler, options, has_prevent_default, has_stop_propagation) {\n    const modifiers = options === true ? ['capture'] : options ? Array.from(Object.keys(options)) : [];\n    if (has_prevent_default)\n        modifiers.push('preventDefault');\n    if (has_stop_propagation)\n        modifiers.push('stopPropagation');\n    dispatch_dev('SvelteDOMAddEventListener', { node, event, handler, modifiers });\n    const dispose = listen(node, event, handler, options);\n    return () => {\n        dispatch_dev('SvelteDOMRemoveEventListener', { node, event, handler, modifiers });\n        dispose();\n    };\n}\nfunction attr_dev(node, attribute, value) {\n    attr(node, attribute, value);\n    if (value == null)\n        dispatch_dev('SvelteDOMRemoveAttribute', { node, attribute });\n    else\n        dispatch_dev('SvelteDOMSetAttribute', { node, attribute, value });\n}\nfunction prop_dev(node, property, value) {\n    node[property] = value;\n    dispatch_dev('SvelteDOMSetProperty', { node, property, value });\n}\nfunction dataset_dev(node, property, value) {\n    node.dataset[property] = value;\n    dispatch_dev('SvelteDOMSetDataset', { node, property, value });\n}\nfunction set_data_dev(text, data) {\n    data = '' + data;\n    if (text.wholeText === data)\n        return;\n    dispatch_dev('SvelteDOMSetData', { node: text, data });\n    text.data = data;\n}\nfunction validate_each_argument(arg) {\n    if (typeof arg !== 'string' && !(arg && typeof arg === 'object' && 'length' in arg)) {\n        let msg = '{#each} only iterates over array-like objects.';\n        if (typeof Symbol === 'function' && arg && Symbol.iterator in arg) {\n            msg += ' You can use a spread to convert this iterable into an array.';\n        }\n        throw new Error(msg);\n    }\n}\nfunction validate_slots(name, slot, keys) {\n    for (const slot_key of Object.keys(slot)) {\n        if (!~keys.indexOf(slot_key)) {\n            console.warn(`<${name}> received an unexpected slot \"${slot_key}\".`);\n        }\n    }\n}\nfunction validate_dynamic_element(tag) {\n    const is_string = typeof tag === 'string';\n    if (tag && !is_string) {\n        throw new Error('<svelte:element> expects \"this\" attribute to be a string.');\n    }\n}\nfunction validate_void_dynamic_element(tag) {\n    if (tag && is_void(tag)) {\n        console.warn(`<svelte:element this=\"${tag}\"> is self-closing and cannot have content.`);\n    }\n}\nfunction construct_svelte_component_dev(component, props) {\n    const error_message = 'this={...} of <svelte:component> should specify a Svelte component.';\n    try {\n        const instance = new component(props);\n        if (!instance.$$ || !instance.$set || !instance.$on || !instance.$destroy) {\n            throw new Error(error_message);\n        }\n        return instance;\n    }\n    catch (err) {\n        const { message } = err;\n        if (typeof message === 'string' && message.indexOf('is not a constructor') !== -1) {\n            throw new Error(error_message);\n        }\n        else {\n            throw err;\n        }\n    }\n}\n/**\n * Base class for Svelte components with some minor dev-enhancements. Used when dev=true.\n */\nclass SvelteComponentDev extends SvelteComponent {\n    constructor(options) {\n        if (!options || (!options.target && !options.$$inline)) {\n            throw new Error(\"'target' is a required option\");\n        }\n        super();\n    }\n    $destroy() {\n        super.$destroy();\n        this.$destroy = () => {\n            console.warn('Component was already destroyed'); // eslint-disable-line no-console\n        };\n    }\n    $capture_state() { }\n    $inject_state() { }\n}\n/**\n * Base class to create strongly typed Svelte components.\n * This only exists for typing purposes and should be used in `.d.ts` files.\n *\n * ### Example:\n *\n * You have component library on npm called `component-library`, from which\n * you export a component called `MyComponent`. For Svelte+TypeScript users,\n * you want to provide typings. Therefore you create a `index.d.ts`:\n * ```ts\n * import { SvelteComponentTyped } from \"svelte\";\n * export class MyComponent extends SvelteComponentTyped<{foo: string}> {}\n * ```\n * Typing this makes it possible for IDEs like VS Code with the Svelte extension\n * to provide intellisense and to use the component like this in a Svelte file\n * with TypeScript:\n * ```svelte\n * <script lang=\"ts\">\n * \timport { MyComponent } from \"component-library\";\n * </script>\n * <MyComponent foo={'bar'} />\n * ```\n *\n * #### Why not make this part of `SvelteComponent(Dev)`?\n * Because\n * ```ts\n * class ASubclassOfSvelteComponent extends SvelteComponent<{foo: string}> {}\n * const component: typeof SvelteComponent = ASubclassOfSvelteComponent;\n * ```\n * will throw a type error, so we need to separate the more strictly typed class.\n */\nclass SvelteComponentTyped extends SvelteComponentDev {\n    constructor(options) {\n        super(options);\n    }\n}\nfunction loop_guard(timeout) {\n    const start = Date.now();\n    return () => {\n        if (Date.now() - start > timeout) {\n            throw new Error('Infinite loop detected');\n        }\n    };\n}\n\nexport { HtmlTag, HtmlTagHydration, SvelteComponent, SvelteComponentDev, SvelteComponentTyped, SvelteElement, action_destroyer, add_attribute, add_classes, add_flush_callback, add_location, add_render_callback, add_resize_listener, add_styles, add_transform, afterUpdate, append, append_dev, append_empty_stylesheet, append_hydration, append_hydration_dev, append_styles, assign, attr, attr_dev, attribute_to_object, beforeUpdate, bind, binding_callbacks, blank_object, bubble, check_outros, children, claim_component, claim_element, claim_html_tag, claim_space, claim_svg_element, claim_text, clear_loops, component_subscribe, compute_rest_props, compute_slots, construct_svelte_component, construct_svelte_component_dev, createEventDispatcher, create_animation, create_bidirectional_transition, create_component, create_in_transition, create_out_transition, create_slot, create_ssr_component, current_component, custom_event, dataset_dev, debug, destroy_block, destroy_component, destroy_each, detach, detach_after_dev, detach_before_dev, detach_between_dev, detach_dev, dirty_components, dispatch_dev, each, element, element_is, empty, end_hydrating, escape, escape_attribute_value, escape_object, exclude_internal_props, fix_and_destroy_block, fix_and_outro_and_destroy_block, fix_position, flush, getAllContexts, getContext, get_all_dirty_from_scope, get_binding_group_value, get_current_component, get_custom_elements_slots, get_root_for_style, get_slot_changes, get_spread_object, get_spread_update, get_store_value, globals, group_outros, handle_promise, hasContext, has_prop, head_selector, identity, init, insert, insert_dev, insert_hydration, insert_hydration_dev, intros, invalid_attribute_name_character, is_client, is_crossorigin, is_empty, is_function, is_promise, is_void, listen, listen_dev, loop, loop_guard, merge_ssr_styles, missing_component, mount_component, noop, not_equal, now, null_to_empty, object_without_properties, onDestroy, onMount, once, outro_and_destroy_block, prevent_default, prop_dev, query_selector_all, raf, run, run_all, safe_not_equal, schedule_update, select_multiple_value, select_option, select_options, select_value, self, setContext, set_attributes, set_current_component, set_custom_element_data, set_custom_element_data_map, set_data, set_data_dev, set_input_type, set_input_value, set_now, set_raf, set_store_value, set_style, set_svg_attributes, space, spread, src_url_equal, start_hydrating, stop_propagation, subscribe, svg_element, text, tick, time_ranges_to_array, to_number, toggle_class, transition_in, transition_out, trusted, update_await_block_branch, update_keyed_each, update_slot, update_slot_base, validate_component, validate_dynamic_element, validate_each_argument, validate_each_keys, validate_slots, validate_store, validate_void_dynamic_element, xlink_attr };\n","/**********************************************\n * Functions for statistical tests and models *\n **********************************************/\n\n/**\n * Returns a p-value for any test\n * @param {function} pfun - reference to a CDF function (e.g. pnorm)\n * @param {number} crit - critical value for the test (e.g. z-score or t-score)\n * @param {string} tail - which tail to use (\"left\", \"right\", or \"both\")\n * @param {Array} params - additional parameters to CDF function\n * @returns {number} - a p-value for the test\n */\nexport function getPValue(pfun, crit, tail, params = []) {\n\n   if (tail === \"left\") {\n      return(pfun(crit, ...params));\n   }\n\n   if (tail === \"right\") {\n      return(1 - pfun(crit, ...params));\n   }\n\n   if (tail === \"both\") {\n      let p = pfun(crit, ...params);\n      return min([p, 1 - p]) * 2;\n   }\n}\n\n\n/**\n * Makes one-sample t-test for a mean\n * @param {number[]} x - vector with sample values\n * @param {number} mu - assumed mean value for population (H0)\n * @param {number} alpha - significance level (used to compute confidence interval)\n * @param {string} tail - which tail to use (\"left\", \"right\", or \"both\")\n * @returns {Object} - a JSON with test results\n */\nexport function tTest1(x, mu = 0, alpha = 0.05, tail = \"both\") {\n\n   if (typeof(mu) !== \"number\") {\n      throw Error(\"Parameter 'mu' should be a number.\");\n   }\n\n   const nx = x.length;\n\n   const effectExpected = mu;\n   const effectObserved = mean(x);\n   const se = sd(x) / Math.sqrt(nx);\n   const tValue = (effectObserved - effectExpected) / se;\n   const DoF = nx - 1\n   const errMargin = qt(1 - alpha/2, DoF) * se;\n\n   return {\n      test: \"One sample t-test\",\n      effectExpected: mu,\n      effectObserved: effectObserved,\n      se: se,\n      tValue: tValue,\n      alpha: alpha,\n      tail: tail,\n      DoF: DoF,\n      pValue: getPValue(pt, tValue, tail, [DoF]),\n      ci: [effectObserved - errMargin, effectObserved + errMargin]\n   };\n}\n\n/**\n * Makes two-sample t-test for a difference of means assuming population variances equal\n * @param {number[]} x - vector with sample 1 values\n * @param {number[]} y - vector with sample 2 values\n * @param {number} alpha - significance level (used to compute confidence interval)\n * @param {string} tail - which tail to use (\"left\", \"right\", or \"both\")\n * @returns {Object} - a JSON with test results\n */\nexport function tTest2(x, y, alpha = 0.05, tail = \"both\") {\n   const nx = x.length;\n   const mx = mean(x);\n   const my = mean(y);\n   const ny = y.length;\n\n   const effectExpected = 0;\n   const effectObserved = mx - my;\n   const se = Math.sqrt( (sd(x)**2 / nx) + (sd(y)**2 / ny));\n   const tValue = (effectObserved - effectExpected) / se;\n   const DoF = (nx - 1) + (ny - 1);\n   const errMargin = qt(1 - alpha/2, DoF) * se;\n\n   return {\n      test: \"Two sample t-test\",\n      effectExpected: effectExpected,\n      effectObserved: effectObserved,\n      se: se,\n      tValue: tValue,\n      alpha: alpha,\n      tail: tail,\n      DoF: DoF,\n      pValue: getPValue(pt, tValue, tail, [DoF]),\n      ci: [effectObserved - errMargin, effectObserved + errMargin]\n   };\n}\n\n/**********************************************\n * Functions for computing single statistics  *\n **********************************************/\n\n/**\n * Computes kurtosis of values\n * @param {number[]} x - vector with values\n * @returns {number}\n */\nexport function kurtosis(x) {\n   let n = x.length;\n   let m = mean(x);\n\n   let m4 = 0.0;\n   let m2 = 0.0;\n   for (let i = 0; i < n; i++) {\n      m2 = m2 + Math.pow((x[i] - m), 2);\n      m4 = m4 + Math.pow((x[i] - m), 4);\n   }\n\n   return (m4/n) / Math.pow((m2/n), 2);\n}\n\n\n/**\n * Computes skewness of values\n * @param {number[]} x - vector with values\n * @returns {number}\n */\nexport function skewness(x) {\n   let n = x.length;\n   let m = mean(x);\n\n   let m3 = 0.0;\n   let m2 = 0.0;\n   for (let i = 0; i < n; i++) {\n      m2 = m2 + Math.pow((x[i] - m), 2);\n      m3 = m3 + Math.pow((x[i] - m), 3);\n   }\n\n   return (m3/n) / Math.pow((m2/n), 1.5);\n}\n\n\n/**\n * Finds smallest value in a vector\n * @param {number[]} x - vector with values\n * @returns {number}\n */\nexport function min(x) {\n   let n = x.length;\n   let min = Number.POSITIVE_INFINITY\n\n   while (n--) min = x[n] < min ? x[n] : min;\n   return min;\n}\n\n\n/**\n * Finds largest value in a vector\n * @param {number[]} x - vector with values\n * @returns {number}\n */\nexport function max(x) {\n   let n = x.length;\n   let max = Number.NEGATIVE_INFINITY\n\n   while (n--) max = x[n] > max ? x[n] : max;\n   return max;\n}\n\n\n/**\n * Computes sum of all values in a vector\n * @param {number[]} x - vector with values\n * @returns {number}\n */\nexport function sum(x) {\n   let s = 0;\n   for (let i = 0; i < x.length; i++) {\n      s = s + x[i];\n   }\n\n   return s;\n}\n\n\n/**\n * Computes product of all value in a vector\n * @param {number[]} x - vector with values\n * @returns {number}\n */\nexport function prod(x) {\n   let p = 1;\n   for (let i = 0; i < x.length; i++) {\n      p = p * x[i];\n   }\n\n   return p;\n}\n\n\n/**\n * Computes mean (average) value for a vector\n * @param {number[]} x - vector with values\n * @returns {number}\n */\nexport function mean(x) {\n   return sum(x) / x.length;\n}\n\n\n/**\n * Computes covariance between two vectors\n * @param {number[]} x - vector with values\n * @param {number[]} y - vector with values\n * @param {boolean} biased - compute a biased version with n degrees of freedom or not (with n-1).\n * @param {number} mx - mean of x values (if already known)\n * @param {number} my - mean of y values (if already known)\n * @returns {number}\n */\nexport function cov(x, y, biased = false, mx = undefined, my = undefined) {\n\n   const n = x.length;\n\n   if (y.length !== n) {\n      throw Error(\"Vectors 'x' and 'y' must have the same length.\");\n   }\n\n   if (n < 2) {\n      throw Error(\"Vectors 'x' and 'y' must have at least two values.\");\n   }\n\n   if (mx === undefined) mx = mean(x);\n   if (my === undefined) my = mean(y);\n\n   let cov = 0;\n   for (let i = 0; i < n; i++) {\n      cov = cov + (x[i] - mx) * (y[i] - my);\n   }\n\n   return cov / (biased ? n : n - 1);\n}\n\n\n/**\n * Computes variance for a vector\n * @param {number[]} x - vector with values\n * @param {boolean} biased - compute a biased version with n degrees of freedom or not (with n-1).\n * @param {number} m - mean value (e.g. if already computed).\n * @returns {number}\n */\nexport function variance(x, biased = false, m = undefined) {\n   return cov(x, x, biased, m, m);\n}\n\n\n/**\n * Computes standard deviation for a vector\n * @param {number[]} x - vector with values\n * @param {boolean} biased - compute a biased version with n degrees of freedom or not (with n-1).\n * @param {number} m - mean value (e.g. if already computed).\n * @returns {number}\n */\nexport function sd(x, biased = false, m = undefined) {\n   return Math.sqrt(variance(x, biased, m));\n}\n\n\n/**\n * Computes correlation between two vectors\n * @param {number[]} x - vector with values\n * @param {number[]} y - vector with values\n * @param {string} method - which method to use (\"pearson\" or \"spearman\")\n * @returns {number}\n */\nexport function cor(x, y, method = \"pearson\") {\n\n   if (method === \"spearman\") {\n      return cor(rank(x), rank(y));\n   }\n\n   return cov(x, y) / (sd(x) * sd(y));\n}\n\n\n\n/***************************************************\n * Functions for computing vectors of statistics   *\n ***************************************************/\n\n\n/**\n * Computes a p-th quantile/quantiles for a numeric vector\n * @param {number[]} x - vector with values\n * @param {number|number[]} p - probability (one value or a vector)\n * @returns {number}\n */\nexport function quantile(x, p) {\n\n   x = sort(x);\n   const n = x.length;\n\n   if (!Array.isArray(p)) p = [p];\n   if (typeof(p[0]) !== \"number\" || min(p) < 0 || max(p) > 1) {\n      throw new Error(\"Parameter 'p' must be between 0 and 1 (both included).\");\n   }\n\n   function q(x, p) {\n      const h = (n - 1) * p + 1;\n      const n1 = Math.floor(h);\n      const n2 = Math.ceil(h);\n      return x[n1 - 1] + (x[n2 - 1] - x[n1 - 1]) * (h - Math.floor(h));\n   }\n\n   const out =  p.map(v => q(x, v));\n   return p.length == 1 ? out[0] : out;\n}\n\n\n/**\n * Generate a sequence of n numbers between min and max.\n * @param {number} min - first value in the sequence\n * @param {number} max - last value in the sequence\n * @param {number} n - number of values in the sequence\n * @returns {number[]} array with the sequence values\n */\nexport function seq(min, max, n) {\n\n   if (n < 2) {\n      throw new Error(\"Parameter 'n' should be ≥ 2.\");\n   }\n\n   if (n === undefined && Number.isInteger(min) && Number.isInteger(max)) {\n      if (max === min) return [max];\n      n = max - min + 1;\n   }\n\n   const step = (max - min + 0.0) / (n - 1 + 0.0)\n   let out = [...Array(n)].map((x, i) => min + i * step);\n\n   // if step is smaller than 1 round values to remove small decimals accidentally added by JS\n   if (Math.abs(step) < 1) {\n      const r = Math.pow(10, Math.round(-Math.log10(step)) + 1);\n      out = out.map(v => Math.round((v + Number.EPSILON) * r) / r)\n   }\n\n   return(out)\n}\n\n\n/**\n * Finds a range of values in a vector (min and max)\n * @param {number[]} x - vector with values\n * @returns {number[]} array with min and max values\n */\nexport function range(x) {\n   return [min(x), max(x)];\n}\n\n\n/**\n * Computes a range of values in a vector with a margin\n * @param {number[]} x - vector with values\n * @param {number} margin - margin in parts of one (e.g. 0.1 for 10% or 2 for 200%)\n * @returns{number[]} array with marginal range boundaries\n */\nexport function mrange(x, margin = 0.05) {\n   const mn = min(x);\n   const mx = max(x);\n   const d = mx - mn;\n\n   return [mn - d * margin, max(x) + d * margin];\n}\n\n\n/**\n * Splits range of vector values into equal intervals\n * @param {number[]} x - vector with values\n * @param {number} n - number of intervals\n * @returns {number[]} vector with boundaries of the intervals\n */\nexport function split(x, n) {\n   if (x === undefined || !Array.isArray(x) || x.length < 2) {\n      throw new Error(\"split: 'x' must bet a vector with numbers.\");\n   }\n\n   if (n === undefined || n < 2) {\n      throw new Erro(\"split: 'n' must be a positive integer number.\");\n   }\n\n   const mn = min(x);\n   const mx = max(x);\n\n   if (mn === mx) {\n      throw new Error(\"split: values in a vector 'x' should vary.\");\n   }\n\n   const step = (mx - mn) / n;\n   return Array.from({length: n + 1}, (v, i) => mn + i * step + 0.0);\n}\n\n\n/**\n * Counts how many values from a vector falls into provided intervals (bins)\n * @param {number[]} x - vector with values\n * @param {number[]} bins - vector with bins boundaries\n * @returns {number[]} vector with counts for each bean\n */\nexport function count(x, bins) {\n\n   if (x === undefined || !Array.isArray(x) ||x.length < 2) {\n      throw new Error(\"count: 'x' must be a vector with numbers.\")\n   }\n\n   if (bins === undefined || !Array.isArray(bins) || bins.length < 2) {\n      throw new Error(\"count: 'bins' must be a vector with numbers.\")\n   }\n\n   const n = bins.length;\n\n   // add a bit extra to right side of the last bin\n   bins[n - 1] = bins[n - 1] * 1.0001\n\n   // count\n   let counts = Array(n - 1).fill(0);\n   for (let i = 0; i < x.length; i++) {\n      for (let j = 0; j < n - 1; j++) {\n         if (x[i] >= bins[j] && x[i] < bins[j + 1]) counts[j] = counts[j] + 1;\n      }\n   }\n   return counts;\n}\n\n\n/**\n * Computes middle points between values of a vector\n * @param {number[]} x - vector with values\n * @returns {number[]} vector with middle points\n */\nexport function mids(x) {\n   return x.slice(1).map((v, i) => (0.5 * (v + x[i])));\n}\n\n\n/**\n * Computes difference between all adjacent values in a vector\n * @param {number[]} x - vector with values\n * @returns {number[]} vector with the differences\n */\nexport function diff(x) {\n   return x.slice(1).map( (y, i) => (y - x[i]));\n}\n\n\n/**\n * Finds outliers in a vector based on inter-quartile range distance\n * @param {Array} x - vector with values\n * @param {number} Q1 - first quartile (optional parameter)\n * @param {Array} Q3 - third quartile (optional parameter)\n * @returns {Array} vector with outliers or empty vector if none were found.\n */\nexport function getOutliers(x, Q1 = undefined, Q3 = undefined) {\n\n   if (Q1 === undefined) Q1 = quantile(x, 0.25);\n   if (Q3 === undefined) Q3 = quantile(x, 0.75);\n\n   const IQR = Q3 - Q1;\n   const bl = Q1 - 1.5 * IQR\n   const bu = Q3 + 1.5 * IQR\n   return(x.filter(v => v < bl || v > bu));\n}\n\n\n/**\n * Returns ranks of values in a vector (ranks start from 1, not 0)\n * @param {number[]} x - vector with values\n * @returns {number[]} vector with ranks\n */\nexport function rank(x) {\n   const y = [...x].sort((a, b) => a - b);\n   return(x.map(v => y.indexOf(v) + 1));\n}\n\n\n/**\n * Generate probability points for QQ plot\n * @param {number} n - number of points\n * @returns {Array} a sequence of probabilities between 0 and 1\n */\nexport function ppoints(n) {\n   const a = n < 10 ? 3.0/8.0 : 0.5;\n   return Array.from({length: n}, (v, i) => (i + 1 - a) / (n + (1 - a) - a));\n}\n\n\n/**\n * Computes cumulative sums for the vector values\n * @param {number[]} x - vector with values\n * @returns {number[]}\n */\nexport function cumsum(x) {\n   let s = 0;\n   return x.map(v => s += v);\n}\n\n\n\n/***********************************************\n * Functions for theoretical distribution      *\n ***********************************************/\n\n\n/**\n * Generates 'n' random numbers from a uniform distribution\n * @param {number} n - amount of numbers to generate\n * @param {number} a - smallest value (min) of the population\n * @param {number} b - largest value (max) of the population\n * @returns {number[]} vector with generated numbers\n */\nexport function runif(n, a = 0, b = 1) {\n   let out = Array(n);\n   for (let i = 0; i < n; i++) out[i] = (a + Math.random() * (b - a));\n   return out;\n}\n\n\n/**\n * Probability density function for uniform distribution\n * @param {Array} x - vector of values\n * @param {number} a - smallest value (min) of the population\n * @param {number} b - largest value (max) of the population\n * @returns {Array} vector with densities\n */\nexport function dunif(x, a = 0, b = 1) {\n\n   if (!Array.isArray(x)) x = [x];\n\n   const n = x.length;\n   const A = 1 / (b - a);\n   let d = Array(n);\n\n   for (let i = 0; i < n; i++) {\n      d[i] = (x[i] < a || x[i] > b ) ? 0 : A;\n   }\n\n   return d;\n}\n\n\n/**\n * Cumulative distribution function for uniform distribution\n * @param {Array} x - vector of values\n * @param {number} a - smallest value (min) of the population\n * @param {number} b - largest value (max) of the population\n * @returns {Array} vector with probabilities\n */\nexport function punif(x, a = 0, b = 1) {\n\n   if (!Array.isArray(x)) x = [x];\n\n   const n = x.length;\n   let p = Array(n);\n   for (let i = 0; i < n; i++) {\n      if (x[i] < a) {\n         p[i] = 0;\n      } else if (x[i] > b) {\n         p[i] = 1;\n      } else {\n         p[i] = (x[i] - a) / (b - a)\n      }\n   }\n\n   return p;\n}\n\n\n /**\n * Generates 'n' random numbers from a normal distribution\n * @param {number} n - amount of numbers to generate\n * @param {number} mu - average value of the population\n * @param {number} sigma - standard deviation of the population\n * @returns {Array} vector with generated numbers\n */\nexport function rnorm(n, mu = 0, sigma = 1) {\n\n   let out = Array(n);\n   for (let i = 0; i < n; i ++) {\n      const a = Math.sqrt(-2 * Math.log(Math.random()));\n      const b = 2 * Math.PI * Math.random();\n      out[i] = (a * Math.sin(b) * sigma + mu);\n   }\n\n   return out;\n}\n\n\n/**\n * Probability density function for normal distribution\n * @param {Array} x - vector of values\n * @param {number} mu - average value of the population\n * @param {number} sigma - standard deviation of the population\n * @returns {Array} vector with densities\n */\nexport function dnorm(x, mu = 0, sigma = 1) {\n\n   if (!Array.isArray(x)) x = [x];\n\n   const n = x.length;\n   const A = 1 / (Math.sqrt(2 * Math.PI) * sigma);\n   const frac = -0.5 / sigma ** 2;\n\n   let d = Array(n);\n   for (let i = 0; i < n; i++) {\n      const df = x[i] - mu;\n      d[i] = A * Math.exp(frac * df * df);\n   }\n\n   return x.length === 1 ? d[0] : d;\n}\n\n\n/**\n * Cumulative distribution function for normal distribution\n * @param {Array} x - vector of values\n * @param {number} mu - average value of the population\n * @param {number} sigma - standard deviation of the population\n * @returns {Array} vector with probabilities\n */\nexport function pnorm(x, mu = 0, sigma = 1) {\n\n   if (!Array.isArray(x)) x = [x];\n\n   const n = x.length;\n   const frac = 1 / (Math.sqrt(2) * sigma);\n\n   let p = Array(n);\n   for (let i = 0; i < n; i++) {\n      p[i] = 0.5 * (1 + erf((x[i] - mu) * frac))\n   }\n\n   return p.length === 1 ? p[0] : p;\n}\n\n/**\n * Inverse cumulative distribution function for normal distribution\n * @param {number|number[]} p - vector of probabilities or a single probability value\n * @param {number} mu - average value of the population\n * @param {number} sigma - standard deviation of the population\n * @returns {number|number[]} vector with quantiles or single quantile value\n */\nexport function qnorm(p, mu = 0, sigma = 1) {\n\n   if (Array.isArray(p)) {\n      return p.map(v => qnorm(v, mu, sigma));\n   }\n\n   if (mu !== 0 || sigma !== 1) {\n      return qnorm(p) * sigma + mu;\n   }\n\n   if (p < 0 || p > 1) {\n      throw Error(\"Parameter 'p' must be between 0 and 1.\");\n   }\n\n   if (p < 0.0000000001) return -Infinity;\n   if (p > 0.9999999999) return +Infinity;\n\n   const SP1 = 0.425;\n   const SP2 = 5.0;\n   const C1 = 0.180625;\n   const C2 = 1.6;\n\n   const a0 = 3.3871327179;\n   const a1 = 5.0434271938 * 10;\n   const a2 = 1.5929113202 * 100;\n   const a3 = 5.9109374720 * 10;\n   const b1 = 1.7895169469 * 10;\n   const b2 = 7.8757757664 * 10;\n   const b3 = 6.7187563600 * 10;\n\n   const c0 = 1.4234372777;\n   const c1 = 2.7568153900;\n   const c2 = 1.3067284816;\n   const c3 = 1.7023821103 * 0.1;\n   const d1 = 7.3700164250 * 0.1;\n   const d2 = 1.2021132975 * 0.1;\n\n   const e0 = 6.6579051150;\n   const e1 = 3.0812263860;\n   const e2 = 4.2868294337 * 0.1;\n   const e3 = 1.7337203997 * 0.01;\n   const f1 = 2.4197894225 * 0.1;\n   const f2 = 1.2258202635 * 0.01;\n\n   const q = p - 0.5;\n   let r;\n\n   if (Math.abs(q) <= SP1) {\n      r = C1 - q * q;\n      return q * (((a3 * r + a2) * r + a1) *r + a0) / (((b3 * r + b2) * r + b1) * r + 1.0);\n   }\n\n   r = q < 0 ? p : 1 - p;\n   r = Math.sqrt(-Math.log(r));\n   let res;\n\n   if (r <= SP2) {\n      r = r - C2;\n      res = (((c3 * r + c2) * r + c1) * r + c0) / ((d2 * r + d1) * r + 1.0);\n   } else {\n      r = r - SP2;\n      res = (((e3 * r + e2) * r + e1) + e0) / ((f2 * r + f1) * r + 1.0);\n   }\n\n   return q < 0 ? -res : res;\n}\n\n/**\n * Probability density function for Student's t-distribution\n * @param {number|number[]} t - t-value or a vector of t-values\n * @param {number} dof - degrees of freedom\n */\nexport function dt(t, dof) {\n\n   if (dof < 0) {\n      throw new Error(\"Parameter 'dof' should be a positive number.\");\n   }\n\n   if (Array.isArray(t)) {\n      return t.map(v => dt(v, dof));\n   }\n\n   const pow = -0.5 * (dof + 1);\n   const A = 1 / (Math.sqrt(dof) * beta(0.5, dof/2));\n   return (A * Math.pow((1 + t * t / dof), pow));\n}\n\n\n/**\n * Cumulative distribution function for Student's t-distribution\n * @param {number|number[]} t - t-value or a vector of t-values\n * @param {number} dof - degrees of freedom\n */\nexport function pt(t, dof) {\n\n   if (dof === undefined || dof === null || dof < 1) {\n      throw Error(\"Parameter 'dof' (degrees of freedom) must be an integer number >= 1.\");\n   }\n\n   if (Array.isArray(t)) {\n      return t.map(v => pt(v, dof));\n   }\n\n   // since distribution in symmetric we can use only left tail\n   if (t === 0) return 0.5;\n   if (t === -Infinity) return 0;\n   if (t === Infinity) return 1;\n   if (t > 0) return (1 - pt(-t, dof));\n\n   return integrate((x) => dt(x, dof), -Infinity, t);\n}\n\n\n/**\n * Inverse cumulative distribution function for Student's t-distribution\n * @param {number|number[]} p - probability or vector with probabilities\n * @param {number} dof - degrees of freedom\n */\nexport function qt(p, dof) {\n\n   if (dof === undefined || dof === null || dof < 1) {\n      throw Error(\"Parameter 'dof' (degrees of freedom) must be an integer number >= 1.\");\n   }\n\n   if (p < 0 || p > 1) {\n      throw Error(\"Parameter 'p' must be between 0 and 1.\");\n   }\n\n   if (Array.isArray(p)) {\n      return p.map(v => qt(v, dof));\n   }\n\n   if (p < 0.0000000001) return -Infinity;\n   if (p > 0.9999999999) return +Infinity;\n\n\n   // simple cases — exact solutions\n   if (dof === 1) {\n      return Math.tan(Math.PI * (p - 0.5));\n   }\n\n   if (dof === 2) {\n      return 2 * (p - 0.5) * Math.sqrt(2 / (4 * p * (1 - p)));\n   }\n\n   // approximation\n\n   let sign = -1;\n   if (p >= 0.5){\n      sign = +1 ;\n      p = 2 * (1 - p);\n   } else {\n      sign = -1;\n      p = 2 * p;\n   }\n\n   const a = 1.0 / (dof - 0.5);\n   const b = 48.0 / (a ** 2);\n   let c = ((20700 * a / b - 98) * a - 16) * a + 96.36;\n   const d = ((94.5 / (b + c) - 3.0)/b + 1.0) * Math.sqrt(a * Math.PI / 2) * dof;\n\n   let x = d * p;\n   let y = x ** (2.0/dof);\n\n   if (y > 0.05 + a) {\n\n      // asymptotic inverse expansion about normal\n      x = qnorm(p * 0.5);\n      y = x ** 2;\n\n      if (dof < 5) {\n         c = c + 0.3 * (dof - 4.5) * (x + 0.6);\n      }\n\n      c = (((0.05 * d * x - 5.0) * x - 7.0) * x - 2.0) * x + b + c;\n      y = (((((0.4 * y + 6.3) * y + 36.0) * y + 94.5) / c - y - 3.0)/b + 1.0) * x;\n      y = a * (y ** 2);\n      y = y > 0.002 ? Math.exp(y) - 1.0 : 0.5 * (y ** 2) + y;\n   } else {\n      y = ((1.0 / (((dof + 6.0)/(dof * y) - 0.089 * d - 0.822) * (dof + 2.0) * 3.0) + 0.5/(dof + 4.0)) * y - 1.0) *\n         (dof + 1.0)/(dof + 2.0) + 1.0/y;\n   }\n\n   return sign * Math.sqrt(dof * y);\n}\n\n\n\n/**\n * Probability density function for F-distribution\n * @param {number|number[]} F - F-value or a vector of t-values\n * @param {number} d1 - degrees of freedom\n * @param {number} d2 - degrees of freedom\n */\nexport function df(F, d1, d2) {\n\n   if (F < 0 || d1 < 0 || d2 < 0) {\n      throw new Error(\"All 3 parameters must be positive.\");\n   }\n\n   if (d2 <= d1) {\n      throw new Error(\"Parameter 'd1' must be larger 'd2'.\");\n   }\n\n   if (Array.isArray(F)) {\n      return F.map(v => df(v, d1, d2));\n   }\n\n   return Math.sqrt( ( (d1 * F)**d1 * d2**d2) / ((d1 * F + d2)**(d1 + d2))) / (F * beta(d1/2, d2/2))\n}\n\n\n/**\n * Cumulative distribution function for F-distribution\n * @param {number|number[]} F - F-value or a vector of t-values\n * @param {number} d1 - degrees of freedom\n * @param {number} d2 - degrees of freedom\n */\nexport function pf(F, d1, d2) {\n\n   if (F < 0 || d1 < 0 || d2 < 0) {\n      throw new Error(\"All 3 parameters must be positive.\");\n   }\n\n   if (Array.isArray(F)) {\n      return F.map(v => pf(v, d1, d2));\n   }\n\n   return ibeta(d1 * F / (d1 * F + d2), d1/2, d2/2)\n}\n\n\n\n/***********************************************\n * Functions for manipulations with values     *\n ***********************************************/\n\n\n/**\n * Sorts values in a vector\n * @param {Array} x - vector with values\n * @returns {Array} vector with sorted values\n */\nexport function sort(x, decreasing = false) {\n   return decreasing ? [...x].sort((a, b) => b - a) : [...x].sort((a, b) => a - b);\n}\n\n\n/**\n * Replicates values in x n times\n * @param {any} x - single value or a vector with values\n * @param {number} n - how many times to replicate\n */\nexport function rep(x, n) {\n\n   if (Array.isArray(n)) {\n      if (x.length != n.length) {\n         throw new Error(\"Parameter 'n' should be a single value or a vector of the same length as x.\");\n      }\n\n      let out = [];\n      for (let i = 0; i < n.length; i++) {\n         out.push(...rep([x[i]], n[i]));\n      }\n\n      return out;\n   }\n\n   if (!Array.isArray(x)) x = [x];\n   if (n <= 1) return x;\n\n   const nx = x.length;\n   x.length = nx * n\n   for (let i = 0; i < n - 1; i ++) {\n      for (let j = 0; j < nx; j++) {\n         x[nx * (i + 1) + j] = x[j];\n      }\n   }\n\n   return x;\n}\n\n\n/**\n * Create a subset of vectors based on a vector of indices\n * @param {number[]} x - a vector with values\n * @param {number[]} indices - a vector with element indices (first index is 1 not 0!)\n * @param {string} method - what to do with values (\"select\" or \"remove\")\n */\nexport function subset(x, indices, method) {\n\n   if (!Array.isArray(x)) x = [x];\n   if (!Array.isArray(indices)) indices = [indices];\n\n   if (indices.length === 0) return [...x];\n\n   if (max(indices) > x.length || min(indices) < 1) {\n      throw new Error(\"Parameter 'indices' must have values between 1 and 'x.length'.\");\n   }\n\n   const n = indices.length;\n\n   if (!method || method === \"select\") {\n      let out = Array(n);\n      for (let i = 0; i < n; i++) {\n         out[i] = x[indices[i] - 1];\n      }\n      return out;\n   }\n\n   if (method === \"remove\") {\n      let out = [...x];\n      return out.filter((v, i) => !indices.includes(i + 1));\n   }\n\n   throw Error(\"Wrong value for argument 'method'.\");\n}\n\n\n/**\n * Generate combination of all levels of vectors\n * @param {...} args - a sequence of vectors\n */\nexport function expandGrid(...args) {\n\n   const nargs = args.length;\n   const d = args.map(v => v.length);\n   let orep = prod(d);\n\n   let grid = Array(nargs);\n   let repFac = 1;\n\n   for (let i = 0; i < nargs; i++) {\n      const x = args[i];\n      const nx = x.length;\n      orep = orep/nx;\n      grid[i] = subset(x, rep(rep(seq(1, nx, nx), rep(repFac, nx)), orep));\n      repFac = repFac * nx;\n   }\n\n   return grid;\n}\n\n\n/**\n * Shuffles values in vector x using Fisher–Yates algorithm\n * @param {Array} x - a vector with values\n */\nexport function shuffle(x) {\n  let y = [...x];\n  let n = y.length;\n  let t, i;\n\n  while (n) {\n    i = Math.floor(Math.random() * n--);\n    t = y[n];\n    y[n] = y[i];\n    y[i] = t;\n  }\n\n  return y;\n}\n\n\n/**\n * Finds index of value in x which is closest to the value a\n * @param {number[]} x - a vector with values\n * @param {number}  a - a value\n */\nexport function closestIndex(x, a) {\n   const c = x.reduce((prev, curr) => Math.abs(curr - a) < Math.abs(prev - a) ? curr : prev);\n   return x.indexOf(c);\n}\n\n\n/**\n * Rounds number (or vector of numbers) to given amount of decimals\n * @param {number | number[]} x - a vector with values\n * @return {number | number[]}\n */\nexport function round(x, n = 0) {\n   if (Array.isArray(x)) {\n      return x.map(v => round(v, n));\n   }\n   return Number.parseFloat(x.toFixed(n));\n}\n\n/**\n * Standardize (mean center and sd scale) values from a vector\n * @param {number | number[]} x - a vector with values\n * @return {number} center - value for centering the values (if undefined, will use mean(x))\n * @return {number} scale - value for scaling the values (if undefined, will use sd(x))\n *\n */\nexport function scale(x, center = undefined, scale = undefined) {\n   if (center === undefined) center = mean(x);\n   if (scale === undefined) scale = sd(x);\n\n   const n = x.length;\n   let y = Array(n);\n\n   for (let i = 0; i < n; i++) {\n      y[i] = (x[i] - center) / scale;\n   }\n\n   return y;\n}\n\n\n\n/***************************************************************\n * Mathematical functions and methods needed for computations  *\n ***************************************************************/\n\n/**\n * Computes numeric integral for function \"f\" with limits (a, b)\n * @param {function} f - a reference to a function\n * @param {number} a - lower limit for integration\n * @param {number} b - upper limit for integration\n * @param {number} acc - absolute accuracy\n * @param {number} eps - relative accuracy\n * @param {number[]} oldfs - vector of values needed for recursion\n * @returns {number} result of integration\n */\nexport function integrate(f, a, b, acc = 0.000001, eps = 0.00001, oldfs = undefined) {\n\n   if (typeof(a) !== \"number\" || typeof(b) !== \"number\") {\n      throw Error(\"Parameters 'a' and 'b' must be numbers.\");\n   }\n\n   if (b < a) {\n      throw Error(\"Parameter 'b' must be larger 'a'.\");\n   }\n\n   // special case when left limit is minus infinity\n   if (a === -Infinity && b !== Infinity) {\n      return integrate((t) => f(b - (1 - t) / t) / (t ** 2), 0, 1);\n   }\n\n   // special case when right limit is plus infinity\n   if (a !== -Infinity && b === Infinity) {\n      return integrate((t) => f(a + (1 - t) / t) / (t ** 2), 0, 1);\n   }\n\n   // special case when both limits are infinite\n   if (a === -Infinity && b === Infinity) {\n      return integrate((t) => (f((1 - t) / t) + f((t - 1) / t)) / t ** 2, 0, 1);\n   }\n\n   // constants for splitting the integration interval\n   const x = [1/6, 2/6, 4/6, 5/6];\n   const w = [2/6, 1/6, 1/6, 2/6];\n   const v = [1/4, 1/4, 1/4, 1/4];\n   const p = [1, 0, 0, 1];\n\n   let n = x.length, h = b - a;\n   let fs;\n\n   if (oldfs === undefined) {\n      fs = x.map(v => f(a + v * h));\n   } else {\n      fs = new Array(n);\n      for (let k = 0, i = 0; i < n; i++) {\n         fs[i] = p[i] === 1 ? f(a + x[i] * h) : oldfs[k++];\n      }\n   }\n\n   let q4 = 0, q2 = 0;\n   for (let i = 0; i < n; i++) {\n      q4 += w[i] * fs[i] * h;\n      q2 += v[i] * fs[i] * h;\n   }\n\n   if (isNaN(q2) || isNaN(q4)) {\n      throw Error(\"Numerical integration ended up with NaN number.\")\n   }\n\n   let tol = acc + eps * Math.abs(q4);\n   let err = Math.abs((q4 - q2)/3);\n\n   if (err < tol) return q4;\n\n   acc = acc / Math.sqrt(2.);\n   let mid = (a + b) / 2;\n   let left = fs.filter((v, i) => i < n/2);\n   let right = fs.filter((v, i) => i >= n/2);\n\n   let ql = integrate(f, a, mid, eps, acc, left);\n   let qr = integrate(f, mid, b, eps, acc, right);\n   return (ql + qr);\n}\n\n\n/**\n * Error function for normal distribution\n * @param {number} x - a number\n * @returns {number} value for erf\n */\nexport function erf(x) {\n\n  const sign = (x >= 0) ? 1 : -1;\n  x = Math.abs(x);\n\n  // constants\n  const a1 =  0.254829592;\n  const a2 = -0.284496736;\n  const a3 =  1.421413741;\n  const a4 = -1.453152027;\n  const a5 =  1.061405429;\n  const p  =  0.3275911;\n\n  // approximation\n  const t = 1.0 / (1.0 + p * x);\n  const y = 1.0 - (((((a5 * t + a4) * t) + a3) * t + a2) * t + a1) * t * Math.exp(-x * x);\n  return sign * y;\n}\n\n\n/**\n * Gamma function (approximation)\n * @param {number|number[]} z - argument (one value or a vector)\n * @returns {number} value of the Gamma function\n */\nexport function gamma(z) {\n\n   if (Array.isArray(z)) {\n      return z.map(v => gamma(v));\n   }\n\n   if (z <= 0) {\n      throw new Error(\"Gamma function only works with arguments > 0.\");\n   }\n\n   // coefficients\n   const p = [\n        676.5203681218851,\n      -1259.1392167224028,\n        771.32342877765313,\n       -176.61502916214059,\n         12.507343278686905,\n         -0.13857109526572012,\n          9.9843695780195716e-6,\n          1.5056327351493116e-7\n    ];\n\n   if (z < 0.5) {\n      return Math.PI / (Math.sin(Math.PI * z) + gamma(1 - z));\n   }\n\n   z = z - 1;\n   let x = 0.99999999999980993;\n\n   for (let i = 0; i < p.length; i++) {\n      x = x + p[i] / (z + i + 1);\n   }\n\n   const t = z + p.length - 0.5;\n   return Math.sqrt(2 * Math.PI) * Math.pow(t, z + 0.5) * Math.exp(-t) * x;\n}\n\n\n/**\n * Betta function (approximation)\n * @param {number} x - first argument (one value)\n * @param {number} y - second argument (one value)\n * @returns {number} value of the Beta function\n */\nexport function beta(x, y) {\n\n   if (y > 100) {\n      // for large y we use slower integrate version\n      return integrate((u) => Math.pow(u, x - 1) / Math.pow(1 + u, x + y), 0, Infinity)\n   }\n\n   return gamma(x) * gamma(y) / gamma(x + y);\n}\n\n\n/**\n * Incomplete Betta function (approximation via numeric integration)\n * @param {number} x - first argument (one value)\n * @param {number} a - second argument (one value)\n * @param {number} b - third argument (one value)\n * @returns {number} value of the function\n */\nexport function ibeta(x, a, b) {\n   if (x === 0) return 0;\n   if (x === 1) return 1;\n   if (b === 1) return x ** a;\n   if (a === 1) return (1 - (1 - x)**b);\n   return integrate((t) => t ** (a - 1) * (1 - t) ** (b - 1), 0, x) / beta(a, b);\n}\n","import { noop, safe_not_equal, subscribe, run_all, is_function } from '../internal/index.mjs';\nexport { get_store_value as get } from '../internal/index.mjs';\n\nconst subscriber_queue = [];\n/**\n * Creates a `Readable` store that allows reading by subscription.\n * @param value initial value\n * @param {StartStopNotifier}start start and stop notifications for subscriptions\n */\nfunction readable(value, start) {\n    return {\n        subscribe: writable(value, start).subscribe\n    };\n}\n/**\n * Create a `Writable` store that allows both updating and reading by subscription.\n * @param {*=}value initial value\n * @param {StartStopNotifier=}start start and stop notifications for subscriptions\n */\nfunction writable(value, start = noop) {\n    let stop;\n    const subscribers = new Set();\n    function set(new_value) {\n        if (safe_not_equal(value, new_value)) {\n            value = new_value;\n            if (stop) { // store is ready\n                const run_queue = !subscriber_queue.length;\n                for (const subscriber of subscribers) {\n                    subscriber[1]();\n                    subscriber_queue.push(subscriber, value);\n                }\n                if (run_queue) {\n                    for (let i = 0; i < subscriber_queue.length; i += 2) {\n                        subscriber_queue[i][0](subscriber_queue[i + 1]);\n                    }\n                    subscriber_queue.length = 0;\n                }\n            }\n        }\n    }\n    function update(fn) {\n        set(fn(value));\n    }\n    function subscribe(run, invalidate = noop) {\n        const subscriber = [run, invalidate];\n        subscribers.add(subscriber);\n        if (subscribers.size === 1) {\n            stop = start(set) || noop;\n        }\n        run(value);\n        return () => {\n            subscribers.delete(subscriber);\n            if (subscribers.size === 0) {\n                stop();\n                stop = null;\n            }\n        };\n    }\n    return { set, update, subscribe };\n}\nfunction derived(stores, fn, initial_value) {\n    const single = !Array.isArray(stores);\n    const stores_array = single\n        ? [stores]\n        : stores;\n    const auto = fn.length < 2;\n    return readable(initial_value, (set) => {\n        let inited = false;\n        const values = [];\n        let pending = 0;\n        let cleanup = noop;\n        const sync = () => {\n            if (pending) {\n                return;\n            }\n            cleanup();\n            const result = fn(single ? values[0] : values, set);\n            if (auto) {\n                set(result);\n            }\n            else {\n                cleanup = is_function(result) ? result : noop;\n            }\n        };\n        const unsubscribers = stores_array.map((store, i) => subscribe(store, (value) => {\n            values[i] = value;\n            pending &= ~(1 << i);\n            if (inited) {\n                sync();\n            }\n        }, () => {\n            pending |= (1 << i);\n        }));\n        inited = true;\n        sync();\n        return function stop() {\n            run_all(unsubscribers);\n            cleanup();\n        };\n    });\n}\n\nexport { derived, readable, writable };\n","<script>\n\timport { setContext, createEventDispatcher, onMount, onDestroy } from 'svelte';\n\timport { writable } from 'svelte/store';\n\n   /* input parameters */\n   export let limX = [undefined, undefined];    // limits for x-axis (in plot units) [min, max]\n   export let limY = [undefined, undefined];    // limits for y-axis (in plot units) [min, max]\n   export let title = \"\";                       // title of the plot\n   export let xLabel = \"\";                      // label for x-axis\n   export let yLabel = \"\";                      // label for y-axis\n   export let multiSeries = true;               // is the plot for one series or for many\n\n   // event dispatcher\n   const dispatch = createEventDispatcher();\n\n   // how big are margins (number of pixels in unit margin value) between axis and plot area if axis are shown\n   const AXES_MARGIN_FACTORS = {\n      \"small\": 30,\n      \"medium\": 40,\n      \"large\": 50\n   }\n\n   // number of ticks along each axis\n   const TICK_NUM = {\n      \"small\": 5,\n      \"medium\": 8,\n      \"large\": 12\n   };\n\n   // margin between plot series elements and data labels\n   const LABELS_MARGIN = {\n      \"small\": 10,\n      \"medium\": 15,\n      \"large\": 20\n   };\n\n\n   // line styles for different scales and types\n   const LINE_STYLES = {\n      small: [\"0\", \"3,3\", \"1,1\", \"3,1\"],\n      medium: [\"0\", \"5,5\", \"2,2\", \"5,2\"],\n      large: [\"0\", \"7,7\", \"3,3\", \"7,3\"],\n   }\n\n   // constant to make clip path ID unique\n   const clipPathID = \"plottingArea\" + Math.round(Math.random() * 10000);\n\n   /* parameters for internal use inside the component */\n   let plotElement;\n   let axesElement;\n   let axesMargins = [0.034, 0.034, 0.034, 0.034];    // initial margins (will be multiplied to FACTORS)\n\n   /* reactive parameters to be shared with children via context */\n   const width = writable(100);                       // actual width of plotting area in pixels\n   const height = writable(100);                      // actual height of plotting area in pixels\n   const xLim = writable([undefined, undefined]);     // actual limits for x-axis in plot units\n   const yLim = writable([undefined, undefined]);     // actual limits for y-axis in plot units\n   const scale = writable(\"medium\");                  // scale factor (how big the shown plot is)\n   const isOk = writable(false);                      // are axes ready for drawing\n\n   /** Adds margins for x-axis (e.g. when x-axis must be shown) */\n   const addXAxisMargins = function() {\n      axesMargins[0] = 1;\n      axesMargins[2] = 0.5;\n      axesMargins[1] = axesMargins[1] > 0.5 ? axesMargins[1] : 0.5;\n      axesMargins[3] = axesMargins[3] > 0.5 ? axesMargins[3] : 0.5;\n   }\n\n   /** Adds margins for y-axis (e.g. when y-axis must be shown) */\n   const addYAxisMargins = function() {\n      axesMargins[1] = 1;\n      axesMargins[3] = 0.5;\n      axesMargins[0] = axesMargins[0] > 0.5 ? axesMargins[0] : 0.5;\n      axesMargins[2] = axesMargins[2] > 0.5 ? axesMargins[2] : 0.5;\n   }\n\n   /** Adjusts limits for x-axis (e.g. when new series is added)\n    *  @param {Array} newLim - vector with new limits  (two values)\n    */\n   const adjustXAxisLimits = function(newLim) {\n      if (!limX.some(v => v === undefined)) return;\n      xLim.update(lim => adjustAxisLimits(lim, newLim));\n   }\n\n   /** Adjusts limits for y-axis (e.g. when new series is added)\n    *  @param {Array} newLim - vector with new limits  (two values)\n    */\n   const adjustYAxisLimits = function(newLim) {\n      if (!limY.some(v => v === undefined)) return;\n      yLim.update(lim => adjustAxisLimits(lim, newLim));\n   }\n\n   /** Adjusts x- or y- axis limits (e.g. when new elements are added)\n    *  @param {Array} lim - vector with limits for current axis (two values)\n    *  @param {Array} newLim - vector with new limits  (two values)\n    *  @returns {Array} vector with rescaled values\n    *\n    *  The new limits are set separately for min and max. Either if current value is undefined or\n    *  if new value is outside the current limits (smaller than min or larger than max).\n    */\n   const adjustAxisLimits = function(lim, newLim) {\n\n      let adjustedLim = [\n         (lim[0] !== undefined && multiSeries === true && lim[0] < newLim[0]) ? lim[0] : newLim[0],\n         (lim[1] !== undefined && multiSeries === true && lim[1] > newLim[1]) ? lim[1] : newLim[1]\n      ];\n\n      // special case when both limits are zero\n      if (adjustedLim[0] === 0 && adjustedLim[1] === 0) {\n         adjustedLim = [-0.1, 0.1];\n      }\n\n      // special case when limits are equal (add ±5%)\n      if (adjustedLim[0] === adjustedLim[1]) {\n         adjustedLim = [adjustedLim[0] * 0.95, adjustedLim[0] * 1.05];\n      }\n\n      return adjustedLim;\n   }\n\n   /**\n    * Rounds coordinate values to single decimal\n   */\n   const roundCoords = function(x) {\n      return Math.round(x * 10) / 10\n   }\n\n   /** Rescales x-values from plot coordinates to screen (SVG) coordinates\n    *  @param {Array} x - vector with coordinates (or objects size) in original plot coordinates\n    *  @param {Array} xLim - vector with current limits for x-axis in original plot coordinates\n    *  @param {number} width - width of coordinate system in pixels\n    *  @param {boolean} doSizeScreen - scale size of objects (true) or coordinates\n    *  @returns {Array} vector with rescaled values\n    */\n   const scaleX = function(x, xLim, width, doSizeScale = false) {\n      if (!$isOk  || x === undefined || !Array.isArray(x)) return undefined;\n\n      if (doSizeScale) {\n         // scale size of objects instead of coordinates\n         return x.map(v => roundCoords(v / (xLim[1] - xLim[0]) * (width - margins[1] - margins[3])));\n      }\n\n      return x.map(v =>\n         roundCoords((v - xLim[0]) / (xLim[1] - xLim[0]) * (width - margins[1] - margins[3]) + margins[1])\n      );\n   }\n\n   /** Rescales x-values from plot coordinates to screen (SVG) coordinates\n    *  @param {Array} x - vector with coordinates (or objects size) in original plot coordinates\n    *  @param {Array} xLim - vector with current limits for x-axis in original plot coordinates\n    *  @param {number} width - width of coordinate system in pixels\n    *  @param {boolean} doSizeScreen - scale size of objects (true) or coordinates\n    *  @returns {Array} vector with rescaled values\n    */\n   const scaleY = function(y, yLim, height, doSizeScale = false) {\n      if (!$isOk  || y === undefined || !Array.isArray(y)) return undefined;\n\n      if (doSizeScale) {\n         // scale size of objects instead of coordinates\n         return y.map(v => roundCoords(v / (yLim[1] - yLim[0]) * (height - margins[0] - margins[2])));\n      }\n\n      // for coordinates we also need to invert (flip) the y-axis\n      return y.map(v =>\n         roundCoords((yLim[1] - v) / (yLim[1] - yLim[0]) * (height - margins[0] - margins[2]) + margins[2])\n      );\n   }\n\n   /** Computes nice tick values for axis\n    * @param {Array} ticks - vector with ticks if alredy available (if not, new will be computed)\n    * @param {Array} lim - vector with axis limits tickets must be computed for\n    * @param {number} maxTickNum - maximum number of ticks to compute\n    * @param {boolean} round - round or not the fractions when computing nice numbers for the ticks\n    * @returns {Array} a vector with computed tick positions\n    */\n   const getAxisTicks = function(ticks, lim, maxTickNum, round = true) {\n\n      // if ticks are already provided do not recompute them\n      if (ticks !== undefined) return ticks;\n\n      // check if limits are ok\n      if (!Array.isArray(lim) || lim[0] === undefined || lim[1] === undefined) return undefined;\n\n      // get range as a nice number and compute min, max and steps for the tick sequence\n      const range = niceNum(lim[1] - lim[0], round);\n      const tickSpacing = niceNum(range / (maxTickNum - 1), round);\n      const tickMin = Math.ceil(lim[0] / tickSpacing) * tickSpacing;\n      const tickMax = Math.floor(lim[1] / tickSpacing) * tickSpacing;\n\n      // recompute maxTickNum\n      maxTickNum = Math.round((tickMax - tickMin + 1) / tickSpacing) + 1;\n\n      // create a sequence and return\n      ticks = [...Array(maxTickNum)].map((x, i) => tickMin + i * tickSpacing);\n\n      // if step is smaller than 1 round values to remove small decimals accidentiall added by JS\n      if (Math.abs(tickSpacing) < 1) {\n         const r = Math.pow(10, 1 + Math.round(-Math.log10(tickSpacing)));\n         ticks = ticks.map(v => Math.round((v + Number.EPSILON) * r) / r)\n      }\n\n      // make sure the ticks are not aligned with axes limits\n      return ticks.filter(x => x >= lim[0] & x <= lim[1]);\n   }\n\n   /** Computes a nice spacing value for a given range\n    * @param {numeric} localRange - a range (max - min)\n    * @param {boolean} round - round or not the fractions when computing the number\n    * @returns {numeric} the computed spacing value\n    */\n   function niceNum( localRange,  round) {\n\n      const exponent = Math.floor(Math.log10(localRange));\n      const fraction = localRange / Math.pow(10, exponent);\n      let niceFraction;\n\n      if (round) {\n         if (fraction < 1.5)\n            niceFraction = 1;\n         else if (fraction < 3)\n            niceFraction = 2;\n         else if (fraction < 7)\n            niceFraction = 5;\n         else\n            niceFraction = 10;\n      } else {\n         if (fraction <= 1)\n            niceFraction = 1;\n         else if (fraction <= 2)\n            niceFraction = 2;\n         else if (fraction <= 5)\n            niceFraction = 5;\n         else\n            niceFraction = 10;\n      }\n\n      return niceFraction * Math.pow(10, exponent);\n   }\n\n   /** Computes a scale level\n    * @param {numeric} width - width of plotting area in pixels\n    * @param {numeric} height - height of plotting area in pixels\n    * @returns {text} the scale level (\"small\", \"medium\" or \"large\")\n    */\n   function getScale(width, height) {\n      if (height < 300.2 || width < 300.2) return \"small\";\n      if (height < 600.2 || width < 600.2) return \"medium\";\n      return \"large\";\n   }\n\n   /* context with Axes constants, properties and methods to share with children */\n   let context = {\n\n      // methods\n      addXAxisMargins: addXAxisMargins,\n      addYAxisMargins: addYAxisMargins,\n      adjustXAxisLimits: adjustXAxisLimits,\n      adjustYAxisLimits: adjustYAxisLimits,\n      getAxisTicks: getAxisTicks,\n      scaleX: scaleX,\n      scaleY: scaleY,\n\n      // variables\n      isOk: isOk,\n      scale: scale,\n      width: width,\n      height: height,\n      xLim: xLim,\n      yLim: yLim,\n\n      // constants\n      LINE_STYLES: LINE_STYLES,\n      LABELS_MARGIN: LABELS_MARGIN,\n      TICK_NUM: TICK_NUM,\n   }\n\n\tsetContext('axes', context);\n\n   // handle click on plot elements and dispatch manual events\n   function dispatchClickEvent(eventName, el) {\n      dispatch(eventName, {seriesTitle: el.parentNode.getAttribute('title'), elementID: el.dataset.id});\n   }\n\n   function handleClick(e) {\n\n      // scatter plot markers\n      if (e.target.tagName === \"text\" && e.target.parentNode.classList.contains(\"series_scatter\")) {\n         dispatchClickEvent(\"markerclick\", e.target);\n         return;\n      }\n\n      // bar plot bars\n      if (e.target.tagName === \"rect\" && e.target.parentNode.classList.contains(\"series_bar\")) {\n         dispatchClickEvent(\"barclick\", e.target);\n         return;\n      }\n\n      // outside any plot element\n      dispatch(\"axesclick\")\n   }\n\n\n   // this is reactive in case if limX and limY are interactively changed by parent script\n   $: if (!limX.some(v => v === undefined)) xLim.update(v => limX);\n   $: if (!limY.some(v => v === undefined)) yLim.update(v => limY);\n\n   // computes real margins in pixels based on current scale\n   $: margins = axesMargins.map(v => v * AXES_MARGIN_FACTORS[$scale]);\n\n   // computes status which tells that axes limits look fine and it is safe to draw\n   // the status is based on the axis limits validity\n   $: isOk.update(v =>\n      Array.isArray($yLim) &&\n      Array.isArray($xLim) &&\n      $xLim.length === 2 &&\n      $yLim.length === 2 &&\n      !$yLim.some(v => v === undefined) &&\n      !$xLim.some(v => v === undefined) &&\n      !$yLim.some(v => isNaN(v)) &&\n      !$xLim.some(v => isNaN(v)) &&\n      $xLim[1] !== $xLim[0] &&\n      $yLim[1] !== $yLim[0] &&\n      $width > (margins[1] + margins[3]) &&\n      $height > (margins[0] + margins[2])\n   )\n\n   // computes coordinates for clip path box\n   $: cpx = $isOk ? scaleX($xLim, $xLim, $width) : [0, 1];\n   $: cpy = $isOk ? scaleY($yLim, $yLim, $height) : [1, 0];\n\n   /* observer for the axes area size - to update size of axes */\n    const ro2 = new ResizeObserver(entries => {\n       for (let entry of entries) {\n         const acr = axesElement.getBoundingClientRect();\n         width.update(x => acr.width);\n         height.update(x => acr.height);\n       }\n    });\n\n   /* observer for the plot area size — to update scale */\n    const ro1 = new ResizeObserver(entries => {\n       for (let entry of entries) {\n         const pcr = plotElement.getBoundingClientRect();\n         scale.update(x => getScale(pcr.width, pcr.height));\n       }\n    });\n\n    onMount(() => {\n       ro1.observe(plotElement);\n       ro2.observe(axesElement);\n    });\n\n    onDestroy(() => {\n       ro1.unobserve(plotElement);\n       ro2.unobserve(axesElement);\n    })\n</script>\n\n\n<div class=\"plot {'plot_' + $scale}\"  bind:this={plotElement} class:plot_error=\"{!$isOk}\">\n\n   <!-- plot title and axis labels -->\n   {#if title !== \"\"}<div class=\"axes__title\">{@html title}</div>{/if}\n   {#if yLabel !== \"\"}<div class=\"axes__ylabel\"><span>{@html yLabel}</span></div>{/if}\n   {#if xLabel !== \"\"}<div class=\"axes__xlabel\"><span>{@html xLabel}</span></div>{/if}\n\n   <!-- axes (coordinate system) -->\n   <div class=\"axes-wrapper\" bind:this={axesElement} >\n      <svg on:click={handleClick} on:keydown={handleClick} preserveAspectRatio=\"none\" class=\"axes\">\n\n         <!-- define clipping path -->\n         <defs>\n            <clipPath id=\"{clipPathID}\">\n               <rect style=\"pointer-events:none\" x=\"{cpx[0]}\" y=\"{cpy[1]}\" width = \"{cpx[1] - cpx[0]}\" height=\"{cpy[0] - cpy[1]}\"></rect>\n            </clipPath>\n         </defs>\n\n         <!-- axis and box -->\n         <slot name=\"xaxis\"></slot>\n         <slot name=\"yaxis\"></slot>\n\n         <!-- main plot content -->\n         <g class=\"axes-content\" clip-path=\"url(#{clipPathID})\">\n            <slot></slot>\n         </g>\n\n         <!-- axis and box -->\n         <slot name=\"box\"></slot>\n\n      </svg>\n   {#if !$isOk}\n   <p class=\"message_error\">\n      Axes component was not properly initialized. <br />\n      Add plot series (check that coordinates are numeric) or define axes limits manually.\n   </p>\n   {/if}\n   </div>\n\n\n</div>\n\n<style>\n\n   /* Plot (main container) */\n   .plot {\n      font-family: Arial, Helvetica, sans-serif;\n\n      display: grid;\n      grid-template-columns: min-content auto;\n      grid-template-rows: min-content auto min-content;\n      grid-template-areas:\n         \". title\"\n         \"ylab axes\"\n         \". xlab\";\n\n      box-sizing: border-box;\n      background: #fefefe;\n      min-width: 100px;\n      min-height: 50px;\n      width: 100%;\n      height: 100%;\n      padding: 0;\n      margin: 0;\n   }\n\n   :global(.plot_small) {\n      font-size: 11px;\n   }\n\n   :global(.plot_medium) {\n      font-size: 13px;\n   }\n\n   :global(.plot_large) {\n      font-size: 16px;\n   }\n\n   :global(.plot_error) {\n      display: flex;\n   }\n\n   :global(.plot_error > .axes-wrapper) {\n      display: none;\n   }\n\n   :global(.message_error) {\n      font-size: 1.2em;\n      color: crimson;\n      padding: 1em;\n      box-sizing: border-box;\n      text-align: center;\n   }\n\n   /* Axes (coordinate system) */\n   .axes-wrapper {\n      grid-area: axes;\n      position:relative;\n      box-sizing: border-box;\n      display: flex;\n      width: 100%;\n      height: 100%;\n      padding: 0;\n      margin: 0;\n   }\n\n   :global(.axes) {\n      display: block;\n      box-sizing: border-box;\n      position:absolute;\n\n      padding: 0;\n      margin: 0;\n      height: 100%;\n      width: 100%;\n      max-height: 100%;\n      max-width: 100%;\n      min-height: 100%;\n      min-width: 100%;\n   }\n\n   :global(.axes-content) {\n      padding: 0;\n      margin: 0;\n      height: 100%;\n      width: 100%;\n      max-height: 100%;\n      max-width: 100%;\n      min-height: 100%;\n      min-width: 100%;\n\n   }\n\n   :global(.axes__xlabel) {\n      grid-area: xlab;\n      font-size: 1.0em;\n      font-weight: 600;\n      padding: 0.25em;\n      text-align: center;\n   }\n\n\n   :global(.axes__ylabel) {\n      grid-area: ylab;\n      font-size: 1.0em;\n      font-weight: 600;\n      padding: 0.25em;\n      text-align: center;\n      vertical-align: middle;\n      display: flex;\n   }\n\n   :global(.axes__ylabel > span) {\n      width: 1.5em;\n      line-height: 1.5em;\n      display: inline-block;\n      writing-mode: vertical-rl;\n      transform: rotate(180deg);\n   }\n\n\n   :global(.axes__title) {\n      background: transparent;\n      grid-area: title;\n\n      font-size: 1.3em;\n      font-weight: bold;\n      line-height: 1.2em;\n      padding: 0.5em 0;\n      text-align: center;\n   }\n\n   /* Axis */\n   :global(.axis-labels) {\n      fill: #303030;\n      font-size: 0.95em;\n   }\n\n   /* Data labels */\n   :global(.labels) {\n      fill: #606060;\n      font-size: 0.90em;\n   }\n\n   :global(.labels) {\n      visibility: hidden;\n      transition:visibility 0.25s linear, opacity 0.25s linear;\n      opacity: 0;\n   }\n\n</style>","export const Colors = {\n   \"AXIS_LINE\": \"#303030\",\n   \"AXIS_TICK\": \"#606060\",\n   \"WHITE\":     \"#fff\",\n   \"BLACK\":     \"#000\",\n   \"GRAY\":      \"#909090\",\n   \"MIDDLEGRAY\": \"#dadada\",\n   \"LIGHTGRAY\": \"#f0f0f0\",\n   \"DARKGRAY\":  \"#606060\",\n\n   \"PRIMARY\": \"#2266ff\",\n   \"PRIMARY_TEXT\": \"#333\",\n}\n\n\n","<script>\n   import { getContext } from 'svelte';\n   import { Colors } from './Colors';\n\n   // input parameters\n   export let slot = \"xaxis\";          // slot the component must be placed in\n   export let ticks = undefined;       // vector with numeric tick positions in plot units\n   export let tickLabels = ticks;      // vector with labels for each tick\n   export let showGrid = false;        // logical, show or not grid lines\n\n   // set up tick mode\n   const tickMode = ticks === undefined ? \"auto\" : \"manual\";\n\n   /* sanity checks of input parameters */\n   if (slot !== \"xaxis\") {\n      throw(\"Component XAxis must have \\\"slot='xaxis'\\\" attribute.\")\n   }\n\n   if (ticks !== undefined && !Array.isArray(ticks)) {\n      throw(\"XAxis: 'ticks' must be a vector of numbers.\")\n   }\n\n   if (ticks !== undefined && !(Array.isArray(tickLabels) && tickLabels.length == ticks.length)) {\n      throw(\"XAxis: 'tickLabels' must be a vector of the same size as ticks.\")\n   }\n\n   /* styles for axis and grid lines */\n   const axisLineStyleStr = `stroke:${Colors.DARKGRAY};line-width:1px;`;\n   const gridLineStyleStr = `stroke:${Colors.MIDDLEGRAY};stroke-opacity:${showGrid?1:0};stroke-dasharray:2px;`;\n\n\n   // get axes context and adjust x margins\n   const axes = getContext('axes');\n   axes.addXAxisMargins();\n\n   // get reactive variables needed to compute coordinates\n   const xLim = axes.xLim;\n   const yLim = axes.yLim;\n   const axesWidth = axes.width;\n   const axesHeight = axes.height;\n   const scale = axes.scale;\n   const isOk = axes.isOk;\n\n   // reactive variables for coordinates of axis lines\n   $: x = axes.scaleX($xLim, $xLim, $axesWidth);\n   $: y = axes.scaleY($yLim, $yLim, $axesHeight);\n\n   // reactive variables for ticks and their coordinates\n   $: dy = $scale === \"small\" ? 7 : 10;\n   $: tickNum = axes.TICK_NUM[$scale];\n   $: ticks = tickMode === \"auto\" ? axes.getAxisTicks(undefined, $xLim, tickNum, true) : ticks;\n   $: tickLabels = tickMode === \"auto\" ? ticks : tickLabels;\n   $: ticksX = axes.scaleX(ticks, $xLim, $axesWidth);\n   $: ticksY = y === undefined ? undefined : [y[0], y[0] + dy];\n</script>\n\n{#if $isOk && x !== undefined && y !== undefined }\n   <g class=\"mdaplot__axis mdaplot__xaxis\">\n   {#each ticksX as tx, i}\n      <line x1=\"{tx}\" x2=\"{tx}\" y1=\"{y[0]}\" y2=\"{y[1]}\" style=\"{gridLineStyleStr}\"></line>\n      <line x1=\"{tx}\" x2=\"{tx}\" y1=\"{ticksY[0]}\" y2=\"{ticksY[1]}\" style=\"{axisLineStyleStr}\"></line>\n      <text x=\"{tx}\" y=\"{ticksY[1]}\" dx=\"0\" dy=\"{dy}\" class=\"mdaplot__axis-labels\" dominant-baseline=\"middle\" text-anchor=\"middle\">{tickLabels[i]}</text>\n   {/each}\n   <line x1=\"{x[0]}\" x2=\"{x[1]}\" y1=\"{y[0]}\" y2=\"{y[0]}\"  style=\"{axisLineStyleStr}\"></line>\n   </g>\n{/if}\n\n<style>\n</style>\n","<script>\n   import { getContext } from 'svelte';\n   import { Colors } from './Colors';\n\n   // input parameters\n   export let slot = \"yaxis\";          // slot the component must be placed in\n   export let ticks = undefined;       // vector with numeric tick positions in plot units\n   export let tickLabels = ticks;      // vector with labels for each tick\n   export let showGrid = false;        // logical, show or not grid lines\n   export let las = 1;\n\n   // set up tick mode\n   const tickMode = ticks === undefined ? \"auto\" : \"manual\";\n\n   // TODO: set up tick text translation\n   const transform = las > 1 ? \"\" : \"\";\n\n   /* sanity checks of input parameters */\n   if (slot !== \"yaxis\") {\n      throw(\"Component YAxis must have \\\"slot='yaxis'\\\" attribute.\")\n   }\n\n   if (ticks !== undefined && !Array.isArray(ticks)) {\n      throw(\"YAxis: 'ticks' must be a vector of numbers.\")\n   }\n\n   if (ticks !== undefined && !(Array.isArray(tickLabels) && tickLabels.length == ticks.length)) {\n      throw(\"YAxis: 'tickLabels' must be a vector of the same size as ticks.\")\n   }\n\n   /* styles for axis and grid lines */\n   const axisLineStyleStr = `stroke:${Colors.DARKGRAY};line-width:1px;`;\n   const gridLineStyleStr = `stroke:${Colors.MIDDLEGRAY};stroke-opacity:${showGrid?1:0};stroke-dasharray:2px;`;\n\n\n   // get axes context and adjust x margins\n   const axes = getContext('axes');\n   axes.addYAxisMargins();\n\n   // get reactive variables needed to compute coordinates\n   const xLim = axes.xLim;\n   const yLim = axes.yLim;\n   const axesWidth = axes.width;\n   const axesHeight = axes.height;\n   const scale = axes.scale;\n\n   // reactive variables for coordinates of axis lines\n   $: x = axes.scaleX($xLim, $xLim, $axesWidth);\n   $: y = axes.scaleY($yLim, $yLim, $axesHeight);\n\n   // reactive variables for ticks and their coordinates\n   $: dx = $scale === \"small\" ? -4 : -6;\n   $: tickNum = axes.TICK_NUM[$scale];\n   $: ticks = tickMode === \"auto\" ? axes.getAxisTicks(undefined, $yLim, tickNum, true) : ticks;\n   $: tickLabels = tickMode === \"auto\" ? ticks : tickLabels;\n   $: ticksY = axes.scaleY(ticks, $yLim, $axesHeight);\n   $: ticksX = x === undefined ? undefined : [x[0] + dx, x[0]];\n</script>\n\n{#if x !== undefined && y !== undefined }\n   <g class=\"mdaplot__axis mdaplot__yaxis\">\n   {#each ticksY as ty, i}\n      <line x1=\"{x[0]}\" x2=\"{x[1]}\" y1=\"{ty}\" y2=\"{ty}\" style=\"{gridLineStyleStr}\"></line>\n      <line x1=\"{ticksX[0]}\" x2=\"{ticksX[1]}\" y1=\"{ty}\" y2=\"{ty}\" style=\"{axisLineStyleStr}\" ></line>\n      <text x=\"{ticksX[0]}\" y=\"{ty}\" dx=\"{dx}\" dy=\"{0}\" {transform} style=\"background:red\" class=\"mdaplot__axis-labels\" dominant-baseline=\"middle\" text-anchor=\"end\">{tickLabels[i]}</text>\n   {/each}\n   <line x1=\"{x[0]}\" x2=\"{x[0]}\" y1=\"{y[0]}\" y2=\"{y[1]}\" style=\"{axisLineStyleStr}\" ></line>\n   </g>\n{/if}\n\n<style>\n</style>\n","<script>\n   import { getContext } from 'svelte';\n   import { Colors } from './Colors';\n\n   /* input parameters */\n\texport let left;\n   export let top;\n   export let width;\n   export let height;\n   export let labels = undefined;\n   export let faceColor = Colors.PRIMARY;\n   export let borderColor = faceColor;\n   export let lineWidth = 1;\n   export let title = \"\";\n   export let style = \"series_rect\";\n\n\n   // multiply width and height values if needed\n   if (!Array.isArray(left) || !Array.isArray(top) || left.length < 1 || left.length != top.length) {\n      throw(\"Rectangles: parameters 'left' and 'top' must be vectors of the same size.\")\n   }\n\n   // we make this reactive in case if left and right has been changed but not width\n   const n = left.length;\n   if (!Array.isArray(height)) height = Array(n).fill(height);\n   if (!Array.isArray(width)) width = Array(n).fill(width);\n\n   /* sanity check for input parameters */\n   if (top.length !== n || width.length !== n || height.length !== n) {\n      throw(\"Rectangles: x, y, w and h should have the same length (w and h can be single values).\")\n   }\n\n   if (labels !== undefined && (!Array.isArray(labels) || labels.length !== n)) {\n      throw(\"Rectangles: vector with labels should have the same length as vectors with x and y coordinates.\")\n   }\n\n   // get axes context and reactive variables needed to compute coordinates\n   const axes = getContext('axes');\n   const xLim = axes.xLim;\n   const yLim = axes.yLim;\n   const axesWidth = axes.width;\n   const axesHeight = axes.height;\n\n   // reactive variables for coordinates of data points in pixels\n   $: rx = axes.scaleX(left, $xLim, $axesWidth);\n   $: ry = axes.scaleY(top, $yLim, $axesHeight);\n   $: rw = axes.scaleX(width, $xLim, $axesWidth, true);\n   $: rh = axes.scaleY(height, $yLim, $axesHeight, true);\n\n   // styles for bars and labels\n   $: barsStyleStr = `fill:${faceColor};stroke:${borderColor};stroke-width:${lineWidth}px;`;\n\n</script>\n\n{#if rx !== undefined && ry !== undefined}\n   <g class=\"series {style}\" title={title} style={barsStyleStr}>\n   {#each left as v, i}\n      <rect x={rx[i]} y={ry[i]} width={rw[i]} height={rh[i]} />\n   {/each}\n   </g>\n{/if}\n\n<style>\n</style>\n","<script>\n   import { getContext } from 'svelte';\n   import { Colors } from './Colors';\n   import Rectangles from './Rectangles.svelte';\n\n   /* input parameters */\n   export let slot;\n\n   // check that the box is located in a correct slot\n   if (slot !== \"box\") {\n      throw(\"Component Box must have \\\"slot='box'\\\" attribute.\")\n   }\n\n   // get axes context and reactive variables needed to compute coordinates\n   const axes = getContext('axes');\n   const xLim = axes.xLim;\n   const yLim = axes.yLim;\n   const isOk = axes.isOk;\n\n   // reactive variables for coordinates of box points in pixels\n   $: left = [$xLim[0]];\n   $: top = [$yLim[1]];\n   $: width = [$xLim[1] - $xLim[0]];\n   $: height = [$yLim[1] - $yLim[0]];\n\n</script>\n\n{#if $isOk}\n   <g style=\"pointer-events:none\" class=\"mdaplot__axes-box\">\n      <Rectangles {left} {top} {width} {height} borderColor=\"{Colors.DARKGRAY}\" faceColor=\"transparent\"></Rectangles>\n   </g>\n{/if}\n\n<style>\n</style>\n","import {max, min, rep, seq, subset, sum} from '../stat/index.js';\n\n/**********************************************\n * Functions for manipulations with vectors   *\n **********************************************/\n\n/* Simple functions for arithmetics */\nconst add = (a, b) => a + b;\nconst subtract = (a, b) => a - b;\nconst times = (a, b) => a * b;\nconst divide = (a, b) => a/b;\n\n/**\n * Computes a Euclidean norm of a vector x\n * @param {Array} x — a vector of values\n * @returns a number (the norm)\n */\nexport function norm2(x) {\n\n   if (!isvector(x)) {\n      throw Error(\"Argument 'x' must be a vector.\");\n   }\n\n   return Math.sqrt(sum(x.map(v => v**2)));\n}\n\n/**\n * Replaces subset of values in vector x, specified by indices, with values from vector y\n *\n * @param {Array} x — vector with values to be replaced\n * @param {Array} y — vector with values used for replacement\n * @param {Array} ind — vector of indices to select (starting from 1)\n */\nexport function vreplace(x, y, ind) {\n\n   if (!isvector(x)) {\n      throw Error(\"Argument 'x' must be a vector.\");\n   }\n\n   if (!isvector(y)) {\n      throw Error(\"Argument 'y' must be a vector.\");\n   }\n\n   ind = processIndices(ind, x.length, true);\n\n   if (ind.length !== y.length) {\n      throw Error(\"Number of values in 'ind' should match the number of elements in 'y'.\");\n   }\n\n   let z = subset(x, []);\n   for (let i = 0; i < ind.length; i++) {\n      z[ind[i] - 1] = y[i];\n   }\n\n   return z;\n}\n\n/**\n * Applies a function to each element of a vector\n *\n * @param {Array} x - a vector\n * @param {function} fun - a function which takes a numbers and returns a number\n * @returns {Array} - result of the operation\n */\nexport function vapply(x, fun) {\n\n   if (!isvector(x)) {\n      throw Error(\"Argument 'x' must be a vector.\");\n   }\n\n   return x.map(v => fun(v));\n}\n\n/**\n * Does element by element division of two vectors, or a vector and a scalar\n * (one of the arguments must be a vector)\n *\n * @param {Array|number} x - a vector or a scalar\n * @param {Array|number} y - a vector or a scalar\n * @returns {Array} - result of the multiplication\n */\nexport function vdiv(x, y) {\n   return vop(x, y, divide);\n}\n\n\n/**\n * Does element by element multiplication of two vectors, or a vector and a scalar\n * (one of the arguments must be a vector)\n *\n * @param {Array|number} x - a vector or a scalar\n * @param {Array|number} y - a vector or a scalar\n * @returns {Array} - result of the multiplication\n */\nexport function vmult(x, y) {\n   return vop(x, y, times);\n}\n\n\n/**\n * Does element by element addition of two vectors, or a vector and a scalar\n * (one of the arguments must be a vector)\n *\n * @param {Array|number} x - a vector or a scalar\n * @param {Array|number} y - a vector or a scalar\n * @returns {Array} - result of the addition\n */\nexport function vadd(x, y) {\n   return vop(x, y, add);\n}\n\n\n/**\n * Does element by element subtraction of two vectors, or a vector and a scalar\n * (one of the arguments must be a vector)\n *\n * @param {Array|number} x - a vector or a scalar\n * @param {Array|number} y - a vector or a scalar\n * @returns {Array} - result of the subtraction\n */\nexport function vsubtract(x, y) {\n   return vop(x, y, subtract);\n}\n\n\n/**\n * Does element by element arithmetic operation for two vectors, or for a vector and a scalar\n * (one of the arguments must be a vector)\n *\n * @param {Array|number} x - a vector or a scalar\n * @param {Array|number} y - a vector or a scalar\n * @param {function} op - a function which takes two numbers and return a number\n * @returns {Array} - result of the operation\n */\nexport function vop(x, y, op) {\n\n   // find the longest vector\n   const n = x.length | y.length;\n\n   if (n < 1) {\n      throw Error(\"One of the arguments must be a vector.\");\n   }\n\n   if (!isvector(y)) {\n      y = rep(y, n);\n   }\n\n   if (!isvector(x)) {\n      x = rep(x, n);\n   }\n\n   if (x.length !== y.length) {\n      throw Error(\"Dimensions of 'x' and 'y' mismatch.\");\n   }\n\n   let res = Array(n).fill(0);\n   for (let i = 0; i < n; i++) {\n      res[i] = op(x[i], y[i]);\n   }\n\n   return res;\n}\n\n/**\n * Checks if argument is a vector (1D Array)\n * @param {any} X - an object/variable\n * @returns {boolean} - result of check\n */\nexport function isvector(X) {\n\n   if (!isarray(X)) return false;\n   if (Array.isArray(X[0])) return false;\n\n   return true;\n}\n\n\n/**\n * Computes a dot product of two vectors\n * @param {Array} x - a vector of values (1D Array)\n * @param {Array} y - a vector of values (same length as x)\n * @returns {Number} - result of dot product of the two vectors\n */\nexport function vdot(x, y) {\n\n   if (!isvector(x)) {\n      throw Error(\"Argument 'x' must be a vector of numbers.\");\n   }\n\n   if (!isvector(y)) {\n      throw Error(\"Argument 'y' must be a vector of numbers.\");\n   }\n\n   if (x.length != y.length) {\n      throw Error(\"Vectors 'x' and 'y' must have the same length.\");\n   }\n\n   let res = 0;\n   for (let i = 0; i < x.length; i++) {\n      res = res + x[i] * y[i];\n   }\n\n   return res;\n}\n\n\n/**********************************************\n * Functions for manipulations with matrices  *\n **********************************************/\n\n\nexport function cbind(X, Y) {\n\n   if (!isarray(X) || !isarray(Y)) {\n      throw Error(\"Both 'X' and 'Y' must arrays (matrices or vectors).\");\n   }\n\n   if (isvector(X)) {\n      X = [X];\n   }\n\n   if (isvector(Y)) {\n      Y = [Y];\n   }\n\n   if (nrow(X) !== nrow(Y)) {\n      throw Error(\"Number of rows (or vector elements) in X and Y must be be the same.\");\n   }\n\n   return X.concat(Y);\n}\n\nexport function rbind(X, Y) {\n\n   if (!isarray(X) || !isarray(Y)) {\n      throw Error(\"Both 'X' and 'Y' must arrays (matrices or vectors).\");\n   }\n\n   if (isvector(X)) {\n      X = transpose([X]);\n   }\n\n   if (isvector(Y)) {\n      Y = transpose([Y]);\n   }\n\n   if (ncol(X) !== ncol(Y)) {\n      throw Error(\"Number of columns (or vector elements) in X and Y must be be the same.\");\n   }\n\n\n   return transpose(cbind(transpose(X), transpose(Y)));\n}\n/**\n * Check row or column indices\n * @param {Array|number} ind — vector or a value with indices\n * @param {number} n — number of rows or columns in original matrix\n * @param {number} fill — logical, if 'true' and 'ind' is empty, will generate values from 1 to n\n * @returns array with indices\n */\nfunction processIndices(ind, n, fill) {\n   if (!Array.isArray(ind)) {\n      ind = [ind];\n   }\n\n   if (ind.length > 0 && (min(ind) < 1 || max(ind) > n)) {\n      throw Error(\"Wrong values for indices.\");\n   }\n\n   if (ind.length === 0 && fill) {\n      ind = seq(1, n);\n   }\n\n   return ind;\n}\n\n/**\n * Creates a subset of matrix X specified by row and column indices\n *\n * If all rows or all columns must be selected provide empty array, [], as indices.\n *\n * @param {Array} X — matrix with values\n * @param {Array} rowInd — vector of row indices to select (starting from 1)\n * @param {Array} colInd — vector of column indices to select (starting from 1)\n * @param {string} method - what to do with values (\"select\" or \"remove\")\n */\nexport function msubset(X, rowInd, colInd, method) {\n\n   if (!ismatrix(X)) {\n      throw Error(\"Argument 'X' must be a matrix.\");\n   }\n\n   colInd = processIndices(colInd, ncol(X), method === \"select\");\n   rowInd = processIndices(rowInd, nrow(X), false);\n\n   if (method === \"remove\" || colInd.length === 0) {\n      colInd = subset(seq(1, ncol(X)), colInd, \"remove\");\n   }\n\n   let Y = Array(colInd.length);\n   for (let c = 0; c < colInd.length; c++) {\n      Y[c] = subset(X[colInd[c] - 1], rowInd, method);\n   }\n\n   return Y;\n}\n\n\n/**\n * Replaces subset of values in matrix X, specified by row and column indices, with values from matrix Y\n *\n * If all rows or all columns must be taken provide empty array, [], as indices.\n *\n * @param {Array} X — matrix with values to be replaced\n * @param {Array} Y — matrix with values used for replacement\n * @param {Array} rowInd — vector of row indices to select (starting from 1)\n * @param {Array} colInd — vector of column indices to select (starting from 1)\n */\nexport function mreplace(X, Y, rowInd, colInd) {\n\n   if (!ismatrix(X)) {\n      throw Error(\"Argument 'X' must be a matrix.\");\n   }\n\n   rowInd = processIndices(rowInd, nrow(X), true);\n   colInd = processIndices(colInd, ncol(X), true);\n\n   if (rowInd.length !== nrow(Y)) {\n      throw Error(\"Number of values in 'rowInd' should match the number of rows in 'Y'.\");\n   }\n\n   if (colInd.length !== ncol(Y)) {\n      throw Error(\"Number of values in 'colInd' should match the number of columns in 'Y'.\");\n   }\n\n   let Z = msubset(X, [], []);\n   for (let c = 0; c < colInd.length; c++) {\n      for (let r = 0; r < rowInd.length; r++) {\n         Z[colInd[c] - 1][rowInd[r] - 1] = Y[c][r];\n      }\n   }\n\n   return Z;\n}\n\n\n/**\n * Computes XY' product\n *\n * @param {Array} X - a matrix\n * @param {Array} Y - a matrix\n * @returns {Array} - result of the product\n */\nexport function tcrossprod(X, Y) {\n\n   if (!Y) {\n      Y = msubset(X, [], []);\n   }\n\n   if (!ismatrix(X)  || !ismatrix(Y)) {\n      throw Error(\"Both arguments must be matrices (2D Arrays).\");\n   }\n\n   return mdot(X, transpose(Y));\n}\n\n\n/**\n * Computes X'Y product\n *\n * @param {Array} X - a matrix\n * @param {Array} Y - a matrix\n * @returns {Array} - result of the product\n */\nexport function crossprod(X, Y) {\n\n   if (!Y) {\n      Y = msubset(X, [], []);\n   }\n\n   if (!ismatrix(X)  || !ismatrix(Y)) {\n      throw Error(\"Both arguments must be matrices (2D Arrays).\");\n   }\n\n   return mdot(transpose(X), Y);\n}\n\n\n/**\n * Does element by element operation of two matrices, a matrix and a scalar or a matrix and a vector\n *\n * if second argument is a vector, function checks its dimension. If it has the same number of elements\n * as number of rows in 'X' it will be applied to every column of 'X'. If it has the same number of\n * elements as number of columns in 'X', it will be applied to every row.\n *\n * @param {Array} X - a matrix\n * @param {Array|number} Y - a matrix, a vector or a scalar\n * @returns {Array} - result of the addition\n */\nexport function mop(X, Y, op) {\n\n   if (!ismatrix(X)) {\n      throw Error(\"Argument 'X' must be a matrix (2D Array).\");\n   }\n\n   const nrows = nrow(X);\n   const ncols = ncol(X);\n\n   if (!ismatrix(Y)) {\n      Y = tomatrix(Y, nrows, ncols);\n   }\n\n   if (nrow(X) !== nrow(Y) || ncol(X) !== ncol(Y)) {\n      throw Error(\"Dimensions of 'X' and 'Y' mismatch.\");\n   }\n\n   let res = zeros(nrows, ncols);\n   for (let i = 0; i < nrows; i++) {\n      for (let j = 0; j < ncols; j++) {\n         res[j][i] = op(X[j][i], Y[j][i])\n      }\n   }\n\n   return res;\n}\n\n\n/**\n * Does element by element division of two matrices, a matrix and a scalar or a matrix and a vector\n *\n * if second argument is a vector, function checks its dimension. If it has the same number of elements\n * as number of rows in 'X' it will be applied to every column of 'X'. If it has the same number of\n * elements as number of columns in 'X', it will be applied to every row.\n *\n * @param {Array} X - a matrix\n * @param {Array|number} Y - a matrix, a vector or a scalar\n * @returns {Array} - result of the multiplication\n */\nexport function mdiv(X, Y) {\n   return mop(X, Y, divide);\n}\n\n\n/**\n * Does element by element addition of two matrices, a matrix and a scalar or a matrix and a vector\n *\n * if second argument is a vector, function checks its dimension. If it has the same number of elements\n * as number of rows in 'X' it will be applied to every column of 'X'. If it has the same number of\n * elements as number of columns in 'X', it will be applied to every row.\n *\n * @param {Array} X - a matrix\n * @param {Array|number} Y - a matrix, a vector or a scalar\n * @returns {Array} - result of the addition\n */\nexport function madd(X, Y) {\n   return mop(X, Y, add);\n}\n\n/**\n * Does element by element subtraction of two matrices, a matrix and a scalar or a matrix and a vector\n *\n * if second argument is a vector, function checks its dimension. If it has the same number of elements\n * as number of rows in 'X' it will be applied to every column of 'X'. If it has the same number of\n * elements as number of columns in 'X', it will be applied to every row.\n *\n * @param {Array} X - a matrix\n * @param {Array|number} Y - a matrix, a vector or a scalar\n * @returns {Array} - result of the subtraction\n */\nexport function msubtract(X, Y) {\n   return mop(X, Y, subtract);\n}\n\n\n/**\n * Does element by element multiplication of two matrices, a matrix and a scalar or a matrix and a vector\n *\n * if second argument is a vector, function checks its dimension. If it has the same number of elements\n * as number of rows in 'X' it will be applied to every column of 'X'. If it has the same number of\n * elements as number of columns in 'X', it will be applied to every row.\n *\n * @param {Array} X - a matrix\n * @param {Array|number} Y - a matrix, a vector or a scalar\n * @returns {Array} - result of the multiplication\n */\nexport function mmult(X, Y) {\n   return mop(X, Y, times);\n}\n\n\n/**\n * Computes inner (dot) product of two matrices\n * @param {Array} X - a matrix (array of vectors of the same length)\n * @param {Array} Y - a matrix (array of vectors of the same length)\n * @returns {Array} - result of dot product\n */\nexport function mdot(X, Y) {\n\n   if (isvector(X)) {\n      X = [X];\n   }\n\n   if (!ismatrix(X)) {\n      throw Error(\"Argument 'X' must be a vector or a matrix (1D or 2D Array).\");\n   }\n\n   if (isvector(Y)) {\n      Y = [Y];\n   }\n\n   if (!ismatrix(Y)) {\n      throw Error(\"Argument 'Y' must be a vector or a matrix (1D or 2D Array).\");\n   }\n\n\n   if (ncol(X) != nrow(Y)) {\n      throw Error(\"Dimensions of 'X' and 'Y' mismatch.\");\n   }\n\n   const n = nrow(X);\n   const m = ncol(Y);\n   let res = zeros(n, m);\n\n   X = transpose(X);\n   for (let i = 0; i < n; i++) {\n      for (let j = 0; j < m; j++) {\n         res[j][i] = vdot(X[i], Y[j])\n      }\n   }\n\n   return res;\n}\n\n/**\n * Returns a transposed matrix\n * @param {Array} X - a vector or a matrix (1D or 2D Array)\n * @returns {Array} - a transposed\n */\nexport function transpose(X) {\n\n   if (isvector(X)) {\n      X = [X];\n   }\n\n   if (!ismatrix(X)) {\n      throw Error(\"Argument 'X' must be a vector or a matrix (1D or 2D Array).\");\n   }\n\n   return X[0].map((_, colIndex) => X.map(row => row[colIndex]));\n}\n\n/**\n * Creates an identity matrix of size 'n'\n * @param {number} n - number of rows and columns in the matrix\n */\nexport function eye(n) {\n   let res = zeros(n, n);\n   for (let i = 0; i < n; i++) {\n      res[i][i] = 1;\n   }\n\n   return res;\n}\n\n\n/**\n * Returns a vector with values from main diagonal of squared matrix 'x'\n * @param {Array} x - a squared matrix\n * @return vector with diagonal elements\n */\nexport function diag(x) {\n\n   if (!issquaredmat(x)) throw Error(\"Argument 'x' must be a squared matrix.\");\n\n   const n = nrow(x);\n   let res = rep(0, n);\n   for (let i = 0; i < n; i++) {\n      res[i] = x[i][i];\n   }\n\n   return res;\n}\n\n/**\n * Creates a diagonal matrix filled with values from vector 'x'\n * @param {Array} x - a vector with values\n */\nexport function diagm(x) {\n   if (!isvector(x)) throw Error(\"Argument 'x' must be a vector.\");\n\n   const n = x.length;\n   let res = zeros(n, n);\n   for (let i = 0; i < n; i++) {\n      res[i][i] = x[i];\n   }\n\n   return res;\n}\n\n/**\n * Returns a matrix (2D Array) filled with zeros\n * @param {Number} n - number of rows\n * @param {Number} m - number of columns\n * @returns {Array} - the generated matrix\n */\nexport function zeros(n, m) {\n   return matrix(n, m, 0);\n}\n\n\n/**\n * Creates a matrix (2D Array) filled with constant value\n * @param {Number} n - number of rows\n * @param {Number} m - number of columns\n * @param {Number} a - value\n * @returns {Array} - the generated matrix\n */\nexport function matrix(n, m, a) {\n   return [...Array(m)].map(v => Array(n).fill(a));\n}\n\n\n/**\n * Returns number of rows in a matrix\n * @param {Array} X - a vector or a matrix (array of vectors of the same length)\n * @returns {Number} - number of rows\n */\nexport function nrow(X) {\n\n   if (isvector(X)) {\n      // if vector we treat it as column-vector\n      return X.length\n   }\n\n   if (!ismatrix(X)) {\n      throw Error(\"Argument 'X' must be a vector or a matrix (1D or 2D Array).\");\n   }\n\n   return X[0].length;\n}\n\n\n/**\n * Returns number of columns in a matrix\n * @param {Array} X - a vector or a matrix (1D or 2D Array)\n * @returns {Number} - number of rows\n */\nexport function ncol(X) {\n\n\n   if (isvector(X)) {\n      // if vector we treat it as column-vector\n      return 1\n   }\n\n   if (!ismatrix(X)) {\n      throw Error(\"Argument 'X' must be a vector or a matrix (1D or 2D Array).\");\n   }\n\n   return X.length;\n}\n\n/**\n * Converts a scalar or a vector into a matrix\n *\n * if 'x' is a scalar it returns a matrix filled with this value, if 'x' is a vector, function\n * checks its dimension. If it has the same number of elements  as 'nrows' it replicates 'x' as\n * columns of the matrix, if it has the same number of elements as 'ncols', it replicates 'x' as\n * rows of the matrix.\n * @param {Array|number} x - a scalar or a vector of values\n * @param {number} nrows - number of rows in final matrix\n * @param {number} ncols - number of columns in the final matrix\n */\nexport function tomatrix(x, nrows, ncols) {\n\n   if (!isarray(x)) return matrix(nrows, ncols, x);\n\n   if (!isvector(x)) {\n      throw Error(\"Argument 'x' must me a scalar or a vector.\");\n   }\n\n   // if number of elements in vector is the same as number of rows — replicate the vector column wise\n   if (x.length === nrows) return Array(ncols).fill(x);\n\n   // if number of elements in vector is the same as number of columns — replicate the vector row wise\n   if (x.length === ncols) return transpose(Array(nrows).fill(x));\n\n   // if number of elements in vector is the same as product of number of rows and columns — reshape the vector into matrix\n   if (x.length === nrows * ncols) return Array(ncols).fill(null).map((v, i) => subset(x, vadd(seq(1, nrows), nrows * i )));\n\n   throw Error(\"Number of elements in 'x' does not match neither 'nrows' nor 'ncols'.\")\n}\n\n\n/**\n * Checks if argument is a non empty array\n * @param {any} X - an object/variable\n * @returns {boolean} - result of check\n */\nexport function isarray(X) {\n   return Array.isArray(X) && X.length > 0;\n}\n\n\n/**\n * Checks if argument is a matrix (2D Array)\n * @param {any} X - an object/variable\n * @returns {boolean} - result of check\n */\nexport function ismatrix(X) {\n\n   if (!isarray(X)) return false;\n   if (!isarray(X[0])) return false;\n\n   // check that all columns/vectors have the same length\n   if (!X.every(v => v.length == X[0].length)) return false;\n\n   return true;\n}\n\n/**\n * Return true if matrix is squared\n * @param {number[]} X - matrix to check (2D Array)\n * @returns logical value\n */\nexport function issquaredmat(X) {\n   return ismatrix(X) && (nrow(X) === ncol(X));\n}\n\n\n/**\n * Return true if matrix is lower triangular\n * @param {number[]} X - matrix to check (2D Array)\n * @returns logical value\n */\nexport function islowertrianmat(X) {\n   return isuppertrianmat(transpose(X));\n}\n\n\n/**\n * Return true if matrix is diagonal\n * @param {number[]} X - matrix to check (2D Array)\n * @returns logical value\n */\nexport function isdiagmat(X) {\n   if (!issquaredmat(X)) throw Error(\"Argument 'X' must be a squared matrix.\");\n\n   const n = nrow(X);\n   if (nrow(X) != ncol(X)) return false;\n\n   for (let i = 0; i < n; i++) {\n      for (let j = 0; j < n; j++) {\n         if ((i !== j) && Math.abs(X[i][j]) > Number.EPSILON) return false;\n      }\n   }\n\n   return true;\n}\n\n/**\n * Return true if matrix is upper triangular\n * @param {number[]} X - matrix to check (2D Array)\n * @returns logical value\n */\nexport function isuppertrianmat(X) {\n\n   if (!issquaredmat) return false;\n\n   const n = ncol(X);\n   for (let i = 0; i < n; i++)\n      for (let j = i + 1; j < n; j++)\n         if (Math.abs(X[i][j]) > 10**(-10) )\n            return false;\n\n   return true;\n}","<script>\n   /****************************************************\n   * TextLabels component                              *\n   * --------------------                              *\n   * shows a series of text labels on the plot         *\n   * can be used as basis for marker plot              *\n   *****************************************************/\n\n   import { getContext } from 'svelte';\n   import { Colors } from './Colors';\n   import { subset } from 'mdatools/stat';\n   import { vmult } from 'mdatools/matrix';\n\n   // input parameters\n\texport let xValues;\n   export let yValues;\n   export let labels;\n   export let pos = 0;\n   export let faceColor = Colors.PRIMARY_TEXT;\n   export let borderColor = \"transparent\";\n   export let borderWidth = 0;\n   export let textSize = 1;\n   export let style = \"\";\n   export let title = \"series_text\";\n\n\n   // function to prepare values for variables 'label' and 'pos'\n   function processValues(v, n, name) {\n      if (!Array.isArray(v)) return Array(n).fill(v);\n      if (v.length !== n) {\n         throw(`TextLabels: parameter ${name} must be a single number or a vector of the same size as 'x' and 'y'.`)\n      }\n      return v;\n   }\n\n   // sanity check for input parameters\n   if (!Array.isArray(xValues) || !Array.isArray(yValues) || xValues.length !== yValues.length) {\n      throw(\"TextLabels: parameters 'xValues' and 'yValues' must be vectors of the same length.\")\n   }\n\n   // prepare values for labels and positions\n   $: labelsLocal = processValues(labels, xValues.length);\n   $: posLocal = pos === 0 ? pos : processValues(pos, xValues.length);\n\n   // get axes context and reactive variables needed to compute coordinates\n   const axes = getContext('axes');\n   const xLim = axes.xLim;\n   const yLim = axes.yLim;\n   const axesWidth = axes.width;\n   const axesHeight = axes.height;\n   const scale = axes.scale;\n\n   // reactive variables for coordinates of data points in pixels\n   $: x = axes.scaleX(xValues, $xLim, $axesWidth);\n   $: y = axes.scaleY(yValues, $yLim, $axesHeight);\n   $: dx = pos === 0 ? 0 : subset(vmult([0, 1, 0, -1], axes.LABELS_MARGIN[$scale]), posLocal)\n   $: dy = pos === 0 ? 0 : subset(vmult([1, 0, -1, 0], axes.LABELS_MARGIN[$scale]), posLocal)\n   $: textAnchors = pos === 0 ? \"middle\" : subset([ \"middle\", \"start\", \"middle\", \"end\"], posLocal);\n\n   // styles for the elements\n   $: textStyleStr = `dominant-baseline:middle;fill:${faceColor};stroke-width:${borderWidth}px;stroke:${borderColor};\n      font-size:${textSize}em; text-anchor:middle;`;\n</script>\n\n{#if x !== undefined && y !== undefined}\n   <g class=\"series {style}\" title={title} style={textStyleStr} >\n\n   {#if pos === 0}\n   {#each x as v, i}\n      <text data-id={i} x={x[i]} y={y[i]}>{@html labelsLocal[i]}</text>\n   {/each}\n\n   {:else}\n   {#each x as v, i}\n      <text data-id={i} x={x[i]} y={y[i]} dx={dx[i]} dy={dy[i]} text-anchor={textAnchors[i]}>{@html labelsLocal[i]}</text>\n   {/each}\n   {/if}\n\n   </g>\n{/if}\n\n<style>\n   text, text > :global(tspan) {\n      cursor: default;\n      user-select: none;\n      dominant-baseline: middle;\n   }\n</style>","<script>\n\n   import { getContext } from 'svelte';\n   import { mrange } from 'mdatools/stat';\n   import { Colors } from './Colors';\n   import TextLabels from './TextLabels.svelte';\n\n   // input parameters\n\texport let xValues;\n   export let yValues;\n   export let marker = 1\n   export let title = \"\";\n   export let faceColor = \"transparent\";\n   export let borderColor = Colors.PRIMARY;\n   export let borderWidth = 1;\n   export let markerSize = 1;\n\n   // TODO: implement later\n   //export let labels = yValues;\n   //export let showLabels = \"no\"; // can be \"no\", \"hover\", \"always\"\n\n   /* constants for internal use */\n   const markers = [\"●\", \"◼\", \"▲\", \"▼\", \"⬥\", \"+\", \"*\", \"⨯\"];\n   let markerSymbol;\n\n   /* sanity check of input parameters */\n   if (typeof(marker) !== \"number\" || marker < 1 || marker > markers.length) {\n      throw(`ScatterSeries: parameter 'marker' must be a number from 1 to ${markers.length}.\"`);\n   }\n\n   // to access shared parameters and methods from Axes\n   const axes = getContext('axes');\n\n   /* reactive actions related to x-values, fires when there are changes in:\n    * - xValues\n    * - marker\n    */\n   $: {\n      if (!Array.isArray(xValues)) {\n         throw(\"ScatterSeries: parameter 'xValues' must be a numeric vector.\");\n      }\n\n      const xValuesRange = mrange(xValues, 0.05);\n      axes.adjustXAxisLimits(xValuesRange);\n\n      markerSymbol = \"\";\n      markerSymbol = markers[marker - 1];\n   }\n\n   /* reactive actions related to y-values, fires when there are changes in:\n    * - yValues\n    */\n   $: {\n      if (!Array.isArray(yValues) || xValues.length != yValues.length) {\n         throw(\"BarSeries: parameter 'yValues' must be a numeric vector of the same length as 'xValues'.\");\n      }\n\n      const yValuesRange = mrange(yValues, 0.05);\n      axes.adjustYAxisLimits(yValuesRange);\n   }\n</script>\n\n<TextLabels\n   {xValues} {yValues} {faceColor} {borderColor} {borderWidth} {title}\n   style=\"series_scatter\"\n   labels={markerSymbol}\n   textSize={markerSize}\n/>\n\n","<script>\n   import { getContext } from 'svelte';\n   import { mrange } from 'mdatools/stat';\n   import { Colors } from './Colors';\n\n   // input parameters\n\texport let xValues;\n   export let yValues;\n   export let title = \"\";\n   export let lineWidth = 1;\n   export let lineColor = Colors.PRIMARY;\n   export let lineType = 1;\n\n   /* sanity check of input parameters */\n   if (!Array.isArray(xValues) || !Array.isArray(yValues) || xValues.length != yValues.length) {\n      throw(\"LineSeries: parameters 'xValues' and 'yValues' must be numeric vectors of the same length.\");\n   }\n\n   // compute ranges for x and y values\n   const xValuesRange = mrange(xValues, 0.05);\n   const yValuesRange = mrange(yValues, 0.05);\n\n   // get axes context and adjust axes limits\n   const axes = getContext('axes');\n   axes.adjustXAxisLimits(xValuesRange);\n   axes.adjustYAxisLimits(yValuesRange);\n\n   // get reactive variables needed to compute coordinates\n   const xLim = axes.xLim;\n   const yLim = axes.yLim;\n   const axesWidth = axes.width;\n   const axesHeight = axes.height;\n   const scale = axes.scale;\n\n   // reactive variables for coordinates of data points in pixels\n   $: x = axes.scaleX(xValues, $xLim, $axesWidth);\n   $: y = axes.scaleY(yValues, $yLim, $axesHeight);\n   $: p = x !== undefined && y !== undefined ? x.map((v, i) => `${v},${y[i]}`).join(' ') : undefined;\n   $: lineStyleStr = `fill:transparent;stroke:${lineColor};stroke-width: ${lineWidth}px;\n      stroke-dasharray:${axes.LINE_STYLES[$scale][lineType - 1]}`;\n</script>\n\n{#if p !== undefined}\n   <g class=\"series series_line\" style={lineStyleStr} title={title}>\n      <polyline class=\"line\" points={p}/>\n   </g>\n{/if}\n\n<style>\n</style>\n","<script>\n   let showHelp = false;\n\n   const toggleHelp = () => showHelp = !showHelp;\n\n   const handleKeyPress = e => {\n      if (e.key === 'h') toggleHelp();\n   };\n\n   // $: showHelp = window.location.hash === \"#help\";\n</script>\n\n<svelte:window on:keypress={handleKeyPress}/>\n<main class=\"graasta-app\">\n\n   <div class=\"content\">\n      <slot></slot>\n   </div>\n\n   {#if showHelp}\n   <div class=\"helptext\">\n      <slot name=\"help\"></slot>\n   </div>\n   {/if}\n\n</main>\n\n<style>\n\n/* main styles for graasta-app and children */\n:global(#graasta-app-container) {\n   height: max-content;\n   width: 100% !important;\n}\n\n.graasta-app {\n   font-family: Helvetica, Areal, Verdana, sans-serif;\n   display: block;\n   position: relative;\n   font-size: max(14px, 1vw);\n\n   aspect-ratio: 16/9;\n   min-width: 800px;\n\n   width: 100%;\n   height: auto;\n\n   box-sizing: border-box;\n   padding: 0;\n   margin: 0 auto;\n   background: #fdfdfd;\n}\n\n.graasta-app  * {\n   box-sizing: border-box;\n   margin: 0;\n   padding: 0;\n}\n\n.graasta-app :glbal(.plot) {\n   box-shadow: 0px 0px 5px  #30303020;\n}\n\n.graasta-app .content {\n   width: 100%;\n   height: 100%;\n}\n\n/* help text and button */\n\n.helptext {\n   font-family: 'Open Sans', sans-serif;\n\n   position: absolute;\n   top: 0;\n   width: 0;\n   left: 0;\n   bottom: 0;\n\n   z-index: 999;\n   background: white;\n   box-sizing: border-box;\n\n   width: 100%;\n   height: 100%;\n   padding: 1em;\n   margin: 0;\n   line-height: 1.35em;\n   font-size: 1em;\n   color: #303030;\n}\n\n.helptext :global(h2) {\n   padding: 1.25em 0 0.5em 0;\n   font-size: 1.2em;\n}\n\n.helptext :global(p) {\n   padding: 0 0 0.5em 0;\n   line-height: 1.5em;\n   font-size: 1em;\n}\n\n</style>","export let colors = {\n   plots: {\n      // population colors\n      POPULATIONS_PALE: [\"#33668820\", \"#ff990020\"],\n      POPULATIONS: [\"#33668850\", \"#ff990050\"],\n      SAMPLES: [\"#336688\", \"#ff9900\"],\n\n      // statistics on plot legend\n      STAT_NAME: \"#808080\",\n      STAT_VALUE: \"#202020\"\n   }\n};\n\n\nexport function formatLabels(labels) {\n\n   if (!Array.isArray(labels)) labels = [labels];\n   let labelsStr = Array(length = labels.length);\n\n\n   for (let i = 0; i < labels.length; i++) {\n      labelsStr[i] =    \"<tspan fill=\" + colors.plots.STAT_NAME + \">\" + labels[i].name + \":</tspan> \" + labels[i].value;\n   }\n\n   return labelsStr;\n}","<script>\n   export let errormsg = undefined;\n   export let legend = \"\";\n</script>\n\n<fieldset class=\"app-control-area\">\n   {#if legend !== \"\"}\n   <legend>{legend}</legend>\n   {/if}\n   <slot></slot>\n   {#if errormsg}<div class=\"app-control-error\">{errormsg}</div>{/if}\n</fieldset>\n\n<style>\n   .app-control-error {\n      padding: 0.5em 0.5em 0.25em 0.65em;\n      font-size: 0.75em;\n      color: crimson;\n   }\n\n   fieldset {\n      background: #f4f4f4;\n      margin: 0;\n      box-shadow: 0px 0px 2px  #30303020;\n      border: none;\n      padding: 0.5em;\n   }\n\n   legend {\n      color: #606060;\n      float: left;\n      width: 100%;\n      display: block;\n      margin: 0;\n      padding: 0.25em 0em;\n      font-size: 1.1em;\n      font-weight: bold;\n   }\n</style>","<script>\n   export let id;\n   export let label;\n   export let disable = false;\n   export let hidden = false;\n</script>\n\n<div class=\"app-control\" class:hidden class:disable>\n   <div class=\"shield\"></div>\n   <label for={id}>{@html label}</label>\n   <slot></slot>\n</div>\n\n<style>\n   .app-control {\n      font-size: 1em;\n      margin: 0.25em 0 0 0;\n      padding: 0.15em 0.25em;\n      display: flex;\n      align-items: center;\n      justify-content: flex-begin;\n      position: relative;\n   }\n\n\n   .app-control > label {\n      height: 1.5em;\n      line-height: 1.5em;\n      flex: 0 0 90px;\n      max-width: 90px;\n      user-select: none;\n      -webkit-user-select: none;\n      cursor: default\n   }\n\n   .app-control > slot {\n      width: 100%;\n   }\n\n   .shield {\n      display: none;\n   }\n\n   @media(min-width: 959px) {\n      .app-control > label {\n         flex: 0 0 120px;\n         max-width: 120px;\n      }\n   }\n\n   @media(min-width: 1279px) {\n      .app-control > label {\n         flex: 0 0 150px;\n         max-width: 150px;\n      }\n   }\n\n   /* disabled styles */\n   .app-control.disable > label{\n      color: #b0b0b0;\n   }\n\n   .app-control.hidden {\n      visibility: hidden;\n   }\n\n   .app-control.disable > .shield {\n      display: block;\n      background: #ffffff50;\n      position: absolute;\n      top: 0;\n      left: 0;\n      width: 100%;\n      height: 100%;\n      z-index: 999;\n   }\n</style>","<script>\n   import AppControl from \"./AppControl.svelte\";\n\n   export let id;\n   export let label;\n   export let text;\n   export let disable = false;\n   export let hidden = false;\n\n</script>\n\n<AppControl id={id} label={label} {disable} {hidden}>\n   <button on:click>{text}</button>\n</AppControl>\n\n<style>\n\n\nbutton {\n   height: 1.5em;\n   font-size: 1em;\n   padding: 0 1em;\n   margin: 0;\n   color: #606060;\n   background: #e0e0e0;\n   box-shadow: none;\n   border: none;\n   border-radius: 3px;\n   white-space: nowrap;\n   user-select: none;\n}\n\nbutton:hover {\n   color: #fafafa;\n   background: #606060;\n}\n\n</style>","<script>\n   import { fade } from 'svelte/transition';\n   import AppControl from \"./AppControl.svelte\";\n\n   export let id;\n   export let label;\n   export let options;\n   export let value = options[0];\n   export let disable = false;\n   export let hidden = false;\n</script>\n\n<AppControl {id} {label} {disable} {hidden} >\n\n   <div class=\"selector\">\n      {#each options as option (option)}\n      <div on:click={() => value = option} on:keydown={() => value = option} class=\"option\" class:selected={option==value}>{option}</div>\n      {/each}\n\n   </div>\n   <input name=\"{id}\" bind:value=\"{value}\">\n</AppControl>\n\n<style>\n   input {\n      display: none;\n   }\n\n   .selector {\n      position: relative;\n      box-sizing: border-box;\n      display: inline-block;\n      flex: 0 0 auto;\n      background: #e0e0e0;\n\n      font-size: 1em;\n      height: 1.5em;\n      line-height: 1.5em;\n      margin: 0;\n      padding: 0;\n      width: auto;\n      border-radius: 2px;\n\n      user-select: none;\n      -webkit-user-select: none;\n      -moz-user-select: none;\n\n      display: flex;\n   }\n\n   .option {\n      cursor: default;\n      padding: 0 0.5em;\n      margin: 0 1px;\n      color: #606060;\n      transition: background-color 0.5s ease;\n   }\n\n   .option.selected {\n      border-radius: 3px;\n      background-color: #606060;\n      color: #fefefe;\n   }\n\n</style>","<script>\n   import { ppoints, qnorm, mean, quantile, diff, mrange, sort } from \"mdatools/stat\";\n   import { Axes, XAxis, YAxis, Box, LineSeries, ScatterSeries } from \"svelte-plots-basic\";\n   import { colors } from \"../../shared/graasta\";\n\n   export let sample;\n\n   export let borderColor = colors.plots.SAMPLES[0];\n   export let lineColor = colors.plots.SAMPLES[0];\n   export let markerSize = 1.25;\n   export let borderWidth = 2;\n\n   export let lineType = 2;\n   export let xLabel = \"Sample values\";\n   export let yLabel = \"Normal quantiles, z\";\n\n   export let limX = undefined;\n   export let limY = undefined;\n\n   $: sx = sort([].concat.apply([], sample));\n   $: sampSize = sx.length;\n   $: sp = ppoints(sampSize);\n   $: sz = sp.map(v => qnorm(v));\n\n   // theoretical line\n   const lp = [0.25, 0.75];\n   const lz = [-0.6744898,  0.6744898];\n\n   $: lx = quantile(sx, lp);\n   $: la = diff(lx) / diff(lz);\n   $: lb = mean(lx) - la * mean(lz)\n   $: llx = [-4, 4];\n   $: lly = [-4 * la + lb, 4 * la + lb];\n</script>\n\n<Axes {yLabel} {xLabel} limX={limX ? limX : mrange(sz)} limY={limY ? limY : mrange(sx)}>\n   <slot></slot>\n   <LineSeries xValues={llx} yValues={lly} {lineType} {lineColor} />\n   <ScatterSeries xValues={sz} yValues={sx} {borderWidth} {markerSize} {borderColor}/>\n\n   <XAxis slot=\"xaxis\" showGrid={true}></XAxis>\n   <YAxis slot=\"yaxis\" showGrid={true}></YAxis>\n   <Box slot=\"box\"></Box>\n</Axes>\n","<script>\n   export let values;\n   export let decNum;\n</script>\n\n{#if decNum >= 0}\n   {#each values as value}\n   <td class=\"datatable__value datatable__value_number\">{isNaN(value) ? \"\" : value.toFixed(decNum)}</td>\n   {/each}\n{:else}\n   {#each values as value}\n   <td class=\"datatable__value datatable__value_text\">{@html value}</td>\n   {/each}\n{/if}\n\n<style>\n\n   .datatable__value {\n      vertical-align: middle;\n      padding: 0.25em 0.1em;\n      margin: 0;\n      border-spacing: 0;\n      border-collapse: collapse;\n   }\n\n   .datatable__value_number {\n      text-align: right;\n   }\n</style>","<script>\n   import { min, diff } from \"mdatools/stat\";\n   import DataTableValues from \"./DataTableValues.svelte\";\n\n   export let variables = [];\n   export let horizontal = false;\n   export let decNum = undefined;\n\n   $: decNum === undefined ? variables.map(v => getDecimalsNum(v.values)) : decNum;\n   const getDecimalsNum = (x) => {\n      const dec = Math.log10(min(diff(x).map(v => Math.abs(v))));\n      return Math.abs(dec < 0 ? Math.floor(dec) : Math.ceil(dec));\n   }\n</script>\n\n<table class=\"datatable\">\n\n{#if horizontal }\n   {#each variables as {label, values}, i}\n   <tr class=\"datatable__row\">\n      <td class=\"datatable__label\">{@html label}</td>\n      <DataTableValues {values} decNum={decNum[i]} />\n   </tr>\n   {/each}\n{:else}\n   <tr class=\"datatable__row\">\n      {#each variables as {label, values}}\n      <td class=\"datatable__label\">{@html label}</td>\n      {/each}\n   </tr>\n   {#each variables[0].values as value, j}\n   <tr class=\"datatable__row\">\n      {#each variables as {label, values}, i}\n      <DataTableValues values={[values[j]]} decNum={decNum[i]} />\n      {/each}\n   </tr>\n   {/each}\n{/if}\n</table>\n\n<style>\n   .datatable {\n      margin: 0;\n      border-spacing: 0;\n      border-collapse: collapse;\n   }\n\n   .datatable__label {\n      vertical-align: middle;\n      padding: 0.25em 0.1em;\n      margin: 0;\n      border-spacing: 0;\n      border-collapse: collapse;\n   }\n\n   .datatable__label {\n      font-weight: bold;\n      vertical-align: middle;\n   }\n</style>","<script>\n   import {ppoints, sd, seq, pnorm, rnorm, skewness, kurtosis, mean} from 'mdatools/stat';\n   import {LineSeries} from \"svelte-plots-basic\";\n\n   // shared components\n   import {default as StatApp} from \"../../shared/StatApp.svelte\";\n   import { colors } from \"../../shared/graasta\";\n\n   // shared components - contrls\n   import AppControlArea from \"../../shared/controls/AppControlArea.svelte\";\n   import AppControlButton from \"../../shared/controls/AppControlButton.svelte\";\n   import AppControlSwitch from \"../../shared/controls/AppControlSwitch.svelte\";\n\n   // shared components - plots\n   import QQPlot from \"../../shared/plots/QQPlot.svelte\";\n\n   // shared tables\n   import DataTable from \"../../shared/tables/DataTable.svelte\";\n\n   let showPopLine = \"off\";\n   let sampleSize = 6;\n\n   const sampleColor = colors.plots.SAMPLES[0];\n   const populationColor = colors.plots.POPULATIONS[0];\n\n   const popMean = 170;\n   const popStd = 10;\n   const limX = [-3.5, 3.5];\n   const limY = [popMean - 3.5 * popStd, popMean + 3.5 * popStd];\n\n   const zseq = seq(-5, 5, 100000);\n   const pseq = pnorm(zseq);\n\n   const closestIndex = (x, a) => {\n      const c =  x.reduce((prev, curr) => Math.abs(curr - a) < Math.abs(prev - a) ? curr : prev);\n      return x.indexOf(c);\n   }\n\n   const getSample = function(n) {\n      return(rnorm(n, popMean, popStd).sort((a, b) => a - b));\n   }\n\n   $: si = Array.from({length: sampleSize}, (v, i) => i + 1);\n   $: sp = ppoints(sampleSize);\n   $: sz = sp.map((v, i) => zseq[closestIndex(pseq, v)]);\n   $: sx = getSample(sampleSize);\n</script>\n\n<StatApp>\n   <div class=\"app-layout\">\n\n      <!-- QQ plot with corresponding data  -->\n      <div class=\"app-qqplot-area\">\n         <QQPlot {limX} {limY} sample={sx} yLabel=\"Height, cm\" xLabel=\"Standard score, z\">\n            {#if showPopLine === \"on\"}\n            <LineSeries xValues={limX} yValues={limY} lineType={1} lineWidth={2} lineColor={populationColor} />\n            {/if}\n         </QQPlot>\n      </div>\n\n      <!-- Tables with values and quantiles -->\n      <div class=\"app-qqtable-area\">\n         <DataTable\n            variables={[\n               {label: \"i\", values: si},\n               {label: \"x\", values: sx},\n               {label: \"p\", values: sp},\n               {label: \"z\", values: sz}\n            ]}\n            decNum={[0, 1, 3, 2]}\n            horizontal={true}\n         />\n      </div>\n\n      <!-- control elements -->\n      <div class=\"app-stattable-area\">\n         <DataTable\n            variables={[\n               {label: \"\", values: [\"Mean\", \"St. dev.\", \"Skewness\", \"Kurtosis\"]},\n               {label: \"Sample\", values: [mean(sx), sd(sx), skewness(sx), kurtosis(sx)]},\n               {label: \"Population\", values: [popMean, popStd, 0, 3.0]}\n            ]}\n            decNum={[0, 1, 1]}\n            horizontal={false}\n         />\n      </div>\n\n      <div class=\"app-controls-area\">\n         <AppControlArea>\n            <AppControlSwitch id=\"popLine\" label=\"Population\" bind:value={showPopLine} options={[\"on\", \"off\"]} />\n            <AppControlSwitch id=\"sampleSize\" label=\"Sample size\" bind:value={sampleSize} options={[4, 6, 9, 12]} />\n            <AppControlButton id=\"newSample\" label=\"Sample\" text=\"Take new\" on:click={() => sx = getSample(sampleSize)} />\n         </AppControlArea>\n      </div>\n\n   </div>\n\n   <div slot=\"help\">\n      <h2>Quantile-quantile plot</h2>\n      <p>\n         This app shows how to use quantile-quantile (QQ) plot to check if your values came from normally distributed\n         population. In this case the values (height of people, <em>x</em>) are indeed\n         randomly taken from a population, where they follow normal distribution with mean = 170 cm and standard\n         deviation = 10 cm. The values of the current sample are shown in\n         the large table as row <em>x</em> and on the plot as y-axis values.\n      </p>\n      <p>\n         First, for every value <em>x</em> we compute probability <em>p</em>, to get a value even smaller,\n         similar to what we did when computed percentiles. In this case we use <code>p = (i - 0.5) / n</code>.\n         But if sample size is smaller than 10, the formulla is slightly\n         different: <code>p = (i - 0.375) / (n + 0.25)</code>. For example, if sample size = 6, then the\n         first value (i = 1) will have the following p: <code>p = (1 - 0.375) / (6 + 0.25) = 0.100</code>.\n      </p>\n\n      <p>\n         After that, for every <em>p</em> we find corresponding standard score, <em>z</em>, using ICDF function for\n         normal distribution. For example, if p = 0.100, the z-score can be found to be equal to -1.28. You can check\n         it using app for PDF/CDF/ICDF or in R by running <code>qnorm(0.100)</code>. Finally we make a plot where sample\n         values, <em>x</em> are shown as y-axis and the <em>z</em>-scores are shown\n         as x-axis. In case if values follow normal distribution ideally they have linear dependence on z-scores, so the\n         points will lie close to a straight line, shown as blue. The closer real points are to this line\n         the more likely that they came from normally distributed population.\n      </p>\n   </div>\n</StatApp>\n\n<style>\n\n.app-layout {\n   width: 100%;\n   height: 100%;\n   position: relative;\n   display: grid;\n   grid-template-areas:\n      \"plot stattable\"\n      \"plot controls\"\n      \"plot .\"\n      \"qqtable .\";\n   grid-template-rows: min-content min-content auto min-content;\n   grid-template-columns: 65% 35%;\n}\n\n.app-qqplot-area {\n   grid-area: plot;\n   padding-right: 20px;\n}\n\n.app-qqtable-area {\n   grid-area: qqtable;\n   padding-top: 20px;\n   width: 100%;\n   text-align: center;\n   display: flex;\n   justify-content: center;\n}\n\n.app-stattable-area {\n   grid-area: stattable;\n   padding-right: 20px;\n}\n\n.app-controls-area {\n   grid-area: controls;\n   margin-top: 40px;\n}\n\n:global(.datatable) {\n   width: 100%;\n   color: #404040;\n   text-align: right;\n}\n\n.app-qqtable-area :global(.datatable  td) {\n   font-size: 0.9em;\n   padding: 0.25em 0.5em;\n}\n\n.app-qqtable-area :global(.datatable > tr:first-of-type) {\n   border-bottom: solid 1px #e0e0e0;\n}\n\n.app-qqtable-area :global(.datatable > tr:nth-of-type(2) > td) {\n   font-weight: bold;\n   color: #336688;\n}\n\n</style>","import App from './App.svelte';\n\nconst app = new App({\n\ttarget: document.getElementById(\"graasta-app-container\"),\n});\n\nexport default app;"],"names":["noop","assign","tar","src","k","run","fn","blank_object","run_all","fns","is_function","thing","safe_not_equal","a","b","is_empty","obj","subscribe","store","callbacks","unsub","component_subscribe","component","callback","create_slot","definition","ctx","$$scope","slot_ctx","get_slot_context","get_slot_changes","dirty","lets","merged","len","i","update_slot_base","slot","slot_definition","slot_changes","get_slot_context_fn","slot_context","get_all_dirty_from_scope","length","append","target","node","insert","anchor","detach","destroy_each","iterations","detaching","element","name","svg_element","text","data","space","empty","listen","event","handler","options","attr","attribute","value","children","set_data","set_input_value","input","set_style","key","important","toggle_class","toggle","custom_event","type","detail","bubbles","cancelable","e","current_component","set_current_component","get_current_component","onMount","onDestroy","createEventDispatcher","setContext","context","getContext","bubble","dirty_components","binding_callbacks","render_callbacks","flush_callbacks","resolved_promise","update_scheduled","schedule_update","flush","add_render_callback","add_flush_callback","seen_callbacks","flushidx","saved_component","update","$$","outroing","outros","group_outros","check_outros","transition_in","block","local","transition_out","destroy_block","lookup","update_keyed_each","old_blocks","get_key","dynamic","list","destroy","create_each_block","next","get_context","o","n","old_indexes","new_blocks","new_lookup","deltas","child_ctx","will_move","did_move","new_block","old_block","new_key","old_key","bind","index","create_component","mount_component","customElement","fragment","after_update","new_on_destroy","destroy_component","make_dirty","init","instance","create_fragment","not_equal","props","append_styles","parent_component","ready","ret","rest","nodes","SvelteComponent","$$props","kurtosis","x","m","mean","m4","m2","skewness","m3","min","max","sum","s","cov","y","biased","mx","my","variance","sd","quantile","p","sort","q","h","n1","n2","out","v","seq","step","r","mrange","margin","mn","d","diff","ppoints","rnorm","mu","sigma","pnorm","frac","erf","qnorm","SP1","SP2","C1","C2","a0","a1","a2","a3","b1","b2","b3","c0","c1","c2","c3","d1","d2","e0","e1","e2","e3","f1","f2","res","decreasing","rep","nx","j","subset","indices","method","sign","a4","a5","t","subscriber_queue","writable","start","stop","subscribers","set","new_value","run_queue","subscriber","invalidate","div","span","if_block0","create_if_block_3","if_block1","create_if_block_2","if_block2","create_if_block_1","create_if_block","rect","rect_x_value","rect_y_value","rect_width_value","rect_height_value","div1","div1_class_value","div0","svg","defs","clipPath","g","current","niceNum","localRange","round","exponent","fraction","niceFraction","getScale","width","height","limX","limY","title","xLabel","yLabel","multiSeries","dispatch","AXES_MARGIN_FACTORS","TICK_NUM","LABELS_MARGIN","LINE_STYLES","clipPathID","plotElement","axesElement","axesMargins","xLim","yLim","scale","isOk","addXAxisMargins","$$invalidate","addYAxisMargins","adjustXAxisLimits","newLim","lim","adjustAxisLimits","adjustYAxisLimits","adjustedLim","roundCoords","scaleX","doSizeScale","$isOk","margins","scaleY","ticks","maxTickNum","range","tickSpacing","tickMin","tickMax","dispatchClickEvent","eventName","el","handleClick","ro2","entries","entry","acr","ro1","pcr","$$value","$scale","$yLim","$xLim","$width","$height","cpx","cpy","Colors","line","line_x__value","line_x__value_1","line_y__value","line_y__value_1","t_value","line0","line0_y__value","line0_y__value_1","line1","line1_y__value","line1_y__value_1","text_1","text_1_y_value","if_block","tickLabels","showGrid","tickMode","axisLineStyleStr","gridLineStyleStr","axes","axesWidth","axesHeight","$axesWidth","$axesHeight","dy","tickNum","ticksX","ticksY","line0_x__value","line0_x__value_1","line1_x__value","line1_x__value_1","text_1_x_value","las","transform","dx","left","top","labels","faceColor","borderColor","lineWidth","style","rx","ry","rw","rh","barsStyleStr","times","vmult","vop","op","isvector","X","isarray","raw_value","text_1_dx_value","text_1_dy_value","text_1_text_anchor_value","processValues","xValues","yValues","pos","borderWidth","textSize","labelsLocal","posLocal","textAnchors","textStyleStr","marker","markerSize","markers","markerSymbol","xValuesRange","yValuesRange","polyline","lineColor","lineType","lineStyleStr","main","showHelp","toggleHelp","handleKeyPress","colors","legend_1","fieldset","errormsg","legend","label_1","id","label","disable","hidden","button","click_handler","option","keydown_handler","sample","lp","lz","sx","sampSize","sp","sz","lx","la","lb","lly","llx","td","values","decNum","tr","each_blocks","datatablevalues_changes","table","variables","horizontal","getDecimalsNum","dec","popMean","popStd","div4","div2","div3","showPopLine","sampleSize","populationColor","zseq","pseq","closestIndex","c","prev","curr","getSample","si","App"],"mappings":"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"}