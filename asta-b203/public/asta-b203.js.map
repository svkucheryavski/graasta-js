{"version":3,"file":"asta-b203.js","sources":["../../node_modules/svelte/internal/index.mjs","../../node_modules/mdatools/stat/index.js","../../shared/StatApp.svelte","../../shared/graasta.js","../../shared/controls/AppControl.svelte","../../shared/controls/AppControlButton.svelte","../../shared/controls/AppControlSwitch.svelte","../../shared/controls/AppControlRange.svelte","../../shared/controls/AppControlArea.svelte","../../node_modules/svelte/store/index.mjs","../../node_modules/svelte-plots-basic/src/Axes.svelte","../../node_modules/svelte-plots-basic/src/Colors.js","../../node_modules/svelte-plots-basic/src/XAxis.svelte","../../node_modules/svelte-plots-basic/src/Segments.svelte","../../node_modules/svelte-plots-basic/src/TextLabels.svelte","../../node_modules/svelte-plots-basic/src/TextLegend.svelte","../../node_modules/svelte-plots-basic/src/ScatterSeries.svelte","../../node_modules/svelte-plots-basic/src/LineSeries.svelte","../../node_modules/svelte-plots-basic/src/AreaSeries.svelte","../../shared/plots/MeanPopulationPlot.svelte","../../shared/plots/CIPlot.svelte","../src/MeanCIPlot.svelte","../src/App.svelte","../src/main.js"],"sourcesContent":["function noop() { }\nconst identity = x => x;\nfunction assign(tar, src) {\n    // @ts-ignore\n    for (const k in src)\n        tar[k] = src[k];\n    return tar;\n}\nfunction is_promise(value) {\n    return value && typeof value === 'object' && typeof value.then === 'function';\n}\nfunction add_location(element, file, line, column, char) {\n    element.__svelte_meta = {\n        loc: { file, line, column, char }\n    };\n}\nfunction run(fn) {\n    return fn();\n}\nfunction blank_object() {\n    return Object.create(null);\n}\nfunction run_all(fns) {\n    fns.forEach(run);\n}\nfunction is_function(thing) {\n    return typeof thing === 'function';\n}\nfunction safe_not_equal(a, b) {\n    return a != a ? b == b : a !== b || ((a && typeof a === 'object') || typeof a === 'function');\n}\nlet src_url_equal_anchor;\nfunction src_url_equal(element_src, url) {\n    if (!src_url_equal_anchor) {\n        src_url_equal_anchor = document.createElement('a');\n    }\n    src_url_equal_anchor.href = url;\n    return element_src === src_url_equal_anchor.href;\n}\nfunction not_equal(a, b) {\n    return a != a ? b == b : a !== b;\n}\nfunction is_empty(obj) {\n    return Object.keys(obj).length === 0;\n}\nfunction validate_store(store, name) {\n    if (store != null && typeof store.subscribe !== 'function') {\n        throw new Error(`'${name}' is not a store with a 'subscribe' method`);\n    }\n}\nfunction subscribe(store, ...callbacks) {\n    if (store == null) {\n        return noop;\n    }\n    const unsub = store.subscribe(...callbacks);\n    return unsub.unsubscribe ? () => unsub.unsubscribe() : unsub;\n}\nfunction get_store_value(store) {\n    let value;\n    subscribe(store, _ => value = _)();\n    return value;\n}\nfunction component_subscribe(component, store, callback) {\n    component.$$.on_destroy.push(subscribe(store, callback));\n}\nfunction create_slot(definition, ctx, $$scope, fn) {\n    if (definition) {\n        const slot_ctx = get_slot_context(definition, ctx, $$scope, fn);\n        return definition[0](slot_ctx);\n    }\n}\nfunction get_slot_context(definition, ctx, $$scope, fn) {\n    return definition[1] && fn\n        ? assign($$scope.ctx.slice(), definition[1](fn(ctx)))\n        : $$scope.ctx;\n}\nfunction get_slot_changes(definition, $$scope, dirty, fn) {\n    if (definition[2] && fn) {\n        const lets = definition[2](fn(dirty));\n        if ($$scope.dirty === undefined) {\n            return lets;\n        }\n        if (typeof lets === 'object') {\n            const merged = [];\n            const len = Math.max($$scope.dirty.length, lets.length);\n            for (let i = 0; i < len; i += 1) {\n                merged[i] = $$scope.dirty[i] | lets[i];\n            }\n            return merged;\n        }\n        return $$scope.dirty | lets;\n    }\n    return $$scope.dirty;\n}\nfunction update_slot_base(slot, slot_definition, ctx, $$scope, slot_changes, get_slot_context_fn) {\n    if (slot_changes) {\n        const slot_context = get_slot_context(slot_definition, ctx, $$scope, get_slot_context_fn);\n        slot.p(slot_context, slot_changes);\n    }\n}\nfunction update_slot(slot, slot_definition, ctx, $$scope, dirty, get_slot_changes_fn, get_slot_context_fn) {\n    const slot_changes = get_slot_changes(slot_definition, $$scope, dirty, get_slot_changes_fn);\n    update_slot_base(slot, slot_definition, ctx, $$scope, slot_changes, get_slot_context_fn);\n}\nfunction get_all_dirty_from_scope($$scope) {\n    if ($$scope.ctx.length > 32) {\n        const dirty = [];\n        const length = $$scope.ctx.length / 32;\n        for (let i = 0; i < length; i++) {\n            dirty[i] = -1;\n        }\n        return dirty;\n    }\n    return -1;\n}\nfunction exclude_internal_props(props) {\n    const result = {};\n    for (const k in props)\n        if (k[0] !== '$')\n            result[k] = props[k];\n    return result;\n}\nfunction compute_rest_props(props, keys) {\n    const rest = {};\n    keys = new Set(keys);\n    for (const k in props)\n        if (!keys.has(k) && k[0] !== '$')\n            rest[k] = props[k];\n    return rest;\n}\nfunction compute_slots(slots) {\n    const result = {};\n    for (const key in slots) {\n        result[key] = true;\n    }\n    return result;\n}\nfunction once(fn) {\n    let ran = false;\n    return function (...args) {\n        if (ran)\n            return;\n        ran = true;\n        fn.call(this, ...args);\n    };\n}\nfunction null_to_empty(value) {\n    return value == null ? '' : value;\n}\nfunction set_store_value(store, ret, value) {\n    store.set(value);\n    return ret;\n}\nconst has_prop = (obj, prop) => Object.prototype.hasOwnProperty.call(obj, prop);\nfunction action_destroyer(action_result) {\n    return action_result && is_function(action_result.destroy) ? action_result.destroy : noop;\n}\n\nconst is_client = typeof window !== 'undefined';\nlet now = is_client\n    ? () => window.performance.now()\n    : () => Date.now();\nlet raf = is_client ? cb => requestAnimationFrame(cb) : noop;\n// used internally for testing\nfunction set_now(fn) {\n    now = fn;\n}\nfunction set_raf(fn) {\n    raf = fn;\n}\n\nconst tasks = new Set();\nfunction run_tasks(now) {\n    tasks.forEach(task => {\n        if (!task.c(now)) {\n            tasks.delete(task);\n            task.f();\n        }\n    });\n    if (tasks.size !== 0)\n        raf(run_tasks);\n}\n/**\n * For testing purposes only!\n */\nfunction clear_loops() {\n    tasks.clear();\n}\n/**\n * Creates a new task that runs on each raf frame\n * until it returns a falsy value or is aborted\n */\nfunction loop(callback) {\n    let task;\n    if (tasks.size === 0)\n        raf(run_tasks);\n    return {\n        promise: new Promise(fulfill => {\n            tasks.add(task = { c: callback, f: fulfill });\n        }),\n        abort() {\n            tasks.delete(task);\n        }\n    };\n}\n\n// Track which nodes are claimed during hydration. Unclaimed nodes can then be removed from the DOM\n// at the end of hydration without touching the remaining nodes.\nlet is_hydrating = false;\nfunction start_hydrating() {\n    is_hydrating = true;\n}\nfunction end_hydrating() {\n    is_hydrating = false;\n}\nfunction upper_bound(low, high, key, value) {\n    // Return first index of value larger than input value in the range [low, high)\n    while (low < high) {\n        const mid = low + ((high - low) >> 1);\n        if (key(mid) <= value) {\n            low = mid + 1;\n        }\n        else {\n            high = mid;\n        }\n    }\n    return low;\n}\nfunction init_hydrate(target) {\n    if (target.hydrate_init)\n        return;\n    target.hydrate_init = true;\n    // We know that all children have claim_order values since the unclaimed have been detached if target is not <head>\n    let children = target.childNodes;\n    // If target is <head>, there may be children without claim_order\n    if (target.nodeName === 'HEAD') {\n        const myChildren = [];\n        for (let i = 0; i < children.length; i++) {\n            const node = children[i];\n            if (node.claim_order !== undefined) {\n                myChildren.push(node);\n            }\n        }\n        children = myChildren;\n    }\n    /*\n    * Reorder claimed children optimally.\n    * We can reorder claimed children optimally by finding the longest subsequence of\n    * nodes that are already claimed in order and only moving the rest. The longest\n    * subsequence subsequence of nodes that are claimed in order can be found by\n    * computing the longest increasing subsequence of .claim_order values.\n    *\n    * This algorithm is optimal in generating the least amount of reorder operations\n    * possible.\n    *\n    * Proof:\n    * We know that, given a set of reordering operations, the nodes that do not move\n    * always form an increasing subsequence, since they do not move among each other\n    * meaning that they must be already ordered among each other. Thus, the maximal\n    * set of nodes that do not move form a longest increasing subsequence.\n    */\n    // Compute longest increasing subsequence\n    // m: subsequence length j => index k of smallest value that ends an increasing subsequence of length j\n    const m = new Int32Array(children.length + 1);\n    // Predecessor indices + 1\n    const p = new Int32Array(children.length);\n    m[0] = -1;\n    let longest = 0;\n    for (let i = 0; i < children.length; i++) {\n        const current = children[i].claim_order;\n        // Find the largest subsequence length such that it ends in a value less than our current value\n        // upper_bound returns first greater value, so we subtract one\n        // with fast path for when we are on the current longest subsequence\n        const seqLen = ((longest > 0 && children[m[longest]].claim_order <= current) ? longest + 1 : upper_bound(1, longest, idx => children[m[idx]].claim_order, current)) - 1;\n        p[i] = m[seqLen] + 1;\n        const newLen = seqLen + 1;\n        // We can guarantee that current is the smallest value. Otherwise, we would have generated a longer sequence.\n        m[newLen] = i;\n        longest = Math.max(newLen, longest);\n    }\n    // The longest increasing subsequence of nodes (initially reversed)\n    const lis = [];\n    // The rest of the nodes, nodes that will be moved\n    const toMove = [];\n    let last = children.length - 1;\n    for (let cur = m[longest] + 1; cur != 0; cur = p[cur - 1]) {\n        lis.push(children[cur - 1]);\n        for (; last >= cur; last--) {\n            toMove.push(children[last]);\n        }\n        last--;\n    }\n    for (; last >= 0; last--) {\n        toMove.push(children[last]);\n    }\n    lis.reverse();\n    // We sort the nodes being moved to guarantee that their insertion order matches the claim order\n    toMove.sort((a, b) => a.claim_order - b.claim_order);\n    // Finally, we move the nodes\n    for (let i = 0, j = 0; i < toMove.length; i++) {\n        while (j < lis.length && toMove[i].claim_order >= lis[j].claim_order) {\n            j++;\n        }\n        const anchor = j < lis.length ? lis[j] : null;\n        target.insertBefore(toMove[i], anchor);\n    }\n}\nfunction append(target, node) {\n    target.appendChild(node);\n}\nfunction append_styles(target, style_sheet_id, styles) {\n    const append_styles_to = get_root_for_style(target);\n    if (!append_styles_to.getElementById(style_sheet_id)) {\n        const style = element('style');\n        style.id = style_sheet_id;\n        style.textContent = styles;\n        append_stylesheet(append_styles_to, style);\n    }\n}\nfunction get_root_for_style(node) {\n    if (!node)\n        return document;\n    const root = node.getRootNode ? node.getRootNode() : node.ownerDocument;\n    if (root && root.host) {\n        return root;\n    }\n    return node.ownerDocument;\n}\nfunction append_empty_stylesheet(node) {\n    const style_element = element('style');\n    append_stylesheet(get_root_for_style(node), style_element);\n    return style_element.sheet;\n}\nfunction append_stylesheet(node, style) {\n    append(node.head || node, style);\n}\nfunction append_hydration(target, node) {\n    if (is_hydrating) {\n        init_hydrate(target);\n        if ((target.actual_end_child === undefined) || ((target.actual_end_child !== null) && (target.actual_end_child.parentElement !== target))) {\n            target.actual_end_child = target.firstChild;\n        }\n        // Skip nodes of undefined ordering\n        while ((target.actual_end_child !== null) && (target.actual_end_child.claim_order === undefined)) {\n            target.actual_end_child = target.actual_end_child.nextSibling;\n        }\n        if (node !== target.actual_end_child) {\n            // We only insert if the ordering of this node should be modified or the parent node is not target\n            if (node.claim_order !== undefined || node.parentNode !== target) {\n                target.insertBefore(node, target.actual_end_child);\n            }\n        }\n        else {\n            target.actual_end_child = node.nextSibling;\n        }\n    }\n    else if (node.parentNode !== target || node.nextSibling !== null) {\n        target.appendChild(node);\n    }\n}\nfunction insert(target, node, anchor) {\n    target.insertBefore(node, anchor || null);\n}\nfunction insert_hydration(target, node, anchor) {\n    if (is_hydrating && !anchor) {\n        append_hydration(target, node);\n    }\n    else if (node.parentNode !== target || node.nextSibling != anchor) {\n        target.insertBefore(node, anchor || null);\n    }\n}\nfunction detach(node) {\n    node.parentNode.removeChild(node);\n}\nfunction destroy_each(iterations, detaching) {\n    for (let i = 0; i < iterations.length; i += 1) {\n        if (iterations[i])\n            iterations[i].d(detaching);\n    }\n}\nfunction element(name) {\n    return document.createElement(name);\n}\nfunction element_is(name, is) {\n    return document.createElement(name, { is });\n}\nfunction object_without_properties(obj, exclude) {\n    const target = {};\n    for (const k in obj) {\n        if (has_prop(obj, k)\n            // @ts-ignore\n            && exclude.indexOf(k) === -1) {\n            // @ts-ignore\n            target[k] = obj[k];\n        }\n    }\n    return target;\n}\nfunction svg_element(name) {\n    return document.createElementNS('http://www.w3.org/2000/svg', name);\n}\nfunction text(data) {\n    return document.createTextNode(data);\n}\nfunction space() {\n    return text(' ');\n}\nfunction empty() {\n    return text('');\n}\nfunction listen(node, event, handler, options) {\n    node.addEventListener(event, handler, options);\n    return () => node.removeEventListener(event, handler, options);\n}\nfunction prevent_default(fn) {\n    return function (event) {\n        event.preventDefault();\n        // @ts-ignore\n        return fn.call(this, event);\n    };\n}\nfunction stop_propagation(fn) {\n    return function (event) {\n        event.stopPropagation();\n        // @ts-ignore\n        return fn.call(this, event);\n    };\n}\nfunction self(fn) {\n    return function (event) {\n        // @ts-ignore\n        if (event.target === this)\n            fn.call(this, event);\n    };\n}\nfunction trusted(fn) {\n    return function (event) {\n        // @ts-ignore\n        if (event.isTrusted)\n            fn.call(this, event);\n    };\n}\nfunction attr(node, attribute, value) {\n    if (value == null)\n        node.removeAttribute(attribute);\n    else if (node.getAttribute(attribute) !== value)\n        node.setAttribute(attribute, value);\n}\nfunction set_attributes(node, attributes) {\n    // @ts-ignore\n    const descriptors = Object.getOwnPropertyDescriptors(node.__proto__);\n    for (const key in attributes) {\n        if (attributes[key] == null) {\n            node.removeAttribute(key);\n        }\n        else if (key === 'style') {\n            node.style.cssText = attributes[key];\n        }\n        else if (key === '__value') {\n            node.value = node[key] = attributes[key];\n        }\n        else if (descriptors[key] && descriptors[key].set) {\n            node[key] = attributes[key];\n        }\n        else {\n            attr(node, key, attributes[key]);\n        }\n    }\n}\nfunction set_svg_attributes(node, attributes) {\n    for (const key in attributes) {\n        attr(node, key, attributes[key]);\n    }\n}\nfunction set_custom_element_data(node, prop, value) {\n    if (prop in node) {\n        node[prop] = typeof node[prop] === 'boolean' && value === '' ? true : value;\n    }\n    else {\n        attr(node, prop, value);\n    }\n}\nfunction xlink_attr(node, attribute, value) {\n    node.setAttributeNS('http://www.w3.org/1999/xlink', attribute, value);\n}\nfunction get_binding_group_value(group, __value, checked) {\n    const value = new Set();\n    for (let i = 0; i < group.length; i += 1) {\n        if (group[i].checked)\n            value.add(group[i].__value);\n    }\n    if (!checked) {\n        value.delete(__value);\n    }\n    return Array.from(value);\n}\nfunction to_number(value) {\n    return value === '' ? null : +value;\n}\nfunction time_ranges_to_array(ranges) {\n    const array = [];\n    for (let i = 0; i < ranges.length; i += 1) {\n        array.push({ start: ranges.start(i), end: ranges.end(i) });\n    }\n    return array;\n}\nfunction children(element) {\n    return Array.from(element.childNodes);\n}\nfunction init_claim_info(nodes) {\n    if (nodes.claim_info === undefined) {\n        nodes.claim_info = { last_index: 0, total_claimed: 0 };\n    }\n}\nfunction claim_node(nodes, predicate, processNode, createNode, dontUpdateLastIndex = false) {\n    // Try to find nodes in an order such that we lengthen the longest increasing subsequence\n    init_claim_info(nodes);\n    const resultNode = (() => {\n        // We first try to find an element after the previous one\n        for (let i = nodes.claim_info.last_index; i < nodes.length; i++) {\n            const node = nodes[i];\n            if (predicate(node)) {\n                const replacement = processNode(node);\n                if (replacement === undefined) {\n                    nodes.splice(i, 1);\n                }\n                else {\n                    nodes[i] = replacement;\n                }\n                if (!dontUpdateLastIndex) {\n                    nodes.claim_info.last_index = i;\n                }\n                return node;\n            }\n        }\n        // Otherwise, we try to find one before\n        // We iterate in reverse so that we don't go too far back\n        for (let i = nodes.claim_info.last_index - 1; i >= 0; i--) {\n            const node = nodes[i];\n            if (predicate(node)) {\n                const replacement = processNode(node);\n                if (replacement === undefined) {\n                    nodes.splice(i, 1);\n                }\n                else {\n                    nodes[i] = replacement;\n                }\n                if (!dontUpdateLastIndex) {\n                    nodes.claim_info.last_index = i;\n                }\n                else if (replacement === undefined) {\n                    // Since we spliced before the last_index, we decrease it\n                    nodes.claim_info.last_index--;\n                }\n                return node;\n            }\n        }\n        // If we can't find any matching node, we create a new one\n        return createNode();\n    })();\n    resultNode.claim_order = nodes.claim_info.total_claimed;\n    nodes.claim_info.total_claimed += 1;\n    return resultNode;\n}\nfunction claim_element_base(nodes, name, attributes, create_element) {\n    return claim_node(nodes, (node) => node.nodeName === name, (node) => {\n        const remove = [];\n        for (let j = 0; j < node.attributes.length; j++) {\n            const attribute = node.attributes[j];\n            if (!attributes[attribute.name]) {\n                remove.push(attribute.name);\n            }\n        }\n        remove.forEach(v => node.removeAttribute(v));\n        return undefined;\n    }, () => create_element(name));\n}\nfunction claim_element(nodes, name, attributes) {\n    return claim_element_base(nodes, name, attributes, element);\n}\nfunction claim_svg_element(nodes, name, attributes) {\n    return claim_element_base(nodes, name, attributes, svg_element);\n}\nfunction claim_text(nodes, data) {\n    return claim_node(nodes, (node) => node.nodeType === 3, (node) => {\n        const dataStr = '' + data;\n        if (node.data.startsWith(dataStr)) {\n            if (node.data.length !== dataStr.length) {\n                return node.splitText(dataStr.length);\n            }\n        }\n        else {\n            node.data = dataStr;\n        }\n    }, () => text(data), true // Text nodes should not update last index since it is likely not worth it to eliminate an increasing subsequence of actual elements\n    );\n}\nfunction claim_space(nodes) {\n    return claim_text(nodes, ' ');\n}\nfunction find_comment(nodes, text, start) {\n    for (let i = start; i < nodes.length; i += 1) {\n        const node = nodes[i];\n        if (node.nodeType === 8 /* comment node */ && node.textContent.trim() === text) {\n            return i;\n        }\n    }\n    return nodes.length;\n}\nfunction claim_html_tag(nodes) {\n    // find html opening tag\n    const start_index = find_comment(nodes, 'HTML_TAG_START', 0);\n    const end_index = find_comment(nodes, 'HTML_TAG_END', start_index);\n    if (start_index === end_index) {\n        return new HtmlTagHydration();\n    }\n    init_claim_info(nodes);\n    const html_tag_nodes = nodes.splice(start_index, end_index - start_index + 1);\n    detach(html_tag_nodes[0]);\n    detach(html_tag_nodes[html_tag_nodes.length - 1]);\n    const claimed_nodes = html_tag_nodes.slice(1, html_tag_nodes.length - 1);\n    for (const n of claimed_nodes) {\n        n.claim_order = nodes.claim_info.total_claimed;\n        nodes.claim_info.total_claimed += 1;\n    }\n    return new HtmlTagHydration(claimed_nodes);\n}\nfunction set_data(text, data) {\n    data = '' + data;\n    if (text.wholeText !== data)\n        text.data = data;\n}\nfunction set_input_value(input, value) {\n    input.value = value == null ? '' : value;\n}\nfunction set_input_type(input, type) {\n    try {\n        input.type = type;\n    }\n    catch (e) {\n        // do nothing\n    }\n}\nfunction set_style(node, key, value, important) {\n    if (value === null) {\n        node.style.removeProperty(key);\n    }\n    else {\n        node.style.setProperty(key, value, important ? 'important' : '');\n    }\n}\nfunction select_option(select, value) {\n    for (let i = 0; i < select.options.length; i += 1) {\n        const option = select.options[i];\n        if (option.__value === value) {\n            option.selected = true;\n            return;\n        }\n    }\n    select.selectedIndex = -1; // no option should be selected\n}\nfunction select_options(select, value) {\n    for (let i = 0; i < select.options.length; i += 1) {\n        const option = select.options[i];\n        option.selected = ~value.indexOf(option.__value);\n    }\n}\nfunction select_value(select) {\n    const selected_option = select.querySelector(':checked') || select.options[0];\n    return selected_option && selected_option.__value;\n}\nfunction select_multiple_value(select) {\n    return [].map.call(select.querySelectorAll(':checked'), option => option.__value);\n}\n// unfortunately this can't be a constant as that wouldn't be tree-shakeable\n// so we cache the result instead\nlet crossorigin;\nfunction is_crossorigin() {\n    if (crossorigin === undefined) {\n        crossorigin = false;\n        try {\n            if (typeof window !== 'undefined' && window.parent) {\n                void window.parent.document;\n            }\n        }\n        catch (error) {\n            crossorigin = true;\n        }\n    }\n    return crossorigin;\n}\nfunction add_resize_listener(node, fn) {\n    const computed_style = getComputedStyle(node);\n    if (computed_style.position === 'static') {\n        node.style.position = 'relative';\n    }\n    const iframe = element('iframe');\n    iframe.setAttribute('style', 'display: block; position: absolute; top: 0; left: 0; width: 100%; height: 100%; ' +\n        'overflow: hidden; border: 0; opacity: 0; pointer-events: none; z-index: -1;');\n    iframe.setAttribute('aria-hidden', 'true');\n    iframe.tabIndex = -1;\n    const crossorigin = is_crossorigin();\n    let unsubscribe;\n    if (crossorigin) {\n        iframe.src = \"data:text/html,<script>onresize=function(){parent.postMessage(0,'*')}</script>\";\n        unsubscribe = listen(window, 'message', (event) => {\n            if (event.source === iframe.contentWindow)\n                fn();\n        });\n    }\n    else {\n        iframe.src = 'about:blank';\n        iframe.onload = () => {\n            unsubscribe = listen(iframe.contentWindow, 'resize', fn);\n        };\n    }\n    append(node, iframe);\n    return () => {\n        if (crossorigin) {\n            unsubscribe();\n        }\n        else if (unsubscribe && iframe.contentWindow) {\n            unsubscribe();\n        }\n        detach(iframe);\n    };\n}\nfunction toggle_class(element, name, toggle) {\n    element.classList[toggle ? 'add' : 'remove'](name);\n}\nfunction custom_event(type, detail, bubbles = false) {\n    const e = document.createEvent('CustomEvent');\n    e.initCustomEvent(type, bubbles, false, detail);\n    return e;\n}\nfunction query_selector_all(selector, parent = document.body) {\n    return Array.from(parent.querySelectorAll(selector));\n}\nclass HtmlTag {\n    constructor() {\n        this.e = this.n = null;\n    }\n    c(html) {\n        this.h(html);\n    }\n    m(html, target, anchor = null) {\n        if (!this.e) {\n            this.e = element(target.nodeName);\n            this.t = target;\n            this.c(html);\n        }\n        this.i(anchor);\n    }\n    h(html) {\n        this.e.innerHTML = html;\n        this.n = Array.from(this.e.childNodes);\n    }\n    i(anchor) {\n        for (let i = 0; i < this.n.length; i += 1) {\n            insert(this.t, this.n[i], anchor);\n        }\n    }\n    p(html) {\n        this.d();\n        this.h(html);\n        this.i(this.a);\n    }\n    d() {\n        this.n.forEach(detach);\n    }\n}\nclass HtmlTagHydration extends HtmlTag {\n    constructor(claimed_nodes) {\n        super();\n        this.e = this.n = null;\n        this.l = claimed_nodes;\n    }\n    c(html) {\n        if (this.l) {\n            this.n = this.l;\n        }\n        else {\n            super.c(html);\n        }\n    }\n    i(anchor) {\n        for (let i = 0; i < this.n.length; i += 1) {\n            insert_hydration(this.t, this.n[i], anchor);\n        }\n    }\n}\nfunction attribute_to_object(attributes) {\n    const result = {};\n    for (const attribute of attributes) {\n        result[attribute.name] = attribute.value;\n    }\n    return result;\n}\nfunction get_custom_elements_slots(element) {\n    const result = {};\n    element.childNodes.forEach((node) => {\n        result[node.slot || 'default'] = true;\n    });\n    return result;\n}\n\n// we need to store the information for multiple documents because a Svelte application could also contain iframes\n// https://github.com/sveltejs/svelte/issues/3624\nconst managed_styles = new Map();\nlet active = 0;\n// https://github.com/darkskyapp/string-hash/blob/master/index.js\nfunction hash(str) {\n    let hash = 5381;\n    let i = str.length;\n    while (i--)\n        hash = ((hash << 5) - hash) ^ str.charCodeAt(i);\n    return hash >>> 0;\n}\nfunction create_style_information(doc, node) {\n    const info = { stylesheet: append_empty_stylesheet(node), rules: {} };\n    managed_styles.set(doc, info);\n    return info;\n}\nfunction create_rule(node, a, b, duration, delay, ease, fn, uid = 0) {\n    const step = 16.666 / duration;\n    let keyframes = '{\\n';\n    for (let p = 0; p <= 1; p += step) {\n        const t = a + (b - a) * ease(p);\n        keyframes += p * 100 + `%{${fn(t, 1 - t)}}\\n`;\n    }\n    const rule = keyframes + `100% {${fn(b, 1 - b)}}\\n}`;\n    const name = `__svelte_${hash(rule)}_${uid}`;\n    const doc = get_root_for_style(node);\n    const { stylesheet, rules } = managed_styles.get(doc) || create_style_information(doc, node);\n    if (!rules[name]) {\n        rules[name] = true;\n        stylesheet.insertRule(`@keyframes ${name} ${rule}`, stylesheet.cssRules.length);\n    }\n    const animation = node.style.animation || '';\n    node.style.animation = `${animation ? `${animation}, ` : ''}${name} ${duration}ms linear ${delay}ms 1 both`;\n    active += 1;\n    return name;\n}\nfunction delete_rule(node, name) {\n    const previous = (node.style.animation || '').split(', ');\n    const next = previous.filter(name\n        ? anim => anim.indexOf(name) < 0 // remove specific animation\n        : anim => anim.indexOf('__svelte') === -1 // remove all Svelte animations\n    );\n    const deleted = previous.length - next.length;\n    if (deleted) {\n        node.style.animation = next.join(', ');\n        active -= deleted;\n        if (!active)\n            clear_rules();\n    }\n}\nfunction clear_rules() {\n    raf(() => {\n        if (active)\n            return;\n        managed_styles.forEach(info => {\n            const { stylesheet } = info;\n            let i = stylesheet.cssRules.length;\n            while (i--)\n                stylesheet.deleteRule(i);\n            info.rules = {};\n        });\n        managed_styles.clear();\n    });\n}\n\nfunction create_animation(node, from, fn, params) {\n    if (!from)\n        return noop;\n    const to = node.getBoundingClientRect();\n    if (from.left === to.left && from.right === to.right && from.top === to.top && from.bottom === to.bottom)\n        return noop;\n    const { delay = 0, duration = 300, easing = identity, \n    // @ts-ignore todo: should this be separated from destructuring? Or start/end added to public api and documentation?\n    start: start_time = now() + delay, \n    // @ts-ignore todo:\n    end = start_time + duration, tick = noop, css } = fn(node, { from, to }, params);\n    let running = true;\n    let started = false;\n    let name;\n    function start() {\n        if (css) {\n            name = create_rule(node, 0, 1, duration, delay, easing, css);\n        }\n        if (!delay) {\n            started = true;\n        }\n    }\n    function stop() {\n        if (css)\n            delete_rule(node, name);\n        running = false;\n    }\n    loop(now => {\n        if (!started && now >= start_time) {\n            started = true;\n        }\n        if (started && now >= end) {\n            tick(1, 0);\n            stop();\n        }\n        if (!running) {\n            return false;\n        }\n        if (started) {\n            const p = now - start_time;\n            const t = 0 + 1 * easing(p / duration);\n            tick(t, 1 - t);\n        }\n        return true;\n    });\n    start();\n    tick(0, 1);\n    return stop;\n}\nfunction fix_position(node) {\n    const style = getComputedStyle(node);\n    if (style.position !== 'absolute' && style.position !== 'fixed') {\n        const { width, height } = style;\n        const a = node.getBoundingClientRect();\n        node.style.position = 'absolute';\n        node.style.width = width;\n        node.style.height = height;\n        add_transform(node, a);\n    }\n}\nfunction add_transform(node, a) {\n    const b = node.getBoundingClientRect();\n    if (a.left !== b.left || a.top !== b.top) {\n        const style = getComputedStyle(node);\n        const transform = style.transform === 'none' ? '' : style.transform;\n        node.style.transform = `${transform} translate(${a.left - b.left}px, ${a.top - b.top}px)`;\n    }\n}\n\nlet current_component;\nfunction set_current_component(component) {\n    current_component = component;\n}\nfunction get_current_component() {\n    if (!current_component)\n        throw new Error('Function called outside component initialization');\n    return current_component;\n}\nfunction beforeUpdate(fn) {\n    get_current_component().$$.before_update.push(fn);\n}\nfunction onMount(fn) {\n    get_current_component().$$.on_mount.push(fn);\n}\nfunction afterUpdate(fn) {\n    get_current_component().$$.after_update.push(fn);\n}\nfunction onDestroy(fn) {\n    get_current_component().$$.on_destroy.push(fn);\n}\nfunction createEventDispatcher() {\n    const component = get_current_component();\n    return (type, detail) => {\n        const callbacks = component.$$.callbacks[type];\n        if (callbacks) {\n            // TODO are there situations where events could be dispatched\n            // in a server (non-DOM) environment?\n            const event = custom_event(type, detail);\n            callbacks.slice().forEach(fn => {\n                fn.call(component, event);\n            });\n        }\n    };\n}\nfunction setContext(key, context) {\n    get_current_component().$$.context.set(key, context);\n}\nfunction getContext(key) {\n    return get_current_component().$$.context.get(key);\n}\nfunction getAllContexts() {\n    return get_current_component().$$.context;\n}\nfunction hasContext(key) {\n    return get_current_component().$$.context.has(key);\n}\n// TODO figure out if we still want to support\n// shorthand events, or if we want to implement\n// a real bubbling mechanism\nfunction bubble(component, event) {\n    const callbacks = component.$$.callbacks[event.type];\n    if (callbacks) {\n        // @ts-ignore\n        callbacks.slice().forEach(fn => fn.call(this, event));\n    }\n}\n\nconst dirty_components = [];\nconst intros = { enabled: false };\nconst binding_callbacks = [];\nconst render_callbacks = [];\nconst flush_callbacks = [];\nconst resolved_promise = Promise.resolve();\nlet update_scheduled = false;\nfunction schedule_update() {\n    if (!update_scheduled) {\n        update_scheduled = true;\n        resolved_promise.then(flush);\n    }\n}\nfunction tick() {\n    schedule_update();\n    return resolved_promise;\n}\nfunction add_render_callback(fn) {\n    render_callbacks.push(fn);\n}\nfunction add_flush_callback(fn) {\n    flush_callbacks.push(fn);\n}\n// flush() calls callbacks in this order:\n// 1. All beforeUpdate callbacks, in order: parents before children\n// 2. All bind:this callbacks, in reverse order: children before parents.\n// 3. All afterUpdate callbacks, in order: parents before children. EXCEPT\n//    for afterUpdates called during the initial onMount, which are called in\n//    reverse order: children before parents.\n// Since callbacks might update component values, which could trigger another\n// call to flush(), the following steps guard against this:\n// 1. During beforeUpdate, any updated components will be added to the\n//    dirty_components array and will cause a reentrant call to flush(). Because\n//    the flush index is kept outside the function, the reentrant call will pick\n//    up where the earlier call left off and go through all dirty components. The\n//    current_component value is saved and restored so that the reentrant call will\n//    not interfere with the \"parent\" flush() call.\n// 2. bind:this callbacks cannot trigger new flush() calls.\n// 3. During afterUpdate, any updated components will NOT have their afterUpdate\n//    callback called a second time; the seen_callbacks set, outside the flush()\n//    function, guarantees this behavior.\nconst seen_callbacks = new Set();\nlet flushidx = 0; // Do *not* move this inside the flush() function\nfunction flush() {\n    const saved_component = current_component;\n    do {\n        // first, call beforeUpdate functions\n        // and update components\n        while (flushidx < dirty_components.length) {\n            const component = dirty_components[flushidx];\n            flushidx++;\n            set_current_component(component);\n            update(component.$$);\n        }\n        set_current_component(null);\n        dirty_components.length = 0;\n        flushidx = 0;\n        while (binding_callbacks.length)\n            binding_callbacks.pop()();\n        // then, once components are updated, call\n        // afterUpdate functions. This may cause\n        // subsequent updates...\n        for (let i = 0; i < render_callbacks.length; i += 1) {\n            const callback = render_callbacks[i];\n            if (!seen_callbacks.has(callback)) {\n                // ...so guard against infinite loops\n                seen_callbacks.add(callback);\n                callback();\n            }\n        }\n        render_callbacks.length = 0;\n    } while (dirty_components.length);\n    while (flush_callbacks.length) {\n        flush_callbacks.pop()();\n    }\n    update_scheduled = false;\n    seen_callbacks.clear();\n    set_current_component(saved_component);\n}\nfunction update($$) {\n    if ($$.fragment !== null) {\n        $$.update();\n        run_all($$.before_update);\n        const dirty = $$.dirty;\n        $$.dirty = [-1];\n        $$.fragment && $$.fragment.p($$.ctx, dirty);\n        $$.after_update.forEach(add_render_callback);\n    }\n}\n\nlet promise;\nfunction wait() {\n    if (!promise) {\n        promise = Promise.resolve();\n        promise.then(() => {\n            promise = null;\n        });\n    }\n    return promise;\n}\nfunction dispatch(node, direction, kind) {\n    node.dispatchEvent(custom_event(`${direction ? 'intro' : 'outro'}${kind}`));\n}\nconst outroing = new Set();\nlet outros;\nfunction group_outros() {\n    outros = {\n        r: 0,\n        c: [],\n        p: outros // parent group\n    };\n}\nfunction check_outros() {\n    if (!outros.r) {\n        run_all(outros.c);\n    }\n    outros = outros.p;\n}\nfunction transition_in(block, local) {\n    if (block && block.i) {\n        outroing.delete(block);\n        block.i(local);\n    }\n}\nfunction transition_out(block, local, detach, callback) {\n    if (block && block.o) {\n        if (outroing.has(block))\n            return;\n        outroing.add(block);\n        outros.c.push(() => {\n            outroing.delete(block);\n            if (callback) {\n                if (detach)\n                    block.d(1);\n                callback();\n            }\n        });\n        block.o(local);\n    }\n}\nconst null_transition = { duration: 0 };\nfunction create_in_transition(node, fn, params) {\n    let config = fn(node, params);\n    let running = false;\n    let animation_name;\n    let task;\n    let uid = 0;\n    function cleanup() {\n        if (animation_name)\n            delete_rule(node, animation_name);\n    }\n    function go() {\n        const { delay = 0, duration = 300, easing = identity, tick = noop, css } = config || null_transition;\n        if (css)\n            animation_name = create_rule(node, 0, 1, duration, delay, easing, css, uid++);\n        tick(0, 1);\n        const start_time = now() + delay;\n        const end_time = start_time + duration;\n        if (task)\n            task.abort();\n        running = true;\n        add_render_callback(() => dispatch(node, true, 'start'));\n        task = loop(now => {\n            if (running) {\n                if (now >= end_time) {\n                    tick(1, 0);\n                    dispatch(node, true, 'end');\n                    cleanup();\n                    return running = false;\n                }\n                if (now >= start_time) {\n                    const t = easing((now - start_time) / duration);\n                    tick(t, 1 - t);\n                }\n            }\n            return running;\n        });\n    }\n    let started = false;\n    return {\n        start() {\n            if (started)\n                return;\n            started = true;\n            delete_rule(node);\n            if (is_function(config)) {\n                config = config();\n                wait().then(go);\n            }\n            else {\n                go();\n            }\n        },\n        invalidate() {\n            started = false;\n        },\n        end() {\n            if (running) {\n                cleanup();\n                running = false;\n            }\n        }\n    };\n}\nfunction create_out_transition(node, fn, params) {\n    let config = fn(node, params);\n    let running = true;\n    let animation_name;\n    const group = outros;\n    group.r += 1;\n    function go() {\n        const { delay = 0, duration = 300, easing = identity, tick = noop, css } = config || null_transition;\n        if (css)\n            animation_name = create_rule(node, 1, 0, duration, delay, easing, css);\n        const start_time = now() + delay;\n        const end_time = start_time + duration;\n        add_render_callback(() => dispatch(node, false, 'start'));\n        loop(now => {\n            if (running) {\n                if (now >= end_time) {\n                    tick(0, 1);\n                    dispatch(node, false, 'end');\n                    if (!--group.r) {\n                        // this will result in `end()` being called,\n                        // so we don't need to clean up here\n                        run_all(group.c);\n                    }\n                    return false;\n                }\n                if (now >= start_time) {\n                    const t = easing((now - start_time) / duration);\n                    tick(1 - t, t);\n                }\n            }\n            return running;\n        });\n    }\n    if (is_function(config)) {\n        wait().then(() => {\n            // @ts-ignore\n            config = config();\n            go();\n        });\n    }\n    else {\n        go();\n    }\n    return {\n        end(reset) {\n            if (reset && config.tick) {\n                config.tick(1, 0);\n            }\n            if (running) {\n                if (animation_name)\n                    delete_rule(node, animation_name);\n                running = false;\n            }\n        }\n    };\n}\nfunction create_bidirectional_transition(node, fn, params, intro) {\n    let config = fn(node, params);\n    let t = intro ? 0 : 1;\n    let running_program = null;\n    let pending_program = null;\n    let animation_name = null;\n    function clear_animation() {\n        if (animation_name)\n            delete_rule(node, animation_name);\n    }\n    function init(program, duration) {\n        const d = (program.b - t);\n        duration *= Math.abs(d);\n        return {\n            a: t,\n            b: program.b,\n            d,\n            duration,\n            start: program.start,\n            end: program.start + duration,\n            group: program.group\n        };\n    }\n    function go(b) {\n        const { delay = 0, duration = 300, easing = identity, tick = noop, css } = config || null_transition;\n        const program = {\n            start: now() + delay,\n            b\n        };\n        if (!b) {\n            // @ts-ignore todo: improve typings\n            program.group = outros;\n            outros.r += 1;\n        }\n        if (running_program || pending_program) {\n            pending_program = program;\n        }\n        else {\n            // if this is an intro, and there's a delay, we need to do\n            // an initial tick and/or apply CSS animation immediately\n            if (css) {\n                clear_animation();\n                animation_name = create_rule(node, t, b, duration, delay, easing, css);\n            }\n            if (b)\n                tick(0, 1);\n            running_program = init(program, duration);\n            add_render_callback(() => dispatch(node, b, 'start'));\n            loop(now => {\n                if (pending_program && now > pending_program.start) {\n                    running_program = init(pending_program, duration);\n                    pending_program = null;\n                    dispatch(node, running_program.b, 'start');\n                    if (css) {\n                        clear_animation();\n                        animation_name = create_rule(node, t, running_program.b, running_program.duration, 0, easing, config.css);\n                    }\n                }\n                if (running_program) {\n                    if (now >= running_program.end) {\n                        tick(t = running_program.b, 1 - t);\n                        dispatch(node, running_program.b, 'end');\n                        if (!pending_program) {\n                            // we're done\n                            if (running_program.b) {\n                                // intro — we can tidy up immediately\n                                clear_animation();\n                            }\n                            else {\n                                // outro — needs to be coordinated\n                                if (!--running_program.group.r)\n                                    run_all(running_program.group.c);\n                            }\n                        }\n                        running_program = null;\n                    }\n                    else if (now >= running_program.start) {\n                        const p = now - running_program.start;\n                        t = running_program.a + running_program.d * easing(p / running_program.duration);\n                        tick(t, 1 - t);\n                    }\n                }\n                return !!(running_program || pending_program);\n            });\n        }\n    }\n    return {\n        run(b) {\n            if (is_function(config)) {\n                wait().then(() => {\n                    // @ts-ignore\n                    config = config();\n                    go(b);\n                });\n            }\n            else {\n                go(b);\n            }\n        },\n        end() {\n            clear_animation();\n            running_program = pending_program = null;\n        }\n    };\n}\n\nfunction handle_promise(promise, info) {\n    const token = info.token = {};\n    function update(type, index, key, value) {\n        if (info.token !== token)\n            return;\n        info.resolved = value;\n        let child_ctx = info.ctx;\n        if (key !== undefined) {\n            child_ctx = child_ctx.slice();\n            child_ctx[key] = value;\n        }\n        const block = type && (info.current = type)(child_ctx);\n        let needs_flush = false;\n        if (info.block) {\n            if (info.blocks) {\n                info.blocks.forEach((block, i) => {\n                    if (i !== index && block) {\n                        group_outros();\n                        transition_out(block, 1, 1, () => {\n                            if (info.blocks[i] === block) {\n                                info.blocks[i] = null;\n                            }\n                        });\n                        check_outros();\n                    }\n                });\n            }\n            else {\n                info.block.d(1);\n            }\n            block.c();\n            transition_in(block, 1);\n            block.m(info.mount(), info.anchor);\n            needs_flush = true;\n        }\n        info.block = block;\n        if (info.blocks)\n            info.blocks[index] = block;\n        if (needs_flush) {\n            flush();\n        }\n    }\n    if (is_promise(promise)) {\n        const current_component = get_current_component();\n        promise.then(value => {\n            set_current_component(current_component);\n            update(info.then, 1, info.value, value);\n            set_current_component(null);\n        }, error => {\n            set_current_component(current_component);\n            update(info.catch, 2, info.error, error);\n            set_current_component(null);\n            if (!info.hasCatch) {\n                throw error;\n            }\n        });\n        // if we previously had a then/catch block, destroy it\n        if (info.current !== info.pending) {\n            update(info.pending, 0);\n            return true;\n        }\n    }\n    else {\n        if (info.current !== info.then) {\n            update(info.then, 1, info.value, promise);\n            return true;\n        }\n        info.resolved = promise;\n    }\n}\nfunction update_await_block_branch(info, ctx, dirty) {\n    const child_ctx = ctx.slice();\n    const { resolved } = info;\n    if (info.current === info.then) {\n        child_ctx[info.value] = resolved;\n    }\n    if (info.current === info.catch) {\n        child_ctx[info.error] = resolved;\n    }\n    info.block.p(child_ctx, dirty);\n}\n\nconst globals = (typeof window !== 'undefined'\n    ? window\n    : typeof globalThis !== 'undefined'\n        ? globalThis\n        : global);\n\nfunction destroy_block(block, lookup) {\n    block.d(1);\n    lookup.delete(block.key);\n}\nfunction outro_and_destroy_block(block, lookup) {\n    transition_out(block, 1, 1, () => {\n        lookup.delete(block.key);\n    });\n}\nfunction fix_and_destroy_block(block, lookup) {\n    block.f();\n    destroy_block(block, lookup);\n}\nfunction fix_and_outro_and_destroy_block(block, lookup) {\n    block.f();\n    outro_and_destroy_block(block, lookup);\n}\nfunction update_keyed_each(old_blocks, dirty, get_key, dynamic, ctx, list, lookup, node, destroy, create_each_block, next, get_context) {\n    let o = old_blocks.length;\n    let n = list.length;\n    let i = o;\n    const old_indexes = {};\n    while (i--)\n        old_indexes[old_blocks[i].key] = i;\n    const new_blocks = [];\n    const new_lookup = new Map();\n    const deltas = new Map();\n    i = n;\n    while (i--) {\n        const child_ctx = get_context(ctx, list, i);\n        const key = get_key(child_ctx);\n        let block = lookup.get(key);\n        if (!block) {\n            block = create_each_block(key, child_ctx);\n            block.c();\n        }\n        else if (dynamic) {\n            block.p(child_ctx, dirty);\n        }\n        new_lookup.set(key, new_blocks[i] = block);\n        if (key in old_indexes)\n            deltas.set(key, Math.abs(i - old_indexes[key]));\n    }\n    const will_move = new Set();\n    const did_move = new Set();\n    function insert(block) {\n        transition_in(block, 1);\n        block.m(node, next);\n        lookup.set(block.key, block);\n        next = block.first;\n        n--;\n    }\n    while (o && n) {\n        const new_block = new_blocks[n - 1];\n        const old_block = old_blocks[o - 1];\n        const new_key = new_block.key;\n        const old_key = old_block.key;\n        if (new_block === old_block) {\n            // do nothing\n            next = new_block.first;\n            o--;\n            n--;\n        }\n        else if (!new_lookup.has(old_key)) {\n            // remove old block\n            destroy(old_block, lookup);\n            o--;\n        }\n        else if (!lookup.has(new_key) || will_move.has(new_key)) {\n            insert(new_block);\n        }\n        else if (did_move.has(old_key)) {\n            o--;\n        }\n        else if (deltas.get(new_key) > deltas.get(old_key)) {\n            did_move.add(new_key);\n            insert(new_block);\n        }\n        else {\n            will_move.add(old_key);\n            o--;\n        }\n    }\n    while (o--) {\n        const old_block = old_blocks[o];\n        if (!new_lookup.has(old_block.key))\n            destroy(old_block, lookup);\n    }\n    while (n)\n        insert(new_blocks[n - 1]);\n    return new_blocks;\n}\nfunction validate_each_keys(ctx, list, get_context, get_key) {\n    const keys = new Set();\n    for (let i = 0; i < list.length; i++) {\n        const key = get_key(get_context(ctx, list, i));\n        if (keys.has(key)) {\n            throw new Error('Cannot have duplicate keys in a keyed each');\n        }\n        keys.add(key);\n    }\n}\n\nfunction get_spread_update(levels, updates) {\n    const update = {};\n    const to_null_out = {};\n    const accounted_for = { $$scope: 1 };\n    let i = levels.length;\n    while (i--) {\n        const o = levels[i];\n        const n = updates[i];\n        if (n) {\n            for (const key in o) {\n                if (!(key in n))\n                    to_null_out[key] = 1;\n            }\n            for (const key in n) {\n                if (!accounted_for[key]) {\n                    update[key] = n[key];\n                    accounted_for[key] = 1;\n                }\n            }\n            levels[i] = n;\n        }\n        else {\n            for (const key in o) {\n                accounted_for[key] = 1;\n            }\n        }\n    }\n    for (const key in to_null_out) {\n        if (!(key in update))\n            update[key] = undefined;\n    }\n    return update;\n}\nfunction get_spread_object(spread_props) {\n    return typeof spread_props === 'object' && spread_props !== null ? spread_props : {};\n}\n\n// source: https://html.spec.whatwg.org/multipage/indices.html\nconst boolean_attributes = new Set([\n    'allowfullscreen',\n    'allowpaymentrequest',\n    'async',\n    'autofocus',\n    'autoplay',\n    'checked',\n    'controls',\n    'default',\n    'defer',\n    'disabled',\n    'formnovalidate',\n    'hidden',\n    'ismap',\n    'loop',\n    'multiple',\n    'muted',\n    'nomodule',\n    'novalidate',\n    'open',\n    'playsinline',\n    'readonly',\n    'required',\n    'reversed',\n    'selected'\n]);\n\nconst invalid_attribute_name_character = /[\\s'\">/=\\u{FDD0}-\\u{FDEF}\\u{FFFE}\\u{FFFF}\\u{1FFFE}\\u{1FFFF}\\u{2FFFE}\\u{2FFFF}\\u{3FFFE}\\u{3FFFF}\\u{4FFFE}\\u{4FFFF}\\u{5FFFE}\\u{5FFFF}\\u{6FFFE}\\u{6FFFF}\\u{7FFFE}\\u{7FFFF}\\u{8FFFE}\\u{8FFFF}\\u{9FFFE}\\u{9FFFF}\\u{AFFFE}\\u{AFFFF}\\u{BFFFE}\\u{BFFFF}\\u{CFFFE}\\u{CFFFF}\\u{DFFFE}\\u{DFFFF}\\u{EFFFE}\\u{EFFFF}\\u{FFFFE}\\u{FFFFF}\\u{10FFFE}\\u{10FFFF}]/u;\n// https://html.spec.whatwg.org/multipage/syntax.html#attributes-2\n// https://infra.spec.whatwg.org/#noncharacter\nfunction spread(args, attrs_to_add) {\n    const attributes = Object.assign({}, ...args);\n    if (attrs_to_add) {\n        const classes_to_add = attrs_to_add.classes;\n        const styles_to_add = attrs_to_add.styles;\n        if (classes_to_add) {\n            if (attributes.class == null) {\n                attributes.class = classes_to_add;\n            }\n            else {\n                attributes.class += ' ' + classes_to_add;\n            }\n        }\n        if (styles_to_add) {\n            if (attributes.style == null) {\n                attributes.style = style_object_to_string(styles_to_add);\n            }\n            else {\n                attributes.style = style_object_to_string(merge_ssr_styles(attributes.style, styles_to_add));\n            }\n        }\n    }\n    let str = '';\n    Object.keys(attributes).forEach(name => {\n        if (invalid_attribute_name_character.test(name))\n            return;\n        const value = attributes[name];\n        if (value === true)\n            str += ' ' + name;\n        else if (boolean_attributes.has(name.toLowerCase())) {\n            if (value)\n                str += ' ' + name;\n        }\n        else if (value != null) {\n            str += ` ${name}=\"${value}\"`;\n        }\n    });\n    return str;\n}\nfunction merge_ssr_styles(style_attribute, style_directive) {\n    const style_object = {};\n    for (const individual_style of style_attribute.split(';')) {\n        const colon_index = individual_style.indexOf(':');\n        const name = individual_style.slice(0, colon_index).trim();\n        const value = individual_style.slice(colon_index + 1).trim();\n        if (!name)\n            continue;\n        style_object[name] = value;\n    }\n    for (const name in style_directive) {\n        const value = style_directive[name];\n        if (value) {\n            style_object[name] = value;\n        }\n        else {\n            delete style_object[name];\n        }\n    }\n    return style_object;\n}\nconst escaped = {\n    '\"': '&quot;',\n    \"'\": '&#39;',\n    '&': '&amp;',\n    '<': '&lt;',\n    '>': '&gt;'\n};\nfunction escape(html) {\n    return String(html).replace(/[\"'&<>]/g, match => escaped[match]);\n}\nfunction escape_attribute_value(value) {\n    return typeof value === 'string' ? escape(value) : value;\n}\nfunction escape_object(obj) {\n    const result = {};\n    for (const key in obj) {\n        result[key] = escape_attribute_value(obj[key]);\n    }\n    return result;\n}\nfunction each(items, fn) {\n    let str = '';\n    for (let i = 0; i < items.length; i += 1) {\n        str += fn(items[i], i);\n    }\n    return str;\n}\nconst missing_component = {\n    $$render: () => ''\n};\nfunction validate_component(component, name) {\n    if (!component || !component.$$render) {\n        if (name === 'svelte:component')\n            name += ' this={...}';\n        throw new Error(`<${name}> is not a valid SSR component. You may need to review your build config to ensure that dependencies are compiled, rather than imported as pre-compiled modules`);\n    }\n    return component;\n}\nfunction debug(file, line, column, values) {\n    console.log(`{@debug} ${file ? file + ' ' : ''}(${line}:${column})`); // eslint-disable-line no-console\n    console.log(values); // eslint-disable-line no-console\n    return '';\n}\nlet on_destroy;\nfunction create_ssr_component(fn) {\n    function $$render(result, props, bindings, slots, context) {\n        const parent_component = current_component;\n        const $$ = {\n            on_destroy,\n            context: new Map(context || (parent_component ? parent_component.$$.context : [])),\n            // these will be immediately discarded\n            on_mount: [],\n            before_update: [],\n            after_update: [],\n            callbacks: blank_object()\n        };\n        set_current_component({ $$ });\n        const html = fn(result, props, bindings, slots);\n        set_current_component(parent_component);\n        return html;\n    }\n    return {\n        render: (props = {}, { $$slots = {}, context = new Map() } = {}) => {\n            on_destroy = [];\n            const result = { title: '', head: '', css: new Set() };\n            const html = $$render(result, props, {}, $$slots, context);\n            run_all(on_destroy);\n            return {\n                html,\n                css: {\n                    code: Array.from(result.css).map(css => css.code).join('\\n'),\n                    map: null // TODO\n                },\n                head: result.title + result.head\n            };\n        },\n        $$render\n    };\n}\nfunction add_attribute(name, value, boolean) {\n    if (value == null || (boolean && !value))\n        return '';\n    return ` ${name}${value === true && boolean_attributes.has(name) ? '' : `=${typeof value === 'string' ? JSON.stringify(escape(value)) : `\"${value}\"`}`}`;\n}\nfunction add_classes(classes) {\n    return classes ? ` class=\"${classes}\"` : '';\n}\nfunction style_object_to_string(style_object) {\n    return Object.keys(style_object)\n        .filter(key => style_object[key])\n        .map(key => `${key}: ${style_object[key]};`)\n        .join(' ');\n}\nfunction add_styles(style_object) {\n    const styles = style_object_to_string(style_object);\n    return styles ? ` style=\"${styles}\"` : '';\n}\n\nfunction bind(component, name, callback) {\n    const index = component.$$.props[name];\n    if (index !== undefined) {\n        component.$$.bound[index] = callback;\n        callback(component.$$.ctx[index]);\n    }\n}\nfunction create_component(block) {\n    block && block.c();\n}\nfunction claim_component(block, parent_nodes) {\n    block && block.l(parent_nodes);\n}\nfunction mount_component(component, target, anchor, customElement) {\n    const { fragment, on_mount, on_destroy, after_update } = component.$$;\n    fragment && fragment.m(target, anchor);\n    if (!customElement) {\n        // onMount happens before the initial afterUpdate\n        add_render_callback(() => {\n            const new_on_destroy = on_mount.map(run).filter(is_function);\n            if (on_destroy) {\n                on_destroy.push(...new_on_destroy);\n            }\n            else {\n                // Edge case - component was destroyed immediately,\n                // most likely as a result of a binding initialising\n                run_all(new_on_destroy);\n            }\n            component.$$.on_mount = [];\n        });\n    }\n    after_update.forEach(add_render_callback);\n}\nfunction destroy_component(component, detaching) {\n    const $$ = component.$$;\n    if ($$.fragment !== null) {\n        run_all($$.on_destroy);\n        $$.fragment && $$.fragment.d(detaching);\n        // TODO null out other refs, including component.$$ (but need to\n        // preserve final state?)\n        $$.on_destroy = $$.fragment = null;\n        $$.ctx = [];\n    }\n}\nfunction make_dirty(component, i) {\n    if (component.$$.dirty[0] === -1) {\n        dirty_components.push(component);\n        schedule_update();\n        component.$$.dirty.fill(0);\n    }\n    component.$$.dirty[(i / 31) | 0] |= (1 << (i % 31));\n}\nfunction init(component, options, instance, create_fragment, not_equal, props, append_styles, dirty = [-1]) {\n    const parent_component = current_component;\n    set_current_component(component);\n    const $$ = component.$$ = {\n        fragment: null,\n        ctx: null,\n        // state\n        props,\n        update: noop,\n        not_equal,\n        bound: blank_object(),\n        // lifecycle\n        on_mount: [],\n        on_destroy: [],\n        on_disconnect: [],\n        before_update: [],\n        after_update: [],\n        context: new Map(options.context || (parent_component ? parent_component.$$.context : [])),\n        // everything else\n        callbacks: blank_object(),\n        dirty,\n        skip_bound: false,\n        root: options.target || parent_component.$$.root\n    };\n    append_styles && append_styles($$.root);\n    let ready = false;\n    $$.ctx = instance\n        ? instance(component, options.props || {}, (i, ret, ...rest) => {\n            const value = rest.length ? rest[0] : ret;\n            if ($$.ctx && not_equal($$.ctx[i], $$.ctx[i] = value)) {\n                if (!$$.skip_bound && $$.bound[i])\n                    $$.bound[i](value);\n                if (ready)\n                    make_dirty(component, i);\n            }\n            return ret;\n        })\n        : [];\n    $$.update();\n    ready = true;\n    run_all($$.before_update);\n    // `false` as a special case of no DOM component\n    $$.fragment = create_fragment ? create_fragment($$.ctx) : false;\n    if (options.target) {\n        if (options.hydrate) {\n            start_hydrating();\n            const nodes = children(options.target);\n            // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n            $$.fragment && $$.fragment.l(nodes);\n            nodes.forEach(detach);\n        }\n        else {\n            // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n            $$.fragment && $$.fragment.c();\n        }\n        if (options.intro)\n            transition_in(component.$$.fragment);\n        mount_component(component, options.target, options.anchor, options.customElement);\n        end_hydrating();\n        flush();\n    }\n    set_current_component(parent_component);\n}\nlet SvelteElement;\nif (typeof HTMLElement === 'function') {\n    SvelteElement = class extends HTMLElement {\n        constructor() {\n            super();\n            this.attachShadow({ mode: 'open' });\n        }\n        connectedCallback() {\n            const { on_mount } = this.$$;\n            this.$$.on_disconnect = on_mount.map(run).filter(is_function);\n            // @ts-ignore todo: improve typings\n            for (const key in this.$$.slotted) {\n                // @ts-ignore todo: improve typings\n                this.appendChild(this.$$.slotted[key]);\n            }\n        }\n        attributeChangedCallback(attr, _oldValue, newValue) {\n            this[attr] = newValue;\n        }\n        disconnectedCallback() {\n            run_all(this.$$.on_disconnect);\n        }\n        $destroy() {\n            destroy_component(this, 1);\n            this.$destroy = noop;\n        }\n        $on(type, callback) {\n            // TODO should this delegate to addEventListener?\n            const callbacks = (this.$$.callbacks[type] || (this.$$.callbacks[type] = []));\n            callbacks.push(callback);\n            return () => {\n                const index = callbacks.indexOf(callback);\n                if (index !== -1)\n                    callbacks.splice(index, 1);\n            };\n        }\n        $set($$props) {\n            if (this.$$set && !is_empty($$props)) {\n                this.$$.skip_bound = true;\n                this.$$set($$props);\n                this.$$.skip_bound = false;\n            }\n        }\n    };\n}\n/**\n * Base class for Svelte components. Used when dev=false.\n */\nclass SvelteComponent {\n    $destroy() {\n        destroy_component(this, 1);\n        this.$destroy = noop;\n    }\n    $on(type, callback) {\n        const callbacks = (this.$$.callbacks[type] || (this.$$.callbacks[type] = []));\n        callbacks.push(callback);\n        return () => {\n            const index = callbacks.indexOf(callback);\n            if (index !== -1)\n                callbacks.splice(index, 1);\n        };\n    }\n    $set($$props) {\n        if (this.$$set && !is_empty($$props)) {\n            this.$$.skip_bound = true;\n            this.$$set($$props);\n            this.$$.skip_bound = false;\n        }\n    }\n}\n\nfunction dispatch_dev(type, detail) {\n    document.dispatchEvent(custom_event(type, Object.assign({ version: '3.46.4' }, detail), true));\n}\nfunction append_dev(target, node) {\n    dispatch_dev('SvelteDOMInsert', { target, node });\n    append(target, node);\n}\nfunction append_hydration_dev(target, node) {\n    dispatch_dev('SvelteDOMInsert', { target, node });\n    append_hydration(target, node);\n}\nfunction insert_dev(target, node, anchor) {\n    dispatch_dev('SvelteDOMInsert', { target, node, anchor });\n    insert(target, node, anchor);\n}\nfunction insert_hydration_dev(target, node, anchor) {\n    dispatch_dev('SvelteDOMInsert', { target, node, anchor });\n    insert_hydration(target, node, anchor);\n}\nfunction detach_dev(node) {\n    dispatch_dev('SvelteDOMRemove', { node });\n    detach(node);\n}\nfunction detach_between_dev(before, after) {\n    while (before.nextSibling && before.nextSibling !== after) {\n        detach_dev(before.nextSibling);\n    }\n}\nfunction detach_before_dev(after) {\n    while (after.previousSibling) {\n        detach_dev(after.previousSibling);\n    }\n}\nfunction detach_after_dev(before) {\n    while (before.nextSibling) {\n        detach_dev(before.nextSibling);\n    }\n}\nfunction listen_dev(node, event, handler, options, has_prevent_default, has_stop_propagation) {\n    const modifiers = options === true ? ['capture'] : options ? Array.from(Object.keys(options)) : [];\n    if (has_prevent_default)\n        modifiers.push('preventDefault');\n    if (has_stop_propagation)\n        modifiers.push('stopPropagation');\n    dispatch_dev('SvelteDOMAddEventListener', { node, event, handler, modifiers });\n    const dispose = listen(node, event, handler, options);\n    return () => {\n        dispatch_dev('SvelteDOMRemoveEventListener', { node, event, handler, modifiers });\n        dispose();\n    };\n}\nfunction attr_dev(node, attribute, value) {\n    attr(node, attribute, value);\n    if (value == null)\n        dispatch_dev('SvelteDOMRemoveAttribute', { node, attribute });\n    else\n        dispatch_dev('SvelteDOMSetAttribute', { node, attribute, value });\n}\nfunction prop_dev(node, property, value) {\n    node[property] = value;\n    dispatch_dev('SvelteDOMSetProperty', { node, property, value });\n}\nfunction dataset_dev(node, property, value) {\n    node.dataset[property] = value;\n    dispatch_dev('SvelteDOMSetDataset', { node, property, value });\n}\nfunction set_data_dev(text, data) {\n    data = '' + data;\n    if (text.wholeText === data)\n        return;\n    dispatch_dev('SvelteDOMSetData', { node: text, data });\n    text.data = data;\n}\nfunction validate_each_argument(arg) {\n    if (typeof arg !== 'string' && !(arg && typeof arg === 'object' && 'length' in arg)) {\n        let msg = '{#each} only iterates over array-like objects.';\n        if (typeof Symbol === 'function' && arg && Symbol.iterator in arg) {\n            msg += ' You can use a spread to convert this iterable into an array.';\n        }\n        throw new Error(msg);\n    }\n}\nfunction validate_slots(name, slot, keys) {\n    for (const slot_key of Object.keys(slot)) {\n        if (!~keys.indexOf(slot_key)) {\n            console.warn(`<${name}> received an unexpected slot \"${slot_key}\".`);\n        }\n    }\n}\n/**\n * Base class for Svelte components with some minor dev-enhancements. Used when dev=true.\n */\nclass SvelteComponentDev extends SvelteComponent {\n    constructor(options) {\n        if (!options || (!options.target && !options.$$inline)) {\n            throw new Error(\"'target' is a required option\");\n        }\n        super();\n    }\n    $destroy() {\n        super.$destroy();\n        this.$destroy = () => {\n            console.warn('Component was already destroyed'); // eslint-disable-line no-console\n        };\n    }\n    $capture_state() { }\n    $inject_state() { }\n}\n/**\n * Base class to create strongly typed Svelte components.\n * This only exists for typing purposes and should be used in `.d.ts` files.\n *\n * ### Example:\n *\n * You have component library on npm called `component-library`, from which\n * you export a component called `MyComponent`. For Svelte+TypeScript users,\n * you want to provide typings. Therefore you create a `index.d.ts`:\n * ```ts\n * import { SvelteComponentTyped } from \"svelte\";\n * export class MyComponent extends SvelteComponentTyped<{foo: string}> {}\n * ```\n * Typing this makes it possible for IDEs like VS Code with the Svelte extension\n * to provide intellisense and to use the component like this in a Svelte file\n * with TypeScript:\n * ```svelte\n * <script lang=\"ts\">\n * \timport { MyComponent } from \"component-library\";\n * </script>\n * <MyComponent foo={'bar'} />\n * ```\n *\n * #### Why not make this part of `SvelteComponent(Dev)`?\n * Because\n * ```ts\n * class ASubclassOfSvelteComponent extends SvelteComponent<{foo: string}> {}\n * const component: typeof SvelteComponent = ASubclassOfSvelteComponent;\n * ```\n * will throw a type error, so we need to separate the more strictly typed class.\n */\nclass SvelteComponentTyped extends SvelteComponentDev {\n    constructor(options) {\n        super(options);\n    }\n}\nfunction loop_guard(timeout) {\n    const start = Date.now();\n    return () => {\n        if (Date.now() - start > timeout) {\n            throw new Error('Infinite loop detected');\n        }\n    };\n}\n\nexport { HtmlTag, HtmlTagHydration, SvelteComponent, SvelteComponentDev, SvelteComponentTyped, SvelteElement, action_destroyer, add_attribute, add_classes, add_flush_callback, add_location, add_render_callback, add_resize_listener, add_styles, add_transform, afterUpdate, append, append_dev, append_empty_stylesheet, append_hydration, append_hydration_dev, append_styles, assign, attr, attr_dev, attribute_to_object, beforeUpdate, bind, binding_callbacks, blank_object, bubble, check_outros, children, claim_component, claim_element, claim_html_tag, claim_space, claim_svg_element, claim_text, clear_loops, component_subscribe, compute_rest_props, compute_slots, createEventDispatcher, create_animation, create_bidirectional_transition, create_component, create_in_transition, create_out_transition, create_slot, create_ssr_component, current_component, custom_event, dataset_dev, debug, destroy_block, destroy_component, destroy_each, detach, detach_after_dev, detach_before_dev, detach_between_dev, detach_dev, dirty_components, dispatch_dev, each, element, element_is, empty, end_hydrating, escape, escape_attribute_value, escape_object, escaped, exclude_internal_props, fix_and_destroy_block, fix_and_outro_and_destroy_block, fix_position, flush, getAllContexts, getContext, get_all_dirty_from_scope, get_binding_group_value, get_current_component, get_custom_elements_slots, get_root_for_style, get_slot_changes, get_spread_object, get_spread_update, get_store_value, globals, group_outros, handle_promise, hasContext, has_prop, identity, init, insert, insert_dev, insert_hydration, insert_hydration_dev, intros, invalid_attribute_name_character, is_client, is_crossorigin, is_empty, is_function, is_promise, listen, listen_dev, loop, loop_guard, merge_ssr_styles, missing_component, mount_component, noop, not_equal, now, null_to_empty, object_without_properties, onDestroy, onMount, once, outro_and_destroy_block, prevent_default, prop_dev, query_selector_all, raf, run, run_all, safe_not_equal, schedule_update, select_multiple_value, select_option, select_options, select_value, self, setContext, set_attributes, set_current_component, set_custom_element_data, set_data, set_data_dev, set_input_type, set_input_value, set_now, set_raf, set_store_value, set_style, set_svg_attributes, space, spread, src_url_equal, start_hydrating, stop_propagation, subscribe, svg_element, text, tick, time_ranges_to_array, to_number, toggle_class, transition_in, transition_out, trusted, update_await_block_branch, update_keyed_each, update_slot, update_slot_base, validate_component, validate_each_argument, validate_each_keys, validate_slots, validate_store, xlink_attr };\n","/**********************************************\n * Functions for statistical tests            *\n **********************************************/\n\n/**\n * Returns a p-value for any test\n * @param {function} pfun - reference to a CDF function (e.g. pnorm)\n * @param {number} crit - critical value for the test (e.g. z-score or t-score)\n * @param {string} tail - which tail to use (\"left\", \"right\", or \"both\")\n * @param {Array} params - additional parameters to CDF function\n * @returns {number} - a p-value for the test\n */\nexport function getPValue(pfun, crit, tail, params = []) {\n\n   if (tail === \"left\") {\n      return(pfun(crit, ...params));\n   }\n\n   if (tail === \"right\") {\n      return(1 - pfun(crit, ...params));\n   }\n\n   if (tail === \"both\") {\n      let p = pfun(crit, ...params);\n      return min([p, 1 - p]) * 2;\n   }\n}\n\n\n/**\n * Makes one-sample t-test for a mean\n * @param {number[]} x - vector with sample values\n * @param {number} mu - assumed mean value for population (H0)\n * @param {number} alpha - significance level (used to compute confidence interval)\n * @param {string} tail - which tail to use (\"left\", \"right\", or \"both\")\n * @returns {Object} - a JSON with test results\n */\nexport function tTest1(x, mu = 0, alpha = 0.05, tail = \"both\") {\n\n   if (typeof(mu) !== \"number\") {\n      throw Error(\"Parameter 'mu' should be a number.\");\n   }\n\n   const nx = x.length;\n\n   const effectExpected = mu;\n   const effectObserved = mean(x);\n   const se = sd(x) / Math.sqrt(nx);\n   const tValue = (effectObserved - effectExpected) / se;\n   const DoF = nx - 1\n   const errMargin = qt(1 - alpha/2, DoF) * se;\n\n   return {\n      test: \"One sample t-test\",\n      effectExpected: mu,\n      effectObserved: effectObserved,\n      se: se,\n      tValue: tValue,\n      alpha: alpha,\n      tail: tail,\n      DoF: DoF,\n      pValue: getPValue(pt, tValue, tail, [DoF]),\n      ci: [effectObserved - errMargin, effectObserved + errMargin]\n   };\n}\n\n/**\n * Makes two-sample t-test for a difference of means assuming population variances equal\n * @param {number[]} x - vector with sample 1 values\n * @param {number[]} y - vector with sample 2 values\n * @param {number} alpha - significance level (used to compute confidence interval)\n * @param {string} tail - which tail to use (\"left\", \"right\", or \"both\")\n * @returns {Object} - a JSON with test results\n */\nexport function tTest2(x, y, alpha = 0.05, tail = \"both\") {\n   const nx = x.length;\n   const mx = mean(x);\n   const my = mean(y);\n   const ny = y.length;\n\n   const effectExpected = 0;\n   const effectObserved = mx - my;\n   const se = Math.sqrt( (sd(x)**2 / nx) + (sd(y)**2 / ny));\n   const tValue = (effectObserved - effectExpected) / se;\n   const DoF = (nx - 1) + (ny - 1);\n   const errMargin = qt(1 - alpha/2, DoF) * se;\n\n   return {\n      test: \"Two sample t-test\",\n      effectExpected: effectExpected,\n      effectObserved: effectObserved,\n      se: se,\n      tValue: tValue,\n      alpha: alpha,\n      tail: tail,\n      DoF: DoF,\n      pValue: getPValue(pt, tValue, tail, [DoF]),\n      ci: [effectObserved - errMargin, effectObserved + errMargin]\n   };\n}\n\n/**********************************************\n *\n * Functions for computing single statistics  *\n **********************************************/\n\n/**\n * Computes kurtosis of values\n * @param {number[]} x - vector with values\n * @returns {number}\n */\nexport function kurtosis(x) {\n   let n = x.length;\n   let m = mean(x);\n\n   let m4 = 0.0;\n   let m2 = 0.0;\n   for (let i = 0; i < n; i++) {\n      m2 = m2 + Math.pow((x[i] - m), 2);\n      m4 = m4 + Math.pow((x[i] - m), 4);\n   }\n\n   return (m4/n) / Math.pow((m2/n), 2);\n}\n\n\n/**\n * Computes skewness of values\n * @param {number[]} x - vector with values\n * @returns {number}\n */\nexport function skewness(x) {\n   let n = x.length;\n   let m = mean(x);\n\n   let m3 = 0.0;\n   let m2 = 0.0;\n   for (let i = 0; i < n; i++) {\n      m2 = m2 + Math.pow((x[i] - m), 2);\n      m3 = m3 + Math.pow((x[i] - m), 3);\n   }\n\n   return (m3/n) / Math.pow((m2/n), 1.5);\n}\n\n\n/**\n * Finds smallest value in a vector\n * @param {number[]} x - vector with values\n * @returns {number}\n */\nexport function min(x) {\n   let n = x.length;\n   let min = Number.POSITIVE_INFINITY\n\n   while (n--) min = x[n] < min ? x[n] : min;\n   return min;\n}\n\n\n/**\n * Finds largest value in a vector\n * @param {number[]} x - vector with values\n * @returns {number}\n */\nexport function max(x) {\n   let n = x.length;\n   let max = Number.NEGATIVE_INFINITY\n\n   while (n--) max = x[n] > max ? x[n] : max;\n   return max;\n}\n\n\n/**\n * Computes sum of all values in a vector\n * @param {number[]} x - vector with values\n * @returns {number}\n */\nexport function sum(x) {\n   let s = 0;\n   for (let i = 0; i < x.length; i++) {\n      s = s + x[i];\n   }\n\n   return s;\n}\n\n\n/**\n * Computes product of all value in a vector\n * @param {number[]} x - vector with values\n * @returns {number}\n */\nexport function prod(x) {\n   let p = 1;\n   for (let i = 0; i < x.length; i++) {\n      p = p * x[i];\n   }\n\n   return p;\n}\n\n\n/**\n * Computes mean (average) value for a vector\n * @param {number[]} x - vector with values\n * @returns {number}\n */\nexport function mean(x) {\n   return sum(x) / x.length;\n}\n\n\n/**\n * Computes covariance between two vectors\n * @param {number[]} x - vector with values\n * @param {number[]} y - vector with values\n * @param {boolean} biased - compute a biased version with n degrees of freedom or not (with n-1).\n * @param {number} mx - mean of x values (if already known)\n * @param {number} my - mean of y values (if already known)\n * @returns {number}\n */\nexport function cov(x, y, biased = false, mx = undefined, my = undefined) {\n\n   const n = x.length;\n\n   if (y.length !== n) {\n      throw Error(\"Vectors 'x' and 'y' must have the same length.\");\n   }\n\n   if (n < 2) {\n      throw Error(\"Vectors 'x' and 'y' must have at least two values.\");\n   }\n\n   if (mx === undefined) mx = mean(x);\n   if (my === undefined) my = mean(y);\n\n   let cov = 0;\n   for (let i = 0; i < n; i++) {\n      cov = cov + (x[i] - mx) * (y[i] - my);\n   }\n\n   return cov / (biased ? n : n - 1);\n}\n\n\n/**\n * Computes variance for a vector\n * @param {number[]} x - vector with values\n * @param {boolean} biased - compute a biased version with n degrees of freedom or not (with n-1).\n * @param {number} m - mean value (e.g. if already computed).\n * @returns {number}\n */\nexport function variance(x, biased = false, m = undefined) {\n   return cov(x, x, biased, m, m);\n}\n\n\n/**\n * Computes standard deviation for a vector\n * @param {number[]} x - vector with values\n * @param {boolean} biased - compute a biased version with n degrees of freedom or not (with n-1).\n * @param {number} m - mean value (e.g. if already computed).\n * @returns {number}\n */\nexport function sd(x, biased = false, m = undefined) {\n   return Math.sqrt(variance(x, biased, m));\n}\n\n\n/**\n * Computes correlation between two vectors\n * @param {number[]} x - vector with values\n * @param {number[]} y - vector with values\n * @param {string} method - which method to use (\"pearson\" or \"spearman\")\n * @returns {number}\n */\nexport function cor(x, y, method = \"pearson\") {\n\n   if (method === \"spearman\") {\n      return cor(rank(x), rank(y));\n   }\n\n   return cov(x, y) / (sd(x) * sd(y));\n}\n\n\n\n/***************************************************\n * Functions for computing vectors of statistics   *\n ***************************************************/\n\n\n/**\n * Computes a p-th quantile/quantiles for a numeric vector\n * @param {number[]} x - vector with values\n * @param {number|number[]} p - probability (one value or a vector)\n * @returns {number}\n */\nexport function quantile(x, p) {\n\n   x = sort(x);\n   const n = x.length;\n\n   if (!Array.isArray(p)) p = [p];\n   if (typeof(p[0]) !== \"number\" || min(p) < 0 || max(p) > 1) {\n      throw new Error(\"Parameter 'p' must be between 0 and 1 (both included).\");\n   }\n\n   function q(x, p) {\n      const h = (n - 1) * p + 1;\n      const n1 = Math.floor(h);\n      const n2 = Math.ceil(h);\n      return x[n1 - 1] + (x[n2 - 1] - x[n1 - 1]) * (h - Math.floor(h));\n   }\n\n   const out =  p.map(v => q(x, v));\n   return p.length == 1 ? out[0] : out;\n}\n\n\n/**\n * Generate a sequence of n numbers between min and max.\n * @param {number} min - first value in the sequence\n * @param {number} max - last value in the sequence\n * @param {number} n - number of values in the sequence\n * @returns {number[]} array with the sequence values\n */\nexport function seq(min, max, n) {\n\n   if (n < 2) {\n      throw new Error(\"Parameter 'n' should be ≥ 2.\");\n   }\n\n   if (n === undefined && Number.isInteger(min) && Number.isInteger(max)) {\n      n = max - min + 1;\n   }\n\n   const step = (max - min + 0.0) / (n - 1 + 0.0)\n   let out = [...Array(n)].map((x, i) => min + i * step);\n\n   // if step is smaller than 1 round values to remove small decimals accidentally added by JS\n   if (Math.abs(step) < 1) {\n      const r = Math.pow(10, Math.round(-Math.log10(step)) + 1);\n      out = out.map(v => Math.round((v + Number.EPSILON) * r) / r)\n   }\n\n   return(out)\n}\n\n\n/**\n * Finds a range of values in a vector (min and max)\n * @param {number[]} x - vector with values\n * @returns {number[]} array with min and max values\n */\nexport function range(x) {\n   return [min(x), max(x)];\n}\n\n\n/**\n * Computes a range of values in a vector with a margin\n * @param {number[]} x - vector with values\n * @param {number} margin - margin in parts of one (e.g. 0.1 for 10% or 2 for 200%)\n * @returns{number[]} array with marginal range boundaries\n */\nexport function mrange(x, margin = 0.05) {\n   const mn = min(x);\n   const mx = max(x);\n   const d = mx - mn;\n\n   return [mn - d * margin, max(x) + d * margin];\n}\n\n\n/**\n * Splits range of vector values into equal intervals\n * @param {number[]} x - vector with values\n * @param {number} n - number of intervals\n * @returns {number[]} vector with boundaries of the intervals\n */\nexport function split(x, n) {\n   if (x === undefined || !Array.isArray(x) || x.length < 2) {\n      throw new Error(\"split: 'x' must bet a vector with numbers.\");\n   }\n\n   if (n === undefined || n < 2) {\n      throw new Erro(\"split: 'n' must be a positive integer number.\");\n   }\n\n   const mn = min(x);\n   const mx = max(x);\n\n   if (mn === mx) {\n      throw new Error(\"split: values in a vector 'x' should vary.\");\n   }\n\n   const step = (mx - mn) / n;\n   return Array.from({length: n + 1}, (v, i) => mn + i * step + 0.0);\n}\n\n\n/**\n * Counts how many values from a vector falls into provided intervals (bins)\n * @param {number[]} x - vector with values\n * @param {number[]} bins - vector with bins boundaries\n * @returns {number[]} vector with counts for each bean\n */\nexport function count(x, bins) {\n\n   if (x === undefined || !Array.isArray(x) ||x.length < 2) {\n      throw new Error(\"count: 'x' must be a vector with numbers.\")\n   }\n\n   if (bins === undefined || !Array.isArray(bins) || bins.length < 2) {\n      throw new Error(\"count: 'bins' must be a vector with numbers.\")\n   }\n\n   const n = bins.length;\n\n   // add a bit extra to right side of the last bin\n   bins[n - 1] = bins[n - 1] * 1.0001\n\n   // count\n   let counts = Array(n - 1).fill(0);\n   for (let i = 0; i < x.length; i++) {\n      for (let j = 0; j < n - 1; j++) {\n         if (x[i] >= bins[j] && x[i] < bins[j + 1]) counts[j] = counts[j] + 1;\n      }\n   }\n   return counts;\n}\n\n\n/**\n * Computes middle points between values of a vector\n * @param {number[]} x - vector with values\n * @returns {number[]} vector with middle points\n */\nexport function mids(x) {\n   return x.slice(1).map((v, i) => (0.5 * (v + x[i])));\n}\n\n\n/**\n * Computes difference between all adjacent values in a vector\n * @param {number[]} x - vector with values\n * @returns {number[]} vector with the differences\n */\nexport function diff(x) {\n   return x.slice(1).map( (y, i) => (y - x[i]));\n}\n\n\n/**\n * Finds outliers in a vector based on inter-quartile range distance\n * @param {Array} x - vector with values\n * @param {number} Q1 - first quartile (optional parameter)\n * @param {Array} Q3 - third quartile (optional parameter)\n * @returns {Array} vector with outliers or empty vector if none were found.\n */\nexport function getOutliers(x, Q1 = undefined, Q3 = undefined) {\n\n   if (Q1 === undefined) Q1 = quantile(x, 0.25);\n   if (Q3 === undefined) Q3 = quantile(x, 0.75);\n\n   const IQR = Q3 - Q1;\n   const bl = Q1 - 1.5 * IQR\n   const bu = Q3 + 1.5 * IQR\n   return(x.filter(v => v < bl || v > bu));\n}\n\n\n/**\n * Returns ranks of values in a vector (ranks start from 1, not 0)\n * @param {number[]} x - vector with values\n * @returns {number[]} vector with ranks\n */\nexport function rank(x) {\n   const y = [...x].sort((a, b) => a - b);\n   return(x.map(v => y.indexOf(v) + 1));\n}\n\n\n/**\n * Generate probability points for QQ plot\n * @param {number} n - number of points\n * @returns {Array} a sequence of probabilities between 0 and 1\n */\nexport function ppoints(n) {\n   const a = n < 10 ? 3.0/8.0 : 0.5;\n   return Array.from({length: n}, (v, i) => (i + 1 - a) / (n + (1 - a) - a));\n}\n\n\n/**\n * Computes cumulative sums for the vector values\n * @param {number[]} x - vector with values\n * @returns {number[]}\n */\nexport function cumsum(x) {\n   let s = 0;\n   return x.map(v => s += v);\n}\n\n\n\n/***********************************************\n * Functions for theoretical distribution      *\n ***********************************************/\n\n\n/**\n * Generates 'n' random numbers from a uniform distribution\n * @param {number} n - amount of numbers to generate\n * @param {number} a - smallest value (min) of the population\n * @param {number} b - largest value (max) of the population\n * @returns {number[]} vector with generated numbers\n */\nexport function runif(n, a = 0, b = 1) {\n   let out = Array(n);\n   for (let i = 0; i < n; i++) out[i] = (a + Math.random() * (b - a));\n   return out;\n}\n\n\n/**\n * Probability density function for uniform distribution\n * @param {Array} x - vector of values\n * @param {number} a - smallest value (min) of the population\n * @param {number} b - largest value (max) of the population\n * @returns {Array} vector with densities\n */\nexport function dunif(x, a = 0, b = 1) {\n\n   if (!Array.isArray(x)) x = [x];\n\n   const n = x.length;\n   const A = 1 / (b - a);\n   let d = Array(n);\n\n   for (let i = 0; i < n; i++) {\n      d[i] = (x[i] < a || x[i] > b ) ? 0 : A;\n   }\n\n   return d;\n}\n\n\n/**\n * Cumulative distribution function for uniform distribution\n * @param {Array} x - vector of values\n * @param {number} a - smallest value (min) of the population\n * @param {number} b - largest value (max) of the population\n * @returns {Array} vector with probabilities\n */\nexport function punif(x, a = 0, b = 1) {\n\n   if (!Array.isArray(x)) x = [x];\n\n   const n = x.length;\n   let p = Array(n);\n   for (let i = 0; i < n; i++) {\n      if (x[i] < a) {\n         p[i] = 0;\n      } else if (x[i] > b) {\n         p[i] = 1;\n      } else {\n         p[i] = (x[i] - a) / (b - a)\n      }\n   }\n\n   return p;\n}\n\n\n /**\n * Generates 'n' random numbers from a normal distribution\n * @param {number} n - amount of numbers to generate\n * @param {number} mu - average value of the population\n * @param {number} sigma - standard deviation of the population\n * @returns {Array} vector with generated numbers\n */\nexport function rnorm(n, mu = 0, sigma = 1) {\n\n   let out = Array(n);\n   for (let i = 0; i < n; i ++) {\n      const a = Math.sqrt(-2 * Math.log(Math.random()));\n      const b = 2 * Math.PI * Math.random();\n      out[i] = (a * Math.sin(b) * sigma + mu);\n   }\n\n   return out;\n}\n\n\n/**\n * Probability density function for normal distribution\n * @param {Array} x - vector of values\n * @param {number} mu - average value of the population\n * @param {number} sigma - standard deviation of the population\n * @returns {Array} vector with densities\n */\nexport function dnorm(x, mu = 0, sigma = 1) {\n\n   if (!Array.isArray(x)) x = [x];\n\n   const n = x.length;\n   const A = 1 / (Math.sqrt(2 * Math.PI) * sigma);\n   const frac = -0.5 / sigma ** 2;\n\n   let d = Array(n);\n   for (let i = 0; i < n; i++) {\n      const df = x[i] - mu;\n      d[i] = A * Math.exp(frac * df * df);\n   }\n\n   return x.length === 1 ? d[0] : d;\n}\n\n\n/**\n * Cumulative distribution function for normal distribution\n * @param {Array} x - vector of values\n * @param {number} mu - average value of the population\n * @param {number} sigma - standard deviation of the population\n * @returns {Array} vector with probabilities\n */\nexport function pnorm(x, mu = 0, sigma = 1) {\n\n   if (!Array.isArray(x)) x = [x];\n\n   const n = x.length;\n   const frac = 1 / (Math.sqrt(2) * sigma);\n\n   let p = Array(n);\n   for (let i = 0; i < n; i++) {\n      p[i] = 0.5 * (1 + erf((x[i] - mu) * frac))\n   }\n\n   return p.length === 1 ? p[0] : p;\n}\n\n/**\n * Inverse cumulative distribution function for normal distribution\n * @param {number|number[]} p - vector of probabilities or a single probability value\n * @param {number} mu - average value of the population\n * @param {number} sigma - standard deviation of the population\n * @returns {number|number[]} vector with quantiles or single quantile value\n */\nexport function qnorm(p, mu = 0, sigma = 1) {\n\n   if (Array.isArray(p)) {\n      return p.map(v => qnorm(v, mu, sigma));\n   }\n\n   if (mu !== 0 || sigma !== 1) {\n      return qnorm(p) * sigma + mu;\n   }\n\n   if (p < 0 || p > 1) {\n      throw Error(\"Parameter 'p' must be between 0 and 1.\");\n   }\n\n   if (p < 0.0000000001) return -Infinity;\n   if (p > 0.9999999999) return +Infinity;\n\n   const SP1 = 0.425;\n   const SP2 = 5.0;\n   const C1 = 0.180625;\n   const C2 = 1.6;\n\n   const a0 = 3.3871327179;\n   const a1 = 5.0434271938 * 10;\n   const a2 = 1.5929113202 * 100;\n   const a3 = 5.9109374720 * 10;\n   const b1 = 1.7895169469 * 10;\n   const b2 = 7.8757757664 * 10;\n   const b3 = 6.7187563600 * 10;\n\n   const c0 = 1.4234372777;\n   const c1 = 2.7568153900;\n   const c2 = 1.3067284816;\n   const c3 = 1.7023821103 * 0.1;\n   const d1 = 7.3700164250 * 0.1;\n   const d2 = 1.2021132975 * 0.1;\n\n   const e0 = 6.6579051150;\n   const e1 = 3.0812263860;\n   const e2 = 4.2868294337 * 0.1;\n   const e3 = 1.7337203997 * 0.01;\n   const f1 = 2.4197894225 * 0.1;\n   const f2 = 1.2258202635 * 0.01;\n\n   const q = p - 0.5;\n   let r;\n\n   if (Math.abs(q) <= SP1) {\n      r = C1 - q * q;\n      return q * (((a3 * r + a2) * r + a1) *r + a0) / (((b3 * r + b2) * r + b1) * r + 1.0);\n   }\n\n   r = q < 0 ? p : 1 - p;\n   r = Math.sqrt(-Math.log(r));\n   let res;\n\n   if (r <= SP2) {\n      r = r - C2;\n      res = (((c3 * r + c2) * r + c1) * r + c0) / ((d2 * r + d1) * r + 1.0);\n   } else {\n      r = r - SP2;\n      res = (((e3 * r + e2) * r + e1) + e0) / ((f2 * r + f1) * r + 1.0);\n   }\n\n   return q < 0 ? -res : res;\n}\n\n/**\n * Probability density function for Student's t-distribution\n * @param {number|number[]} t - t-value or a vector of t-values\n * @param {number} dof - degrees of freedom\n */\nexport function dt(t, dof) {\n\n   if (dof < 0) {\n      throw new Error(\"Parameter 'dof' should be a positive number.\");\n   }\n\n   if (Array.isArray(t)) {\n      return t.map(v => dt(v, dof));\n   }\n\n   const pow = -0.5 * (dof + 1);\n   const A = 1 / (Math.sqrt(dof) * beta(0.5, dof/2));\n   return (A * Math.pow((1 + t * t / dof), pow));\n}\n\n\n/**\n * Cumulative distribution function for Student's t-distribution\n * @param {number|number[]} t - t-value or a vector of t-values\n * @param {number} dof - degrees of freedom\n */\nexport function pt(t, dof) {\n\n   if (dof === undefined || dof === null || dof < 1) {\n      throw Error(\"Parameter 'dof' (degrees of freedom) must be an integer number >= 1.\");\n   }\n\n   if (Array.isArray(t)) {\n      return t.map(v => pt(v, dof));\n   }\n\n   // since distribution in symmetric we can use only left tail\n   if (t === 0) return 0.5;\n   if (t === -Infinity) return 0;\n   if (t === Infinity) return 1;\n   if (t > 0) return (1 - pt(-t, dof));\n\n   return integrate((x) => dt(x, dof), -Infinity, t);\n}\n\n\n/**\n * Inverse cumulative distribution function for Student's t-distribution\n * @param {number|number[]} p - probability or vector with probabilities\n * @param {number} dof - degrees of freedom\n */\nexport function qt(p, dof) {\n\n   if (dof === undefined || dof === null || dof < 1) {\n      throw Error(\"Parameter 'dof' (degrees of freedom) must be an integer number >= 1.\");\n   }\n\n   if (p < 0 || p > 1) {\n      throw Error(\"Parameter 'p' must be between 0 and 1.\");\n   }\n\n   if (Array.isArray(p)) {\n      return p.map(v => qt(v, dof));\n   }\n\n   if (p < 0.0000000001) return -Infinity;\n   if (p > 0.9999999999) return +Infinity;\n\n\n   // simple cases — exact solutions\n   if (dof === 1) {\n      return Math.tan(Math.PI * (p - 0.5));\n   }\n\n   if (dof === 2) {\n      return 2 * (p - 0.5) * Math.sqrt(2 / (4 * p * (1 - p)));\n   }\n\n   // approximation\n\n   let sign = -1;\n   if (p >= 0.5){\n      sign = +1 ;\n      p = 2 * (1 - p);\n   } else {\n      sign = -1;\n      p = 2 * p;\n   }\n\n   const a = 1.0 / (dof - 0.5);\n   const b = 48.0 / (a ** 2);\n   let c = ((20700 * a / b - 98) * a - 16) * a + 96.36;\n   const d = ((94.5 / (b + c) - 3.0)/b + 1.0) * Math.sqrt(a * Math.PI / 2) * dof;\n\n   let x = d * p;\n   let y = x ** (2.0/dof);\n\n   if (y > 0.05 + a) {\n\n      // asymptotic inverse expansion about normal\n      x = qnorm(p * 0.5);\n      y = x ** 2;\n\n      if (dof < 5) {\n         c = c + 0.3 * (dof - 4.5) * (x + 0.6);\n      }\n\n      c = (((0.05 * d * x - 5.0) * x - 7.0) * x - 2.0) * x + b + c;\n      y = (((((0.4 * y + 6.3) * y + 36.0) * y + 94.5) / c - y - 3.0)/b + 1.0) * x;\n      y = a * (y ** 2);\n      y = y > 0.002 ? Math.exp(y) - 1.0 : 0.5 * (y ** 2) + y;\n   } else {\n      y = ((1.0 / (((dof + 6.0)/(dof * y) - 0.089 * d - 0.822) * (dof + 2.0) * 3.0) + 0.5/(dof + 4.0)) * y - 1.0) *\n         (dof + 1.0)/(dof + 2.0) + 1.0/y;\n   }\n\n   return sign * Math.sqrt(dof * y);\n}\n\n\n\n/**\n * Probability density function for F-distribution\n * @param {number|number[]} F - F-value or a vector of t-values\n * @param {number} d1 - degrees of freedom\n * @param {number} d2 - degrees of freedom\n */\nexport function df(F, d1, d2) {\n\n   if (F < 0 || d1 < 0 || d2 < 0) {\n      throw new Error(\"All 3 parameters must be positive.\");\n   }\n\n   if (d2 <= d1) {\n      throw new Error(\"Parameter 'd1' must be larger 'd2'.\");\n   }\n\n   if (Array.isArray(F)) {\n      return F.map(v => df(v, d1, d2));\n   }\n\n   return Math.sqrt( ( (d1 * F)**d1 * d2**d2) / ((d1 * F + d2)**(d1 + d2))) / (F * beta(d1/2, d2/2))\n}\n\n\n/**\n * Cumulative distribution function for F-distribution\n * @param {number|number[]} F - F-value or a vector of t-values\n * @param {number} d1 - degrees of freedom\n * @param {number} d2 - degrees of freedom\n */\nexport function pf(F, d1, d2) {\n\n   if (F < 0 || d1 < 0 || d2 < 0) {\n      throw new Error(\"All 3 parameters must be positive.\");\n   }\n\n   if (d2 <= d1) {\n      throw new Error(\"Parameter 'd1' must be larger 'd2'.\");\n   }\n\n   if (Array.isArray(F)) {\n      return F.map(v => pf(v, d1, d2));\n   }\n\n   return ibeta(d1 * F / (d1 * F + d2), d1/2, d2/2)\n}\n\n\n\n/***********************************************\n * Functions for manipulations with values     *\n ***********************************************/\n\n\n/**\n * Sorts values in a vector\n * @param {Array} x - vector with values\n * @returns {Array} vector with sorted values\n */\nexport function sort(x, decreasing = false) {\n   return decreasing ? [...x].sort((a, b) => b - a) : [...x].sort((a, b) => a - b);\n}\n\n\n/**\n * Replicates values in x n times\n * @param {any} x - single value or a vector with values\n * @param {number} n - how many times to replicate\n */\nexport function rep(x, n) {\n\n   if (Array.isArray(n)) {\n      if (x.length != n.length) {\n         throw new Error(\"Parameter 'n' should be a single value or a vector of the same length as x.\");\n      }\n\n      let out = [];\n      for (let i = 0; i < n.length; i++) {\n         out.push(...rep([x[i]], n[i]));\n      }\n\n      return out;\n   }\n\n   if (!Array.isArray(x)) x = [x];\n   if (n <= 1) return x;\n\n   const nx = x.length;\n   x.length = nx * n\n   for (let i = 0; i < n - 1; i ++) {\n      for (let j = 0; j < nx; j++) {\n         x[nx * (i + 1) + j] = x[j];\n      }\n   }\n\n   return x;\n}\n\n\n/**\n * Create a subset of vectors based on a vector of indices\n * @param {number[]} x - a vector with values\n * @param {number[]} indices - a vector with element indices (first index is 1 not 0!)\n */\nexport function subset(x, indices) {\n\n   if (!Array.isArray(x)) x = [x];\n   if (!Array.isArray(indices)) indices = [indices];\n\n   if (max(indices) > x.length || min(indices) < 1) {\n      throw new Error(\"Parameter 'indices' must have values between 1 and 'x.length'.\");\n   }\n\n   const n = indices.length;\n   let out = Array(n);\n   for (let i = 0; i < n; i++) {\n      out[i] = x[indices[i] - 1];\n   }\n\n   return out;\n}\n\n\n/**\n * Generate combination of all levels of vectors\n * @param {...} args - a sequence of vectors\n */\nexport function expandGrid(...args) {\n\n   const nargs = args.length;\n   const d = args.map(v => v.length);\n   let orep = prod(d);\n\n   let grid = Array(nargs);\n   let repFac = 1;\n\n   for (let i = 0; i < nargs; i++) {\n      const x = args[i];\n      const nx = x.length;\n      orep = orep/nx;\n      grid[i] = subset(x, rep(rep(seq(1, nx, nx), rep(repFac, nx)), orep));\n      repFac = repFac * nx;\n   }\n\n   return grid;\n}\n\n\n/**\n * Shuffles values in vector x using Fisher–Yates algorithm\n * @param {Array} x - a vector with values\n */\nexport function shuffle(x) {\n  let y = [...x];\n  let n = y.length;\n  let t, i;\n\n  while (n) {\n    i = Math.floor(Math.random() * n--);\n    t = y[n];\n    y[n] = y[i];\n    y[i] = t;\n  }\n\n  return y;\n}\n\n\n/**\n * Finds index of value in x which is closest to the value a\n * @param {number[]} x - a vector with values\n * @param {number}  a - a value\n */\nexport function closestIndex(x, a) {\n   const c = x.reduce((prev, curr) => Math.abs(curr - a) < Math.abs(prev - a) ? curr : prev);\n   return x.indexOf(c);\n}\n\n\n/**\n * Rounds number (or vector of numbers) to given amount of decimals\n * @param {number | number[]} x - a vector with values\n * @return {number | number[]}\n */\nexport function round(x, n = 0) {\n   if (Array.isArray(x)) {\n      return x.map(v => round(v, n));\n   }\n   return Number.parseFloat(x.toFixed(n));\n}\n\n/**\n * Standardize (mean center and sd scale) values from a vector\n * @param {number | number[]} x - a vector with values\n * @return {number} center - value for centering the values (if undefined, will use mean(x))\n * @return {number} scale - value for scaling the values (if undefined, will use sd(x))\n *\n */\nexport function scale(x, center = undefined, scale = undefined) {\n   if (center === undefined) center = mean(x);\n   if (scale === undefined) scale = sd(x);\n\n   const n = x.length;\n   let y = Array(n);\n\n   for (let i = 0; i < n; i++) {\n      y[i] = (x[i] - center) / scale;\n   }\n\n   return y;\n}\n\n\n\n/***************************************************************\n * Mathematical functions and methods needed for computations  *\n ***************************************************************/\n\n/**\n * Computes numeric integral for function \"f\" with limits (a, b)\n * @param {function} f - a reference to a function\n * @param {number} a - lower limit for integration\n * @param {number} b - upper limit for integration\n * @param {number} acc - absolute accuracy\n * @param {number} eps - relative accuracy\n * @param {number[]} oldfs - vector of values needed for recursion\n * @returns {number} result of integration\n */\nexport function integrate(f, a, b, acc = 0.000001, eps = 0.00001, oldfs = undefined) {\n\n   if (typeof(a) !== \"number\" || typeof(b) !== \"number\") {\n      throw Error(\"Parameters 'a' and 'b' must be numbers.\");\n   }\n\n   if (b < a) {\n      throw Error(\"Parameter 'b' must be larger 'a'.\");\n   }\n\n   // special case when left limit is minus infinity\n   if (a === -Infinity && b !== Infinity) {\n      return integrate((t) => f(b - (1 - t) / t) / (t ** 2), 0, 1);\n   }\n\n   // special case when right limit is plus infinity\n   if (a !== -Infinity && b === Infinity) {\n      return integrate((t) => f(a + (1 - t) / t) / (t ** 2), 0, 1);\n   }\n\n   // special case when both limits are infinite\n   if (a === -Infinity && b === Infinity) {\n      return integrate((t) => (f((1 - t) / t) + f((t - 1) / t)) / t ** 2, 0, 1);\n   }\n\n   // constants for splitting the integration interval\n   const x = [1/6, 2/6, 4/6, 5/6];\n   const w = [2/6, 1/6, 1/6, 2/6];\n   const v = [1/4, 1/4, 1/4, 1/4];\n   const p = [1, 0, 0, 1];\n\n   let n = x.length, h = b - a;\n   let fs;\n\n   if (oldfs === undefined) {\n      fs = x.map(v => f(a + v * h));\n   } else {\n      fs = new Array(n);\n      for (let k = 0, i = 0; i < n; i++) {\n         fs[i] = p[i] === 1 ? f(a + x[i] * h) : oldfs[k++];\n      }\n   }\n\n   let q4 = 0, q2 = 0;\n   for (let i = 0; i < n; i++) {\n      q4 += w[i] * fs[i] * h;\n      q2 += v[i] * fs[i] * h;\n   }\n\n   let tol = acc + eps * Math.abs(q4);\n   let err = Math.abs((q4 - q2)/3);\n\n   if (err < tol) return q4;\n\n   acc = acc / Math.sqrt(2.);\n   let mid = (a + b) / 2;\n   let left = fs.filter((v, i) => i < n/2);\n   let right = fs.filter((v, i) => i >= n/2);\n\n   let ql = integrate(f, a, mid, eps, acc, left);\n   let qr = integrate(f, mid, b, eps, acc, right);\n   return (ql + qr);\n}\n\n\n/**\n * Error function for normal distribution\n * @param {number} x - a number\n * @returns {number} value for erf\n */\nexport function erf(x) {\n\n  const sign = (x >= 0) ? 1 : -1;\n  x = Math.abs(x);\n\n  // constants\n  const a1 =  0.254829592;\n  const a2 = -0.284496736;\n  const a3 =  1.421413741;\n  const a4 = -1.453152027;\n  const a5 =  1.061405429;\n  const p  =  0.3275911;\n\n  // approximation\n  const t = 1.0 / (1.0 + p * x);\n  const y = 1.0 - (((((a5 * t + a4) * t) + a3) * t + a2) * t + a1) * t * Math.exp(-x * x);\n  return sign * y;\n}\n\n\n/**\n * Gamma function (approximation)\n * @param {number|number[]} z - argument (one value or a vector)\n * @returns {number} value of the Gamma function\n */\nexport function gamma(z) {\n\n   if (Array.isArray(z)) {\n      return z.map(v => gamma(v));\n   }\n\n   if (z <= 0) {\n      throw new Error(\"Gamma function only works with arguments > 0.\");\n   }\n\n   // coefficients\n   const p = [\n        676.5203681218851,\n      -1259.1392167224028,\n        771.32342877765313,\n       -176.61502916214059,\n         12.507343278686905,\n         -0.13857109526572012,\n          9.9843695780195716e-6,\n          1.5056327351493116e-7\n    ];\n\n   if (z < 0.5) {\n      return Math.PI / (Math.sin(Math.PI * z) + gamma(1 - z));\n   }\n\n   z = z - 1;\n   let x = 0.99999999999980993;\n\n   for (let i = 0; i < p.length; i++) {\n      x = x + p[i] / (z + i + 1);\n   }\n\n   const t = z + p.length - 0.5;\n   return Math.sqrt(2 * Math.PI) * Math.pow(t, z + 0.5) * Math.exp(-t) * x;\n}\n\n\n/**\n * Betta function (approximation)\n * @param {number} x - first argument (one value)\n * @param {number} y - second argument (one value)\n * @returns {number} value of the Beta function\n */\nexport function beta(x, y) {\n   return gamma(x) * gamma(y) / gamma(x + y);\n}\n\n\n/**\n * Incomplete Betta function (approximation via numeric integration)\n * @param {number} x - first argument (one value)\n * @param {number} a - second argument (one value)\n * @param {number} b - third argument (one value)\n * @returns {number} value of the function\n */\nexport function ibeta(x, a, b) {\n   if (x === 0) return 0;\n   if (x === 1) return 1;\n   if (b === 1) return x ** a;\n   if (a === 1) return (1 - (1 - x)**b);\n   return integrate((t) => t ** (a - 1) * (1 - t) ** (b - 1), 0, x) / beta(a, b);\n}\n","<script>\n   let showHelp = false;\n\n   const toggleHelp = () => showHelp = !showHelp;\n\n   const handleKeyPress = e => {\n      if (e.key === 'h') toggleHelp();\n   };\n\n   // $: showHelp = window.location.hash === \"#help\";\n</script>\n\n<svelte:window on:keypress={handleKeyPress}/>\n<main class=\"graasta-app\">\n\n   <div class=\"content\">\n      <slot></slot>\n   </div>\n\n   {#if showHelp}\n   <div class=\"helptext\">\n      <slot name=\"help\"></slot>\n   </div>\n   {/if}\n\n</main>\n\n<style>\n\n/* main styles for graasta-app and children */\n:global(body) {\n   height: max-content;\n}\n\n:global(#graasta-app-container) {\n   height: max-content;\n   width: 100% !important;\n}\n\n.graasta-app {\n   font-family: Helvetica, Areal, Verdana, sans-serif;\n   display: block;\n   position: relative;\n   font-size: max(14px, 1vw);\n\n   aspect-ratio: 16/9;\n   min-width: 800px;\n\n   width: 100%;\n   height: auto;\n\n   box-sizing: border-box;\n   padding: 0;\n   margin: 0 auto;\n   background: #fdfdfd;\n}\n\n.graasta-app  * {\n   box-sizing: border-box;\n   margin: 0;\n   padding: 0;\n}\n\n.graasta-app :glbal(.plot) {\n   box-shadow: 0px 0px 5px  #30303020;\n}\n\n.graasta-app .content {\n   width: 100%;\n   height: 100%;\n}\n\n/* help text and button */\n\n.helptext {\n   position: absolute;\n   top: 0;\n   width: 0;\n   left: 0;\n   bottom: 0;\n\n   z-index: 999;\n   background: white;\n   box-sizing: border-box;\n\n   width: 100%;\n   height: 100%;\n   padding: 1em;\n   margin: 0;\n   line-height: 1.35em;\n   font-size: 1em;\n   color: #303030;\n}\n\n.helptext :global(h2) {\n   padding: 0.25em 0 0.5em 0;\n}\n\n.helptext :global(p) {\n   padding: 0 0 0.5em 0;\n   line-height: 1.5em;\n   font-size: 1.2em;\n}\n\n</style>","export let colors = {\n   plots: {\n      // population colors\n      POPULATIONS_PALE: [\"#33668820\", \"#ff990020\"],\n      POPULATIONS: [\"#33668850\", \"#ff990050\"],\n      SAMPLES: [\"#336688\", \"#ff9900\"],\n\n      // statistics on plot legend\n      STAT_NAME: \"#808080\",\n      STAT_VALUE: \"#202020\"\n   }\n};\n\n\nexport function formatLabels(labels) {\n\n   if (!Array.isArray(labels)) labels = [labels];\n   let labelsStr = Array(length = labels.length);\n\n\n   for (let i = 0; i < labels.length; i++) {\n      labelsStr[i] =    \"<tspan fill=\" + colors.plots.STAT_NAME + \">\" + labels[i].name + \":</tspan> \" + labels[i].value;\n   }\n\n   return labelsStr;\n}","<script>\n   export let id;\n   export let label;\n</script>\n\n<div class=\"app-control\">\n   <label for=\"{id}\">{@html label}</label>\n   <slot></slot>\n</div>\n\n<style>\n   .app-control {\n      font-size: 1em;\n      margin: 0.25em 0 0 0;\n      padding: 0.15em 0.25em;\n      display: flex;\n      align-items: center;\n      justify-content: flex-begin;\n   }\n\n   .app-control > label {\n      height: 1.5em;\n      line-height: 1.5em;\n      flex: 0 0 90px;\n      max-width: 90px;\n   }\n\n   .app-control > slot {\n      width: 100%;\n   }\n\n   @media(min-width: 959px) {\n      .app-control > label {\n         flex: 0 0 120px;\n         max-width: 120px;\n      }\n   }\n\n   @media(min-width: 1279px) {\n      .app-control > label {\n         flex: 0 0 150px;\n         max-width: 150px;\n      }\n   }\n\n</style>","<script>\n   import AppControl from \"./AppControl.svelte\";\n\n   export let id;\n   export let label;\n   export let text;\n</script>\n\n<AppControl id={id} label={label} >\n   <button on:click>{text}</button>\n</AppControl>\n\n<style>\n\n\nbutton {\n   height: 1.5em;\n   font-size: 1em;\n   padding: 0 1em;\n   margin: 0;\n   color: #606060;\n   background: #e0e0e0;\n   box-shadow: none;\n   border: none;\n   border-radius: 3px;\n   white-space: nowrap;\n}\n\nbutton:hover {\n   color: #fafafa;\n   background: #606060;\n}\n\n</style>","<script>\n   import { fade } from 'svelte/transition';\n   import AppControl from \"./AppControl.svelte\";\n\n   export let id;\n   export let label;\n   export let options;\n   export let value = options[0];\n</script>\n\n<AppControl id={id} label={label} >\n\n   <div class=\"selector\">\n      {#each options as option (option)}\n      <div on:click={() => value = option} class=\"option\" class:selected={option==value}>{option}</div>\n      {/each}\n\n   </div>\n   <input name=\"{id}\" bind:value=\"{value}\">\n</AppControl>\n\n<style>\n   input {\n      display: none;\n   }\n\n   .selector {\n      position: relative;\n      box-sizing: border-box;\n      display: inline-block;\n      flex: 0 0 auto;\n      background: #e0e0e0;\n\n      font-size: 1em;\n      height: 1.5em;\n      line-height: 1.5em;\n      margin: 0;\n      padding: 0;\n      width: auto;\n      border-radius: 2px;\n\n      user-select: none;\n      -webkit-user-select: none;\n      -moz-user-select: none;\n\n      display: flex;\n   }\n\n   .option {\n      cursor: default;\n      padding: 0 0.5em;\n      margin: 0 1px;\n      color: #606060;\n      transition: background-color 0.5s ease;\n   }\n\n   .option.selected {\n      border-radius: 3px;\n      background-color: #606060;\n      color: #fefefe;\n   }\n\n</style>","<script>\n   import { createEventDispatcher } from \"svelte\";\n   import AppControl from \"./AppControl.svelte\";\n\n   export let id;\n   export let label;\n   export let value;\n   export let min;\n   export let max;\n   export let decNum = 1;\n   export let step = +((max - min) / 100).toFixed(4);\n\n   if (value < min || value > max) {\n      throw(\"The value is outside of the provided range.\");\n   }\n\n   const dispatch = createEventDispatcher();\n\n   let sliderElement;\n   let sliderContainer;\n   let isDragging = false;\n\n   const computeValue = (p) => {\n      const tmpValue = min + p * (max - min);\n\n      // strange construction below is needed for:\n      // a. make a value fractionated according to step\n      // b. get rid of small decimals added by JS due to loss of precision\n      return(+(Math.round(tmpValue / step) * step).toFixed(4));\n   }\n\n   const getRelativePosition = (e) => {\n      const sliderRect = sliderElement.getBoundingClientRect();\n      const parentRect = sliderContainer.getBoundingClientRect();\n      const minX = sliderRect.x;\n      const maxX = parentRect.x + parentRect.width;\n\n      return (e.clientX - minX) / (maxX - minX);\n   }\n\n   const startChanging = (e) => {\n      const p = getRelativePosition(e);\n      if (p < 0 || p > 1) return;\n      isDragging = p * 100 > width - 5 && p * 100 < width + 5;\n   }\n\n   const cancelChanging = (e) => {\n      isDragging = false;\n   }\n\n   const stopChanging = (e) => {\n      isDragging = false;\n      const p = getRelativePosition(e);\n      if (p < 0 || p > 1) return;\n\n      value = computeValue(p);\n   }\n\n   const changing = (e) => {\n      if (!isDragging) return;\n      const p = getRelativePosition(e);\n      if (p < 0 || p > 1) return;\n\n      value = computeValue(p);\n   }\n\n   $: width = (value - min) / (max - min) * 100;\n   $: dispatch(\"change\", value);\n</script>\n\n<AppControl id={id} label={label}>\n   <div\n      class=\"rangeSliderContainer\"\n      bind:this={sliderContainer}\n      on:mousewheel={changing}\n      on:mousemove={changing}\n      on:mousedown={startChanging}\n      on:mouseleave={cancelChanging}\n      on:mouseup={stopChanging}>\n\n      <div class=\"rangeSlider\" style=\"width:{width}%\" bind:this={sliderElement}></div>\n      <span>{value.toFixed(decNum)}</span>\n   </div>\n   <input type=\"range\" step={step} bind:value=\"{value}\" min={min} max={max}>\n</AppControl>\n\n<style>\n   .rangeSliderContainer {\n      position: relative;\n      box-sizing: border-box;\n      display: inline-block;\n      flex: 1 1 auto;\n      background: #e0e0e0;\n      height: 1.5em;\n      margin: 0;\n      padding: 0;\n      width: auto;\n      border-radius: 2px;\n\n      user-select: none;\n      -webkit-user-select: none;\n      -moz-user-select: none;\n\n   }\n\n   .rangeSlider {\n      position: relative;\n      display: inline-block;\n      background: #606060;\n      border-radius: 2px;\n\n      margin: 0;\n      padding: 0;\n      height: 100%;\n      cursor:default;\n      user-select: none;\n      -webkit-user-select: none;\n      -moz-user-select: none;\n\n   }\n\n   .rangeSliderContainer span {\n      display: inline-block;\n      position: absolute;\n      right: 0;\n      top: 0;\n      font-size: 0.85em;\n      padding: 1px 5px;\n      color: #606060;\n      mix-blend-mode: difference;\n      line-height: 1.6em;\n      user-select: none;\n      -webkit-user-select: none;\n      -moz-user-select: none;\n   }\n\n   input {\n      display: none;\n      width: 100%;\n   }\n</style>\n\n","<script>\n   export let errormsg = undefined;\n</script>\n\n<fieldset class=\"app-control-area\">\n   <slot></slot>\n   {#if errormsg}<div class=\"app-control-error\">{errormsg}</div>{/if}\n</fieldset>\n\n<style>\n   .app-control-error {\n      padding: 0.5em 0.5em 0.25em 0.65em;\n      font-size: 0.75em;\n      color: crimson;\n   }\n\n   fieldset {\n      background: #f4f4f4;\n      margin: 0;\n      padding: 0.5em;\n      box-shadow: 0px 0px 2px  #30303020;\n      border: none;\n   }\n</style>","import { noop, safe_not_equal, subscribe, run_all, is_function } from '../internal/index.mjs';\nexport { get_store_value as get } from '../internal/index.mjs';\n\nconst subscriber_queue = [];\n/**\n * Creates a `Readable` store that allows reading by subscription.\n * @param value initial value\n * @param {StartStopNotifier}start start and stop notifications for subscriptions\n */\nfunction readable(value, start) {\n    return {\n        subscribe: writable(value, start).subscribe\n    };\n}\n/**\n * Create a `Writable` store that allows both updating and reading by subscription.\n * @param {*=}value initial value\n * @param {StartStopNotifier=}start start and stop notifications for subscriptions\n */\nfunction writable(value, start = noop) {\n    let stop;\n    const subscribers = new Set();\n    function set(new_value) {\n        if (safe_not_equal(value, new_value)) {\n            value = new_value;\n            if (stop) { // store is ready\n                const run_queue = !subscriber_queue.length;\n                for (const subscriber of subscribers) {\n                    subscriber[1]();\n                    subscriber_queue.push(subscriber, value);\n                }\n                if (run_queue) {\n                    for (let i = 0; i < subscriber_queue.length; i += 2) {\n                        subscriber_queue[i][0](subscriber_queue[i + 1]);\n                    }\n                    subscriber_queue.length = 0;\n                }\n            }\n        }\n    }\n    function update(fn) {\n        set(fn(value));\n    }\n    function subscribe(run, invalidate = noop) {\n        const subscriber = [run, invalidate];\n        subscribers.add(subscriber);\n        if (subscribers.size === 1) {\n            stop = start(set) || noop;\n        }\n        run(value);\n        return () => {\n            subscribers.delete(subscriber);\n            if (subscribers.size === 0) {\n                stop();\n                stop = null;\n            }\n        };\n    }\n    return { set, update, subscribe };\n}\nfunction derived(stores, fn, initial_value) {\n    const single = !Array.isArray(stores);\n    const stores_array = single\n        ? [stores]\n        : stores;\n    const auto = fn.length < 2;\n    return readable(initial_value, (set) => {\n        let inited = false;\n        const values = [];\n        let pending = 0;\n        let cleanup = noop;\n        const sync = () => {\n            if (pending) {\n                return;\n            }\n            cleanup();\n            const result = fn(single ? values[0] : values, set);\n            if (auto) {\n                set(result);\n            }\n            else {\n                cleanup = is_function(result) ? result : noop;\n            }\n        };\n        const unsubscribers = stores_array.map((store, i) => subscribe(store, (value) => {\n            values[i] = value;\n            pending &= ~(1 << i);\n            if (inited) {\n                sync();\n            }\n        }, () => {\n            pending |= (1 << i);\n        }));\n        inited = true;\n        sync();\n        return function stop() {\n            run_all(unsubscribers);\n            cleanup();\n        };\n    });\n}\n\nexport { derived, readable, writable };\n","<script>\n\timport { onMount, setContext, createEventDispatcher } from 'svelte';\n\timport { writable } from 'svelte/store';\n\n   /* input parameters */\n   export let limX = [undefined, undefined];    // limits for x-axis (in plot units) [min, max]\n   export let limY = [undefined, undefined];    // limits for y-axis (in plot units) [min, max]\n   export let title = \"\";                       // title of the plot\n   export let xLabel = \"\";                      // label for x-axis\n   export let yLabel = \"\";                      // label for y-axis\n   export let multiSeries = true;               // is the plot for one series or for many\n\n   // event dispatcher\n   const dispatch = createEventDispatcher();\n\n   // how big are margins (number of pixels in unit margin value) between axis and plot area if axis are shown\n   const AXES_MARGIN_FACTORS = {\n      \"small\": 30,\n      \"medium\": 40,\n      \"large\": 50\n   }\n\n   // number of ticks along each axis\n   const TICK_NUM = {\n      \"small\": 5,\n      \"medium\": 8,\n      \"large\": 12\n   };\n\n   // margin between plot series elements and data labels\n   const LABELS_MARGIN = {\n      \"small\": 10,\n      \"medium\": 15,\n      \"large\": 20\n   };\n\n   // line styles for different scales and types\n   const LINE_STYLES = {\n      small: [\"0\", \"3,3\", \"1,1\", \"3,1\"],\n      medium: [\"0\", \"5,5\", \"2,2\", \"5,2\"],\n      large: [\"0\", \"7,7\", \"3,3\", \"7,3\"],\n   }\n\n   // constant to make clip path ID unique\n   const clipPathID = \"plottingArea\" + Math.round(Math.random() * 10000);\n\n   /* parameters for internal use inside the component */\n   let axesWrapper;                                   // pointer to axes wrapper DOM element\n   let axesMargins = [0.034, 0.034, 0.034, 0.034];    // initial margins (will be multiplied to FACTORS)\n\n   /* reactive parameters to be shared with children via context */\n   const width = writable(100);                       // actual width of plotting area in pixels\n   const height = writable(100);                      // actual height of plotting area in pixels\n   const xLim = writable([undefined, undefined]);     // actual limits for x-axis in plot units\n   const yLim = writable([undefined, undefined]);     // actual limits for y-axis in plot units\n   const scale = writable(\"medium\");                  // scale factor (how big the shown plot is)\n   const isOk = writable(false);                      // are axes ready for drawing\n\n   /** Adds margins for x-axis (e.g. when x-axis must be shown) */\n   const addXAxisMargins = function() {\n      axesMargins[0] = 1;\n      axesMargins[2] = 0.5;\n      axesMargins[1] = axesMargins[1] > 0.5 ? axesMargins[1] : 0.5;\n      axesMargins[3] = axesMargins[3] > 0.5 ? axesMargins[3] : 0.5;\n   }\n\n   /** Adds margins for y-axis (e.g. when y-axis must be shown) */\n   const addYAxisMargins = function() {\n      axesMargins[1] = 1;\n      axesMargins[3] = 0.5;\n      axesMargins[0] = axesMargins[0] > 0.5 ? axesMargins[0] : 0.5;\n      axesMargins[2] = axesMargins[2] > 0.5 ? axesMargins[2] : 0.5;\n   }\n\n   /** Adjusts limits for x-axis (e.g. when new series is added)\n    *  @param {Array} newLim - vector with new limits  (two values)\n    */\n   const adjustXAxisLimits = function(newLim) {\n      if (!limX.some(v => v === undefined)) return;\n      xLim.update(lim => adjustAxisLimits(lim, newLim));\n   }\n\n   /** Adjusts limits for y-axis (e.g. when new series is added)\n    *  @param {Array} newLim - vector with new limits  (two values)\n    */\n   const adjustYAxisLimits = function(newLim) {\n      if (!limY.some(v => v === undefined)) return;\n      yLim.update(lim => adjustAxisLimits(lim, newLim));\n   }\n\n   /** Adjusts x- or y- axis limits (e.g. when new elements are added)\n    *  @param {Array} lim - vector with limits for current axis (two values)\n    *  @param {Array} newLim - vector with new limits  (two values)\n    *  @returns {Array} vector with rescaled values\n    *\n    *  The new limits are set separately for min and max. Either if current value is undefined or\n    *  if new value is outside the current limits (smaller than min or larger than max).\n    */\n   const adjustAxisLimits = function(lim, newLim) {\n\n      let adjustedLim = [\n         (lim[0] !== undefined && multiSeries === true && lim[0] < newLim[0]) ? lim[0] : newLim[0],\n         (lim[1] !== undefined && multiSeries === true && lim[1] > newLim[1]) ? lim[1] : newLim[1]\n      ];\n\n      // special case when both limits are zero\n      if (adjustedLim[0] === 0 && adjustedLim[1] === 0) {\n         adjustedLim = [-0.1, 0.1];\n      }\n\n      // special case when limits are equal (add ±5%)\n      if (adjustedLim[0] === adjustedLim[1]) {\n         adjustedLim = [adjustedLim[0] * 0.95, adjustedLim[0] * 1.05];\n      }\n\n      return adjustedLim;\n   }\n\n   /** Rescales x-values from plot coordinates to screen (SVG) coordinates\n    *  @param {Array} x - vector with coordinates (or objects size) in original plot coordinates\n    *  @param {Array} xLim - vector with current limits for x-axis in original plot coordinates\n    *  @param {number} width - width of coordinate system in pixels\n    *  @param {boolean} doSizeScreen - scale size of objects (true) or coordinates\n    *  @returns {Array} vector with rescaled values\n    */\n   const scaleX = function(x, xLim, width, doSizeScale = false) {\n      if (!$isOk  || x === undefined || !Array.isArray(x)) return undefined;\n\n      if (doSizeScale) {\n         // scale size of objects instead of coordinates\n         return x.map(v => v / (xLim[1] - xLim[0]) * (width - margins[1] - margins[3]));\n      }\n\n      return x.map(v => (v - xLim[0]) / (xLim[1] - xLim[0]) * (width - margins[1] - margins[3]) + margins[1]);\n   }\n\n   /** Rescales x-values from plot coordinates to screen (SVG) coordinates\n    *  @param {Array} x - vector with coordinates (or objects size) in original plot coordinates\n    *  @param {Array} xLim - vector with current limits for x-axis in original plot coordinates\n    *  @param {number} width - width of coordinate system in pixels\n    *  @param {boolean} doSizeScreen - scale size of objects (true) or coordinates\n    *  @returns {Array} vector with rescaled values\n    */\n   const scaleY = function(y, yLim, height, doSizeScale = false) {\n      if (!$isOk  || y === undefined || !Array.isArray(y)) return undefined;\n\n      if (doSizeScale) {\n         // scale size of objects instead of coordinates\n         return y.map(v => v / (yLim[1] - yLim[0]) * (height - margins[0] - margins[2]));\n      }\n\n      // for coordinates we also need to invert (flip) the y-axis\n      return y.map(v => (yLim[1] - v) / (yLim[1] - yLim[0]) * (height - margins[0] - margins[2]) + margins[2]);\n   }\n\n   /** Computes nice tick values for axis\n    * @param {Array} ticks - vector with ticks if alredy available (if not, new will be computed)\n    * @param {Array} lim - vector with axis limits tickets must be computed for\n    * @param {number} maxTickNum - maximum number of ticks to compute\n    * @param {boolean} round - round or not the fractions when computing nice numbers for the ticks\n    * @returns {Array} a vector with computed tick positions\n    */\n   const getAxisTicks = function(ticks, lim, maxTickNum, round = true) {\n\n      // if ticks are already provided do not recompute them\n      if (ticks !== undefined) return ticks;\n\n      // check if limits are ok\n      if (!Array.isArray(lim) || lim[0] === undefined || lim[1] === undefined) return undefined;\n\n      // get range as a nice number and compute min, max and steps for the tick sequence\n      const range = niceNum(lim[1] - lim[0], round);\n      const tickSpacing = niceNum(range / (maxTickNum - 1), round);\n      const tickMin = Math.ceil(lim[0] / tickSpacing) * tickSpacing;\n      const tickMax = Math.floor(lim[1] / tickSpacing) * tickSpacing;\n\n      // recompute maxTickNum\n      maxTickNum = Math.round((tickMax - tickMin + 1) / tickSpacing) + 1;\n\n      // create a sequence and return\n      ticks = [...Array(maxTickNum)].map((x, i) => tickMin + i * tickSpacing);\n\n      // if step is smaller than 1 round values to remove small decimals accidentiall added by JS\n      if (Math.abs(tickSpacing) < 1) {\n         const r = Math.pow(10, 1 + Math.round(-Math.log10(tickSpacing)));\n         ticks = ticks.map(v => Math.round((v + Number.EPSILON) * r) / r)\n      }\n\n      // make sure the ticks are not aligned with axes limits\n      return ticks.filter(x => x >= lim[0] & x <= lim[1]);\n   }\n\n   /** Computes a nice spacing value for a given range\n    * @param {numeric} localRange - a range (max - min)\n    * @param {boolean} round - round or not the fractions when computing the number\n    * @returns {numeric} the computed spacing value\n    */\n   function niceNum( localRange,  round) {\n\n      const exponent = Math.floor(Math.log10(localRange));\n      const fraction = localRange / Math.pow(10, exponent);\n      let niceFraction;\n\n      if (round) {\n         if (fraction < 1.5)\n            niceFraction = 1;\n         else if (fraction < 3)\n            niceFraction = 2;\n         else if (fraction < 7)\n            niceFraction = 5;\n         else\n            niceFraction = 10;\n      } else {\n         if (fraction <= 1)\n            niceFraction = 1;\n         else if (fraction <= 2)\n            niceFraction = 2;\n         else if (fraction <= 5)\n            niceFraction = 5;\n         else\n            niceFraction = 10;\n      }\n\n      return niceFraction * Math.pow(10, exponent);\n   }\n\n   /** Computes a scale level\n    * @param {numeric} width - width of plotting area in pixels\n    * @param {numeric} height - height of plotting area in pixels\n    * @returns {text} the scale level (\"small\", \"medium\" or \"large\")\n    */\n   function getScale(width, height) {\n      if (height < 300.2 || width < 300.2) return \"small\";\n      if (height < 600.2 || width < 600.2) return \"medium\";\n      return \"large\";\n   }\n\n   /* context with Axes constants, properties and methods to share with children */\n   let context = {\n\n      // methods\n      addXAxisMargins: addXAxisMargins,\n      addYAxisMargins: addYAxisMargins,\n      adjustXAxisLimits: adjustXAxisLimits,\n      adjustYAxisLimits: adjustYAxisLimits,\n      getAxisTicks: getAxisTicks,\n      scaleX: scaleX,\n      scaleY: scaleY,\n\n      // variables\n      isOk: isOk,\n      scale: scale,\n      width: width,\n      height: height,\n      xLim: xLim,\n      yLim: yLim,\n\n      // constants\n      LINE_STYLES: LINE_STYLES,\n      LABELS_MARGIN: LABELS_MARGIN,\n      TICK_NUM: TICK_NUM,\n   }\n\n\tsetContext('axes', context);\n\n   /* observer for the plotting area size */\n   var ro = new ResizeObserver(entries => {\n      for (let entry of entries) {\n         const cr = entry.contentRect;\n         width.update(x => cr.width);\n         height.update(x => cr.height);\n         scale.update(x => getScale(cr.width, cr.height));\n      }\n   });\n\n   onMount(() => {\n      ro.observe(axesWrapper);\n   });\n\n\n   // handle click on plot elements and dispatch manual events\n   function dispatchClickEvent(eventName, el) {\n      dispatch(eventName, {seriesTitle: el.parentNode.getAttribute('title'), elementID: el.dataset.id});\n   }\n\n   function handleClick(e) {\n\n      // scatter plot markers\n      if (e.target.tagName === \"text\" && e.target.parentNode.classList.contains(\"series_scatter\")) {\n         dispatchClickEvent(\"markerclick\", e.target);\n         return;\n      }\n\n      // bar plot bars\n      if (e.target.tagName === \"rect\" && e.target.parentNode.classList.contains(\"series_bar\")) {\n         dispatchClickEvent(\"barclick\", e.target);\n         return;\n      }\n\n      // outside any plot element\n      dispatch(\"axesclick\")\n   }\n\n\n   // this is reactive in case if limX and limY are interactively changed by parent script\n   $: if (!limX.some(v => v === undefined)) xLim.update(v => limX);\n   $: if (!limY.some(v => v === undefined)) yLim.update(v => limY);\n\n   // computes real margins in pixels based on current scale\n   $: margins = axesMargins.map(v => v * AXES_MARGIN_FACTORS[$scale]);\n\n   // computes status which tells that axes limits look fine and it is safe to draw\n   // the status is based on the axis limits validity\n   $: isOk.update(v =>\n      Array.isArray($yLim) &&\n      Array.isArray($xLim) &&\n      $xLim.length === 2 &&\n      $yLim.length === 2 &&\n      !$yLim.some(v => v === undefined) &&\n      !$xLim.some(v => v === undefined) &&\n      !$yLim.some(v => isNaN(v)) &&\n      !$xLim.some(v => isNaN(v)) &&\n      $xLim[1] !== $xLim[0] &&\n      $yLim[1] !== $yLim[0] &&\n      $width > (margins[1] + margins[3]) &&\n      $height > (margins[0] + margins[2])\n   )\n\n   // computes coordinates for clip path box\n   $: cpx = $isOk ? scaleX($xLim, $xLim, $width) : [0, 1];\n   $: cpy = $isOk ? scaleY($yLim, $yLim, $height) : [1, 0];\n</script>\n\n\n<div class=\"plot {'plot_' + $scale}\"  class:plot_error=\"{!$isOk}\">\n\n   <!-- plot title and axis labels -->\n   {#if title !== \"\"}<div class=\"axes__title\">{@html title}</div>{/if}\n   {#if yLabel !== \"\"}<div class=\"axes__ylabel\"><span>{@html yLabel}</span></div>{/if}\n   {#if xLabel !== \"\"}<div class=\"axes__xlabel\"><span>{@html xLabel}</span></div>{/if}\n\n   <!-- axes (coordinate system) -->\n   <div class=\"axes-wrapper\" bind:this={axesWrapper} >\n      <svg on:click={handleClick} preserveAspectRatio=\"none\" class=\"axes\">\n\n         <!-- define clipping path -->\n         <defs>\n            <clipPath id=\"{clipPathID}\">\n               <rect style=\"pointer-events:none\" x=\"{cpx[0]}\" y=\"{cpy[1]}\" width = \"{cpx[1] - cpx[0]}\" height=\"{cpy[0] - cpy[1]}\"></rect>\n            </clipPath>\n         </defs>\n\n         <!-- axis and box -->\n         <slot name=\"xaxis\"></slot>\n         <slot name=\"yaxis\"></slot>\n\n         <!-- main plot content -->\n         <g clip-path=\"url(#{clipPathID})\">\n            <slot></slot>\n         </g>\n\n         <!-- axis and box -->\n         <slot name=\"box\"></slot>\n\n      </svg>\n   </div>\n\n   {#if !$isOk}\n   <p class=\"message_error\">\n      Axes component was not properly initialized. <br />\n      Add plot series (check that coordinates are numeric) or define axes limits manually.\n   </p>\n   {/if}\n\n</div>\n\n<style>\n\n   /* Plot (main container) */\n   :global(.plot) {\n      font-family: Arial, Helvetica, sans-serif;\n\n      display: grid;\n      grid-template-columns: min-content 1fr;\n      grid-template-rows: auto 1fr auto;\n      grid-template-areas:\n         \". title\"\n         \"ylab axes\"\n         \". xlab\";\n\n      box-sizing: border-box;\n      background: #fefefe;\n      min-width: 100px;\n      min-height: 50px;\n      width: 100%;\n      height: 100%;\n      padding: 0;\n      margin: 0;\n   }\n\n   :global(.plot_small) {\n      font-size: 11px;\n   }\n\n   :global(.plot_medium) {\n      font-size: 13px;\n   }\n\n   :global(.plot_large) {\n      font-size: 16px;\n   }\n\n   :global(.plot_error) {\n      display: flex;\n   }\n\n   :global(.plot_error > .axes-wrapper) {\n      display: none;\n   }\n\n   :global(.message_error) {\n      font-size: 1.2em;\n      color: crimson;\n      padding: 20px;\n      text-align: center;\n   }\n\n   /* Axes (coordinate system) */\n   .axes-wrapper {\n      grid-area: axes;\n      position:relative;\n      box-sizing: border-box;\n      display: flex;\n      width: 100%;\n      height: 100%;\n      padding: 0;\n      margin: 0;\n   }\n\n   :global(.axes) {\n      display: block;\n      box-sizing: border-box;\n      position:absolute;\n\n      padding: 0;\n      margin: 0;\n      height: 100%;\n      width: 100%;\n      max-height: 100%;\n      max-width: 100%;\n      min-height: 100%;\n      min-width: 100%;\n   }\n\n   :global(.axes__xlabel) {\n      grid-area: xlab;\n      font-size: 1.0em;\n      font-weight: 600;\n      padding: 0.25em;\n      text-align: center;\n   }\n\n\n   :global(.axes__ylabel) {\n      grid-area: ylab;\n      font-size: 1.0em;\n      font-weight: 600;\n      padding: 0.25em;\n      text-align: center;\n      vertical-align: middle;\n      display: flex;\n   }\n\n   :global(.axes__ylabel > span) {\n      width: 1.5em;\n      line-height: 1.5em;\n      display: inline-block;\n      writing-mode: vertical-rl;\n      transform: rotate(180deg);\n   }\n\n\n   :global(.axes__title) {\n      background: transparent;\n      grid-area: title;\n\n      font-size: 1.3em;\n      font-weight: bold;\n      line-height: 1.2em;\n      padding: 0.5em 0;\n      text-align: center;\n   }\n\n   /* Axis */\n   :global(.axis-labels) {\n      fill: #303030;\n      font-size: 0.95em;\n   }\n\n   /* Data labels */\n   :global(.labels) {\n      fill: #606060;\n      font-size: 0.90em;\n   }\n\n   :global(.labels) {\n      visibility: hidden;\n      transition:visibility 0.25s linear, opacity 0.25s linear;\n      opacity: 0;\n   }\n\n</style>","export const Colors = {\n   \"AXIS_LINE\": \"#303030\",\n   \"AXIS_TICK\": \"#606060\",\n   \"WHITE\":     \"#fff\",\n   \"BLACK\":     \"#000\",\n   \"GRAY\":      \"#909090\",\n   \"MIDDLEGRAY\": \"#dadada\",\n   \"LIGHTGRAY\": \"#f0f0f0\",\n   \"DARKGRAY\":  \"#606060\",\n\n   \"PRIMARY\": \"#2266ff\",\n   \"PRIMARY_TEXT\": \"#333\",\n}\n\n\n","<script>\n   import { getContext } from 'svelte';\n   import { Colors } from './Colors';\n\n   // input parameters\n   export let slot = \"xaxis\";          // slot the component must be placed in\n   export let ticks = undefined;       // vector with numeric tick positions in plot units\n   export let tickLabels = ticks;      // vector with labels for each tick\n   export let showGrid = false;        // logical, show or not grid lines\n\n   // set up tick mode\n   const tickMode = ticks === undefined ? \"auto\" : \"manual\";\n\n   /* sanity checks of input parameters */\n   if (slot !== \"xaxis\") {\n      throw(\"Component XAxis must have \\\"slot='xaxis'\\\" attribute.\")\n   }\n\n   if (ticks !== undefined && !Array.isArray(ticks)) {\n      throw(\"XAxis: 'ticks' must be a vector of numbers.\")\n   }\n\n   if (ticks !== undefined && !(Array.isArray(tickLabels) && tickLabels.length == ticks.length)) {\n      throw(\"XAxis: 'tickLabels' must be a vector of the same size as ticks.\")\n   }\n\n   /* styles for axis and grid lines */\n   const axisLineStyleStr = `stroke:${Colors.DARKGRAY};line-width:1px;`;\n   const gridLineStyleStr = `stroke:${Colors.MIDDLEGRAY};stroke-opacity:${showGrid?1:0};stroke-dasharray:2px;`;\n\n\n   // get axes context and adjust x margins\n   const axes = getContext('axes');\n   axes.addXAxisMargins();\n\n   // get reactive variables needed to compute coordinates\n   const xLim = axes.xLim;\n   const yLim = axes.yLim;\n   const axesWidth = axes.width;\n   const axesHeight = axes.height;\n   const scale = axes.scale;\n   const isOk = axes.isOk;\n\n   // reactive variables for coordinates of axis lines\n   $: x = axes.scaleX($xLim, $xLim, $axesWidth);\n   $: y = axes.scaleY($yLim, $yLim, $axesHeight);\n\n   // reactive variables for ticks and their coordinates\n   $: dy = $scale === \"small\" ? 7 : 10;\n   $: tickNum = axes.TICK_NUM[$scale];\n   $: ticks = tickMode === \"auto\" ? axes.getAxisTicks(undefined, $xLim, tickNum, true) : ticks;\n   $: tickLabels = tickMode === \"auto\" ? ticks : tickLabels;\n   $: ticksX = axes.scaleX(ticks, $xLim, $axesWidth);\n   $: ticksY = y === undefined ? undefined : [y[0], y[0] + dy];\n</script>\n\n{#if $isOk && x !== undefined && y !== undefined }\n   <g class=\"mdaplot__axis mdaplot__xaxis\">\n   {#each ticksX as tx, i}\n      <line x1=\"{tx}\" x2=\"{tx}\" y1=\"{y[0]}\" y2=\"{y[1]}\" style=\"{gridLineStyleStr}\"></line>\n      <line x1=\"{tx}\" x2=\"{tx}\" y1=\"{ticksY[0]}\" y2=\"{ticksY[1]}\" style=\"{axisLineStyleStr}\"></line>\n      <text x=\"{tx}\" y=\"{ticksY[1]}\" dx=\"0\" dy=\"{dy}\" class=\"mdaplot__axis-labels\" dominant-baseline=\"middle\" text-anchor=\"middle\">{tickLabels[i]}</text>\n   {/each}\n   <line x1=\"{x[0]}\" x2=\"{x[1]}\" y1=\"{y[0]}\" y2=\"{y[0]}\"  style=\"{axisLineStyleStr}\"></line>\n   </g>\n{/if}\n\n<style>\n</style>\n","<script>\n   import { getContext } from 'svelte';\n   import { Colors } from './Colors';\n\n   /* input parameters */\n\texport let xStart;\n   export let xEnd;\n   export let yStart;\n   export let yEnd;\n   export let lineColor = Colors.PRIMARY;\n   export let lineType = 1;\n   export let lineWidth = 1;\n\n   /* sanity check for input parameters */\n   if (!Array.isArray(xStart) || !Array.isArray(xEnd) || !Array.isArray(yStart) || !Array.isArray(yEnd)) {\n      throw(\"Segments: parameters 'xStart', 'yStart', 'xEnd' and 'yEnd' must be vectors.\")\n   }\n\n   const n = xStart.length;\n   if (xEnd.length !== n || yStart.length !== n || yEnd.length !== n) {\n      throw(\"Segments: parameters 'xStart', 'yStart', 'xEnd' and 'yEnd' should have the same length.\")\n   }\n\n   // get axes context and reactive variables needed to compute coordinates\n   const axes = getContext('axes');\n   const xLim = axes.xLim;\n   const yLim = axes.yLim;\n   const axesWidth = axes.width;\n   const axesHeight = axes.height;\n   const scale = axes.scale;\n\n   // reactive variables for coordinates of data points in pixels (and line style)\n   $: x1 = axes.scaleX(xStart, $xLim, $axesWidth);\n   $: x2 = axes.scaleX(xEnd, $xLim, $axesWidth);\n   $: y1 = axes.scaleY(yStart, $yLim, $axesHeight);\n   $: y2 = axes.scaleY(yEnd, $yLim, $axesHeight);\n   $: lineStyleStr = `stroke:${lineColor};stroke-width: ${lineWidth}px;stroke-dasharray:${axes.LINE_STYLES[$scale][lineType - 1]}`;\n\n</script>\n\n{#if x1 !== undefined && y1 !== undefined}\n   {#each x1 as v, i}\n      <line x1=\"{x1[i]}\" x2=\"{x2[i]}\" y1=\"{y1[i]}\" y2=\"{y2[i]}\" style=\"{lineStyleStr}\"></line>\n   {/each}\n{/if}\n\n<style>\n</style>\n","<script>\n   /****************************************************\n   * TextLabels component                              *\n   * --------------------                              *\n   * shows a series of text labels on the plot         *\n   * can be used as basis for marker plot              *\n   *****************************************************/\n\n   import { getContext } from 'svelte';\n   import { Colors } from './Colors';\n\n   // input parameters\n\texport let xValues;\n   export let yValues;\n   export let labels;\n   export let pos = 0;\n   export let faceColor = Colors.PRIMARY_TEXT;\n   export let borderColor = \"transparent\";\n   export let borderWidth = 0;\n   export let textSize = 1;\n   export let style = \"\";\n   export let title = \"series_text\";\n\n   // text-anchor values depending on position\n   const textAnchors = [\"middle\", \"middle\", \"start\", \"middle\", \"end\"];\n\n   // sanity check for input parameters\n   if (!Array.isArray(xValues) || !Array.isArray(yValues) || xValues.length !== yValues.length) {\n      throw(\"TextLabels: parameters 'xValues' and 'yValues' must be vectors of the same length.\")\n   }\n\n   // multiply label values if needed\n   $: {\n      const n = xValues.length;\n      if (!Array.isArray(labels)) labels = Array(n).fill(labels);\n\n      // workaround for an issue when xValues and yValues are changed in parent app\n      // but array of labels is still the same as in the\n      if (labels.length != n) labels = Array(n).fill(labels[0]);\n\n      // check that the length of labels vector is correct\n      if (labels.length !== n) {\n         throw(\"TextLabels: parameter 'labels' must be a single text value or a vector of the same size as 'x' and 'y'.\")\n      }\n   }\n\n   // get axes context and reactive variables needed to compute coordinates\n   const axes = getContext('axes');\n   const xLim = axes.xLim;\n   const yLim = axes.yLim;\n   const axesWidth = axes.width;\n   const axesHeight = axes.height;\n   const scale = axes.scale;\n\n   // reactive variables for coordinates of data points in pixels\n   $: x = axes.scaleX(xValues, $xLim, $axesWidth);\n   $: y = axes.scaleY(yValues, $yLim, $axesHeight);\n   $: dx = [0, 0, 1, 0, -1][pos] * axes.LABELS_MARGIN[$scale];\n   $: dy = [0, 1, 0, -1, 0][pos] * axes.LABELS_MARGIN[$scale];\n\n   // styles for the elements\n   $: textStyleStr = `fill:${faceColor};stroke-width:${borderWidth}px;stroke:${borderColor};\n      font-size:${textSize}em; text-anchor:${textAnchors[pos]};`;\n</script>\n\n{#if x !== undefined && y !== undefined}\n   <g class=\"series {style}\" title={title} style={textStyleStr} >\n   {#each x as v, i}\n      <text data-id={i} x={x[i]} y={y[i]} dx={dx} dy={dy}>{@html labels[i]}</text>\n   {/each}\n   </g>\n{/if}\n\n<style>\n   text {\n      dominant-baseline: middle;\n   }\n</style>","<script>\n   import { getContext } from 'svelte';\n   import { Colors } from './Colors';\n\n   /* input parameters */\n\texport let left;\n   export let top;\n   export let dx = \"0\";\n   export let dy = \"1.25em\";\n   export let elements;\n   export let faceColor = Colors.PRIMARY_TEXT;\n   export let borderColor = \"transparent\";\n   export let borderWidth = 0;\n   export let textSize = 1;\n\n   // get axes context and reactive variables needed to compute coordinates\n   const axes = getContext('axes');\n   const xLim = axes.xLim;\n   const yLim = axes.yLim;\n   const axesWidth = axes.width;\n   const axesHeight = axes.height;\n   const scale = axes.scale;\n\n   // reactive variables for coordinates of data points in pixels\n   $: x = axes.scaleX([left], $xLim, $axesWidth);\n   $: y = axes.scaleY([top], $yLim, $axesHeight);\n\n   // styles for bars and labels\n   $: textStyleStr = `fill:${faceColor};stroke-width:${borderWidth}px;stroke:${borderColor};font-size:${textSize}em;`;\n</script>\n\n{#if x !== undefined && y !== undefined && elements.length > 0}\n   <text style={textStyleStr} x={x} y={y} dx={dx} dy={dy} dominant-baseline=\"middle\" text-anchor=\"start\">\n      {#each elements as el, i}\n         <tspan {x} {dx} dy={i === 0 ? 0 : dy}>{@html el}</tspan>\n      {/each}\n   </text>\n{/if}","<script>\n\n   import { getContext } from 'svelte';\n   import { mrange } from 'mdatools/stat';\n   import { Colors } from './Colors';\n   import TextLabels from './TextLabels.svelte';\n\n   // input parameters\n\texport let xValues;\n   export let yValues;\n   export let marker = 1\n   export let title = \"\";\n   export let faceColor = \"transparent\";\n   export let borderColor = Colors.PRIMARY;\n   export let borderWidth = 1;\n   export let markerSize = 1;\n\n   // TODO: implement later\n   //export let labels = yValues;\n   //export let showLabels = \"no\"; // can be \"no\", \"hover\", \"always\"\n\n   /* constants for internal use */\n   const markers = [\"●\", \"◼\", \"▲\", \"▼\", \"⬥\", \"+\", \"*\", \"⨯\"];\n   let markerSymbol;\n\n   /* sanity check of input parameters */\n   if (typeof(marker) !== \"number\" || marker < 1 || marker > markers.length) {\n      throw(`ScatterSeries: parameter 'marker' must be a number from 1 to ${markers.length}.\"`);\n   }\n\n   // to access shared parameters and methods from Axes\n   const axes = getContext('axes');\n\n   /* reactive actions related to x-values, fires when there are changes in:\n    * - xValues\n    * - marker\n    */\n   $: {\n      if (!Array.isArray(xValues)) {\n         throw(\"ScatterSeries: parameter 'xValues' must be a numeric vector.\");\n      }\n\n      const xValuesRange = mrange(xValues, 0.05);\n      axes.adjustXAxisLimits(xValuesRange);\n\n      markerSymbol = \"\";\n      markerSymbol = markers[marker - 1];\n   }\n\n   /* reactive actions related to y-values, fires when there are changes in:\n    * - yValues\n    */\n   $: {\n      if (!Array.isArray(yValues) || xValues.length != yValues.length) {\n         throw(\"BarSeries: parameter 'yValues' must be a numeric vector of the same length as 'xValues'.\");\n      }\n\n      const yValuesRange = mrange(yValues, 0.05);\n      axes.adjustYAxisLimits(yValuesRange);\n   }\n</script>\n\n<TextLabels\n   {xValues} {yValues} {faceColor} {borderColor} {borderWidth} {title}\n   style=\"series_scatter\"\n   labels={markerSymbol}\n   textSize={markerSize}\n/>\n\n<style>\n\n:global(.series_scatter > text) {\n   font-size: 1em;\n   cursor: default;\n}\n\n:global(.series_scatter > text:hover) {\n   opacity: 90%;\n}\n\n:global(.series_scatter > *:hover + .labels_hover) {\n   visibility: visible;\n   opacity: 1;\n}\n</style>\n","<script>\n   import { getContext } from 'svelte';\n   import { mrange } from 'mdatools/stat';\n   import { Colors } from './Colors';\n\n   // input parameters\n\texport let xValues;\n   export let yValues;\n   export let title = \"\";\n   export let lineWidth = 1;\n   export let lineColor = Colors.PRIMARY;\n   export let lineType = 1;\n\n   /* sanity check of input parameters */\n   if (!Array.isArray(xValues) || !Array.isArray(yValues) || xValues.length != yValues.length) {\n      throw(\"LineSeries: parameters 'xValues' and 'yValues' must be numeric vectors of the same length.\");\n   }\n\n   // compute ranges for x and y values\n   const xValuesRange = mrange(xValues, 0.05);\n   const yValuesRange = mrange(yValues, 0.05);\n\n   // get axes context and adjust axes limits\n   const axes = getContext('axes');\n   axes.adjustXAxisLimits(xValuesRange);\n   axes.adjustYAxisLimits(yValuesRange);\n\n   // get reactive variables needed to compute coordinates\n   const xLim = axes.xLim;\n   const yLim = axes.yLim;\n   const axesWidth = axes.width;\n   const axesHeight = axes.height;\n   const scale = axes.scale;\n\n   // reactive variables for coordinates of data points in pixels\n   $: x = axes.scaleX(xValues, $xLim, $axesWidth);\n   $: y = axes.scaleY(yValues, $yLim, $axesHeight);\n   $: p = x !== undefined && y !== undefined ? x.map((v, i) => `${v},${y[i]}`).join(' ') : undefined;\n   $: lineStyleStr = `fill:transparent;stroke:${lineColor};stroke-width: ${lineWidth}px;\n      stroke-dasharray:${axes.LINE_STYLES[$scale][lineType - 1]}`;\n</script>\n\n{#if p !== undefined}\n   <g class=\"series series_line\" style={lineStyleStr} title={title}>\n      <polyline class=\"line\" points={p}/>\n   </g>\n{/if}\n\n<style>\n</style>\n","<script>\n\n   import { getContext } from 'svelte';\n   import { mrange } from 'mdatools/stat';\n   import { Colors } from './Colors';\n\n   // input parameters\n\texport let xValues;\n   export let yValues;\n   export let title = \"\";\n   export let lineWidth = 1;\n   export let lineColor = Colors.PRIMARY;\n   export let fillColor = Colors.PRIMARY;\n   export let opacity = 1;\n   export let lineType = 1;\n\n   /* sanity check of input parameters */\n   if (!Array.isArray(xValues) || !Array.isArray(yValues) || xValues.length != yValues.length) {\n      throw(\"AreaSeries: parameters 'xValues' and 'yValues' must be numeric vectors of the same length.\");\n   }\n\n   // compute ranges for x and y values\n   const xValuesRange = mrange(xValues, 0.05);\n   const yValuesRange = mrange(yValues, 0.05);\n\n   // get axes context and adjust axes limits\n   const axes = getContext('axes');\n   axes.adjustXAxisLimits(xValuesRange);\n   axes.adjustYAxisLimits(yValuesRange);\n\n   // get reactive variables needed to compute coordinates\n   const xLim = axes.xLim;\n   const yLim = axes.yLim;\n   const axesWidth = axes.width;\n   const axesHeight = axes.height;\n   const scale = axes.scale;\n\n   // reactive variables for coordinates of data points in pixels\n   $: y0 = axes.scaleY([0], $yLim, $axesHeight);\n   $: x = axes.scaleX(xValues, $xLim, $axesWidth);\n   $: y = axes.scaleY(yValues, $yLim, $axesHeight);\n   $: p = x !== undefined && y !== undefined ? x.map((v, i) => `${v},${y[i]}`).join(' ') : undefined;\n   $: areaStyleStr = `opacity:${opacity};fill:${fillColor};stroke:${lineColor};stroke-width: ${lineWidth}px;stroke-dasharray:${axes.LINE_STYLES[$scale][lineType - 1]}`;\n</script>\n\n{#if p !== undefined}\n   <g class=\"series lineseries\" style=\"{areaStyleStr}\" title=\"{title}\">\n   <polygon points=\"{x[0] + \",\" + y0 + \" \" + p + \" \" + x[x.length - 1] + \",\" + y0[0]}\"/>\n   </g>\n{/if}\n\n<style>\n</style>\n","<script>\n   import { seq, dnorm, rep, mean, sd, max, mrange } from 'mdatools/stat';\n   import { Axes, XAxis, LineSeries, Segments,  TextLegend, ScatterSeries, AreaSeries } from 'svelte-plots-basic';\n   import { formatLabels } from '../../shared/graasta';\n\n   export let popMean;\n   export let popSD;\n   export let sample;\n   export let popColor;\n   export let popAreaColor;\n   export let sampColor;\n   export let limX = [80, 120];\n\n   // left position of the legend\n   $: left = limX[0] + 0.75 * (limX[1] - limX[0]);\n\n   // parameters of PDF curve\n   $: popX = seq(popMean - 3.5 * popSD, popMean + 3.5 * popSD, 100);\n   $: popY = dnorm(popX, popMean, popSD);\n\n   // sample statistics\n   $: sampY = rep(max(popY) * 0.05, sample.length);\n   $: sampMean = mean(sample);\n\n   // limits for y-axis\n   $: limY = mrange(popY, 0.01);\n\n   // text values for legend\n   $: labelsStr = formatLabels([\n      {name: \"Sample mean\", value: mean(sample).toFixed(1)},\n      {name: \"Sample sd\", value: sd(sample).toFixed(1)}\n   ])\n</script>\n\n<Axes title={`Population: µ = ${popMean}, σ = ${popSD.toFixed(1)}`} xLabel={\"Chloride in water, [mg/L]\"} {limX} {limY}>\n\n   <slot></slot>\n\n   <!-- population distribution and mean  -->\n   <LineSeries xValues={popX} yValues={popY} lineColor={popColor} />\n   <AreaSeries xValues={popX} yValues={popY} lineColor={\"transparent\"} fillColor={popAreaColor}  />\n   <Segments xStart={[sampMean]} xEnd={[sampMean]} yStart={[0]} yEnd={[max(popY)]} lineColor={sampColor} lineType={3} />\n\n   <!-- sample points and mean  -->\n   <ScatterSeries xValues={sample} yValues={sampY} borderWidth={2} markerSize={1.25} faceColor={\"transparent\"} borderColor={sampColor} />\n   <Segments xStart={[popMean]} xEnd={[popMean]} yStart={[0]} yEnd={[max(popY)]} lineColor={popColor} lineType={2} />\n\n   <!-- sample statistics -->\n   <TextLegend textSize={1.15} {left} top={max(popY) * 0.90} dx=\"0\" elements={labelsStr} />\n\n   <XAxis slot=\"xaxis\"></XAxis>\n</Axes>\n\n","<script>\n   import { max} from 'mdatools/stat';\n   import { Axes, XAxis, LineSeries, AreaSeries, TextLegend, Segments } from 'svelte-plots-basic';\n   import { formatLabels } from '../../shared/graasta';\n\n\n   export let x;\n   export let f;\n\n   export let ci;\n   export let cix;\n   export let cif;\n   export let ciStat;\n\n   export let limX = [-0.02, 1.02]; // default value is suitable for proportions CIs\n\n   export let lineColor = \"#000000\";\n   export let mainColor = \"#6f6666\";\n\n   export let errmsg = \"\";\n   export let labelStr = \"# samples inside CI\";\n   export let xLabel = \"Expected sample statistic\";\n   export let reset = false;\n   export let clicked;\n\n   let nSamples = 0;\n   let nSamplesInside = 0;\n\n   $: {\n\n      // this is needed to force CI plot stats when two consequent samples are the same\n      clicked;\n\n      // when sample size or population properties changed - reset statistics\n      if (reset) {\n         nSamples = 0;\n         nSamplesInside = 0;\n      }\n\n      nSamples = nSamples + 1;\n      nSamplesInside = nSamplesInside + (ciStat >= ci[0] && ciStat <= ci[1] ? 1 : 0);\n   }\n\n   // text values for stat table\n   $: labelsStr = formatLabels([\n      {name: \"95% CI\", value: `[${ci[0].toFixed(2)}, ${ci[1].toFixed(2)}]`},\n      {name: labelStr, value: `${nSamplesInside}/${nSamples} (${(nSamplesInside/nSamples * 100).toFixed(1)}%)`}\n   ])\n\n</script>\n\n<!-- plot with population based CI and position of current sample proportion -->\n{#if errmsg === \"\"  }\n   <Axes {limX} limY={[-0.01, max(f) * 1.50]} {xLabel} >\n      <!-- legend -->\n      <TextLegend textSize={1.15} left={limX[0]} top={max(f) * 1.40} dx=\"1.25em\" elements = {labelsStr} />\n\n      <!-- PDF and intervaæ  -->\n      <AreaSeries xValues={cix} yValues={cif} lineColor={mainColor + \"40\"} fillColor={mainColor + \"40\"}/>\n      <LineSeries xValues={x} yValues={f} lineColor={mainColor + \"40\"} />\n\n      <!-- vertical line with statistic-->\n      <Segments xStart={[ciStat]} xEnd={[ciStat]} yStart={[0]} yEnd={[max(f)]} lineColor={lineColor} />\n      <XAxis slot=\"xaxis\" ></XAxis>\n   </Axes>\n{:else}\n   <div class=\"error\">{errmsg}</div>\n{/if}\n\n<style>\n   .error{\n      padding: 2em;\n      text-align: center;\n      line-height: 1.25em;\n      color: #aa3311;\n   }\n</style>","<script>\n   import {seq, dnorm, mean} from \"mdatools/stat\";\n   import  CIPlot from \"../../shared/plots/CIPlot.svelte\";\n\n   export let lineColor = \"#000000\";\n   export let mainColor = \"#6f6666\";\n\n   export let popMean;\n   export let popSD;\n   export let sample;\n\n   export let clicked;\n   export let labelStr = \"# samples inside CI\";\n   export let xLabel = \"Expected sample mean\";\n   export let reset = false;\n   export let errmsg = \"\";\n\n   $: ciCenter = popMean;\n   $: ciSD = popSD / Math.sqrt(sample.length);\n   $: ciStat = mean(sample);\n\n   // PDF curve\n   $: x = seq(ciCenter - 3.5 * ciSD, ciCenter + 3.5 * ciSD, 100);\n   $: f = dnorm(x, ciCenter, ciSD);\n\n   // CI and CI area\n   $: ci = [ciCenter - 1.96 * ciSD, ciCenter + 1.96 * ciSD];\n   $: cix = seq(ci[0], ci[1], 100);\n   $: cif = dnorm(cix, ciCenter, ciSD);\n</script>\n\n<CIPlot limX={[92, 108]} {clicked} {x} {f} {cix} {cif} {ci} {ciStat} {errmsg} {lineColor} {mainColor} {xLabel} {labelStr} {reset} />","<script>\n   import {rnorm} from 'mdatools/stat';\n\n   // shared components\n   import {default as StatApp} from \"../../shared/StatApp.svelte\";\n   import { colors } from \"../../shared/graasta.js\"\n\n   // shared components - controls\n   import AppControlButton from \"../../shared/controls/AppControlButton.svelte\";\n   import AppControlSwitch from \"../../shared/controls/AppControlSwitch.svelte\";\n   import AppControlRange from \"../../shared/controls/AppControlRange.svelte\";\n   import AppControlArea from \"../../shared/controls/AppControlArea.svelte\";\n\n   // local components\n   import PopulationPlot from \"../../shared/plots/MeanPopulationPlot.svelte\";\n   import CIPlot from \"./MeanCIPlot.svelte\";\n\n   // size of population and vector with element indices\n   const popColor = colors.plots.POPULATIONS[0];\n   const popAreaColor = colors.plots.POPULATIONS_PALE[0];\n   const sampColor = colors.plots.SAMPLES[0]\n   const popMean = 100;\n\n   // variable parameters\n   let popSD = 3;\n   let sampSize = 5;\n   let sample = [];\n   let sampSizeOld;\n   let popSDOld;\n   let reset = false;\n   let clicked;\n\n   // when sample size or population SD changed - reset statistics and take new sample\n   $: {\n      if (sample && (sampSizeOld !== sampSize || popSDOld !== popSD)) {\n         reset = true;\n         sampSizeOld = sampSize;\n         popSDOld = popSD;\n         takeNewSample()\n      } else {\n         reset = false;\n      }\n   }\n\n   function takeNewSample() {\n      sample = rnorm(sampSize, popMean, popSD);\n      clicked = Math.random();\n   }\n\n   // take first sample\n   takeNewSample()\n</script>\n\n<StatApp>\n   <div class=\"app-layout\">\n\n      <!-- plot for population individuals  -->\n      <div class=\"app-population-plot-area\">\n         <PopulationPlot {popMean} {popSD} {sample} {popAreaColor} {popColor} {sampColor}/>\n      </div>\n\n      <!-- confidence intervals and statistic table -->\n      <div class=\"app-ci-plot-area\">\n         <CIPlot {popMean} {popSD} {sample} {reset} {clicked} />\n      </div>\n\n      <!-- control elements -->\n      <div class=\"app-controls-area\">\n         <AppControlArea>\n            <AppControlRange id=\"popSD\" label=\"Sigma (σ)\" bind:value={popSD} min={1} max={5} step={0.1} decNum={1} />\n            <AppControlSwitch id=\"sampleSize\" label=\"Sample size\" bind:value={sampSize} options={[5, 10, 20, 40]} />\n            <AppControlButton id=\"newSample\" label=\"Sample\" text=\"Take new\" on:click={takeNewSample} />\n         </AppControlArea>\n      </div>\n\n   </div>\n\n   <div slot=\"help\">\n      <h2>Population based confidence interval for mean</h2>\n      <p>\n         This app is similar to <code>asta-b201</code> but is made to give you an idea about uncertainty of sample mean.\n         Here we have a normally distributed population — concentration of Chloride in different parts of a water source.\n         The concentration has a fixed mean, <em>µ</em> = 100 mg/L, and a standard deviation, <em>σ</em>, which you can\n         vary from 1 to 5 mg/L. The population distribution is shown using gray colors on the left plot. Blue points on\n         that plot show values of a current sample, randomly taken from the population. The vertical lines show the\n         corresponding means.\n      </p>\n      <p>\n         If we know mean of population, <em>µ</em>, and sample size, we can compute an interval of expected mean values\n         of the future samples, <em>m</em>. So, when you take a new random sample of that size from the population, its\n         mean value will likely to be inside the interval. This interval is called <em>confidence interval for mean</em>\n         and since we compute it based on population parameter, it is <em>population based</em>.\n      </p>\n      <p>\n         Right plot shows distribution of possible mean values of samples to be randomly taken from the current population\n         (and for current sample size). Confidence interval, computed for 95% confidence level is shown as a gray area\n         under the distribution curve. The blue vertical line on that plot is a mean of\n         your current sample. Try to take many samples and see how often the mean of a sample will be inside\n         the interval (table under the plot shows this information). If you repeat this many (hundreds) times, about\n         95% of the samples should have mean within the interval.\n      </p>\n   </div>\n</StatApp>\n\n<style>\n\n.app-layout {\n   width: 100%;\n   height: 100%;\n   position: relative;\n   display: grid;\n   grid-template-areas:\n      \"pop ciplot\"\n      \"pop controls\"\n      \"pop .\";\n   grid-template-rows: max(250px, 30%) 1fr min-content;\n   grid-template-columns: 65% 35%;\n}\n\n\n.app-population-plot-area {\n   grid-area: pop;\n   box-sizing: border-box;\n   height: 100%;\n   width: 100%;\n   padding-right: 20px;\n}\n\n\n.app-ci-plot-area {\n   grid-area: ciplot;\n}\n\n.app-controls-area {\n   padding-top: 20px;\n   grid-area: controls;\n}\n\n</style>","import App from './App.svelte';\n\nconst app = new App({\n\ttarget: document.getElementById(\"graasta-app-container\"),\n});\n\nexport default app;"],"names":["noop","run","fn","blank_object","Object","create","run_all","fns","forEach","is_function","thing","safe_not_equal","a","b","component_subscribe","component","store","callback","$$","on_destroy","push","callbacks","unsub","subscribe","unsubscribe","create_slot","definition","ctx","$$scope","slot_ctx","get_slot_context","tar","src","k","assign","slice","get_slot_changes","dirty","lets","undefined","merged","len","Math","max","length","i","update_slot_base","slot","slot_definition","slot_changes","get_slot_context_fn","slot_context","p","get_all_dirty_from_scope","append","target","node","appendChild","insert","anchor","insertBefore","detach","parentNode","removeChild","destroy_each","iterations","detaching","d","element","name","document","createElement","svg_element","createElementNS","text","data","createTextNode","space","empty","listen","event","handler","options","addEventListener","removeEventListener","attr","attribute","value","removeAttribute","getAttribute","setAttribute","set_data","wholeText","set_input_value","input","set_style","key","important","style","removeProperty","setProperty","toggle_class","toggle","classList","current_component","set_current_component","get_current_component","Error","createEventDispatcher","type","detail","bubbles","e","createEvent","initCustomEvent","custom_event","call","getContext","context","get","bubble","this","dirty_components","binding_callbacks","render_callbacks","flush_callbacks","resolved_promise","Promise","resolve","update_scheduled","add_render_callback","add_flush_callback","seen_callbacks","Set","flushidx","flush","saved_component","update","pop","has","add","clear","fragment","before_update","after_update","outroing","outros","group_outros","r","c","check_outros","transition_in","block","local","delete","transition_out","o","destroy_block","lookup","bind","index","props","bound","create_component","mount_component","customElement","on_mount","m","new_on_destroy","map","filter","destroy_component","make_dirty","then","fill","init","instance","create_fragment","not_equal","append_styles","parent_component","on_disconnect","Map","skip_bound","root","ready","ret","rest","hydrate","nodes","Array","from","childNodes","children","l","intro","SvelteComponent","$destroy","$on","indexOf","splice","$set","$$props","obj","$$set","keys","x","n","Number","NEGATIVE_INFINITY","mean","s","sum","variance","biased","y","mx","my","cov","sd","sqrt","seq","min","isInteger","step","out","abs","pow","round","log10","v","EPSILON","mrange","margin","mn","POSITIVE_INFINITY","dnorm","mu","sigma","isArray","A","PI","frac","df","exp","rep","nx","j","div","create_if_block","main","showHelp","$$invalidate","colors","POPULATIONS_PALE","POPULATIONS","SAMPLES","STAT_NAME","STAT_VALUE","formatLabels","labels","labelsStr","label_1","id","label","button","t","t_value","old_blocks","get_key","dynamic","list","destroy","create_each_block","next","get_context","old_indexes","new_blocks","new_lookup","deltas","child_ctx","set","will_move","did_move","first","new_block","old_block","new_key","old_key","option","toFixed","div1","div0","span","t1","t1_value","decNum","dispatch","sliderElement","sliderContainer","isDragging","computeValue","tmpValue","getRelativePosition","sliderRect","getBoundingClientRect","parentRect","minX","maxX","width","clientX","$$value","to_number","fieldset","errormsg","subscriber_queue","writable","start","stop","subscribers","new_value","run_queue","subscriber","invalidate","size","if_block0","create_if_block_3","if_block1","create_if_block_2","if_block2","create_if_block_1","rect","rect_x_value","rect_y_value","rect_width_value","rect_height_value","div1_class_value","svg","defs","clipPath","g","current","niceNum","localRange","exponent","floor","fraction","niceFraction","getScale","height","limX","limY","title","xLabel","yLabel","multiSeries","AXES_MARGIN_FACTORS","small","medium","large","clipPathID","random","axesWrapper","axesMargins","xLim","yLim","scale","isOk","adjustAxisLimits","lim","newLim","adjustedLim","scaleX","doSizeScale","$isOk","margins","scaleY","setContext","addXAxisMargins","addYAxisMargins","adjustXAxisLimits","some","adjustYAxisLimits","getAxisTicks","ticks","maxTickNum","range","tickSpacing","tickMin","ceil","tickMax","LINE_STYLES","LABELS_MARGIN","TICK_NUM","ro","ResizeObserver","entries","entry","cr","contentRect","dispatchClickEvent","eventName","el","seriesTitle","elementID","dataset","observe","$scale","$yLim","$xLim","isNaN","$width","$height","cpx","cpy","tagName","contains","Colors","AXIS_LINE","AXIS_TICK","WHITE","BLACK","GRAY","MIDDLEGRAY","LIGHTGRAY","DARKGRAY","PRIMARY","PRIMARY_TEXT","line","line_x__value","line_x__value_1","line_y__value","line_y__value_1","line0","line0_y__value","line0_y__value_1","line1","line1_y__value","line1_y__value_1","text_1","text_1_y_value","if_block","tickLabels","showGrid","tickMode","axisLineStyleStr","gridLineStyleStr","axes","axesWidth","axesHeight","$axesWidth","$axesHeight","dy","tickNum","ticksX","ticksY","xStart","xEnd","yStart","yEnd","lineColor","lineType","lineWidth","x1","x2","y1","y2","lineStyleStr","raw_value","text_1_x_value","innerHTML","xValues","yValues","pos","faceColor","borderColor","borderWidth","textSize","textAnchors","dx","textStyleStr","tspan","tspan_dy_value","left","top","elements","marker","markerSize","markers","markerSymbol","xValuesRange","yValuesRange","polyline","join","polygon","fillColor","opacity","y0","areaStyleStr","segments0_changes","segments1_changes","axes_changes","popMean","popSD","sample","popColor","popAreaColor","sampColor","popX","popY","sampY","sampMean","textlegend_changes","areaseries_changes","lineseries_changes","segments_changes","f","ci","cix","cif","ciStat","mainColor","errmsg","labelStr","reset","clicked","nSamples","nSamplesInside","ciCenter","ciSD","div3","div2","sampSizeOld","popSDOld","sampSize","takeNewSample","log","sin","rnorm","getElementById"],"mappings":"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"}