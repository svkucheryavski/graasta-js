{"version":3,"file":"asta-b207.js","sources":["../../node_modules/svelte/internal/index.mjs","../../node_modules/mdatools/stat/index.js","../../shared/StatApp.svelte","../../shared/graasta.js","../../shared/controls/AppControlArea.svelte","../../shared/controls/AppControl.svelte","../../shared/controls/AppControlButton.svelte","../../shared/controls/AppControlSwitch.svelte","../../shared/controls/AppControlRange.svelte","../../node_modules/svelte/store/index.mjs","../../node_modules/svelte-plots-basic/src/Axes.svelte","../../node_modules/svelte-plots-basic/src/Colors.js","../../node_modules/svelte-plots-basic/src/XAxis.svelte","../../node_modules/svelte-plots-basic/src/Segments.svelte","../../node_modules/svelte-plots-basic/src/TextLabels.svelte","../../node_modules/svelte-plots-basic/src/TextLegend.svelte","../../node_modules/svelte-plots-basic/node_modules/mdatools/stat/index.js","../../node_modules/svelte-plots-basic/src/ScatterSeries.svelte","../../node_modules/svelte-plots-basic/src/LineSeries.svelte","../../node_modules/svelte-plots-basic/src/AreaSeries.svelte","../../shared/plots/MeanPopulationPlot.svelte","../../shared/plots/DistributionPlot.svelte","../../shared/plots/TestPlot.svelte","../../shared/plots/TTestPlot.svelte","../src/App.svelte","../src/main.js"],"sourcesContent":["function noop() { }\nconst identity = x => x;\nfunction assign(tar, src) {\n    // @ts-ignore\n    for (const k in src)\n        tar[k] = src[k];\n    return tar;\n}\nfunction is_promise(value) {\n    return value && typeof value === 'object' && typeof value.then === 'function';\n}\nfunction add_location(element, file, line, column, char) {\n    element.__svelte_meta = {\n        loc: { file, line, column, char }\n    };\n}\nfunction run(fn) {\n    return fn();\n}\nfunction blank_object() {\n    return Object.create(null);\n}\nfunction run_all(fns) {\n    fns.forEach(run);\n}\nfunction is_function(thing) {\n    return typeof thing === 'function';\n}\nfunction safe_not_equal(a, b) {\n    return a != a ? b == b : a !== b || ((a && typeof a === 'object') || typeof a === 'function');\n}\nlet src_url_equal_anchor;\nfunction src_url_equal(element_src, url) {\n    if (!src_url_equal_anchor) {\n        src_url_equal_anchor = document.createElement('a');\n    }\n    src_url_equal_anchor.href = url;\n    return element_src === src_url_equal_anchor.href;\n}\nfunction not_equal(a, b) {\n    return a != a ? b == b : a !== b;\n}\nfunction is_empty(obj) {\n    return Object.keys(obj).length === 0;\n}\nfunction validate_store(store, name) {\n    if (store != null && typeof store.subscribe !== 'function') {\n        throw new Error(`'${name}' is not a store with a 'subscribe' method`);\n    }\n}\nfunction subscribe(store, ...callbacks) {\n    if (store == null) {\n        return noop;\n    }\n    const unsub = store.subscribe(...callbacks);\n    return unsub.unsubscribe ? () => unsub.unsubscribe() : unsub;\n}\nfunction get_store_value(store) {\n    let value;\n    subscribe(store, _ => value = _)();\n    return value;\n}\nfunction component_subscribe(component, store, callback) {\n    component.$$.on_destroy.push(subscribe(store, callback));\n}\nfunction create_slot(definition, ctx, $$scope, fn) {\n    if (definition) {\n        const slot_ctx = get_slot_context(definition, ctx, $$scope, fn);\n        return definition[0](slot_ctx);\n    }\n}\nfunction get_slot_context(definition, ctx, $$scope, fn) {\n    return definition[1] && fn\n        ? assign($$scope.ctx.slice(), definition[1](fn(ctx)))\n        : $$scope.ctx;\n}\nfunction get_slot_changes(definition, $$scope, dirty, fn) {\n    if (definition[2] && fn) {\n        const lets = definition[2](fn(dirty));\n        if ($$scope.dirty === undefined) {\n            return lets;\n        }\n        if (typeof lets === 'object') {\n            const merged = [];\n            const len = Math.max($$scope.dirty.length, lets.length);\n            for (let i = 0; i < len; i += 1) {\n                merged[i] = $$scope.dirty[i] | lets[i];\n            }\n            return merged;\n        }\n        return $$scope.dirty | lets;\n    }\n    return $$scope.dirty;\n}\nfunction update_slot_base(slot, slot_definition, ctx, $$scope, slot_changes, get_slot_context_fn) {\n    if (slot_changes) {\n        const slot_context = get_slot_context(slot_definition, ctx, $$scope, get_slot_context_fn);\n        slot.p(slot_context, slot_changes);\n    }\n}\nfunction update_slot(slot, slot_definition, ctx, $$scope, dirty, get_slot_changes_fn, get_slot_context_fn) {\n    const slot_changes = get_slot_changes(slot_definition, $$scope, dirty, get_slot_changes_fn);\n    update_slot_base(slot, slot_definition, ctx, $$scope, slot_changes, get_slot_context_fn);\n}\nfunction get_all_dirty_from_scope($$scope) {\n    if ($$scope.ctx.length > 32) {\n        const dirty = [];\n        const length = $$scope.ctx.length / 32;\n        for (let i = 0; i < length; i++) {\n            dirty[i] = -1;\n        }\n        return dirty;\n    }\n    return -1;\n}\nfunction exclude_internal_props(props) {\n    const result = {};\n    for (const k in props)\n        if (k[0] !== '$')\n            result[k] = props[k];\n    return result;\n}\nfunction compute_rest_props(props, keys) {\n    const rest = {};\n    keys = new Set(keys);\n    for (const k in props)\n        if (!keys.has(k) && k[0] !== '$')\n            rest[k] = props[k];\n    return rest;\n}\nfunction compute_slots(slots) {\n    const result = {};\n    for (const key in slots) {\n        result[key] = true;\n    }\n    return result;\n}\nfunction once(fn) {\n    let ran = false;\n    return function (...args) {\n        if (ran)\n            return;\n        ran = true;\n        fn.call(this, ...args);\n    };\n}\nfunction null_to_empty(value) {\n    return value == null ? '' : value;\n}\nfunction set_store_value(store, ret, value) {\n    store.set(value);\n    return ret;\n}\nconst has_prop = (obj, prop) => Object.prototype.hasOwnProperty.call(obj, prop);\nfunction action_destroyer(action_result) {\n    return action_result && is_function(action_result.destroy) ? action_result.destroy : noop;\n}\n\nconst is_client = typeof window !== 'undefined';\nlet now = is_client\n    ? () => window.performance.now()\n    : () => Date.now();\nlet raf = is_client ? cb => requestAnimationFrame(cb) : noop;\n// used internally for testing\nfunction set_now(fn) {\n    now = fn;\n}\nfunction set_raf(fn) {\n    raf = fn;\n}\n\nconst tasks = new Set();\nfunction run_tasks(now) {\n    tasks.forEach(task => {\n        if (!task.c(now)) {\n            tasks.delete(task);\n            task.f();\n        }\n    });\n    if (tasks.size !== 0)\n        raf(run_tasks);\n}\n/**\n * For testing purposes only!\n */\nfunction clear_loops() {\n    tasks.clear();\n}\n/**\n * Creates a new task that runs on each raf frame\n * until it returns a falsy value or is aborted\n */\nfunction loop(callback) {\n    let task;\n    if (tasks.size === 0)\n        raf(run_tasks);\n    return {\n        promise: new Promise(fulfill => {\n            tasks.add(task = { c: callback, f: fulfill });\n        }),\n        abort() {\n            tasks.delete(task);\n        }\n    };\n}\n\n// Track which nodes are claimed during hydration. Unclaimed nodes can then be removed from the DOM\n// at the end of hydration without touching the remaining nodes.\nlet is_hydrating = false;\nfunction start_hydrating() {\n    is_hydrating = true;\n}\nfunction end_hydrating() {\n    is_hydrating = false;\n}\nfunction upper_bound(low, high, key, value) {\n    // Return first index of value larger than input value in the range [low, high)\n    while (low < high) {\n        const mid = low + ((high - low) >> 1);\n        if (key(mid) <= value) {\n            low = mid + 1;\n        }\n        else {\n            high = mid;\n        }\n    }\n    return low;\n}\nfunction init_hydrate(target) {\n    if (target.hydrate_init)\n        return;\n    target.hydrate_init = true;\n    // We know that all children have claim_order values since the unclaimed have been detached if target is not <head>\n    let children = target.childNodes;\n    // If target is <head>, there may be children without claim_order\n    if (target.nodeName === 'HEAD') {\n        const myChildren = [];\n        for (let i = 0; i < children.length; i++) {\n            const node = children[i];\n            if (node.claim_order !== undefined) {\n                myChildren.push(node);\n            }\n        }\n        children = myChildren;\n    }\n    /*\n    * Reorder claimed children optimally.\n    * We can reorder claimed children optimally by finding the longest subsequence of\n    * nodes that are already claimed in order and only moving the rest. The longest\n    * subsequence subsequence of nodes that are claimed in order can be found by\n    * computing the longest increasing subsequence of .claim_order values.\n    *\n    * This algorithm is optimal in generating the least amount of reorder operations\n    * possible.\n    *\n    * Proof:\n    * We know that, given a set of reordering operations, the nodes that do not move\n    * always form an increasing subsequence, since they do not move among each other\n    * meaning that they must be already ordered among each other. Thus, the maximal\n    * set of nodes that do not move form a longest increasing subsequence.\n    */\n    // Compute longest increasing subsequence\n    // m: subsequence length j => index k of smallest value that ends an increasing subsequence of length j\n    const m = new Int32Array(children.length + 1);\n    // Predecessor indices + 1\n    const p = new Int32Array(children.length);\n    m[0] = -1;\n    let longest = 0;\n    for (let i = 0; i < children.length; i++) {\n        const current = children[i].claim_order;\n        // Find the largest subsequence length such that it ends in a value less than our current value\n        // upper_bound returns first greater value, so we subtract one\n        // with fast path for when we are on the current longest subsequence\n        const seqLen = ((longest > 0 && children[m[longest]].claim_order <= current) ? longest + 1 : upper_bound(1, longest, idx => children[m[idx]].claim_order, current)) - 1;\n        p[i] = m[seqLen] + 1;\n        const newLen = seqLen + 1;\n        // We can guarantee that current is the smallest value. Otherwise, we would have generated a longer sequence.\n        m[newLen] = i;\n        longest = Math.max(newLen, longest);\n    }\n    // The longest increasing subsequence of nodes (initially reversed)\n    const lis = [];\n    // The rest of the nodes, nodes that will be moved\n    const toMove = [];\n    let last = children.length - 1;\n    for (let cur = m[longest] + 1; cur != 0; cur = p[cur - 1]) {\n        lis.push(children[cur - 1]);\n        for (; last >= cur; last--) {\n            toMove.push(children[last]);\n        }\n        last--;\n    }\n    for (; last >= 0; last--) {\n        toMove.push(children[last]);\n    }\n    lis.reverse();\n    // We sort the nodes being moved to guarantee that their insertion order matches the claim order\n    toMove.sort((a, b) => a.claim_order - b.claim_order);\n    // Finally, we move the nodes\n    for (let i = 0, j = 0; i < toMove.length; i++) {\n        while (j < lis.length && toMove[i].claim_order >= lis[j].claim_order) {\n            j++;\n        }\n        const anchor = j < lis.length ? lis[j] : null;\n        target.insertBefore(toMove[i], anchor);\n    }\n}\nfunction append(target, node) {\n    target.appendChild(node);\n}\nfunction append_styles(target, style_sheet_id, styles) {\n    const append_styles_to = get_root_for_style(target);\n    if (!append_styles_to.getElementById(style_sheet_id)) {\n        const style = element('style');\n        style.id = style_sheet_id;\n        style.textContent = styles;\n        append_stylesheet(append_styles_to, style);\n    }\n}\nfunction get_root_for_style(node) {\n    if (!node)\n        return document;\n    const root = node.getRootNode ? node.getRootNode() : node.ownerDocument;\n    if (root && root.host) {\n        return root;\n    }\n    return node.ownerDocument;\n}\nfunction append_empty_stylesheet(node) {\n    const style_element = element('style');\n    append_stylesheet(get_root_for_style(node), style_element);\n    return style_element.sheet;\n}\nfunction append_stylesheet(node, style) {\n    append(node.head || node, style);\n}\nfunction append_hydration(target, node) {\n    if (is_hydrating) {\n        init_hydrate(target);\n        if ((target.actual_end_child === undefined) || ((target.actual_end_child !== null) && (target.actual_end_child.parentElement !== target))) {\n            target.actual_end_child = target.firstChild;\n        }\n        // Skip nodes of undefined ordering\n        while ((target.actual_end_child !== null) && (target.actual_end_child.claim_order === undefined)) {\n            target.actual_end_child = target.actual_end_child.nextSibling;\n        }\n        if (node !== target.actual_end_child) {\n            // We only insert if the ordering of this node should be modified or the parent node is not target\n            if (node.claim_order !== undefined || node.parentNode !== target) {\n                target.insertBefore(node, target.actual_end_child);\n            }\n        }\n        else {\n            target.actual_end_child = node.nextSibling;\n        }\n    }\n    else if (node.parentNode !== target || node.nextSibling !== null) {\n        target.appendChild(node);\n    }\n}\nfunction insert(target, node, anchor) {\n    target.insertBefore(node, anchor || null);\n}\nfunction insert_hydration(target, node, anchor) {\n    if (is_hydrating && !anchor) {\n        append_hydration(target, node);\n    }\n    else if (node.parentNode !== target || node.nextSibling != anchor) {\n        target.insertBefore(node, anchor || null);\n    }\n}\nfunction detach(node) {\n    node.parentNode.removeChild(node);\n}\nfunction destroy_each(iterations, detaching) {\n    for (let i = 0; i < iterations.length; i += 1) {\n        if (iterations[i])\n            iterations[i].d(detaching);\n    }\n}\nfunction element(name) {\n    return document.createElement(name);\n}\nfunction element_is(name, is) {\n    return document.createElement(name, { is });\n}\nfunction object_without_properties(obj, exclude) {\n    const target = {};\n    for (const k in obj) {\n        if (has_prop(obj, k)\n            // @ts-ignore\n            && exclude.indexOf(k) === -1) {\n            // @ts-ignore\n            target[k] = obj[k];\n        }\n    }\n    return target;\n}\nfunction svg_element(name) {\n    return document.createElementNS('http://www.w3.org/2000/svg', name);\n}\nfunction text(data) {\n    return document.createTextNode(data);\n}\nfunction space() {\n    return text(' ');\n}\nfunction empty() {\n    return text('');\n}\nfunction listen(node, event, handler, options) {\n    node.addEventListener(event, handler, options);\n    return () => node.removeEventListener(event, handler, options);\n}\nfunction prevent_default(fn) {\n    return function (event) {\n        event.preventDefault();\n        // @ts-ignore\n        return fn.call(this, event);\n    };\n}\nfunction stop_propagation(fn) {\n    return function (event) {\n        event.stopPropagation();\n        // @ts-ignore\n        return fn.call(this, event);\n    };\n}\nfunction self(fn) {\n    return function (event) {\n        // @ts-ignore\n        if (event.target === this)\n            fn.call(this, event);\n    };\n}\nfunction trusted(fn) {\n    return function (event) {\n        // @ts-ignore\n        if (event.isTrusted)\n            fn.call(this, event);\n    };\n}\nfunction attr(node, attribute, value) {\n    if (value == null)\n        node.removeAttribute(attribute);\n    else if (node.getAttribute(attribute) !== value)\n        node.setAttribute(attribute, value);\n}\nfunction set_attributes(node, attributes) {\n    // @ts-ignore\n    const descriptors = Object.getOwnPropertyDescriptors(node.__proto__);\n    for (const key in attributes) {\n        if (attributes[key] == null) {\n            node.removeAttribute(key);\n        }\n        else if (key === 'style') {\n            node.style.cssText = attributes[key];\n        }\n        else if (key === '__value') {\n            node.value = node[key] = attributes[key];\n        }\n        else if (descriptors[key] && descriptors[key].set) {\n            node[key] = attributes[key];\n        }\n        else {\n            attr(node, key, attributes[key]);\n        }\n    }\n}\nfunction set_svg_attributes(node, attributes) {\n    for (const key in attributes) {\n        attr(node, key, attributes[key]);\n    }\n}\nfunction set_custom_element_data(node, prop, value) {\n    if (prop in node) {\n        node[prop] = typeof node[prop] === 'boolean' && value === '' ? true : value;\n    }\n    else {\n        attr(node, prop, value);\n    }\n}\nfunction xlink_attr(node, attribute, value) {\n    node.setAttributeNS('http://www.w3.org/1999/xlink', attribute, value);\n}\nfunction get_binding_group_value(group, __value, checked) {\n    const value = new Set();\n    for (let i = 0; i < group.length; i += 1) {\n        if (group[i].checked)\n            value.add(group[i].__value);\n    }\n    if (!checked) {\n        value.delete(__value);\n    }\n    return Array.from(value);\n}\nfunction to_number(value) {\n    return value === '' ? null : +value;\n}\nfunction time_ranges_to_array(ranges) {\n    const array = [];\n    for (let i = 0; i < ranges.length; i += 1) {\n        array.push({ start: ranges.start(i), end: ranges.end(i) });\n    }\n    return array;\n}\nfunction children(element) {\n    return Array.from(element.childNodes);\n}\nfunction init_claim_info(nodes) {\n    if (nodes.claim_info === undefined) {\n        nodes.claim_info = { last_index: 0, total_claimed: 0 };\n    }\n}\nfunction claim_node(nodes, predicate, processNode, createNode, dontUpdateLastIndex = false) {\n    // Try to find nodes in an order such that we lengthen the longest increasing subsequence\n    init_claim_info(nodes);\n    const resultNode = (() => {\n        // We first try to find an element after the previous one\n        for (let i = nodes.claim_info.last_index; i < nodes.length; i++) {\n            const node = nodes[i];\n            if (predicate(node)) {\n                const replacement = processNode(node);\n                if (replacement === undefined) {\n                    nodes.splice(i, 1);\n                }\n                else {\n                    nodes[i] = replacement;\n                }\n                if (!dontUpdateLastIndex) {\n                    nodes.claim_info.last_index = i;\n                }\n                return node;\n            }\n        }\n        // Otherwise, we try to find one before\n        // We iterate in reverse so that we don't go too far back\n        for (let i = nodes.claim_info.last_index - 1; i >= 0; i--) {\n            const node = nodes[i];\n            if (predicate(node)) {\n                const replacement = processNode(node);\n                if (replacement === undefined) {\n                    nodes.splice(i, 1);\n                }\n                else {\n                    nodes[i] = replacement;\n                }\n                if (!dontUpdateLastIndex) {\n                    nodes.claim_info.last_index = i;\n                }\n                else if (replacement === undefined) {\n                    // Since we spliced before the last_index, we decrease it\n                    nodes.claim_info.last_index--;\n                }\n                return node;\n            }\n        }\n        // If we can't find any matching node, we create a new one\n        return createNode();\n    })();\n    resultNode.claim_order = nodes.claim_info.total_claimed;\n    nodes.claim_info.total_claimed += 1;\n    return resultNode;\n}\nfunction claim_element_base(nodes, name, attributes, create_element) {\n    return claim_node(nodes, (node) => node.nodeName === name, (node) => {\n        const remove = [];\n        for (let j = 0; j < node.attributes.length; j++) {\n            const attribute = node.attributes[j];\n            if (!attributes[attribute.name]) {\n                remove.push(attribute.name);\n            }\n        }\n        remove.forEach(v => node.removeAttribute(v));\n        return undefined;\n    }, () => create_element(name));\n}\nfunction claim_element(nodes, name, attributes) {\n    return claim_element_base(nodes, name, attributes, element);\n}\nfunction claim_svg_element(nodes, name, attributes) {\n    return claim_element_base(nodes, name, attributes, svg_element);\n}\nfunction claim_text(nodes, data) {\n    return claim_node(nodes, (node) => node.nodeType === 3, (node) => {\n        const dataStr = '' + data;\n        if (node.data.startsWith(dataStr)) {\n            if (node.data.length !== dataStr.length) {\n                return node.splitText(dataStr.length);\n            }\n        }\n        else {\n            node.data = dataStr;\n        }\n    }, () => text(data), true // Text nodes should not update last index since it is likely not worth it to eliminate an increasing subsequence of actual elements\n    );\n}\nfunction claim_space(nodes) {\n    return claim_text(nodes, ' ');\n}\nfunction find_comment(nodes, text, start) {\n    for (let i = start; i < nodes.length; i += 1) {\n        const node = nodes[i];\n        if (node.nodeType === 8 /* comment node */ && node.textContent.trim() === text) {\n            return i;\n        }\n    }\n    return nodes.length;\n}\nfunction claim_html_tag(nodes, is_svg) {\n    // find html opening tag\n    const start_index = find_comment(nodes, 'HTML_TAG_START', 0);\n    const end_index = find_comment(nodes, 'HTML_TAG_END', start_index);\n    if (start_index === end_index) {\n        return new HtmlTagHydration(undefined, is_svg);\n    }\n    init_claim_info(nodes);\n    const html_tag_nodes = nodes.splice(start_index, end_index - start_index + 1);\n    detach(html_tag_nodes[0]);\n    detach(html_tag_nodes[html_tag_nodes.length - 1]);\n    const claimed_nodes = html_tag_nodes.slice(1, html_tag_nodes.length - 1);\n    for (const n of claimed_nodes) {\n        n.claim_order = nodes.claim_info.total_claimed;\n        nodes.claim_info.total_claimed += 1;\n    }\n    return new HtmlTagHydration(claimed_nodes, is_svg);\n}\nfunction set_data(text, data) {\n    data = '' + data;\n    if (text.wholeText !== data)\n        text.data = data;\n}\nfunction set_input_value(input, value) {\n    input.value = value == null ? '' : value;\n}\nfunction set_input_type(input, type) {\n    try {\n        input.type = type;\n    }\n    catch (e) {\n        // do nothing\n    }\n}\nfunction set_style(node, key, value, important) {\n    if (value === null) {\n        node.style.removeProperty(key);\n    }\n    else {\n        node.style.setProperty(key, value, important ? 'important' : '');\n    }\n}\nfunction select_option(select, value) {\n    for (let i = 0; i < select.options.length; i += 1) {\n        const option = select.options[i];\n        if (option.__value === value) {\n            option.selected = true;\n            return;\n        }\n    }\n    select.selectedIndex = -1; // no option should be selected\n}\nfunction select_options(select, value) {\n    for (let i = 0; i < select.options.length; i += 1) {\n        const option = select.options[i];\n        option.selected = ~value.indexOf(option.__value);\n    }\n}\nfunction select_value(select) {\n    const selected_option = select.querySelector(':checked') || select.options[0];\n    return selected_option && selected_option.__value;\n}\nfunction select_multiple_value(select) {\n    return [].map.call(select.querySelectorAll(':checked'), option => option.__value);\n}\n// unfortunately this can't be a constant as that wouldn't be tree-shakeable\n// so we cache the result instead\nlet crossorigin;\nfunction is_crossorigin() {\n    if (crossorigin === undefined) {\n        crossorigin = false;\n        try {\n            if (typeof window !== 'undefined' && window.parent) {\n                void window.parent.document;\n            }\n        }\n        catch (error) {\n            crossorigin = true;\n        }\n    }\n    return crossorigin;\n}\nfunction add_resize_listener(node, fn) {\n    const computed_style = getComputedStyle(node);\n    if (computed_style.position === 'static') {\n        node.style.position = 'relative';\n    }\n    const iframe = element('iframe');\n    iframe.setAttribute('style', 'display: block; position: absolute; top: 0; left: 0; width: 100%; height: 100%; ' +\n        'overflow: hidden; border: 0; opacity: 0; pointer-events: none; z-index: -1;');\n    iframe.setAttribute('aria-hidden', 'true');\n    iframe.tabIndex = -1;\n    const crossorigin = is_crossorigin();\n    let unsubscribe;\n    if (crossorigin) {\n        iframe.src = \"data:text/html,<script>onresize=function(){parent.postMessage(0,'*')}</script>\";\n        unsubscribe = listen(window, 'message', (event) => {\n            if (event.source === iframe.contentWindow)\n                fn();\n        });\n    }\n    else {\n        iframe.src = 'about:blank';\n        iframe.onload = () => {\n            unsubscribe = listen(iframe.contentWindow, 'resize', fn);\n        };\n    }\n    append(node, iframe);\n    return () => {\n        if (crossorigin) {\n            unsubscribe();\n        }\n        else if (unsubscribe && iframe.contentWindow) {\n            unsubscribe();\n        }\n        detach(iframe);\n    };\n}\nfunction toggle_class(element, name, toggle) {\n    element.classList[toggle ? 'add' : 'remove'](name);\n}\nfunction custom_event(type, detail, { bubbles = false, cancelable = false } = {}) {\n    const e = document.createEvent('CustomEvent');\n    e.initCustomEvent(type, bubbles, cancelable, detail);\n    return e;\n}\nfunction query_selector_all(selector, parent = document.body) {\n    return Array.from(parent.querySelectorAll(selector));\n}\nclass HtmlTag {\n    constructor(is_svg = false) {\n        this.is_svg = false;\n        this.is_svg = is_svg;\n        this.e = this.n = null;\n    }\n    c(html) {\n        this.h(html);\n    }\n    m(html, target, anchor = null) {\n        if (!this.e) {\n            if (this.is_svg)\n                this.e = svg_element(target.nodeName);\n            else\n                this.e = element(target.nodeName);\n            this.t = target;\n            this.c(html);\n        }\n        this.i(anchor);\n    }\n    h(html) {\n        this.e.innerHTML = html;\n        this.n = Array.from(this.e.childNodes);\n    }\n    i(anchor) {\n        for (let i = 0; i < this.n.length; i += 1) {\n            insert(this.t, this.n[i], anchor);\n        }\n    }\n    p(html) {\n        this.d();\n        this.h(html);\n        this.i(this.a);\n    }\n    d() {\n        this.n.forEach(detach);\n    }\n}\nclass HtmlTagHydration extends HtmlTag {\n    constructor(claimed_nodes, is_svg = false) {\n        super(is_svg);\n        this.e = this.n = null;\n        this.l = claimed_nodes;\n    }\n    c(html) {\n        if (this.l) {\n            this.n = this.l;\n        }\n        else {\n            super.c(html);\n        }\n    }\n    i(anchor) {\n        for (let i = 0; i < this.n.length; i += 1) {\n            insert_hydration(this.t, this.n[i], anchor);\n        }\n    }\n}\nfunction attribute_to_object(attributes) {\n    const result = {};\n    for (const attribute of attributes) {\n        result[attribute.name] = attribute.value;\n    }\n    return result;\n}\nfunction get_custom_elements_slots(element) {\n    const result = {};\n    element.childNodes.forEach((node) => {\n        result[node.slot || 'default'] = true;\n    });\n    return result;\n}\n\n// we need to store the information for multiple documents because a Svelte application could also contain iframes\n// https://github.com/sveltejs/svelte/issues/3624\nconst managed_styles = new Map();\nlet active = 0;\n// https://github.com/darkskyapp/string-hash/blob/master/index.js\nfunction hash(str) {\n    let hash = 5381;\n    let i = str.length;\n    while (i--)\n        hash = ((hash << 5) - hash) ^ str.charCodeAt(i);\n    return hash >>> 0;\n}\nfunction create_style_information(doc, node) {\n    const info = { stylesheet: append_empty_stylesheet(node), rules: {} };\n    managed_styles.set(doc, info);\n    return info;\n}\nfunction create_rule(node, a, b, duration, delay, ease, fn, uid = 0) {\n    const step = 16.666 / duration;\n    let keyframes = '{\\n';\n    for (let p = 0; p <= 1; p += step) {\n        const t = a + (b - a) * ease(p);\n        keyframes += p * 100 + `%{${fn(t, 1 - t)}}\\n`;\n    }\n    const rule = keyframes + `100% {${fn(b, 1 - b)}}\\n}`;\n    const name = `__svelte_${hash(rule)}_${uid}`;\n    const doc = get_root_for_style(node);\n    const { stylesheet, rules } = managed_styles.get(doc) || create_style_information(doc, node);\n    if (!rules[name]) {\n        rules[name] = true;\n        stylesheet.insertRule(`@keyframes ${name} ${rule}`, stylesheet.cssRules.length);\n    }\n    const animation = node.style.animation || '';\n    node.style.animation = `${animation ? `${animation}, ` : ''}${name} ${duration}ms linear ${delay}ms 1 both`;\n    active += 1;\n    return name;\n}\nfunction delete_rule(node, name) {\n    const previous = (node.style.animation || '').split(', ');\n    const next = previous.filter(name\n        ? anim => anim.indexOf(name) < 0 // remove specific animation\n        : anim => anim.indexOf('__svelte') === -1 // remove all Svelte animations\n    );\n    const deleted = previous.length - next.length;\n    if (deleted) {\n        node.style.animation = next.join(', ');\n        active -= deleted;\n        if (!active)\n            clear_rules();\n    }\n}\nfunction clear_rules() {\n    raf(() => {\n        if (active)\n            return;\n        managed_styles.forEach(info => {\n            const { stylesheet } = info;\n            let i = stylesheet.cssRules.length;\n            while (i--)\n                stylesheet.deleteRule(i);\n            info.rules = {};\n        });\n        managed_styles.clear();\n    });\n}\n\nfunction create_animation(node, from, fn, params) {\n    if (!from)\n        return noop;\n    const to = node.getBoundingClientRect();\n    if (from.left === to.left && from.right === to.right && from.top === to.top && from.bottom === to.bottom)\n        return noop;\n    const { delay = 0, duration = 300, easing = identity, \n    // @ts-ignore todo: should this be separated from destructuring? Or start/end added to public api and documentation?\n    start: start_time = now() + delay, \n    // @ts-ignore todo:\n    end = start_time + duration, tick = noop, css } = fn(node, { from, to }, params);\n    let running = true;\n    let started = false;\n    let name;\n    function start() {\n        if (css) {\n            name = create_rule(node, 0, 1, duration, delay, easing, css);\n        }\n        if (!delay) {\n            started = true;\n        }\n    }\n    function stop() {\n        if (css)\n            delete_rule(node, name);\n        running = false;\n    }\n    loop(now => {\n        if (!started && now >= start_time) {\n            started = true;\n        }\n        if (started && now >= end) {\n            tick(1, 0);\n            stop();\n        }\n        if (!running) {\n            return false;\n        }\n        if (started) {\n            const p = now - start_time;\n            const t = 0 + 1 * easing(p / duration);\n            tick(t, 1 - t);\n        }\n        return true;\n    });\n    start();\n    tick(0, 1);\n    return stop;\n}\nfunction fix_position(node) {\n    const style = getComputedStyle(node);\n    if (style.position !== 'absolute' && style.position !== 'fixed') {\n        const { width, height } = style;\n        const a = node.getBoundingClientRect();\n        node.style.position = 'absolute';\n        node.style.width = width;\n        node.style.height = height;\n        add_transform(node, a);\n    }\n}\nfunction add_transform(node, a) {\n    const b = node.getBoundingClientRect();\n    if (a.left !== b.left || a.top !== b.top) {\n        const style = getComputedStyle(node);\n        const transform = style.transform === 'none' ? '' : style.transform;\n        node.style.transform = `${transform} translate(${a.left - b.left}px, ${a.top - b.top}px)`;\n    }\n}\n\nlet current_component;\nfunction set_current_component(component) {\n    current_component = component;\n}\nfunction get_current_component() {\n    if (!current_component)\n        throw new Error('Function called outside component initialization');\n    return current_component;\n}\nfunction beforeUpdate(fn) {\n    get_current_component().$$.before_update.push(fn);\n}\nfunction onMount(fn) {\n    get_current_component().$$.on_mount.push(fn);\n}\nfunction afterUpdate(fn) {\n    get_current_component().$$.after_update.push(fn);\n}\nfunction onDestroy(fn) {\n    get_current_component().$$.on_destroy.push(fn);\n}\nfunction createEventDispatcher() {\n    const component = get_current_component();\n    return (type, detail, { cancelable = false } = {}) => {\n        const callbacks = component.$$.callbacks[type];\n        if (callbacks) {\n            // TODO are there situations where events could be dispatched\n            // in a server (non-DOM) environment?\n            const event = custom_event(type, detail, { cancelable });\n            callbacks.slice().forEach(fn => {\n                fn.call(component, event);\n            });\n            return !event.defaultPrevented;\n        }\n        return true;\n    };\n}\nfunction setContext(key, context) {\n    get_current_component().$$.context.set(key, context);\n    return context;\n}\nfunction getContext(key) {\n    return get_current_component().$$.context.get(key);\n}\nfunction getAllContexts() {\n    return get_current_component().$$.context;\n}\nfunction hasContext(key) {\n    return get_current_component().$$.context.has(key);\n}\n// TODO figure out if we still want to support\n// shorthand events, or if we want to implement\n// a real bubbling mechanism\nfunction bubble(component, event) {\n    const callbacks = component.$$.callbacks[event.type];\n    if (callbacks) {\n        // @ts-ignore\n        callbacks.slice().forEach(fn => fn.call(this, event));\n    }\n}\n\nconst dirty_components = [];\nconst intros = { enabled: false };\nconst binding_callbacks = [];\nconst render_callbacks = [];\nconst flush_callbacks = [];\nconst resolved_promise = Promise.resolve();\nlet update_scheduled = false;\nfunction schedule_update() {\n    if (!update_scheduled) {\n        update_scheduled = true;\n        resolved_promise.then(flush);\n    }\n}\nfunction tick() {\n    schedule_update();\n    return resolved_promise;\n}\nfunction add_render_callback(fn) {\n    render_callbacks.push(fn);\n}\nfunction add_flush_callback(fn) {\n    flush_callbacks.push(fn);\n}\n// flush() calls callbacks in this order:\n// 1. All beforeUpdate callbacks, in order: parents before children\n// 2. All bind:this callbacks, in reverse order: children before parents.\n// 3. All afterUpdate callbacks, in order: parents before children. EXCEPT\n//    for afterUpdates called during the initial onMount, which are called in\n//    reverse order: children before parents.\n// Since callbacks might update component values, which could trigger another\n// call to flush(), the following steps guard against this:\n// 1. During beforeUpdate, any updated components will be added to the\n//    dirty_components array and will cause a reentrant call to flush(). Because\n//    the flush index is kept outside the function, the reentrant call will pick\n//    up where the earlier call left off and go through all dirty components. The\n//    current_component value is saved and restored so that the reentrant call will\n//    not interfere with the \"parent\" flush() call.\n// 2. bind:this callbacks cannot trigger new flush() calls.\n// 3. During afterUpdate, any updated components will NOT have their afterUpdate\n//    callback called a second time; the seen_callbacks set, outside the flush()\n//    function, guarantees this behavior.\nconst seen_callbacks = new Set();\nlet flushidx = 0; // Do *not* move this inside the flush() function\nfunction flush() {\n    const saved_component = current_component;\n    do {\n        // first, call beforeUpdate functions\n        // and update components\n        while (flushidx < dirty_components.length) {\n            const component = dirty_components[flushidx];\n            flushidx++;\n            set_current_component(component);\n            update(component.$$);\n        }\n        set_current_component(null);\n        dirty_components.length = 0;\n        flushidx = 0;\n        while (binding_callbacks.length)\n            binding_callbacks.pop()();\n        // then, once components are updated, call\n        // afterUpdate functions. This may cause\n        // subsequent updates...\n        for (let i = 0; i < render_callbacks.length; i += 1) {\n            const callback = render_callbacks[i];\n            if (!seen_callbacks.has(callback)) {\n                // ...so guard against infinite loops\n                seen_callbacks.add(callback);\n                callback();\n            }\n        }\n        render_callbacks.length = 0;\n    } while (dirty_components.length);\n    while (flush_callbacks.length) {\n        flush_callbacks.pop()();\n    }\n    update_scheduled = false;\n    seen_callbacks.clear();\n    set_current_component(saved_component);\n}\nfunction update($$) {\n    if ($$.fragment !== null) {\n        $$.update();\n        run_all($$.before_update);\n        const dirty = $$.dirty;\n        $$.dirty = [-1];\n        $$.fragment && $$.fragment.p($$.ctx, dirty);\n        $$.after_update.forEach(add_render_callback);\n    }\n}\n\nlet promise;\nfunction wait() {\n    if (!promise) {\n        promise = Promise.resolve();\n        promise.then(() => {\n            promise = null;\n        });\n    }\n    return promise;\n}\nfunction dispatch(node, direction, kind) {\n    node.dispatchEvent(custom_event(`${direction ? 'intro' : 'outro'}${kind}`));\n}\nconst outroing = new Set();\nlet outros;\nfunction group_outros() {\n    outros = {\n        r: 0,\n        c: [],\n        p: outros // parent group\n    };\n}\nfunction check_outros() {\n    if (!outros.r) {\n        run_all(outros.c);\n    }\n    outros = outros.p;\n}\nfunction transition_in(block, local) {\n    if (block && block.i) {\n        outroing.delete(block);\n        block.i(local);\n    }\n}\nfunction transition_out(block, local, detach, callback) {\n    if (block && block.o) {\n        if (outroing.has(block))\n            return;\n        outroing.add(block);\n        outros.c.push(() => {\n            outroing.delete(block);\n            if (callback) {\n                if (detach)\n                    block.d(1);\n                callback();\n            }\n        });\n        block.o(local);\n    }\n}\nconst null_transition = { duration: 0 };\nfunction create_in_transition(node, fn, params) {\n    let config = fn(node, params);\n    let running = false;\n    let animation_name;\n    let task;\n    let uid = 0;\n    function cleanup() {\n        if (animation_name)\n            delete_rule(node, animation_name);\n    }\n    function go() {\n        const { delay = 0, duration = 300, easing = identity, tick = noop, css } = config || null_transition;\n        if (css)\n            animation_name = create_rule(node, 0, 1, duration, delay, easing, css, uid++);\n        tick(0, 1);\n        const start_time = now() + delay;\n        const end_time = start_time + duration;\n        if (task)\n            task.abort();\n        running = true;\n        add_render_callback(() => dispatch(node, true, 'start'));\n        task = loop(now => {\n            if (running) {\n                if (now >= end_time) {\n                    tick(1, 0);\n                    dispatch(node, true, 'end');\n                    cleanup();\n                    return running = false;\n                }\n                if (now >= start_time) {\n                    const t = easing((now - start_time) / duration);\n                    tick(t, 1 - t);\n                }\n            }\n            return running;\n        });\n    }\n    let started = false;\n    return {\n        start() {\n            if (started)\n                return;\n            started = true;\n            delete_rule(node);\n            if (is_function(config)) {\n                config = config();\n                wait().then(go);\n            }\n            else {\n                go();\n            }\n        },\n        invalidate() {\n            started = false;\n        },\n        end() {\n            if (running) {\n                cleanup();\n                running = false;\n            }\n        }\n    };\n}\nfunction create_out_transition(node, fn, params) {\n    let config = fn(node, params);\n    let running = true;\n    let animation_name;\n    const group = outros;\n    group.r += 1;\n    function go() {\n        const { delay = 0, duration = 300, easing = identity, tick = noop, css } = config || null_transition;\n        if (css)\n            animation_name = create_rule(node, 1, 0, duration, delay, easing, css);\n        const start_time = now() + delay;\n        const end_time = start_time + duration;\n        add_render_callback(() => dispatch(node, false, 'start'));\n        loop(now => {\n            if (running) {\n                if (now >= end_time) {\n                    tick(0, 1);\n                    dispatch(node, false, 'end');\n                    if (!--group.r) {\n                        // this will result in `end()` being called,\n                        // so we don't need to clean up here\n                        run_all(group.c);\n                    }\n                    return false;\n                }\n                if (now >= start_time) {\n                    const t = easing((now - start_time) / duration);\n                    tick(1 - t, t);\n                }\n            }\n            return running;\n        });\n    }\n    if (is_function(config)) {\n        wait().then(() => {\n            // @ts-ignore\n            config = config();\n            go();\n        });\n    }\n    else {\n        go();\n    }\n    return {\n        end(reset) {\n            if (reset && config.tick) {\n                config.tick(1, 0);\n            }\n            if (running) {\n                if (animation_name)\n                    delete_rule(node, animation_name);\n                running = false;\n            }\n        }\n    };\n}\nfunction create_bidirectional_transition(node, fn, params, intro) {\n    let config = fn(node, params);\n    let t = intro ? 0 : 1;\n    let running_program = null;\n    let pending_program = null;\n    let animation_name = null;\n    function clear_animation() {\n        if (animation_name)\n            delete_rule(node, animation_name);\n    }\n    function init(program, duration) {\n        const d = (program.b - t);\n        duration *= Math.abs(d);\n        return {\n            a: t,\n            b: program.b,\n            d,\n            duration,\n            start: program.start,\n            end: program.start + duration,\n            group: program.group\n        };\n    }\n    function go(b) {\n        const { delay = 0, duration = 300, easing = identity, tick = noop, css } = config || null_transition;\n        const program = {\n            start: now() + delay,\n            b\n        };\n        if (!b) {\n            // @ts-ignore todo: improve typings\n            program.group = outros;\n            outros.r += 1;\n        }\n        if (running_program || pending_program) {\n            pending_program = program;\n        }\n        else {\n            // if this is an intro, and there's a delay, we need to do\n            // an initial tick and/or apply CSS animation immediately\n            if (css) {\n                clear_animation();\n                animation_name = create_rule(node, t, b, duration, delay, easing, css);\n            }\n            if (b)\n                tick(0, 1);\n            running_program = init(program, duration);\n            add_render_callback(() => dispatch(node, b, 'start'));\n            loop(now => {\n                if (pending_program && now > pending_program.start) {\n                    running_program = init(pending_program, duration);\n                    pending_program = null;\n                    dispatch(node, running_program.b, 'start');\n                    if (css) {\n                        clear_animation();\n                        animation_name = create_rule(node, t, running_program.b, running_program.duration, 0, easing, config.css);\n                    }\n                }\n                if (running_program) {\n                    if (now >= running_program.end) {\n                        tick(t = running_program.b, 1 - t);\n                        dispatch(node, running_program.b, 'end');\n                        if (!pending_program) {\n                            // we're done\n                            if (running_program.b) {\n                                // intro — we can tidy up immediately\n                                clear_animation();\n                            }\n                            else {\n                                // outro — needs to be coordinated\n                                if (!--running_program.group.r)\n                                    run_all(running_program.group.c);\n                            }\n                        }\n                        running_program = null;\n                    }\n                    else if (now >= running_program.start) {\n                        const p = now - running_program.start;\n                        t = running_program.a + running_program.d * easing(p / running_program.duration);\n                        tick(t, 1 - t);\n                    }\n                }\n                return !!(running_program || pending_program);\n            });\n        }\n    }\n    return {\n        run(b) {\n            if (is_function(config)) {\n                wait().then(() => {\n                    // @ts-ignore\n                    config = config();\n                    go(b);\n                });\n            }\n            else {\n                go(b);\n            }\n        },\n        end() {\n            clear_animation();\n            running_program = pending_program = null;\n        }\n    };\n}\n\nfunction handle_promise(promise, info) {\n    const token = info.token = {};\n    function update(type, index, key, value) {\n        if (info.token !== token)\n            return;\n        info.resolved = value;\n        let child_ctx = info.ctx;\n        if (key !== undefined) {\n            child_ctx = child_ctx.slice();\n            child_ctx[key] = value;\n        }\n        const block = type && (info.current = type)(child_ctx);\n        let needs_flush = false;\n        if (info.block) {\n            if (info.blocks) {\n                info.blocks.forEach((block, i) => {\n                    if (i !== index && block) {\n                        group_outros();\n                        transition_out(block, 1, 1, () => {\n                            if (info.blocks[i] === block) {\n                                info.blocks[i] = null;\n                            }\n                        });\n                        check_outros();\n                    }\n                });\n            }\n            else {\n                info.block.d(1);\n            }\n            block.c();\n            transition_in(block, 1);\n            block.m(info.mount(), info.anchor);\n            needs_flush = true;\n        }\n        info.block = block;\n        if (info.blocks)\n            info.blocks[index] = block;\n        if (needs_flush) {\n            flush();\n        }\n    }\n    if (is_promise(promise)) {\n        const current_component = get_current_component();\n        promise.then(value => {\n            set_current_component(current_component);\n            update(info.then, 1, info.value, value);\n            set_current_component(null);\n        }, error => {\n            set_current_component(current_component);\n            update(info.catch, 2, info.error, error);\n            set_current_component(null);\n            if (!info.hasCatch) {\n                throw error;\n            }\n        });\n        // if we previously had a then/catch block, destroy it\n        if (info.current !== info.pending) {\n            update(info.pending, 0);\n            return true;\n        }\n    }\n    else {\n        if (info.current !== info.then) {\n            update(info.then, 1, info.value, promise);\n            return true;\n        }\n        info.resolved = promise;\n    }\n}\nfunction update_await_block_branch(info, ctx, dirty) {\n    const child_ctx = ctx.slice();\n    const { resolved } = info;\n    if (info.current === info.then) {\n        child_ctx[info.value] = resolved;\n    }\n    if (info.current === info.catch) {\n        child_ctx[info.error] = resolved;\n    }\n    info.block.p(child_ctx, dirty);\n}\n\nconst globals = (typeof window !== 'undefined'\n    ? window\n    : typeof globalThis !== 'undefined'\n        ? globalThis\n        : global);\n\nfunction destroy_block(block, lookup) {\n    block.d(1);\n    lookup.delete(block.key);\n}\nfunction outro_and_destroy_block(block, lookup) {\n    transition_out(block, 1, 1, () => {\n        lookup.delete(block.key);\n    });\n}\nfunction fix_and_destroy_block(block, lookup) {\n    block.f();\n    destroy_block(block, lookup);\n}\nfunction fix_and_outro_and_destroy_block(block, lookup) {\n    block.f();\n    outro_and_destroy_block(block, lookup);\n}\nfunction update_keyed_each(old_blocks, dirty, get_key, dynamic, ctx, list, lookup, node, destroy, create_each_block, next, get_context) {\n    let o = old_blocks.length;\n    let n = list.length;\n    let i = o;\n    const old_indexes = {};\n    while (i--)\n        old_indexes[old_blocks[i].key] = i;\n    const new_blocks = [];\n    const new_lookup = new Map();\n    const deltas = new Map();\n    i = n;\n    while (i--) {\n        const child_ctx = get_context(ctx, list, i);\n        const key = get_key(child_ctx);\n        let block = lookup.get(key);\n        if (!block) {\n            block = create_each_block(key, child_ctx);\n            block.c();\n        }\n        else if (dynamic) {\n            block.p(child_ctx, dirty);\n        }\n        new_lookup.set(key, new_blocks[i] = block);\n        if (key in old_indexes)\n            deltas.set(key, Math.abs(i - old_indexes[key]));\n    }\n    const will_move = new Set();\n    const did_move = new Set();\n    function insert(block) {\n        transition_in(block, 1);\n        block.m(node, next);\n        lookup.set(block.key, block);\n        next = block.first;\n        n--;\n    }\n    while (o && n) {\n        const new_block = new_blocks[n - 1];\n        const old_block = old_blocks[o - 1];\n        const new_key = new_block.key;\n        const old_key = old_block.key;\n        if (new_block === old_block) {\n            // do nothing\n            next = new_block.first;\n            o--;\n            n--;\n        }\n        else if (!new_lookup.has(old_key)) {\n            // remove old block\n            destroy(old_block, lookup);\n            o--;\n        }\n        else if (!lookup.has(new_key) || will_move.has(new_key)) {\n            insert(new_block);\n        }\n        else if (did_move.has(old_key)) {\n            o--;\n        }\n        else if (deltas.get(new_key) > deltas.get(old_key)) {\n            did_move.add(new_key);\n            insert(new_block);\n        }\n        else {\n            will_move.add(old_key);\n            o--;\n        }\n    }\n    while (o--) {\n        const old_block = old_blocks[o];\n        if (!new_lookup.has(old_block.key))\n            destroy(old_block, lookup);\n    }\n    while (n)\n        insert(new_blocks[n - 1]);\n    return new_blocks;\n}\nfunction validate_each_keys(ctx, list, get_context, get_key) {\n    const keys = new Set();\n    for (let i = 0; i < list.length; i++) {\n        const key = get_key(get_context(ctx, list, i));\n        if (keys.has(key)) {\n            throw new Error('Cannot have duplicate keys in a keyed each');\n        }\n        keys.add(key);\n    }\n}\n\nfunction get_spread_update(levels, updates) {\n    const update = {};\n    const to_null_out = {};\n    const accounted_for = { $$scope: 1 };\n    let i = levels.length;\n    while (i--) {\n        const o = levels[i];\n        const n = updates[i];\n        if (n) {\n            for (const key in o) {\n                if (!(key in n))\n                    to_null_out[key] = 1;\n            }\n            for (const key in n) {\n                if (!accounted_for[key]) {\n                    update[key] = n[key];\n                    accounted_for[key] = 1;\n                }\n            }\n            levels[i] = n;\n        }\n        else {\n            for (const key in o) {\n                accounted_for[key] = 1;\n            }\n        }\n    }\n    for (const key in to_null_out) {\n        if (!(key in update))\n            update[key] = undefined;\n    }\n    return update;\n}\nfunction get_spread_object(spread_props) {\n    return typeof spread_props === 'object' && spread_props !== null ? spread_props : {};\n}\n\n// source: https://html.spec.whatwg.org/multipage/indices.html\nconst boolean_attributes = new Set([\n    'allowfullscreen',\n    'allowpaymentrequest',\n    'async',\n    'autofocus',\n    'autoplay',\n    'checked',\n    'controls',\n    'default',\n    'defer',\n    'disabled',\n    'formnovalidate',\n    'hidden',\n    'ismap',\n    'loop',\n    'multiple',\n    'muted',\n    'nomodule',\n    'novalidate',\n    'open',\n    'playsinline',\n    'readonly',\n    'required',\n    'reversed',\n    'selected'\n]);\n\nconst void_element_names = /^(?:area|base|br|col|command|embed|hr|img|input|keygen|link|meta|param|source|track|wbr)$/;\nfunction is_void(name) {\n    return void_element_names.test(name) || name.toLowerCase() === '!doctype';\n}\n\nconst invalid_attribute_name_character = /[\\s'\">/=\\u{FDD0}-\\u{FDEF}\\u{FFFE}\\u{FFFF}\\u{1FFFE}\\u{1FFFF}\\u{2FFFE}\\u{2FFFF}\\u{3FFFE}\\u{3FFFF}\\u{4FFFE}\\u{4FFFF}\\u{5FFFE}\\u{5FFFF}\\u{6FFFE}\\u{6FFFF}\\u{7FFFE}\\u{7FFFF}\\u{8FFFE}\\u{8FFFF}\\u{9FFFE}\\u{9FFFF}\\u{AFFFE}\\u{AFFFF}\\u{BFFFE}\\u{BFFFF}\\u{CFFFE}\\u{CFFFF}\\u{DFFFE}\\u{DFFFF}\\u{EFFFE}\\u{EFFFF}\\u{FFFFE}\\u{FFFFF}\\u{10FFFE}\\u{10FFFF}]/u;\n// https://html.spec.whatwg.org/multipage/syntax.html#attributes-2\n// https://infra.spec.whatwg.org/#noncharacter\nfunction spread(args, attrs_to_add) {\n    const attributes = Object.assign({}, ...args);\n    if (attrs_to_add) {\n        const classes_to_add = attrs_to_add.classes;\n        const styles_to_add = attrs_to_add.styles;\n        if (classes_to_add) {\n            if (attributes.class == null) {\n                attributes.class = classes_to_add;\n            }\n            else {\n                attributes.class += ' ' + classes_to_add;\n            }\n        }\n        if (styles_to_add) {\n            if (attributes.style == null) {\n                attributes.style = style_object_to_string(styles_to_add);\n            }\n            else {\n                attributes.style = style_object_to_string(merge_ssr_styles(attributes.style, styles_to_add));\n            }\n        }\n    }\n    let str = '';\n    Object.keys(attributes).forEach(name => {\n        if (invalid_attribute_name_character.test(name))\n            return;\n        const value = attributes[name];\n        if (value === true)\n            str += ' ' + name;\n        else if (boolean_attributes.has(name.toLowerCase())) {\n            if (value)\n                str += ' ' + name;\n        }\n        else if (value != null) {\n            str += ` ${name}=\"${value}\"`;\n        }\n    });\n    return str;\n}\nfunction merge_ssr_styles(style_attribute, style_directive) {\n    const style_object = {};\n    for (const individual_style of style_attribute.split(';')) {\n        const colon_index = individual_style.indexOf(':');\n        const name = individual_style.slice(0, colon_index).trim();\n        const value = individual_style.slice(colon_index + 1).trim();\n        if (!name)\n            continue;\n        style_object[name] = value;\n    }\n    for (const name in style_directive) {\n        const value = style_directive[name];\n        if (value) {\n            style_object[name] = value;\n        }\n        else {\n            delete style_object[name];\n        }\n    }\n    return style_object;\n}\nconst escaped = {\n    '\"': '&quot;',\n    \"'\": '&#39;',\n    '&': '&amp;',\n    '<': '&lt;',\n    '>': '&gt;'\n};\nfunction escape(html) {\n    return String(html).replace(/[\"'&<>]/g, match => escaped[match]);\n}\nfunction escape_attribute_value(value) {\n    return typeof value === 'string' ? escape(value) : value;\n}\nfunction escape_object(obj) {\n    const result = {};\n    for (const key in obj) {\n        result[key] = escape_attribute_value(obj[key]);\n    }\n    return result;\n}\nfunction each(items, fn) {\n    let str = '';\n    for (let i = 0; i < items.length; i += 1) {\n        str += fn(items[i], i);\n    }\n    return str;\n}\nconst missing_component = {\n    $$render: () => ''\n};\nfunction validate_component(component, name) {\n    if (!component || !component.$$render) {\n        if (name === 'svelte:component')\n            name += ' this={...}';\n        throw new Error(`<${name}> is not a valid SSR component. You may need to review your build config to ensure that dependencies are compiled, rather than imported as pre-compiled modules`);\n    }\n    return component;\n}\nfunction debug(file, line, column, values) {\n    console.log(`{@debug} ${file ? file + ' ' : ''}(${line}:${column})`); // eslint-disable-line no-console\n    console.log(values); // eslint-disable-line no-console\n    return '';\n}\nlet on_destroy;\nfunction create_ssr_component(fn) {\n    function $$render(result, props, bindings, slots, context) {\n        const parent_component = current_component;\n        const $$ = {\n            on_destroy,\n            context: new Map(context || (parent_component ? parent_component.$$.context : [])),\n            // these will be immediately discarded\n            on_mount: [],\n            before_update: [],\n            after_update: [],\n            callbacks: blank_object()\n        };\n        set_current_component({ $$ });\n        const html = fn(result, props, bindings, slots);\n        set_current_component(parent_component);\n        return html;\n    }\n    return {\n        render: (props = {}, { $$slots = {}, context = new Map() } = {}) => {\n            on_destroy = [];\n            const result = { title: '', head: '', css: new Set() };\n            const html = $$render(result, props, {}, $$slots, context);\n            run_all(on_destroy);\n            return {\n                html,\n                css: {\n                    code: Array.from(result.css).map(css => css.code).join('\\n'),\n                    map: null // TODO\n                },\n                head: result.title + result.head\n            };\n        },\n        $$render\n    };\n}\nfunction add_attribute(name, value, boolean) {\n    if (value == null || (boolean && !value))\n        return '';\n    const assignment = (boolean && value === true) ? '' : `=\"${escape_attribute_value(value.toString())}\"`;\n    return ` ${name}${assignment}`;\n}\nfunction add_classes(classes) {\n    return classes ? ` class=\"${classes}\"` : '';\n}\nfunction style_object_to_string(style_object) {\n    return Object.keys(style_object)\n        .filter(key => style_object[key])\n        .map(key => `${key}: ${style_object[key]};`)\n        .join(' ');\n}\nfunction add_styles(style_object) {\n    const styles = style_object_to_string(style_object);\n    return styles ? ` style=\"${styles}\"` : '';\n}\n\nfunction bind(component, name, callback) {\n    const index = component.$$.props[name];\n    if (index !== undefined) {\n        component.$$.bound[index] = callback;\n        callback(component.$$.ctx[index]);\n    }\n}\nfunction create_component(block) {\n    block && block.c();\n}\nfunction claim_component(block, parent_nodes) {\n    block && block.l(parent_nodes);\n}\nfunction mount_component(component, target, anchor, customElement) {\n    const { fragment, on_mount, on_destroy, after_update } = component.$$;\n    fragment && fragment.m(target, anchor);\n    if (!customElement) {\n        // onMount happens before the initial afterUpdate\n        add_render_callback(() => {\n            const new_on_destroy = on_mount.map(run).filter(is_function);\n            if (on_destroy) {\n                on_destroy.push(...new_on_destroy);\n            }\n            else {\n                // Edge case - component was destroyed immediately,\n                // most likely as a result of a binding initialising\n                run_all(new_on_destroy);\n            }\n            component.$$.on_mount = [];\n        });\n    }\n    after_update.forEach(add_render_callback);\n}\nfunction destroy_component(component, detaching) {\n    const $$ = component.$$;\n    if ($$.fragment !== null) {\n        run_all($$.on_destroy);\n        $$.fragment && $$.fragment.d(detaching);\n        // TODO null out other refs, including component.$$ (but need to\n        // preserve final state?)\n        $$.on_destroy = $$.fragment = null;\n        $$.ctx = [];\n    }\n}\nfunction make_dirty(component, i) {\n    if (component.$$.dirty[0] === -1) {\n        dirty_components.push(component);\n        schedule_update();\n        component.$$.dirty.fill(0);\n    }\n    component.$$.dirty[(i / 31) | 0] |= (1 << (i % 31));\n}\nfunction init(component, options, instance, create_fragment, not_equal, props, append_styles, dirty = [-1]) {\n    const parent_component = current_component;\n    set_current_component(component);\n    const $$ = component.$$ = {\n        fragment: null,\n        ctx: null,\n        // state\n        props,\n        update: noop,\n        not_equal,\n        bound: blank_object(),\n        // lifecycle\n        on_mount: [],\n        on_destroy: [],\n        on_disconnect: [],\n        before_update: [],\n        after_update: [],\n        context: new Map(options.context || (parent_component ? parent_component.$$.context : [])),\n        // everything else\n        callbacks: blank_object(),\n        dirty,\n        skip_bound: false,\n        root: options.target || parent_component.$$.root\n    };\n    append_styles && append_styles($$.root);\n    let ready = false;\n    $$.ctx = instance\n        ? instance(component, options.props || {}, (i, ret, ...rest) => {\n            const value = rest.length ? rest[0] : ret;\n            if ($$.ctx && not_equal($$.ctx[i], $$.ctx[i] = value)) {\n                if (!$$.skip_bound && $$.bound[i])\n                    $$.bound[i](value);\n                if (ready)\n                    make_dirty(component, i);\n            }\n            return ret;\n        })\n        : [];\n    $$.update();\n    ready = true;\n    run_all($$.before_update);\n    // `false` as a special case of no DOM component\n    $$.fragment = create_fragment ? create_fragment($$.ctx) : false;\n    if (options.target) {\n        if (options.hydrate) {\n            start_hydrating();\n            const nodes = children(options.target);\n            // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n            $$.fragment && $$.fragment.l(nodes);\n            nodes.forEach(detach);\n        }\n        else {\n            // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n            $$.fragment && $$.fragment.c();\n        }\n        if (options.intro)\n            transition_in(component.$$.fragment);\n        mount_component(component, options.target, options.anchor, options.customElement);\n        end_hydrating();\n        flush();\n    }\n    set_current_component(parent_component);\n}\nlet SvelteElement;\nif (typeof HTMLElement === 'function') {\n    SvelteElement = class extends HTMLElement {\n        constructor() {\n            super();\n            this.attachShadow({ mode: 'open' });\n        }\n        connectedCallback() {\n            const { on_mount } = this.$$;\n            this.$$.on_disconnect = on_mount.map(run).filter(is_function);\n            // @ts-ignore todo: improve typings\n            for (const key in this.$$.slotted) {\n                // @ts-ignore todo: improve typings\n                this.appendChild(this.$$.slotted[key]);\n            }\n        }\n        attributeChangedCallback(attr, _oldValue, newValue) {\n            this[attr] = newValue;\n        }\n        disconnectedCallback() {\n            run_all(this.$$.on_disconnect);\n        }\n        $destroy() {\n            destroy_component(this, 1);\n            this.$destroy = noop;\n        }\n        $on(type, callback) {\n            // TODO should this delegate to addEventListener?\n            const callbacks = (this.$$.callbacks[type] || (this.$$.callbacks[type] = []));\n            callbacks.push(callback);\n            return () => {\n                const index = callbacks.indexOf(callback);\n                if (index !== -1)\n                    callbacks.splice(index, 1);\n            };\n        }\n        $set($$props) {\n            if (this.$$set && !is_empty($$props)) {\n                this.$$.skip_bound = true;\n                this.$$set($$props);\n                this.$$.skip_bound = false;\n            }\n        }\n    };\n}\n/**\n * Base class for Svelte components. Used when dev=false.\n */\nclass SvelteComponent {\n    $destroy() {\n        destroy_component(this, 1);\n        this.$destroy = noop;\n    }\n    $on(type, callback) {\n        const callbacks = (this.$$.callbacks[type] || (this.$$.callbacks[type] = []));\n        callbacks.push(callback);\n        return () => {\n            const index = callbacks.indexOf(callback);\n            if (index !== -1)\n                callbacks.splice(index, 1);\n        };\n    }\n    $set($$props) {\n        if (this.$$set && !is_empty($$props)) {\n            this.$$.skip_bound = true;\n            this.$$set($$props);\n            this.$$.skip_bound = false;\n        }\n    }\n}\n\nfunction dispatch_dev(type, detail) {\n    document.dispatchEvent(custom_event(type, Object.assign({ version: '3.48.0' }, detail), { bubbles: true }));\n}\nfunction append_dev(target, node) {\n    dispatch_dev('SvelteDOMInsert', { target, node });\n    append(target, node);\n}\nfunction append_hydration_dev(target, node) {\n    dispatch_dev('SvelteDOMInsert', { target, node });\n    append_hydration(target, node);\n}\nfunction insert_dev(target, node, anchor) {\n    dispatch_dev('SvelteDOMInsert', { target, node, anchor });\n    insert(target, node, anchor);\n}\nfunction insert_hydration_dev(target, node, anchor) {\n    dispatch_dev('SvelteDOMInsert', { target, node, anchor });\n    insert_hydration(target, node, anchor);\n}\nfunction detach_dev(node) {\n    dispatch_dev('SvelteDOMRemove', { node });\n    detach(node);\n}\nfunction detach_between_dev(before, after) {\n    while (before.nextSibling && before.nextSibling !== after) {\n        detach_dev(before.nextSibling);\n    }\n}\nfunction detach_before_dev(after) {\n    while (after.previousSibling) {\n        detach_dev(after.previousSibling);\n    }\n}\nfunction detach_after_dev(before) {\n    while (before.nextSibling) {\n        detach_dev(before.nextSibling);\n    }\n}\nfunction listen_dev(node, event, handler, options, has_prevent_default, has_stop_propagation) {\n    const modifiers = options === true ? ['capture'] : options ? Array.from(Object.keys(options)) : [];\n    if (has_prevent_default)\n        modifiers.push('preventDefault');\n    if (has_stop_propagation)\n        modifiers.push('stopPropagation');\n    dispatch_dev('SvelteDOMAddEventListener', { node, event, handler, modifiers });\n    const dispose = listen(node, event, handler, options);\n    return () => {\n        dispatch_dev('SvelteDOMRemoveEventListener', { node, event, handler, modifiers });\n        dispose();\n    };\n}\nfunction attr_dev(node, attribute, value) {\n    attr(node, attribute, value);\n    if (value == null)\n        dispatch_dev('SvelteDOMRemoveAttribute', { node, attribute });\n    else\n        dispatch_dev('SvelteDOMSetAttribute', { node, attribute, value });\n}\nfunction prop_dev(node, property, value) {\n    node[property] = value;\n    dispatch_dev('SvelteDOMSetProperty', { node, property, value });\n}\nfunction dataset_dev(node, property, value) {\n    node.dataset[property] = value;\n    dispatch_dev('SvelteDOMSetDataset', { node, property, value });\n}\nfunction set_data_dev(text, data) {\n    data = '' + data;\n    if (text.wholeText === data)\n        return;\n    dispatch_dev('SvelteDOMSetData', { node: text, data });\n    text.data = data;\n}\nfunction validate_each_argument(arg) {\n    if (typeof arg !== 'string' && !(arg && typeof arg === 'object' && 'length' in arg)) {\n        let msg = '{#each} only iterates over array-like objects.';\n        if (typeof Symbol === 'function' && arg && Symbol.iterator in arg) {\n            msg += ' You can use a spread to convert this iterable into an array.';\n        }\n        throw new Error(msg);\n    }\n}\nfunction validate_slots(name, slot, keys) {\n    for (const slot_key of Object.keys(slot)) {\n        if (!~keys.indexOf(slot_key)) {\n            console.warn(`<${name}> received an unexpected slot \"${slot_key}\".`);\n        }\n    }\n}\nfunction validate_dynamic_element(tag) {\n    const is_string = typeof tag === 'string';\n    if (tag && !is_string) {\n        throw new Error('<svelte:element> expects \"this\" attribute to be a string.');\n    }\n}\nfunction validate_void_dynamic_element(tag) {\n    if (tag && is_void(tag)) {\n        throw new Error(`<svelte:element this=\"${tag}\"> is self-closing and cannot have content.`);\n    }\n}\n/**\n * Base class for Svelte components with some minor dev-enhancements. Used when dev=true.\n */\nclass SvelteComponentDev extends SvelteComponent {\n    constructor(options) {\n        if (!options || (!options.target && !options.$$inline)) {\n            throw new Error(\"'target' is a required option\");\n        }\n        super();\n    }\n    $destroy() {\n        super.$destroy();\n        this.$destroy = () => {\n            console.warn('Component was already destroyed'); // eslint-disable-line no-console\n        };\n    }\n    $capture_state() { }\n    $inject_state() { }\n}\n/**\n * Base class to create strongly typed Svelte components.\n * This only exists for typing purposes and should be used in `.d.ts` files.\n *\n * ### Example:\n *\n * You have component library on npm called `component-library`, from which\n * you export a component called `MyComponent`. For Svelte+TypeScript users,\n * you want to provide typings. Therefore you create a `index.d.ts`:\n * ```ts\n * import { SvelteComponentTyped } from \"svelte\";\n * export class MyComponent extends SvelteComponentTyped<{foo: string}> {}\n * ```\n * Typing this makes it possible for IDEs like VS Code with the Svelte extension\n * to provide intellisense and to use the component like this in a Svelte file\n * with TypeScript:\n * ```svelte\n * <script lang=\"ts\">\n * \timport { MyComponent } from \"component-library\";\n * </script>\n * <MyComponent foo={'bar'} />\n * ```\n *\n * #### Why not make this part of `SvelteComponent(Dev)`?\n * Because\n * ```ts\n * class ASubclassOfSvelteComponent extends SvelteComponent<{foo: string}> {}\n * const component: typeof SvelteComponent = ASubclassOfSvelteComponent;\n * ```\n * will throw a type error, so we need to separate the more strictly typed class.\n */\nclass SvelteComponentTyped extends SvelteComponentDev {\n    constructor(options) {\n        super(options);\n    }\n}\nfunction loop_guard(timeout) {\n    const start = Date.now();\n    return () => {\n        if (Date.now() - start > timeout) {\n            throw new Error('Infinite loop detected');\n        }\n    };\n}\n\nexport { HtmlTag, HtmlTagHydration, SvelteComponent, SvelteComponentDev, SvelteComponentTyped, SvelteElement, action_destroyer, add_attribute, add_classes, add_flush_callback, add_location, add_render_callback, add_resize_listener, add_styles, add_transform, afterUpdate, append, append_dev, append_empty_stylesheet, append_hydration, append_hydration_dev, append_styles, assign, attr, attr_dev, attribute_to_object, beforeUpdate, bind, binding_callbacks, blank_object, bubble, check_outros, children, claim_component, claim_element, claim_html_tag, claim_space, claim_svg_element, claim_text, clear_loops, component_subscribe, compute_rest_props, compute_slots, createEventDispatcher, create_animation, create_bidirectional_transition, create_component, create_in_transition, create_out_transition, create_slot, create_ssr_component, current_component, custom_event, dataset_dev, debug, destroy_block, destroy_component, destroy_each, detach, detach_after_dev, detach_before_dev, detach_between_dev, detach_dev, dirty_components, dispatch_dev, each, element, element_is, empty, end_hydrating, escape, escape_attribute_value, escape_object, escaped, exclude_internal_props, fix_and_destroy_block, fix_and_outro_and_destroy_block, fix_position, flush, getAllContexts, getContext, get_all_dirty_from_scope, get_binding_group_value, get_current_component, get_custom_elements_slots, get_root_for_style, get_slot_changes, get_spread_object, get_spread_update, get_store_value, globals, group_outros, handle_promise, hasContext, has_prop, identity, init, insert, insert_dev, insert_hydration, insert_hydration_dev, intros, invalid_attribute_name_character, is_client, is_crossorigin, is_empty, is_function, is_promise, is_void, listen, listen_dev, loop, loop_guard, merge_ssr_styles, missing_component, mount_component, noop, not_equal, now, null_to_empty, object_without_properties, onDestroy, onMount, once, outro_and_destroy_block, prevent_default, prop_dev, query_selector_all, raf, run, run_all, safe_not_equal, schedule_update, select_multiple_value, select_option, select_options, select_value, self, setContext, set_attributes, set_current_component, set_custom_element_data, set_data, set_data_dev, set_input_type, set_input_value, set_now, set_raf, set_store_value, set_style, set_svg_attributes, space, spread, src_url_equal, start_hydrating, stop_propagation, subscribe, svg_element, text, tick, time_ranges_to_array, to_number, toggle_class, transition_in, transition_out, trusted, update_await_block_branch, update_keyed_each, update_slot, update_slot_base, validate_component, validate_dynamic_element, validate_each_argument, validate_each_keys, validate_slots, validate_store, validate_void_dynamic_element, xlink_attr };\n","/**********************************************\n * Functions for statistical tests and models *\n **********************************************/\n\n/**\n * Returns a p-value for any test\n * @param {function} pfun - reference to a CDF function (e.g. pnorm)\n * @param {number} crit - critical value for the test (e.g. z-score or t-score)\n * @param {string} tail - which tail to use (\"left\", \"right\", or \"both\")\n * @param {Array} params - additional parameters to CDF function\n * @returns {number} - a p-value for the test\n */\nexport function getPValue(pfun, crit, tail, params = []) {\n\n   if (tail === \"left\") {\n      return(pfun(crit, ...params));\n   }\n\n   if (tail === \"right\") {\n      return(1 - pfun(crit, ...params));\n   }\n\n   if (tail === \"both\") {\n      let p = pfun(crit, ...params);\n      return min([p, 1 - p]) * 2;\n   }\n}\n\n\n/**\n * Makes one-sample t-test for a mean\n * @param {number[]} x - vector with sample values\n * @param {number} mu - assumed mean value for population (H0)\n * @param {number} alpha - significance level (used to compute confidence interval)\n * @param {string} tail - which tail to use (\"left\", \"right\", or \"both\")\n * @returns {Object} - a JSON with test results\n */\nexport function tTest1(x, mu = 0, alpha = 0.05, tail = \"both\") {\n\n   if (typeof(mu) !== \"number\") {\n      throw Error(\"Parameter 'mu' should be a number.\");\n   }\n\n   const nx = x.length;\n\n   const effectExpected = mu;\n   const effectObserved = mean(x);\n   const se = sd(x) / Math.sqrt(nx);\n   const tValue = (effectObserved - effectExpected) / se;\n   const DoF = nx - 1\n   const errMargin = qt(1 - alpha/2, DoF) * se;\n\n   return {\n      test: \"One sample t-test\",\n      effectExpected: mu,\n      effectObserved: effectObserved,\n      se: se,\n      tValue: tValue,\n      alpha: alpha,\n      tail: tail,\n      DoF: DoF,\n      pValue: getPValue(pt, tValue, tail, [DoF]),\n      ci: [effectObserved - errMargin, effectObserved + errMargin]\n   };\n}\n\n/**\n * Makes two-sample t-test for a difference of means assuming population variances equal\n * @param {number[]} x - vector with sample 1 values\n * @param {number[]} y - vector with sample 2 values\n * @param {number} alpha - significance level (used to compute confidence interval)\n * @param {string} tail - which tail to use (\"left\", \"right\", or \"both\")\n * @returns {Object} - a JSON with test results\n */\nexport function tTest2(x, y, alpha = 0.05, tail = \"both\") {\n   const nx = x.length;\n   const mx = mean(x);\n   const my = mean(y);\n   const ny = y.length;\n\n   const effectExpected = 0;\n   const effectObserved = mx - my;\n   const se = Math.sqrt( (sd(x)**2 / nx) + (sd(y)**2 / ny));\n   const tValue = (effectObserved - effectExpected) / se;\n   const DoF = (nx - 1) + (ny - 1);\n   const errMargin = qt(1 - alpha/2, DoF) * se;\n\n   return {\n      test: \"Two sample t-test\",\n      effectExpected: effectExpected,\n      effectObserved: effectObserved,\n      se: se,\n      tValue: tValue,\n      alpha: alpha,\n      tail: tail,\n      DoF: DoF,\n      pValue: getPValue(pt, tValue, tail, [DoF]),\n      ci: [effectObserved - errMargin, effectObserved + errMargin]\n   };\n}\n\n/**********************************************\n * Functions for computing single statistics  *\n **********************************************/\n\n/**\n * Computes kurtosis of values\n * @param {number[]} x - vector with values\n * @returns {number}\n */\nexport function kurtosis(x) {\n   let n = x.length;\n   let m = mean(x);\n\n   let m4 = 0.0;\n   let m2 = 0.0;\n   for (let i = 0; i < n; i++) {\n      m2 = m2 + Math.pow((x[i] - m), 2);\n      m4 = m4 + Math.pow((x[i] - m), 4);\n   }\n\n   return (m4/n) / Math.pow((m2/n), 2);\n}\n\n\n/**\n * Computes skewness of values\n * @param {number[]} x - vector with values\n * @returns {number}\n */\nexport function skewness(x) {\n   let n = x.length;\n   let m = mean(x);\n\n   let m3 = 0.0;\n   let m2 = 0.0;\n   for (let i = 0; i < n; i++) {\n      m2 = m2 + Math.pow((x[i] - m), 2);\n      m3 = m3 + Math.pow((x[i] - m), 3);\n   }\n\n   return (m3/n) / Math.pow((m2/n), 1.5);\n}\n\n\n/**\n * Finds smallest value in a vector\n * @param {number[]} x - vector with values\n * @returns {number}\n */\nexport function min(x) {\n   let n = x.length;\n   let min = Number.POSITIVE_INFINITY\n\n   while (n--) min = x[n] < min ? x[n] : min;\n   return min;\n}\n\n\n/**\n * Finds largest value in a vector\n * @param {number[]} x - vector with values\n * @returns {number}\n */\nexport function max(x) {\n   let n = x.length;\n   let max = Number.NEGATIVE_INFINITY\n\n   while (n--) max = x[n] > max ? x[n] : max;\n   return max;\n}\n\n\n/**\n * Computes sum of all values in a vector\n * @param {number[]} x - vector with values\n * @returns {number}\n */\nexport function sum(x) {\n   let s = 0;\n   for (let i = 0; i < x.length; i++) {\n      s = s + x[i];\n   }\n\n   return s;\n}\n\n\n/**\n * Computes product of all value in a vector\n * @param {number[]} x - vector with values\n * @returns {number}\n */\nexport function prod(x) {\n   let p = 1;\n   for (let i = 0; i < x.length; i++) {\n      p = p * x[i];\n   }\n\n   return p;\n}\n\n\n/**\n * Computes mean (average) value for a vector\n * @param {number[]} x - vector with values\n * @returns {number}\n */\nexport function mean(x) {\n   return sum(x) / x.length;\n}\n\n\n/**\n * Computes covariance between two vectors\n * @param {number[]} x - vector with values\n * @param {number[]} y - vector with values\n * @param {boolean} biased - compute a biased version with n degrees of freedom or not (with n-1).\n * @param {number} mx - mean of x values (if already known)\n * @param {number} my - mean of y values (if already known)\n * @returns {number}\n */\nexport function cov(x, y, biased = false, mx = undefined, my = undefined) {\n\n   const n = x.length;\n\n   if (y.length !== n) {\n      throw Error(\"Vectors 'x' and 'y' must have the same length.\");\n   }\n\n   if (n < 2) {\n      throw Error(\"Vectors 'x' and 'y' must have at least two values.\");\n   }\n\n   if (mx === undefined) mx = mean(x);\n   if (my === undefined) my = mean(y);\n\n   let cov = 0;\n   for (let i = 0; i < n; i++) {\n      cov = cov + (x[i] - mx) * (y[i] - my);\n   }\n\n   return cov / (biased ? n : n - 1);\n}\n\n\n/**\n * Computes variance for a vector\n * @param {number[]} x - vector with values\n * @param {boolean} biased - compute a biased version with n degrees of freedom or not (with n-1).\n * @param {number} m - mean value (e.g. if already computed).\n * @returns {number}\n */\nexport function variance(x, biased = false, m = undefined) {\n   return cov(x, x, biased, m, m);\n}\n\n\n/**\n * Computes standard deviation for a vector\n * @param {number[]} x - vector with values\n * @param {boolean} biased - compute a biased version with n degrees of freedom or not (with n-1).\n * @param {number} m - mean value (e.g. if already computed).\n * @returns {number}\n */\nexport function sd(x, biased = false, m = undefined) {\n   return Math.sqrt(variance(x, biased, m));\n}\n\n\n/**\n * Computes correlation between two vectors\n * @param {number[]} x - vector with values\n * @param {number[]} y - vector with values\n * @param {string} method - which method to use (\"pearson\" or \"spearman\")\n * @returns {number}\n */\nexport function cor(x, y, method = \"pearson\") {\n\n   if (method === \"spearman\") {\n      return cor(rank(x), rank(y));\n   }\n\n   return cov(x, y) / (sd(x) * sd(y));\n}\n\n\n\n/***************************************************\n * Functions for computing vectors of statistics   *\n ***************************************************/\n\n\n/**\n * Computes a p-th quantile/quantiles for a numeric vector\n * @param {number[]} x - vector with values\n * @param {number|number[]} p - probability (one value or a vector)\n * @returns {number}\n */\nexport function quantile(x, p) {\n\n   x = sort(x);\n   const n = x.length;\n\n   if (!Array.isArray(p)) p = [p];\n   if (typeof(p[0]) !== \"number\" || min(p) < 0 || max(p) > 1) {\n      throw new Error(\"Parameter 'p' must be between 0 and 1 (both included).\");\n   }\n\n   function q(x, p) {\n      const h = (n - 1) * p + 1;\n      const n1 = Math.floor(h);\n      const n2 = Math.ceil(h);\n      return x[n1 - 1] + (x[n2 - 1] - x[n1 - 1]) * (h - Math.floor(h));\n   }\n\n   const out =  p.map(v => q(x, v));\n   return p.length == 1 ? out[0] : out;\n}\n\n\n/**\n * Generate a sequence of n numbers between min and max.\n * @param {number} min - first value in the sequence\n * @param {number} max - last value in the sequence\n * @param {number} n - number of values in the sequence\n * @returns {number[]} array with the sequence values\n */\nexport function seq(min, max, n) {\n\n   if (n < 2) {\n      throw new Error(\"Parameter 'n' should be ≥ 2.\");\n   }\n\n   if (n === undefined && Number.isInteger(min) && Number.isInteger(max)) {\n      if (max === min) return [max];\n      n = max - min + 1;\n   }\n\n   const step = (max - min + 0.0) / (n - 1 + 0.0)\n   let out = [...Array(n)].map((x, i) => min + i * step);\n\n   // if step is smaller than 1 round values to remove small decimals accidentally added by JS\n   if (Math.abs(step) < 1) {\n      const r = Math.pow(10, Math.round(-Math.log10(step)) + 1);\n      out = out.map(v => Math.round((v + Number.EPSILON) * r) / r)\n   }\n\n   return(out)\n}\n\n\n/**\n * Finds a range of values in a vector (min and max)\n * @param {number[]} x - vector with values\n * @returns {number[]} array with min and max values\n */\nexport function range(x) {\n   return [min(x), max(x)];\n}\n\n\n/**\n * Computes a range of values in a vector with a margin\n * @param {number[]} x - vector with values\n * @param {number} margin - margin in parts of one (e.g. 0.1 for 10% or 2 for 200%)\n * @returns{number[]} array with marginal range boundaries\n */\nexport function mrange(x, margin = 0.05) {\n   const mn = min(x);\n   const mx = max(x);\n   const d = mx - mn;\n\n   return [mn - d * margin, max(x) + d * margin];\n}\n\n\n/**\n * Splits range of vector values into equal intervals\n * @param {number[]} x - vector with values\n * @param {number} n - number of intervals\n * @returns {number[]} vector with boundaries of the intervals\n */\nexport function split(x, n) {\n   if (x === undefined || !Array.isArray(x) || x.length < 2) {\n      throw new Error(\"split: 'x' must bet a vector with numbers.\");\n   }\n\n   if (n === undefined || n < 2) {\n      throw new Erro(\"split: 'n' must be a positive integer number.\");\n   }\n\n   const mn = min(x);\n   const mx = max(x);\n\n   if (mn === mx) {\n      throw new Error(\"split: values in a vector 'x' should vary.\");\n   }\n\n   const step = (mx - mn) / n;\n   return Array.from({length: n + 1}, (v, i) => mn + i * step + 0.0);\n}\n\n\n/**\n * Counts how many values from a vector falls into provided intervals (bins)\n * @param {number[]} x - vector with values\n * @param {number[]} bins - vector with bins boundaries\n * @returns {number[]} vector with counts for each bean\n */\nexport function count(x, bins) {\n\n   if (x === undefined || !Array.isArray(x) ||x.length < 2) {\n      throw new Error(\"count: 'x' must be a vector with numbers.\")\n   }\n\n   if (bins === undefined || !Array.isArray(bins) || bins.length < 2) {\n      throw new Error(\"count: 'bins' must be a vector with numbers.\")\n   }\n\n   const n = bins.length;\n\n   // add a bit extra to right side of the last bin\n   bins[n - 1] = bins[n - 1] * 1.0001\n\n   // count\n   let counts = Array(n - 1).fill(0);\n   for (let i = 0; i < x.length; i++) {\n      for (let j = 0; j < n - 1; j++) {\n         if (x[i] >= bins[j] && x[i] < bins[j + 1]) counts[j] = counts[j] + 1;\n      }\n   }\n   return counts;\n}\n\n\n/**\n * Computes middle points between values of a vector\n * @param {number[]} x - vector with values\n * @returns {number[]} vector with middle points\n */\nexport function mids(x) {\n   return x.slice(1).map((v, i) => (0.5 * (v + x[i])));\n}\n\n\n/**\n * Computes difference between all adjacent values in a vector\n * @param {number[]} x - vector with values\n * @returns {number[]} vector with the differences\n */\nexport function diff(x) {\n   return x.slice(1).map( (y, i) => (y - x[i]));\n}\n\n\n/**\n * Finds outliers in a vector based on inter-quartile range distance\n * @param {Array} x - vector with values\n * @param {number} Q1 - first quartile (optional parameter)\n * @param {Array} Q3 - third quartile (optional parameter)\n * @returns {Array} vector with outliers or empty vector if none were found.\n */\nexport function getOutliers(x, Q1 = undefined, Q3 = undefined) {\n\n   if (Q1 === undefined) Q1 = quantile(x, 0.25);\n   if (Q3 === undefined) Q3 = quantile(x, 0.75);\n\n   const IQR = Q3 - Q1;\n   const bl = Q1 - 1.5 * IQR\n   const bu = Q3 + 1.5 * IQR\n   return(x.filter(v => v < bl || v > bu));\n}\n\n\n/**\n * Returns ranks of values in a vector (ranks start from 1, not 0)\n * @param {number[]} x - vector with values\n * @returns {number[]} vector with ranks\n */\nexport function rank(x) {\n   const y = [...x].sort((a, b) => a - b);\n   return(x.map(v => y.indexOf(v) + 1));\n}\n\n\n/**\n * Generate probability points for QQ plot\n * @param {number} n - number of points\n * @returns {Array} a sequence of probabilities between 0 and 1\n */\nexport function ppoints(n) {\n   const a = n < 10 ? 3.0/8.0 : 0.5;\n   return Array.from({length: n}, (v, i) => (i + 1 - a) / (n + (1 - a) - a));\n}\n\n\n/**\n * Computes cumulative sums for the vector values\n * @param {number[]} x - vector with values\n * @returns {number[]}\n */\nexport function cumsum(x) {\n   let s = 0;\n   return x.map(v => s += v);\n}\n\n\n\n/***********************************************\n * Functions for theoretical distribution      *\n ***********************************************/\n\n\n/**\n * Generates 'n' random numbers from a uniform distribution\n * @param {number} n - amount of numbers to generate\n * @param {number} a - smallest value (min) of the population\n * @param {number} b - largest value (max) of the population\n * @returns {number[]} vector with generated numbers\n */\nexport function runif(n, a = 0, b = 1) {\n   let out = Array(n);\n   for (let i = 0; i < n; i++) out[i] = (a + Math.random() * (b - a));\n   return out;\n}\n\n\n/**\n * Probability density function for uniform distribution\n * @param {Array} x - vector of values\n * @param {number} a - smallest value (min) of the population\n * @param {number} b - largest value (max) of the population\n * @returns {Array} vector with densities\n */\nexport function dunif(x, a = 0, b = 1) {\n\n   if (!Array.isArray(x)) x = [x];\n\n   const n = x.length;\n   const A = 1 / (b - a);\n   let d = Array(n);\n\n   for (let i = 0; i < n; i++) {\n      d[i] = (x[i] < a || x[i] > b ) ? 0 : A;\n   }\n\n   return d;\n}\n\n\n/**\n * Cumulative distribution function for uniform distribution\n * @param {Array} x - vector of values\n * @param {number} a - smallest value (min) of the population\n * @param {number} b - largest value (max) of the population\n * @returns {Array} vector with probabilities\n */\nexport function punif(x, a = 0, b = 1) {\n\n   if (!Array.isArray(x)) x = [x];\n\n   const n = x.length;\n   let p = Array(n);\n   for (let i = 0; i < n; i++) {\n      if (x[i] < a) {\n         p[i] = 0;\n      } else if (x[i] > b) {\n         p[i] = 1;\n      } else {\n         p[i] = (x[i] - a) / (b - a)\n      }\n   }\n\n   return p;\n}\n\n\n /**\n * Generates 'n' random numbers from a normal distribution\n * @param {number} n - amount of numbers to generate\n * @param {number} mu - average value of the population\n * @param {number} sigma - standard deviation of the population\n * @returns {Array} vector with generated numbers\n */\nexport function rnorm(n, mu = 0, sigma = 1) {\n\n   let out = Array(n);\n   for (let i = 0; i < n; i ++) {\n      const a = Math.sqrt(-2 * Math.log(Math.random()));\n      const b = 2 * Math.PI * Math.random();\n      out[i] = (a * Math.sin(b) * sigma + mu);\n   }\n\n   return out;\n}\n\n\n/**\n * Probability density function for normal distribution\n * @param {Array} x - vector of values\n * @param {number} mu - average value of the population\n * @param {number} sigma - standard deviation of the population\n * @returns {Array} vector with densities\n */\nexport function dnorm(x, mu = 0, sigma = 1) {\n\n   if (!Array.isArray(x)) x = [x];\n\n   const n = x.length;\n   const A = 1 / (Math.sqrt(2 * Math.PI) * sigma);\n   const frac = -0.5 / sigma ** 2;\n\n   let d = Array(n);\n   for (let i = 0; i < n; i++) {\n      const df = x[i] - mu;\n      d[i] = A * Math.exp(frac * df * df);\n   }\n\n   return x.length === 1 ? d[0] : d;\n}\n\n\n/**\n * Cumulative distribution function for normal distribution\n * @param {Array} x - vector of values\n * @param {number} mu - average value of the population\n * @param {number} sigma - standard deviation of the population\n * @returns {Array} vector with probabilities\n */\nexport function pnorm(x, mu = 0, sigma = 1) {\n\n   if (!Array.isArray(x)) x = [x];\n\n   const n = x.length;\n   const frac = 1 / (Math.sqrt(2) * sigma);\n\n   let p = Array(n);\n   for (let i = 0; i < n; i++) {\n      p[i] = 0.5 * (1 + erf((x[i] - mu) * frac))\n   }\n\n   return p.length === 1 ? p[0] : p;\n}\n\n/**\n * Inverse cumulative distribution function for normal distribution\n * @param {number|number[]} p - vector of probabilities or a single probability value\n * @param {number} mu - average value of the population\n * @param {number} sigma - standard deviation of the population\n * @returns {number|number[]} vector with quantiles or single quantile value\n */\nexport function qnorm(p, mu = 0, sigma = 1) {\n\n   if (Array.isArray(p)) {\n      return p.map(v => qnorm(v, mu, sigma));\n   }\n\n   if (mu !== 0 || sigma !== 1) {\n      return qnorm(p) * sigma + mu;\n   }\n\n   if (p < 0 || p > 1) {\n      throw Error(\"Parameter 'p' must be between 0 and 1.\");\n   }\n\n   if (p < 0.0000000001) return -Infinity;\n   if (p > 0.9999999999) return +Infinity;\n\n   const SP1 = 0.425;\n   const SP2 = 5.0;\n   const C1 = 0.180625;\n   const C2 = 1.6;\n\n   const a0 = 3.3871327179;\n   const a1 = 5.0434271938 * 10;\n   const a2 = 1.5929113202 * 100;\n   const a3 = 5.9109374720 * 10;\n   const b1 = 1.7895169469 * 10;\n   const b2 = 7.8757757664 * 10;\n   const b3 = 6.7187563600 * 10;\n\n   const c0 = 1.4234372777;\n   const c1 = 2.7568153900;\n   const c2 = 1.3067284816;\n   const c3 = 1.7023821103 * 0.1;\n   const d1 = 7.3700164250 * 0.1;\n   const d2 = 1.2021132975 * 0.1;\n\n   const e0 = 6.6579051150;\n   const e1 = 3.0812263860;\n   const e2 = 4.2868294337 * 0.1;\n   const e3 = 1.7337203997 * 0.01;\n   const f1 = 2.4197894225 * 0.1;\n   const f2 = 1.2258202635 * 0.01;\n\n   const q = p - 0.5;\n   let r;\n\n   if (Math.abs(q) <= SP1) {\n      r = C1 - q * q;\n      return q * (((a3 * r + a2) * r + a1) *r + a0) / (((b3 * r + b2) * r + b1) * r + 1.0);\n   }\n\n   r = q < 0 ? p : 1 - p;\n   r = Math.sqrt(-Math.log(r));\n   let res;\n\n   if (r <= SP2) {\n      r = r - C2;\n      res = (((c3 * r + c2) * r + c1) * r + c0) / ((d2 * r + d1) * r + 1.0);\n   } else {\n      r = r - SP2;\n      res = (((e3 * r + e2) * r + e1) + e0) / ((f2 * r + f1) * r + 1.0);\n   }\n\n   return q < 0 ? -res : res;\n}\n\n/**\n * Probability density function for Student's t-distribution\n * @param {number|number[]} t - t-value or a vector of t-values\n * @param {number} dof - degrees of freedom\n */\nexport function dt(t, dof) {\n\n   if (dof < 0) {\n      throw new Error(\"Parameter 'dof' should be a positive number.\");\n   }\n\n   if (Array.isArray(t)) {\n      return t.map(v => dt(v, dof));\n   }\n\n   const pow = -0.5 * (dof + 1);\n   const A = 1 / (Math.sqrt(dof) * beta(0.5, dof/2));\n   return (A * Math.pow((1 + t * t / dof), pow));\n}\n\n\n/**\n * Cumulative distribution function for Student's t-distribution\n * @param {number|number[]} t - t-value or a vector of t-values\n * @param {number} dof - degrees of freedom\n */\nexport function pt(t, dof) {\n\n   if (dof === undefined || dof === null || dof < 1) {\n      throw Error(\"Parameter 'dof' (degrees of freedom) must be an integer number >= 1.\");\n   }\n\n   if (Array.isArray(t)) {\n      return t.map(v => pt(v, dof));\n   }\n\n   // since distribution in symmetric we can use only left tail\n   if (t === 0) return 0.5;\n   if (t === -Infinity) return 0;\n   if (t === Infinity) return 1;\n   if (t > 0) return (1 - pt(-t, dof));\n\n   return integrate((x) => dt(x, dof), -Infinity, t);\n}\n\n\n/**\n * Inverse cumulative distribution function for Student's t-distribution\n * @param {number|number[]} p - probability or vector with probabilities\n * @param {number} dof - degrees of freedom\n */\nexport function qt(p, dof) {\n\n   if (dof === undefined || dof === null || dof < 1) {\n      throw Error(\"Parameter 'dof' (degrees of freedom) must be an integer number >= 1.\");\n   }\n\n   if (p < 0 || p > 1) {\n      throw Error(\"Parameter 'p' must be between 0 and 1.\");\n   }\n\n   if (Array.isArray(p)) {\n      return p.map(v => qt(v, dof));\n   }\n\n   if (p < 0.0000000001) return -Infinity;\n   if (p > 0.9999999999) return +Infinity;\n\n\n   // simple cases — exact solutions\n   if (dof === 1) {\n      return Math.tan(Math.PI * (p - 0.5));\n   }\n\n   if (dof === 2) {\n      return 2 * (p - 0.5) * Math.sqrt(2 / (4 * p * (1 - p)));\n   }\n\n   // approximation\n\n   let sign = -1;\n   if (p >= 0.5){\n      sign = +1 ;\n      p = 2 * (1 - p);\n   } else {\n      sign = -1;\n      p = 2 * p;\n   }\n\n   const a = 1.0 / (dof - 0.5);\n   const b = 48.0 / (a ** 2);\n   let c = ((20700 * a / b - 98) * a - 16) * a + 96.36;\n   const d = ((94.5 / (b + c) - 3.0)/b + 1.0) * Math.sqrt(a * Math.PI / 2) * dof;\n\n   let x = d * p;\n   let y = x ** (2.0/dof);\n\n   if (y > 0.05 + a) {\n\n      // asymptotic inverse expansion about normal\n      x = qnorm(p * 0.5);\n      y = x ** 2;\n\n      if (dof < 5) {\n         c = c + 0.3 * (dof - 4.5) * (x + 0.6);\n      }\n\n      c = (((0.05 * d * x - 5.0) * x - 7.0) * x - 2.0) * x + b + c;\n      y = (((((0.4 * y + 6.3) * y + 36.0) * y + 94.5) / c - y - 3.0)/b + 1.0) * x;\n      y = a * (y ** 2);\n      y = y > 0.002 ? Math.exp(y) - 1.0 : 0.5 * (y ** 2) + y;\n   } else {\n      y = ((1.0 / (((dof + 6.0)/(dof * y) - 0.089 * d - 0.822) * (dof + 2.0) * 3.0) + 0.5/(dof + 4.0)) * y - 1.0) *\n         (dof + 1.0)/(dof + 2.0) + 1.0/y;\n   }\n\n   return sign * Math.sqrt(dof * y);\n}\n\n\n\n/**\n * Probability density function for F-distribution\n * @param {number|number[]} F - F-value or a vector of t-values\n * @param {number} d1 - degrees of freedom\n * @param {number} d2 - degrees of freedom\n */\nexport function df(F, d1, d2) {\n\n   if (F < 0 || d1 < 0 || d2 < 0) {\n      throw new Error(\"All 3 parameters must be positive.\");\n   }\n\n   if (d2 <= d1) {\n      throw new Error(\"Parameter 'd1' must be larger 'd2'.\");\n   }\n\n   if (Array.isArray(F)) {\n      return F.map(v => df(v, d1, d2));\n   }\n\n   return Math.sqrt( ( (d1 * F)**d1 * d2**d2) / ((d1 * F + d2)**(d1 + d2))) / (F * beta(d1/2, d2/2))\n}\n\n\n/**\n * Cumulative distribution function for F-distribution\n * @param {number|number[]} F - F-value or a vector of t-values\n * @param {number} d1 - degrees of freedom\n * @param {number} d2 - degrees of freedom\n */\nexport function pf(F, d1, d2) {\n\n   if (F < 0 || d1 < 0 || d2 < 0) {\n      throw new Error(\"All 3 parameters must be positive.\");\n   }\n\n   if (Array.isArray(F)) {\n      return F.map(v => pf(v, d1, d2));\n   }\n\n   return ibeta(d1 * F / (d1 * F + d2), d1/2, d2/2)\n}\n\n\n\n/***********************************************\n * Functions for manipulations with values     *\n ***********************************************/\n\n\n/**\n * Sorts values in a vector\n * @param {Array} x - vector with values\n * @returns {Array} vector with sorted values\n */\nexport function sort(x, decreasing = false) {\n   return decreasing ? [...x].sort((a, b) => b - a) : [...x].sort((a, b) => a - b);\n}\n\n\n/**\n * Replicates values in x n times\n * @param {any} x - single value or a vector with values\n * @param {number} n - how many times to replicate\n */\nexport function rep(x, n) {\n\n   if (Array.isArray(n)) {\n      if (x.length != n.length) {\n         throw new Error(\"Parameter 'n' should be a single value or a vector of the same length as x.\");\n      }\n\n      let out = [];\n      for (let i = 0; i < n.length; i++) {\n         out.push(...rep([x[i]], n[i]));\n      }\n\n      return out;\n   }\n\n   if (!Array.isArray(x)) x = [x];\n   if (n <= 1) return x;\n\n   const nx = x.length;\n   x.length = nx * n\n   for (let i = 0; i < n - 1; i ++) {\n      for (let j = 0; j < nx; j++) {\n         x[nx * (i + 1) + j] = x[j];\n      }\n   }\n\n   return x;\n}\n\n\n/**\n * Create a subset of vectors based on a vector of indices\n * @param {number[]} x - a vector with values\n * @param {number[]} indices - a vector with element indices (first index is 1 not 0!)\n * @param {string} method - what to do with values (\"select\" or \"remove\")\n */\nexport function subset(x, indices, method) {\n\n   if (!Array.isArray(x)) x = [x];\n   if (!Array.isArray(indices)) indices = [indices];\n\n   if (indices.length === 0) return [...x];\n\n   if (max(indices) > x.length || min(indices) < 1) {\n      throw new Error(\"Parameter 'indices' must have values between 1 and 'x.length'.\");\n   }\n\n   const n = indices.length;\n\n   if (!method || method === \"select\") {\n      let out = Array(n);\n      for (let i = 0; i < n; i++) {\n         out[i] = x[indices[i] - 1];\n      }\n      return out;\n   }\n\n   if (method === \"remove\") {\n      let out = [...x];\n      return out.filter((v, i) => !indices.includes(i + 1));\n   }\n\n   throw Error(\"Wrong value for argument 'method'.\");\n}\n\n\n/**\n * Generate combination of all levels of vectors\n * @param {...} args - a sequence of vectors\n */\nexport function expandGrid(...args) {\n\n   const nargs = args.length;\n   const d = args.map(v => v.length);\n   let orep = prod(d);\n\n   let grid = Array(nargs);\n   let repFac = 1;\n\n   for (let i = 0; i < nargs; i++) {\n      const x = args[i];\n      const nx = x.length;\n      orep = orep/nx;\n      grid[i] = subset(x, rep(rep(seq(1, nx, nx), rep(repFac, nx)), orep));\n      repFac = repFac * nx;\n   }\n\n   return grid;\n}\n\n\n/**\n * Shuffles values in vector x using Fisher–Yates algorithm\n * @param {Array} x - a vector with values\n */\nexport function shuffle(x) {\n  let y = [...x];\n  let n = y.length;\n  let t, i;\n\n  while (n) {\n    i = Math.floor(Math.random() * n--);\n    t = y[n];\n    y[n] = y[i];\n    y[i] = t;\n  }\n\n  return y;\n}\n\n\n/**\n * Finds index of value in x which is closest to the value a\n * @param {number[]} x - a vector with values\n * @param {number}  a - a value\n */\nexport function closestIndex(x, a) {\n   const c = x.reduce((prev, curr) => Math.abs(curr - a) < Math.abs(prev - a) ? curr : prev);\n   return x.indexOf(c);\n}\n\n\n/**\n * Rounds number (or vector of numbers) to given amount of decimals\n * @param {number | number[]} x - a vector with values\n * @return {number | number[]}\n */\nexport function round(x, n = 0) {\n   if (Array.isArray(x)) {\n      return x.map(v => round(v, n));\n   }\n   return Number.parseFloat(x.toFixed(n));\n}\n\n/**\n * Standardize (mean center and sd scale) values from a vector\n * @param {number | number[]} x - a vector with values\n * @return {number} center - value for centering the values (if undefined, will use mean(x))\n * @return {number} scale - value for scaling the values (if undefined, will use sd(x))\n *\n */\nexport function scale(x, center = undefined, scale = undefined) {\n   if (center === undefined) center = mean(x);\n   if (scale === undefined) scale = sd(x);\n\n   const n = x.length;\n   let y = Array(n);\n\n   for (let i = 0; i < n; i++) {\n      y[i] = (x[i] - center) / scale;\n   }\n\n   return y;\n}\n\n\n\n/***************************************************************\n * Mathematical functions and methods needed for computations  *\n ***************************************************************/\n\n/**\n * Computes numeric integral for function \"f\" with limits (a, b)\n * @param {function} f - a reference to a function\n * @param {number} a - lower limit for integration\n * @param {number} b - upper limit for integration\n * @param {number} acc - absolute accuracy\n * @param {number} eps - relative accuracy\n * @param {number[]} oldfs - vector of values needed for recursion\n * @returns {number} result of integration\n */\nexport function integrate(f, a, b, acc = 0.000001, eps = 0.00001, oldfs = undefined) {\n\n   if (typeof(a) !== \"number\" || typeof(b) !== \"number\") {\n      throw Error(\"Parameters 'a' and 'b' must be numbers.\");\n   }\n\n   if (b < a) {\n      throw Error(\"Parameter 'b' must be larger 'a'.\");\n   }\n\n   // special case when left limit is minus infinity\n   if (a === -Infinity && b !== Infinity) {\n      return integrate((t) => f(b - (1 - t) / t) / (t ** 2), 0, 1);\n   }\n\n   // special case when right limit is plus infinity\n   if (a !== -Infinity && b === Infinity) {\n      return integrate((t) => f(a + (1 - t) / t) / (t ** 2), 0, 1);\n   }\n\n   // special case when both limits are infinite\n   if (a === -Infinity && b === Infinity) {\n      return integrate((t) => (f((1 - t) / t) + f((t - 1) / t)) / t ** 2, 0, 1);\n   }\n\n   // constants for splitting the integration interval\n   const x = [1/6, 2/6, 4/6, 5/6];\n   const w = [2/6, 1/6, 1/6, 2/6];\n   const v = [1/4, 1/4, 1/4, 1/4];\n   const p = [1, 0, 0, 1];\n\n   let n = x.length, h = b - a;\n   let fs;\n\n   if (oldfs === undefined) {\n      fs = x.map(v => f(a + v * h));\n   } else {\n      fs = new Array(n);\n      for (let k = 0, i = 0; i < n; i++) {\n         fs[i] = p[i] === 1 ? f(a + x[i] * h) : oldfs[k++];\n      }\n   }\n\n   let q4 = 0, q2 = 0;\n   for (let i = 0; i < n; i++) {\n      q4 += w[i] * fs[i] * h;\n      q2 += v[i] * fs[i] * h;\n   }\n\n   if (isNaN(q2) || isNaN(q4)) {\n      throw Error(\"Numerical integration ended up with NaN number.\")\n   }\n\n   let tol = acc + eps * Math.abs(q4);\n   let err = Math.abs((q4 - q2)/3);\n\n   if (err < tol) return q4;\n\n   acc = acc / Math.sqrt(2.);\n   let mid = (a + b) / 2;\n   let left = fs.filter((v, i) => i < n/2);\n   let right = fs.filter((v, i) => i >= n/2);\n\n   let ql = integrate(f, a, mid, eps, acc, left);\n   let qr = integrate(f, mid, b, eps, acc, right);\n   return (ql + qr);\n}\n\n\n/**\n * Error function for normal distribution\n * @param {number} x - a number\n * @returns {number} value for erf\n */\nexport function erf(x) {\n\n  const sign = (x >= 0) ? 1 : -1;\n  x = Math.abs(x);\n\n  // constants\n  const a1 =  0.254829592;\n  const a2 = -0.284496736;\n  const a3 =  1.421413741;\n  const a4 = -1.453152027;\n  const a5 =  1.061405429;\n  const p  =  0.3275911;\n\n  // approximation\n  const t = 1.0 / (1.0 + p * x);\n  const y = 1.0 - (((((a5 * t + a4) * t) + a3) * t + a2) * t + a1) * t * Math.exp(-x * x);\n  return sign * y;\n}\n\n\n/**\n * Gamma function (approximation)\n * @param {number|number[]} z - argument (one value or a vector)\n * @returns {number} value of the Gamma function\n */\nexport function gamma(z) {\n\n   if (Array.isArray(z)) {\n      return z.map(v => gamma(v));\n   }\n\n   if (z <= 0) {\n      throw new Error(\"Gamma function only works with arguments > 0.\");\n   }\n\n   // coefficients\n   const p = [\n        676.5203681218851,\n      -1259.1392167224028,\n        771.32342877765313,\n       -176.61502916214059,\n         12.507343278686905,\n         -0.13857109526572012,\n          9.9843695780195716e-6,\n          1.5056327351493116e-7\n    ];\n\n   if (z < 0.5) {\n      return Math.PI / (Math.sin(Math.PI * z) + gamma(1 - z));\n   }\n\n   z = z - 1;\n   let x = 0.99999999999980993;\n\n   for (let i = 0; i < p.length; i++) {\n      x = x + p[i] / (z + i + 1);\n   }\n\n   const t = z + p.length - 0.5;\n   return Math.sqrt(2 * Math.PI) * Math.pow(t, z + 0.5) * Math.exp(-t) * x;\n}\n\n\n/**\n * Betta function (approximation)\n * @param {number} x - first argument (one value)\n * @param {number} y - second argument (one value)\n * @returns {number} value of the Beta function\n */\nexport function beta(x, y) {\n\n   if (y > 100) {\n      // for large y we use slower integrate version\n      return integrate((u) => Math.pow(u, x - 1) / Math.pow(1 + u, x + y), 0, Infinity)\n   }\n\n   return gamma(x) * gamma(y) / gamma(x + y);\n}\n\n\n/**\n * Incomplete Betta function (approximation via numeric integration)\n * @param {number} x - first argument (one value)\n * @param {number} a - second argument (one value)\n * @param {number} b - third argument (one value)\n * @returns {number} value of the function\n */\nexport function ibeta(x, a, b) {\n   if (x === 0) return 0;\n   if (x === 1) return 1;\n   if (b === 1) return x ** a;\n   if (a === 1) return (1 - (1 - x)**b);\n   return integrate((t) => t ** (a - 1) * (1 - t) ** (b - 1), 0, x) / beta(a, b);\n}\n","<script>\n   let showHelp = false;\n\n   const toggleHelp = () => showHelp = !showHelp;\n\n   const handleKeyPress = e => {\n      if (e.key === 'h') toggleHelp();\n   };\n\n   // $: showHelp = window.location.hash === \"#help\";\n</script>\n\n<svelte:window on:keypress={handleKeyPress}/>\n<main class=\"graasta-app\">\n\n   <div class=\"content\">\n      <slot></slot>\n   </div>\n\n   {#if showHelp}\n   <div class=\"helptext\">\n      <slot name=\"help\"></slot>\n   </div>\n   {/if}\n\n</main>\n\n<style>\n\n/* main styles for graasta-app and children */\n:global(body) {\n   height: max-content;\n}\n\n:global(#graasta-app-container) {\n   height: max-content;\n   width: 100% !important;\n}\n\n.graasta-app {\n   font-family: Helvetica, Areal, Verdana, sans-serif;\n   display: block;\n   position: relative;\n   font-size: max(14px, 1vw);\n\n   aspect-ratio: 16/9;\n   min-width: 800px;\n\n   width: 100%;\n   height: auto;\n\n   box-sizing: border-box;\n   padding: 0;\n   margin: 0 auto;\n   background: #fdfdfd;\n}\n\n.graasta-app  * {\n   box-sizing: border-box;\n   margin: 0;\n   padding: 0;\n}\n\n.graasta-app :glbal(.plot) {\n   box-shadow: 0px 0px 5px  #30303020;\n}\n\n.graasta-app .content {\n   width: 100%;\n   height: 100%;\n}\n\n/* help text and button */\n\n.helptext {\n   font-family: 'Open Sans', sans-serif;\n\n   position: absolute;\n   top: 0;\n   width: 0;\n   left: 0;\n   bottom: 0;\n\n   z-index: 999;\n   background: white;\n   box-sizing: border-box;\n\n   width: 100%;\n   height: 100%;\n   padding: 1em;\n   margin: 0;\n   line-height: 1.35em;\n   font-size: 1em;\n   color: #303030;\n}\n\n.helptext :global(h2) {\n   padding: 1.25em 0 1em 0;\n   font-size: 1.2em;\n}\n\n.helptext :global(p) {\n   padding: 0 0 0.5em 0;\n   line-height: 1.5em;\n   font-size: 1em;\n}\n\n</style>","export let colors = {\n   plots: {\n      // population colors\n      POPULATIONS_PALE: [\"#33668820\", \"#ff990020\"],\n      POPULATIONS: [\"#33668850\", \"#ff990050\"],\n      SAMPLES: [\"#336688\", \"#ff9900\"],\n\n      // statistics on plot legend\n      STAT_NAME: \"#808080\",\n      STAT_VALUE: \"#202020\"\n   }\n};\n\n\nexport function formatLabels(labels) {\n\n   if (!Array.isArray(labels)) labels = [labels];\n   let labelsStr = Array(length = labels.length);\n\n\n   for (let i = 0; i < labels.length; i++) {\n      labelsStr[i] =    \"<tspan fill=\" + colors.plots.STAT_NAME + \">\" + labels[i].name + \":</tspan> \" + labels[i].value;\n   }\n\n   return labelsStr;\n}","<script>\n   export let errormsg = undefined;\n</script>\n\n<fieldset class=\"app-control-area\">\n   <slot></slot>\n   {#if errormsg}<div class=\"app-control-error\">{errormsg}</div>{/if}\n</fieldset>\n\n<style>\n   .app-control-error {\n      padding: 0.5em 0.5em 0.25em 0.65em;\n      font-size: 0.75em;\n      color: crimson;\n   }\n\n   fieldset {\n      background: #f4f4f4;\n      margin: 0;\n      padding: 0.5em;\n      box-shadow: 0px 0px 2px  #30303020;\n      border: none;\n   }\n</style>","<script>\n   export let id;\n   export let label;\n</script>\n\n<div class=\"app-control\">\n   <label for=\"{id}\">{@html label}</label>\n   <slot></slot>\n</div>\n\n<style>\n   .app-control {\n      font-size: 1em;\n      margin: 0.25em 0 0 0;\n      padding: 0.15em 0.25em;\n      display: flex;\n      align-items: center;\n      justify-content: flex-begin;\n   }\n\n   .app-control > label {\n      height: 1.5em;\n      line-height: 1.5em;\n      flex: 0 0 90px;\n      max-width: 90px;\n   }\n\n   .app-control > slot {\n      width: 100%;\n   }\n\n   @media(min-width: 959px) {\n      .app-control > label {\n         flex: 0 0 120px;\n         max-width: 120px;\n      }\n   }\n\n   @media(min-width: 1279px) {\n      .app-control > label {\n         flex: 0 0 150px;\n         max-width: 150px;\n      }\n   }\n\n</style>","<script>\n   import AppControl from \"./AppControl.svelte\";\n\n   export let id;\n   export let label;\n   export let text;\n</script>\n\n<AppControl id={id} label={label} >\n   <button on:click>{text}</button>\n</AppControl>\n\n<style>\n\n\nbutton {\n   height: 1.5em;\n   font-size: 1em;\n   padding: 0 1em;\n   margin: 0;\n   color: #606060;\n   background: #e0e0e0;\n   box-shadow: none;\n   border: none;\n   border-radius: 3px;\n   white-space: nowrap;\n}\n\nbutton:hover {\n   color: #fafafa;\n   background: #606060;\n}\n\n</style>","<script>\n   import { fade } from 'svelte/transition';\n   import AppControl from \"./AppControl.svelte\";\n\n   export let id;\n   export let label;\n   export let options;\n   export let value = options[0];\n</script>\n\n<AppControl id={id} label={label} >\n\n   <div class=\"selector\">\n      {#each options as option (option)}\n      <div on:click={() => value = option} class=\"option\" class:selected={option==value}>{option}</div>\n      {/each}\n\n   </div>\n   <input name=\"{id}\" bind:value=\"{value}\">\n</AppControl>\n\n<style>\n   input {\n      display: none;\n   }\n\n   .selector {\n      position: relative;\n      box-sizing: border-box;\n      display: inline-block;\n      flex: 0 0 auto;\n      background: #e0e0e0;\n\n      font-size: 1em;\n      height: 1.5em;\n      line-height: 1.5em;\n      margin: 0;\n      padding: 0;\n      width: auto;\n      border-radius: 2px;\n\n      user-select: none;\n      -webkit-user-select: none;\n      -moz-user-select: none;\n\n      display: flex;\n   }\n\n   .option {\n      cursor: default;\n      padding: 0 0.5em;\n      margin: 0 1px;\n      color: #606060;\n      transition: background-color 0.5s ease;\n   }\n\n   .option.selected {\n      border-radius: 3px;\n      background-color: #606060;\n      color: #fefefe;\n   }\n\n</style>","<script>\n   import { createEventDispatcher } from \"svelte\";\n   import AppControl from \"./AppControl.svelte\";\n\n   export let id;\n   export let label;\n   export let value;\n   export let min;\n   export let max;\n   export let decNum = 1;\n   export let step = +((max - min) / 100).toFixed(4);\n\n   if (value < min || value > max) {\n      throw(\"The value is outside of the provided range.\");\n   }\n\n   const dispatch = createEventDispatcher();\n\n   let sliderElement;\n   let sliderContainer;\n   let isDragging = false;\n\n   const computeValue = (p) => {\n      const tmpValue = min + p * (max - min);\n\n      // strange construction below is needed for:\n      // a. make a value fractionated according to step\n      // b. get rid of small decimals added by JS due to loss of precision\n      return(+(Math.round(tmpValue / step) * step).toFixed(4));\n   }\n\n   const getRelativePosition = (e) => {\n      const sliderRect = sliderElement.getBoundingClientRect();\n      const parentRect = sliderContainer.getBoundingClientRect();\n      const minX = sliderRect.x;\n      const maxX = parentRect.x + parentRect.width;\n\n      return (e.clientX - minX) / (maxX - minX);\n   }\n\n   const startChanging = (e) => {\n      const p = getRelativePosition(e);\n      if (p < 0 || p > 1) return;\n      isDragging = p * 100 > width - 5 && p * 100 < width + 5;\n   }\n\n   const cancelChanging = (e) => {\n      isDragging = false;\n   }\n\n   const stopChanging = (e) => {\n      isDragging = false;\n      const p = getRelativePosition(e);\n      if (p < 0 || p > 1) return;\n\n      value = computeValue(p);\n   }\n\n   const changing = (e) => {\n      if (!isDragging) return;\n      const p = getRelativePosition(e);\n      if (p < 0 || p > 1) return;\n\n      value = computeValue(p);\n   }\n\n   $: width = (value - min) / (max - min) * 100;\n   $: dispatch(\"change\", value);\n</script>\n\n<AppControl id={id} label={label}>\n   <div\n      class=\"rangeSliderContainer\"\n      bind:this={sliderContainer}\n      on:mousewheel={changing}\n      on:mousemove={changing}\n      on:mousedown={startChanging}\n      on:mouseleave={cancelChanging}\n      on:mouseup={stopChanging}>\n\n      <div class=\"rangeSlider\" style=\"width:{width}%\" bind:this={sliderElement}></div>\n      <span>{value.toFixed(decNum)}</span>\n   </div>\n   <input type=\"range\" step={step} bind:value=\"{value}\" min={min} max={max}>\n</AppControl>\n\n<style>\n   .rangeSliderContainer {\n      position: relative;\n      box-sizing: border-box;\n      display: inline-block;\n      flex: 1 1 auto;\n      background: #e0e0e0;\n      height: 1.5em;\n      margin: 0;\n      padding: 0;\n      width: auto;\n      border-radius: 2px;\n\n      user-select: none;\n      -webkit-user-select: none;\n      -moz-user-select: none;\n\n   }\n\n   .rangeSlider {\n      position: relative;\n      display: inline-block;\n      background: #606060;\n      border-radius: 2px;\n\n      margin: 0;\n      padding: 0;\n      height: 100%;\n      cursor:default;\n      user-select: none;\n      -webkit-user-select: none;\n      -moz-user-select: none;\n\n   }\n\n   .rangeSliderContainer span {\n      display: inline-block;\n      position: absolute;\n      right: 0;\n      top: 0;\n      font-size: 0.85em;\n      padding: 1px 5px;\n      color: #606060;\n      mix-blend-mode: difference;\n      line-height: 1.6em;\n      user-select: none;\n      -webkit-user-select: none;\n      -moz-user-select: none;\n   }\n\n   input {\n      display: none;\n      width: 100%;\n   }\n</style>\n\n","import { noop, safe_not_equal, subscribe, run_all, is_function } from '../internal/index.mjs';\nexport { get_store_value as get } from '../internal/index.mjs';\n\nconst subscriber_queue = [];\n/**\n * Creates a `Readable` store that allows reading by subscription.\n * @param value initial value\n * @param {StartStopNotifier}start start and stop notifications for subscriptions\n */\nfunction readable(value, start) {\n    return {\n        subscribe: writable(value, start).subscribe\n    };\n}\n/**\n * Create a `Writable` store that allows both updating and reading by subscription.\n * @param {*=}value initial value\n * @param {StartStopNotifier=}start start and stop notifications for subscriptions\n */\nfunction writable(value, start = noop) {\n    let stop;\n    const subscribers = new Set();\n    function set(new_value) {\n        if (safe_not_equal(value, new_value)) {\n            value = new_value;\n            if (stop) { // store is ready\n                const run_queue = !subscriber_queue.length;\n                for (const subscriber of subscribers) {\n                    subscriber[1]();\n                    subscriber_queue.push(subscriber, value);\n                }\n                if (run_queue) {\n                    for (let i = 0; i < subscriber_queue.length; i += 2) {\n                        subscriber_queue[i][0](subscriber_queue[i + 1]);\n                    }\n                    subscriber_queue.length = 0;\n                }\n            }\n        }\n    }\n    function update(fn) {\n        set(fn(value));\n    }\n    function subscribe(run, invalidate = noop) {\n        const subscriber = [run, invalidate];\n        subscribers.add(subscriber);\n        if (subscribers.size === 1) {\n            stop = start(set) || noop;\n        }\n        run(value);\n        return () => {\n            subscribers.delete(subscriber);\n            if (subscribers.size === 0) {\n                stop();\n                stop = null;\n            }\n        };\n    }\n    return { set, update, subscribe };\n}\nfunction derived(stores, fn, initial_value) {\n    const single = !Array.isArray(stores);\n    const stores_array = single\n        ? [stores]\n        : stores;\n    const auto = fn.length < 2;\n    return readable(initial_value, (set) => {\n        let inited = false;\n        const values = [];\n        let pending = 0;\n        let cleanup = noop;\n        const sync = () => {\n            if (pending) {\n                return;\n            }\n            cleanup();\n            const result = fn(single ? values[0] : values, set);\n            if (auto) {\n                set(result);\n            }\n            else {\n                cleanup = is_function(result) ? result : noop;\n            }\n        };\n        const unsubscribers = stores_array.map((store, i) => subscribe(store, (value) => {\n            values[i] = value;\n            pending &= ~(1 << i);\n            if (inited) {\n                sync();\n            }\n        }, () => {\n            pending |= (1 << i);\n        }));\n        inited = true;\n        sync();\n        return function stop() {\n            run_all(unsubscribers);\n            cleanup();\n        };\n    });\n}\n\nexport { derived, readable, writable };\n","<script>\n\timport { onMount, setContext, createEventDispatcher } from 'svelte';\n\timport { writable } from 'svelte/store';\n\n   /* input parameters */\n   export let limX = [undefined, undefined];    // limits for x-axis (in plot units) [min, max]\n   export let limY = [undefined, undefined];    // limits for y-axis (in plot units) [min, max]\n   export let title = \"\";                       // title of the plot\n   export let xLabel = \"\";                      // label for x-axis\n   export let yLabel = \"\";                      // label for y-axis\n   export let multiSeries = true;               // is the plot for one series or for many\n\n   // event dispatcher\n   const dispatch = createEventDispatcher();\n\n   // how big are margins (number of pixels in unit margin value) between axis and plot area if axis are shown\n   const AXES_MARGIN_FACTORS = {\n      \"small\": 30,\n      \"medium\": 40,\n      \"large\": 50\n   }\n\n   // number of ticks along each axis\n   const TICK_NUM = {\n      \"small\": 5,\n      \"medium\": 8,\n      \"large\": 12\n   };\n\n   // margin between plot series elements and data labels\n   const LABELS_MARGIN = {\n      \"small\": 10,\n      \"medium\": 15,\n      \"large\": 20\n   };\n\n   // line styles for different scales and types\n   const LINE_STYLES = {\n      small: [\"0\", \"3,3\", \"1,1\", \"3,1\"],\n      medium: [\"0\", \"5,5\", \"2,2\", \"5,2\"],\n      large: [\"0\", \"7,7\", \"3,3\", \"7,3\"],\n   }\n\n   // constant to make clip path ID unique\n   const clipPathID = \"plottingArea\" + Math.round(Math.random() * 10000);\n\n   /* parameters for internal use inside the component */\n   let axesWrapper;                                   // pointer to axes wrapper DOM element\n   let axesMargins = [0.034, 0.034, 0.034, 0.034];    // initial margins (will be multiplied to FACTORS)\n\n   /* reactive parameters to be shared with children via context */\n   const width = writable(100);                       // actual width of plotting area in pixels\n   const height = writable(100);                      // actual height of plotting area in pixels\n   const xLim = writable([undefined, undefined]);     // actual limits for x-axis in plot units\n   const yLim = writable([undefined, undefined]);     // actual limits for y-axis in plot units\n   const scale = writable(\"medium\");                  // scale factor (how big the shown plot is)\n   const isOk = writable(false);                      // are axes ready for drawing\n\n   /** Adds margins for x-axis (e.g. when x-axis must be shown) */\n   const addXAxisMargins = function() {\n      axesMargins[0] = 1;\n      axesMargins[2] = 0.5;\n      axesMargins[1] = axesMargins[1] > 0.5 ? axesMargins[1] : 0.5;\n      axesMargins[3] = axesMargins[3] > 0.5 ? axesMargins[3] : 0.5;\n   }\n\n   /** Adds margins for y-axis (e.g. when y-axis must be shown) */\n   const addYAxisMargins = function() {\n      axesMargins[1] = 1;\n      axesMargins[3] = 0.5;\n      axesMargins[0] = axesMargins[0] > 0.5 ? axesMargins[0] : 0.5;\n      axesMargins[2] = axesMargins[2] > 0.5 ? axesMargins[2] : 0.5;\n   }\n\n   /** Adjusts limits for x-axis (e.g. when new series is added)\n    *  @param {Array} newLim - vector with new limits  (two values)\n    */\n   const adjustXAxisLimits = function(newLim) {\n      if (!limX.some(v => v === undefined)) return;\n      xLim.update(lim => adjustAxisLimits(lim, newLim));\n   }\n\n   /** Adjusts limits for y-axis (e.g. when new series is added)\n    *  @param {Array} newLim - vector with new limits  (two values)\n    */\n   const adjustYAxisLimits = function(newLim) {\n      if (!limY.some(v => v === undefined)) return;\n      yLim.update(lim => adjustAxisLimits(lim, newLim));\n   }\n\n   /** Adjusts x- or y- axis limits (e.g. when new elements are added)\n    *  @param {Array} lim - vector with limits for current axis (two values)\n    *  @param {Array} newLim - vector with new limits  (two values)\n    *  @returns {Array} vector with rescaled values\n    *\n    *  The new limits are set separately for min and max. Either if current value is undefined or\n    *  if new value is outside the current limits (smaller than min or larger than max).\n    */\n   const adjustAxisLimits = function(lim, newLim) {\n\n      let adjustedLim = [\n         (lim[0] !== undefined && multiSeries === true && lim[0] < newLim[0]) ? lim[0] : newLim[0],\n         (lim[1] !== undefined && multiSeries === true && lim[1] > newLim[1]) ? lim[1] : newLim[1]\n      ];\n\n      // special case when both limits are zero\n      if (adjustedLim[0] === 0 && adjustedLim[1] === 0) {\n         adjustedLim = [-0.1, 0.1];\n      }\n\n      // special case when limits are equal (add ±5%)\n      if (adjustedLim[0] === adjustedLim[1]) {\n         adjustedLim = [adjustedLim[0] * 0.95, adjustedLim[0] * 1.05];\n      }\n\n      return adjustedLim;\n   }\n\n   /** Rescales x-values from plot coordinates to screen (SVG) coordinates\n    *  @param {Array} x - vector with coordinates (or objects size) in original plot coordinates\n    *  @param {Array} xLim - vector with current limits for x-axis in original plot coordinates\n    *  @param {number} width - width of coordinate system in pixels\n    *  @param {boolean} doSizeScreen - scale size of objects (true) or coordinates\n    *  @returns {Array} vector with rescaled values\n    */\n   const scaleX = function(x, xLim, width, doSizeScale = false) {\n      if (!$isOk  || x === undefined || !Array.isArray(x)) return undefined;\n\n      if (doSizeScale) {\n         // scale size of objects instead of coordinates\n         return x.map(v => v / (xLim[1] - xLim[0]) * (width - margins[1] - margins[3]));\n      }\n\n      return x.map(v => (v - xLim[0]) / (xLim[1] - xLim[0]) * (width - margins[1] - margins[3]) + margins[1]);\n   }\n\n   /** Rescales x-values from plot coordinates to screen (SVG) coordinates\n    *  @param {Array} x - vector with coordinates (or objects size) in original plot coordinates\n    *  @param {Array} xLim - vector with current limits for x-axis in original plot coordinates\n    *  @param {number} width - width of coordinate system in pixels\n    *  @param {boolean} doSizeScreen - scale size of objects (true) or coordinates\n    *  @returns {Array} vector with rescaled values\n    */\n   const scaleY = function(y, yLim, height, doSizeScale = false) {\n      if (!$isOk  || y === undefined || !Array.isArray(y)) return undefined;\n\n      if (doSizeScale) {\n         // scale size of objects instead of coordinates\n         return y.map(v => v / (yLim[1] - yLim[0]) * (height - margins[0] - margins[2]));\n      }\n\n      // for coordinates we also need to invert (flip) the y-axis\n      return y.map(v => (yLim[1] - v) / (yLim[1] - yLim[0]) * (height - margins[0] - margins[2]) + margins[2]);\n   }\n\n   /** Computes nice tick values for axis\n    * @param {Array} ticks - vector with ticks if alredy available (if not, new will be computed)\n    * @param {Array} lim - vector with axis limits tickets must be computed for\n    * @param {number} maxTickNum - maximum number of ticks to compute\n    * @param {boolean} round - round or not the fractions when computing nice numbers for the ticks\n    * @returns {Array} a vector with computed tick positions\n    */\n   const getAxisTicks = function(ticks, lim, maxTickNum, round = true) {\n\n      // if ticks are already provided do not recompute them\n      if (ticks !== undefined) return ticks;\n\n      // check if limits are ok\n      if (!Array.isArray(lim) || lim[0] === undefined || lim[1] === undefined) return undefined;\n\n      // get range as a nice number and compute min, max and steps for the tick sequence\n      const range = niceNum(lim[1] - lim[0], round);\n      const tickSpacing = niceNum(range / (maxTickNum - 1), round);\n      const tickMin = Math.ceil(lim[0] / tickSpacing) * tickSpacing;\n      const tickMax = Math.floor(lim[1] / tickSpacing) * tickSpacing;\n\n      // recompute maxTickNum\n      maxTickNum = Math.round((tickMax - tickMin + 1) / tickSpacing) + 1;\n\n      // create a sequence and return\n      ticks = [...Array(maxTickNum)].map((x, i) => tickMin + i * tickSpacing);\n\n      // if step is smaller than 1 round values to remove small decimals accidentiall added by JS\n      if (Math.abs(tickSpacing) < 1) {\n         const r = Math.pow(10, 1 + Math.round(-Math.log10(tickSpacing)));\n         ticks = ticks.map(v => Math.round((v + Number.EPSILON) * r) / r)\n      }\n\n      // make sure the ticks are not aligned with axes limits\n      return ticks.filter(x => x >= lim[0] & x <= lim[1]);\n   }\n\n   /** Computes a nice spacing value for a given range\n    * @param {numeric} localRange - a range (max - min)\n    * @param {boolean} round - round or not the fractions when computing the number\n    * @returns {numeric} the computed spacing value\n    */\n   function niceNum( localRange,  round) {\n\n      const exponent = Math.floor(Math.log10(localRange));\n      const fraction = localRange / Math.pow(10, exponent);\n      let niceFraction;\n\n      if (round) {\n         if (fraction < 1.5)\n            niceFraction = 1;\n         else if (fraction < 3)\n            niceFraction = 2;\n         else if (fraction < 7)\n            niceFraction = 5;\n         else\n            niceFraction = 10;\n      } else {\n         if (fraction <= 1)\n            niceFraction = 1;\n         else if (fraction <= 2)\n            niceFraction = 2;\n         else if (fraction <= 5)\n            niceFraction = 5;\n         else\n            niceFraction = 10;\n      }\n\n      return niceFraction * Math.pow(10, exponent);\n   }\n\n   /** Computes a scale level\n    * @param {numeric} width - width of plotting area in pixels\n    * @param {numeric} height - height of plotting area in pixels\n    * @returns {text} the scale level (\"small\", \"medium\" or \"large\")\n    */\n   function getScale(width, height) {\n      if (height < 300.2 || width < 300.2) return \"small\";\n      if (height < 600.2 || width < 600.2) return \"medium\";\n      return \"large\";\n   }\n\n   /* context with Axes constants, properties and methods to share with children */\n   let context = {\n\n      // methods\n      addXAxisMargins: addXAxisMargins,\n      addYAxisMargins: addYAxisMargins,\n      adjustXAxisLimits: adjustXAxisLimits,\n      adjustYAxisLimits: adjustYAxisLimits,\n      getAxisTicks: getAxisTicks,\n      scaleX: scaleX,\n      scaleY: scaleY,\n\n      // variables\n      isOk: isOk,\n      scale: scale,\n      width: width,\n      height: height,\n      xLim: xLim,\n      yLim: yLim,\n\n      // constants\n      LINE_STYLES: LINE_STYLES,\n      LABELS_MARGIN: LABELS_MARGIN,\n      TICK_NUM: TICK_NUM,\n   }\n\n\tsetContext('axes', context);\n\n   /* observer for the plotting area size */\n   var ro = new ResizeObserver(entries => {\n      for (let entry of entries) {\n         const cr = entry.contentRect;\n         width.update(x => cr.width);\n         height.update(x => cr.height);\n         scale.update(x => getScale(cr.width, cr.height));\n      }\n   });\n\n   onMount(() => {\n      ro.observe(axesWrapper);\n   });\n\n\n   // handle click on plot elements and dispatch manual events\n   function dispatchClickEvent(eventName, el) {\n      dispatch(eventName, {seriesTitle: el.parentNode.getAttribute('title'), elementID: el.dataset.id});\n   }\n\n   function handleClick(e) {\n\n      // scatter plot markers\n      if (e.target.tagName === \"text\" && e.target.parentNode.classList.contains(\"series_scatter\")) {\n         dispatchClickEvent(\"markerclick\", e.target);\n         return;\n      }\n\n      // bar plot bars\n      if (e.target.tagName === \"rect\" && e.target.parentNode.classList.contains(\"series_bar\")) {\n         dispatchClickEvent(\"barclick\", e.target);\n         return;\n      }\n\n      // outside any plot element\n      dispatch(\"axesclick\")\n   }\n\n\n   // this is reactive in case if limX and limY are interactively changed by parent script\n   $: if (!limX.some(v => v === undefined)) xLim.update(v => limX);\n   $: if (!limY.some(v => v === undefined)) yLim.update(v => limY);\n\n   // computes real margins in pixels based on current scale\n   $: margins = axesMargins.map(v => v * AXES_MARGIN_FACTORS[$scale]);\n\n   // computes status which tells that axes limits look fine and it is safe to draw\n   // the status is based on the axis limits validity\n   $: isOk.update(v =>\n      Array.isArray($yLim) &&\n      Array.isArray($xLim) &&\n      $xLim.length === 2 &&\n      $yLim.length === 2 &&\n      !$yLim.some(v => v === undefined) &&\n      !$xLim.some(v => v === undefined) &&\n      !$yLim.some(v => isNaN(v)) &&\n      !$xLim.some(v => isNaN(v)) &&\n      $xLim[1] !== $xLim[0] &&\n      $yLim[1] !== $yLim[0] &&\n      $width > (margins[1] + margins[3]) &&\n      $height > (margins[0] + margins[2])\n   )\n\n   // computes coordinates for clip path box\n   $: cpx = $isOk ? scaleX($xLim, $xLim, $width) : [0, 1];\n   $: cpy = $isOk ? scaleY($yLim, $yLim, $height) : [1, 0];\n</script>\n\n\n<div class=\"plot {'plot_' + $scale}\"  class:plot_error=\"{!$isOk}\">\n\n   <!-- plot title and axis labels -->\n   {#if title !== \"\"}<div class=\"axes__title\">{@html title}</div>{/if}\n   {#if yLabel !== \"\"}<div class=\"axes__ylabel\"><span>{@html yLabel}</span></div>{/if}\n   {#if xLabel !== \"\"}<div class=\"axes__xlabel\"><span>{@html xLabel}</span></div>{/if}\n\n   <!-- axes (coordinate system) -->\n   <div class=\"axes-wrapper\" bind:this={axesWrapper} >\n      <svg on:click={handleClick} preserveAspectRatio=\"none\" class=\"axes\">\n\n         <!-- define clipping path -->\n         <defs>\n            <clipPath id=\"{clipPathID}\">\n               <rect style=\"pointer-events:none\" x=\"{cpx[0]}\" y=\"{cpy[1]}\" width = \"{cpx[1] - cpx[0]}\" height=\"{cpy[0] - cpy[1]}\"></rect>\n            </clipPath>\n         </defs>\n\n         <!-- axis and box -->\n         <slot name=\"xaxis\"></slot>\n         <slot name=\"yaxis\"></slot>\n\n         <!-- main plot content -->\n         <g clip-path=\"url(#{clipPathID})\">\n            <slot></slot>\n         </g>\n\n         <!-- axis and box -->\n         <slot name=\"box\"></slot>\n\n      </svg>\n   </div>\n\n   {#if !$isOk}\n   <p class=\"message_error\">\n      Axes component was not properly initialized. <br />\n      Add plot series (check that coordinates are numeric) or define axes limits manually.\n   </p>\n   {/if}\n\n</div>\n\n<style>\n\n   /* Plot (main container) */\n   :global(.plot) {\n      font-family: Arial, Helvetica, sans-serif;\n\n      display: grid;\n      grid-template-columns: min-content 1fr;\n      grid-template-rows: auto 1fr auto;\n      grid-template-areas:\n         \". title\"\n         \"ylab axes\"\n         \". xlab\";\n\n      box-sizing: border-box;\n      background: #fefefe;\n      min-width: 100px;\n      min-height: 50px;\n      width: 100%;\n      height: 100%;\n      padding: 0;\n      margin: 0;\n   }\n\n   :global(.plot_small) {\n      font-size: 11px;\n   }\n\n   :global(.plot_medium) {\n      font-size: 13px;\n   }\n\n   :global(.plot_large) {\n      font-size: 16px;\n   }\n\n   :global(.plot_error) {\n      display: flex;\n   }\n\n   :global(.plot_error > .axes-wrapper) {\n      display: none;\n   }\n\n   :global(.message_error) {\n      font-size: 1.2em;\n      color: crimson;\n      padding: 20px;\n      text-align: center;\n   }\n\n   /* Axes (coordinate system) */\n   .axes-wrapper {\n      grid-area: axes;\n      position:relative;\n      box-sizing: border-box;\n      display: flex;\n      width: 100%;\n      height: 100%;\n      padding: 0;\n      margin: 0;\n   }\n\n   :global(.axes) {\n      display: block;\n      box-sizing: border-box;\n      position:absolute;\n\n      padding: 0;\n      margin: 0;\n      height: 100%;\n      width: 100%;\n      max-height: 100%;\n      max-width: 100%;\n      min-height: 100%;\n      min-width: 100%;\n   }\n\n   :global(.axes__xlabel) {\n      grid-area: xlab;\n      font-size: 1.0em;\n      font-weight: 600;\n      padding: 0.25em;\n      text-align: center;\n   }\n\n\n   :global(.axes__ylabel) {\n      grid-area: ylab;\n      font-size: 1.0em;\n      font-weight: 600;\n      padding: 0.25em;\n      text-align: center;\n      vertical-align: middle;\n      display: flex;\n   }\n\n   :global(.axes__ylabel > span) {\n      width: 1.5em;\n      line-height: 1.5em;\n      display: inline-block;\n      writing-mode: vertical-rl;\n      transform: rotate(180deg);\n   }\n\n\n   :global(.axes__title) {\n      background: transparent;\n      grid-area: title;\n\n      font-size: 1.3em;\n      font-weight: bold;\n      line-height: 1.2em;\n      padding: 0.5em 0;\n      text-align: center;\n   }\n\n   /* Axis */\n   :global(.axis-labels) {\n      fill: #303030;\n      font-size: 0.95em;\n   }\n\n   /* Data labels */\n   :global(.labels) {\n      fill: #606060;\n      font-size: 0.90em;\n   }\n\n   :global(.labels) {\n      visibility: hidden;\n      transition:visibility 0.25s linear, opacity 0.25s linear;\n      opacity: 0;\n   }\n\n</style>","export const Colors = {\n   \"AXIS_LINE\": \"#303030\",\n   \"AXIS_TICK\": \"#606060\",\n   \"WHITE\":     \"#fff\",\n   \"BLACK\":     \"#000\",\n   \"GRAY\":      \"#909090\",\n   \"MIDDLEGRAY\": \"#dadada\",\n   \"LIGHTGRAY\": \"#f0f0f0\",\n   \"DARKGRAY\":  \"#606060\",\n\n   \"PRIMARY\": \"#2266ff\",\n   \"PRIMARY_TEXT\": \"#333\",\n}\n\n\n","<script>\n   import { getContext } from 'svelte';\n   import { Colors } from './Colors';\n\n   // input parameters\n   export let slot = \"xaxis\";          // slot the component must be placed in\n   export let ticks = undefined;       // vector with numeric tick positions in plot units\n   export let tickLabels = ticks;      // vector with labels for each tick\n   export let showGrid = false;        // logical, show or not grid lines\n\n   // set up tick mode\n   const tickMode = ticks === undefined ? \"auto\" : \"manual\";\n\n   /* sanity checks of input parameters */\n   if (slot !== \"xaxis\") {\n      throw(\"Component XAxis must have \\\"slot='xaxis'\\\" attribute.\")\n   }\n\n   if (ticks !== undefined && !Array.isArray(ticks)) {\n      throw(\"XAxis: 'ticks' must be a vector of numbers.\")\n   }\n\n   if (ticks !== undefined && !(Array.isArray(tickLabels) && tickLabels.length == ticks.length)) {\n      throw(\"XAxis: 'tickLabels' must be a vector of the same size as ticks.\")\n   }\n\n   /* styles for axis and grid lines */\n   const axisLineStyleStr = `stroke:${Colors.DARKGRAY};line-width:1px;`;\n   const gridLineStyleStr = `stroke:${Colors.MIDDLEGRAY};stroke-opacity:${showGrid?1:0};stroke-dasharray:2px;`;\n\n\n   // get axes context and adjust x margins\n   const axes = getContext('axes');\n   axes.addXAxisMargins();\n\n   // get reactive variables needed to compute coordinates\n   const xLim = axes.xLim;\n   const yLim = axes.yLim;\n   const axesWidth = axes.width;\n   const axesHeight = axes.height;\n   const scale = axes.scale;\n   const isOk = axes.isOk;\n\n   // reactive variables for coordinates of axis lines\n   $: x = axes.scaleX($xLim, $xLim, $axesWidth);\n   $: y = axes.scaleY($yLim, $yLim, $axesHeight);\n\n   // reactive variables for ticks and their coordinates\n   $: dy = $scale === \"small\" ? 7 : 10;\n   $: tickNum = axes.TICK_NUM[$scale];\n   $: ticks = tickMode === \"auto\" ? axes.getAxisTicks(undefined, $xLim, tickNum, true) : ticks;\n   $: tickLabels = tickMode === \"auto\" ? ticks : tickLabels;\n   $: ticksX = axes.scaleX(ticks, $xLim, $axesWidth);\n   $: ticksY = y === undefined ? undefined : [y[0], y[0] + dy];\n</script>\n\n{#if $isOk && x !== undefined && y !== undefined }\n   <g class=\"mdaplot__axis mdaplot__xaxis\">\n   {#each ticksX as tx, i}\n      <line x1=\"{tx}\" x2=\"{tx}\" y1=\"{y[0]}\" y2=\"{y[1]}\" style=\"{gridLineStyleStr}\"></line>\n      <line x1=\"{tx}\" x2=\"{tx}\" y1=\"{ticksY[0]}\" y2=\"{ticksY[1]}\" style=\"{axisLineStyleStr}\"></line>\n      <text x=\"{tx}\" y=\"{ticksY[1]}\" dx=\"0\" dy=\"{dy}\" class=\"mdaplot__axis-labels\" dominant-baseline=\"middle\" text-anchor=\"middle\">{tickLabels[i]}</text>\n   {/each}\n   <line x1=\"{x[0]}\" x2=\"{x[1]}\" y1=\"{y[0]}\" y2=\"{y[0]}\"  style=\"{axisLineStyleStr}\"></line>\n   </g>\n{/if}\n\n<style>\n</style>\n","<script>\n   import { getContext } from 'svelte';\n   import { Colors } from './Colors';\n\n   /* input parameters */\n\texport let xStart;\n   export let xEnd;\n   export let yStart;\n   export let yEnd;\n   export let lineColor = Colors.PRIMARY;\n   export let lineType = 1;\n   export let lineWidth = 1;\n\n   /* sanity check for input parameters */\n   if (!Array.isArray(xStart) || !Array.isArray(xEnd) || !Array.isArray(yStart) || !Array.isArray(yEnd)) {\n      throw(\"Segments: parameters 'xStart', 'yStart', 'xEnd' and 'yEnd' must be vectors.\")\n   }\n\n   const n = xStart.length;\n   if (xEnd.length !== n || yStart.length !== n || yEnd.length !== n) {\n      throw(\"Segments: parameters 'xStart', 'yStart', 'xEnd' and 'yEnd' should have the same length.\")\n   }\n\n   // get axes context and reactive variables needed to compute coordinates\n   const axes = getContext('axes');\n   const xLim = axes.xLim;\n   const yLim = axes.yLim;\n   const axesWidth = axes.width;\n   const axesHeight = axes.height;\n   const scale = axes.scale;\n\n   // reactive variables for coordinates of data points in pixels (and line style)\n   $: x1 = axes.scaleX(xStart, $xLim, $axesWidth);\n   $: x2 = axes.scaleX(xEnd, $xLim, $axesWidth);\n   $: y1 = axes.scaleY(yStart, $yLim, $axesHeight);\n   $: y2 = axes.scaleY(yEnd, $yLim, $axesHeight);\n   $: lineStyleStr = `stroke:${lineColor};stroke-width: ${lineWidth}px;stroke-dasharray:${axes.LINE_STYLES[$scale][lineType - 1]}`;\n\n</script>\n\n{#if x1 !== undefined && y1 !== undefined}\n   {#each x1 as v, i}\n      <line x1=\"{x1[i]}\" x2=\"{x2[i]}\" y1=\"{y1[i]}\" y2=\"{y2[i]}\" style=\"{lineStyleStr}\"></line>\n   {/each}\n{/if}\n\n<style>\n</style>\n","<script>\n   /****************************************************\n   * TextLabels component                              *\n   * --------------------                              *\n   * shows a series of text labels on the plot         *\n   * can be used as basis for marker plot              *\n   *****************************************************/\n\n   import { getContext } from 'svelte';\n   import { Colors } from './Colors';\n\n   // input parameters\n\texport let xValues;\n   export let yValues;\n   export let labels;\n   export let pos = 0;\n   export let faceColor = Colors.PRIMARY_TEXT;\n   export let borderColor = \"transparent\";\n   export let borderWidth = 0;\n   export let textSize = 1;\n   export let style = \"\";\n   export let title = \"series_text\";\n\n   // text-anchor values depending on position\n   const textAnchors = [\"middle\", \"middle\", \"start\", \"middle\", \"end\"];\n\n   // sanity check for input parameters\n   if (!Array.isArray(xValues) || !Array.isArray(yValues) || xValues.length !== yValues.length) {\n      throw(\"TextLabels: parameters 'xValues' and 'yValues' must be vectors of the same length.\")\n   }\n\n   // multiply label values if needed\n   $: {\n      const n = xValues.length;\n      if (!Array.isArray(labels)) labels = Array(n).fill(labels);\n\n      // workaround for an issue when xValues and yValues are changed in parent app\n      // but array of labels is still the same as in the\n      if (labels.length != n) labels = Array(n).fill(labels[0]);\n\n      // check that the length of labels vector is correct\n      if (labels.length !== n) {\n         throw(\"TextLabels: parameter 'labels' must be a single text value or a vector of the same size as 'x' and 'y'.\")\n      }\n   }\n\n   // get axes context and reactive variables needed to compute coordinates\n   const axes = getContext('axes');\n   const xLim = axes.xLim;\n   const yLim = axes.yLim;\n   const axesWidth = axes.width;\n   const axesHeight = axes.height;\n   const scale = axes.scale;\n\n   // reactive variables for coordinates of data points in pixels\n   $: x = axes.scaleX(xValues, $xLim, $axesWidth);\n   $: y = axes.scaleY(yValues, $yLim, $axesHeight);\n   $: dx = [0, 0, 1, 0, -1][pos] * axes.LABELS_MARGIN[$scale];\n   $: dy = [0, 1, 0, -1, 0][pos] * axes.LABELS_MARGIN[$scale];\n\n   // styles for the elements\n   $: textStyleStr = `fill:${faceColor};stroke-width:${borderWidth}px;stroke:${borderColor};\n      font-size:${textSize}em; text-anchor:${textAnchors[pos]};`;\n</script>\n\n{#if x !== undefined && y !== undefined}\n   <g class=\"series {style}\" title={title} style={textStyleStr} >\n   {#each x as v, i}\n      <text data-id={i} x={x[i]} y={y[i]} dx={dx} dy={dy}>{@html labels[i]}</text>\n   {/each}\n   </g>\n{/if}\n\n<style>\n   text, text > :global(tspan) {\n      dominant-baseline: middle;\n   }\n</style>","<script>\n   import { getContext } from 'svelte';\n   import { Colors } from './Colors';\n\n   /* input parameters */\n\texport let left;\n   export let top;\n   export let dx = \"0\";\n   export let dy = \"1.25em\";\n   export let elements;\n   export let faceColor = Colors.PRIMARY_TEXT;\n   export let borderColor = \"transparent\";\n   export let borderWidth = 0;\n   export let textSize = 1;\n\n   // get axes context and reactive variables needed to compute coordinates\n   const axes = getContext('axes');\n   const xLim = axes.xLim;\n   const yLim = axes.yLim;\n   const axesWidth = axes.width;\n   const axesHeight = axes.height;\n   const scale = axes.scale;\n\n   // reactive variables for coordinates of data points in pixels\n   $: x = axes.scaleX([left], $xLim, $axesWidth);\n   $: y = axes.scaleY([top], $yLim, $axesHeight);\n\n   // styles for bars and labels\n   $: textStyleStr = `fill:${faceColor};stroke-width:${borderWidth}px;stroke:${borderColor};font-size:${textSize}em;`;\n</script>\n\n{#if x !== undefined && y !== undefined && elements.length > 0}\n   <text style={textStyleStr} x={x} y={y} dx={dx} dy={dy} dominant-baseline=\"middle\" text-anchor=\"start\">\n      {#each elements as el, i}\n         <tspan {x} {dx} dy={i === 0 ? 0 : dy}>{@html el}</tspan>\n      {/each}\n   </text>\n{/if}","/**********************************************\n * Functions for statistical tests            *\n **********************************************/\n\n/**\n * Returns a p-value for any test\n * @param {function} pfun - reference to a CDF function (e.g. pnorm)\n * @param {number} crit - critical value for the test (e.g. z-score or t-score)\n * @param {string} tail - which tail to use (\"left\", \"right\", or \"both\")\n * @param {Array} params - additional parameters to CDF function\n * @returns {number} - a p-value for the test\n */\nexport function getPValue(pfun, crit, tail, params = []) {\n\n   if (tail === \"left\") {\n      return(pfun(crit, ...params));\n   }\n\n   if (tail === \"right\") {\n      return(1 - pfun(crit, ...params));\n   }\n\n   if (tail === \"both\") {\n      let p = pfun(crit, ...params);\n      return min([p, 1 - p]) * 2;\n   }\n}\n\n\n/**\n * Makes one-sample t-test for a mean\n * @param {number[]} x - vector with sample values\n * @param {number} mu - assumed mean value for population (H0)\n * @param {number} alpha - significance level (used to compute confidence interval)\n * @param {string} tail - which tail to use (\"left\", \"right\", or \"both\")\n * @returns {Object} - a JSON with test results\n */\nexport function tTest1(x, mu = 0, alpha = 0.05, tail = \"both\") {\n\n   if (typeof(mu) !== \"number\") {\n      throw Error(\"Parameter 'mu' should be a number.\");\n   }\n\n   const nx = x.length;\n\n   const effectExpected = mu;\n   const effectObserved = mean(x);\n   const se = sd(x) / Math.sqrt(nx);\n   const tValue = (effectObserved - effectExpected) / se;\n   const DoF = nx - 1\n   const errMargin = qt(1 - alpha/2, DoF) * se;\n\n   return {\n      test: \"One sample t-test\",\n      effectExpected: mu,\n      effectObserved: effectObserved,\n      se: se,\n      tValue: tValue,\n      alpha: alpha,\n      tail: tail,\n      DoF: DoF,\n      pValue: getPValue(pt, tValue, tail, [DoF]),\n      ci: [effectObserved - errMargin, effectObserved + errMargin]\n   };\n}\n\n/**\n * Makes two-sample t-test for a difference of means assuming population variances equal\n * @param {number[]} x - vector with sample 1 values\n * @param {number[]} y - vector with sample 2 values\n * @param {number} alpha - significance level (used to compute confidence interval)\n * @param {string} tail - which tail to use (\"left\", \"right\", or \"both\")\n * @returns {Object} - a JSON with test results\n */\nexport function tTest2(x, y, alpha = 0.05, tail = \"both\") {\n   const nx = x.length;\n   const mx = mean(x);\n   const my = mean(y);\n   const ny = y.length;\n\n   const effectExpected = 0;\n   const effectObserved = mx - my;\n   const se = Math.sqrt( (sd(x)**2 / nx) + (sd(y)**2 / ny));\n   const tValue = (effectObserved - effectExpected) / se;\n   const DoF = (nx - 1) + (ny - 1);\n   const errMargin = qt(1 - alpha/2, DoF) * se;\n\n   return {\n      test: \"Two sample t-test\",\n      effectExpected: effectExpected,\n      effectObserved: effectObserved,\n      se: se,\n      tValue: tValue,\n      alpha: alpha,\n      tail: tail,\n      DoF: DoF,\n      pValue: getPValue(pt, tValue, tail, [DoF]),\n      ci: [effectObserved - errMargin, effectObserved + errMargin]\n   };\n}\n\n/**********************************************\n *\n * Functions for computing single statistics  *\n **********************************************/\n\n/**\n * Computes kurtosis of values\n * @param {number[]} x - vector with values\n * @returns {number}\n */\nexport function kurtosis(x) {\n   let n = x.length;\n   let m = mean(x);\n\n   let m4 = 0.0;\n   let m2 = 0.0;\n   for (let i = 0; i < n; i++) {\n      m2 = m2 + Math.pow((x[i] - m), 2);\n      m4 = m4 + Math.pow((x[i] - m), 4);\n   }\n\n   return (m4/n) / Math.pow((m2/n), 2);\n}\n\n\n/**\n * Computes skewness of values\n * @param {number[]} x - vector with values\n * @returns {number}\n */\nexport function skewness(x) {\n   let n = x.length;\n   let m = mean(x);\n\n   let m3 = 0.0;\n   let m2 = 0.0;\n   for (let i = 0; i < n; i++) {\n      m2 = m2 + Math.pow((x[i] - m), 2);\n      m3 = m3 + Math.pow((x[i] - m), 3);\n   }\n\n   return (m3/n) / Math.pow((m2/n), 1.5);\n}\n\n\n/**\n * Finds smallest value in a vector\n * @param {number[]} x - vector with values\n * @returns {number}\n */\nexport function min(x) {\n   let n = x.length;\n   let min = Number.POSITIVE_INFINITY\n\n   while (n--) min = x[n] < min ? x[n] : min;\n   return min;\n}\n\n\n/**\n * Finds largest value in a vector\n * @param {number[]} x - vector with values\n * @returns {number}\n */\nexport function max(x) {\n   let n = x.length;\n   let max = Number.NEGATIVE_INFINITY\n\n   while (n--) max = x[n] > max ? x[n] : max;\n   return max;\n}\n\n\n/**\n * Computes sum of all values in a vector\n * @param {number[]} x - vector with values\n * @returns {number}\n */\nexport function sum(x) {\n   let s = 0;\n   for (let i = 0; i < x.length; i++) {\n      s = s + x[i];\n   }\n\n   return s;\n}\n\n\n/**\n * Computes product of all value in a vector\n * @param {number[]} x - vector with values\n * @returns {number}\n */\nexport function prod(x) {\n   let p = 1;\n   for (let i = 0; i < x.length; i++) {\n      p = p * x[i];\n   }\n\n   return p;\n}\n\n\n/**\n * Computes mean (average) value for a vector\n * @param {number[]} x - vector with values\n * @returns {number}\n */\nexport function mean(x) {\n   return sum(x) / x.length;\n}\n\n\n/**\n * Computes covariance between two vectors\n * @param {number[]} x - vector with values\n * @param {number[]} y - vector with values\n * @param {boolean} biased - compute a biased version with n degrees of freedom or not (with n-1).\n * @param {number} mx - mean of x values (if already known)\n * @param {number} my - mean of y values (if already known)\n * @returns {number}\n */\nexport function cov(x, y, biased = false, mx = undefined, my = undefined) {\n\n   const n = x.length;\n\n   if (y.length !== n) {\n      throw Error(\"Vectors 'x' and 'y' must have the same length.\");\n   }\n\n   if (n < 2) {\n      throw Error(\"Vectors 'x' and 'y' must have at least two values.\");\n   }\n\n   if (mx === undefined) mx = mean(x);\n   if (my === undefined) my = mean(y);\n\n   let cov = 0;\n   for (let i = 0; i < n; i++) {\n      cov = cov + (x[i] - mx) * (y[i] - my);\n   }\n\n   return cov / (biased ? n : n - 1);\n}\n\n\n/**\n * Computes variance for a vector\n * @param {number[]} x - vector with values\n * @param {boolean} biased - compute a biased version with n degrees of freedom or not (with n-1).\n * @param {number} m - mean value (e.g. if already computed).\n * @returns {number}\n */\nexport function variance(x, biased = false, m = undefined) {\n   return cov(x, x, biased, m, m);\n}\n\n\n/**\n * Computes standard deviation for a vector\n * @param {number[]} x - vector with values\n * @param {boolean} biased - compute a biased version with n degrees of freedom or not (with n-1).\n * @param {number} m - mean value (e.g. if already computed).\n * @returns {number}\n */\nexport function sd(x, biased = false, m = undefined) {\n   return Math.sqrt(variance(x, biased, m));\n}\n\n\n/**\n * Computes correlation between two vectors\n * @param {number[]} x - vector with values\n * @param {number[]} y - vector with values\n * @param {string} method - which method to use (\"pearson\" or \"spearman\")\n * @returns {number}\n */\nexport function cor(x, y, method = \"pearson\") {\n\n   if (method === \"spearman\") {\n      return cor(rank(x), rank(y));\n   }\n\n   return cov(x, y) / (sd(x) * sd(y));\n}\n\n\n\n/***************************************************\n * Functions for computing vectors of statistics   *\n ***************************************************/\n\n\n/**\n * Computes a p-th quantile/quantiles for a numeric vector\n * @param {number[]} x - vector with values\n * @param {number|number[]} p - probability (one value or a vector)\n * @returns {number}\n */\nexport function quantile(x, p) {\n\n   x = sort(x);\n   const n = x.length;\n\n   if (!Array.isArray(p)) p = [p];\n   if (typeof(p[0]) !== \"number\" || min(p) < 0 || max(p) > 1) {\n      throw new Error(\"Parameter 'p' must be between 0 and 1 (both included).\");\n   }\n\n   function q(x, p) {\n      const h = (n - 1) * p + 1;\n      const n1 = Math.floor(h);\n      const n2 = Math.ceil(h);\n      return x[n1 - 1] + (x[n2 - 1] - x[n1 - 1]) * (h - Math.floor(h));\n   }\n\n   const out =  p.map(v => q(x, v));\n   return p.length == 1 ? out[0] : out;\n}\n\n\n/**\n * Generate a sequence of n numbers between min and max.\n * @param {number} min - first value in the sequence\n * @param {number} max - last value in the sequence\n * @param {number} n - number of values in the sequence\n * @returns {number[]} array with the sequence values\n */\nexport function seq(min, max, n) {\n\n   if (n < 2) {\n      throw new Error(\"Parameter 'n' should be ≥ 2.\");\n   }\n\n   if (n === undefined && Number.isInteger(min) && Number.isInteger(max)) {\n      n = max - min + 1;\n   }\n\n   const step = (max - min + 0.0) / (n - 1 + 0.0)\n   let out = [...Array(n)].map((x, i) => min + i * step);\n\n   // if step is smaller than 1 round values to remove small decimals accidentally added by JS\n   if (Math.abs(step) < 1) {\n      const r = Math.pow(10, Math.round(-Math.log10(step)) + 1);\n      out = out.map(v => Math.round((v + Number.EPSILON) * r) / r)\n   }\n\n   return(out)\n}\n\n\n/**\n * Finds a range of values in a vector (min and max)\n * @param {number[]} x - vector with values\n * @returns {number[]} array with min and max values\n */\nexport function range(x) {\n   return [min(x), max(x)];\n}\n\n\n/**\n * Computes a range of values in a vector with a margin\n * @param {number[]} x - vector with values\n * @param {number} margin - margin in parts of one (e.g. 0.1 for 10% or 2 for 200%)\n * @returns{number[]} array with marginal range boundaries\n */\nexport function mrange(x, margin = 0.05) {\n   const mn = min(x);\n   const mx = max(x);\n   const d = mx - mn;\n\n   return [mn - d * margin, max(x) + d * margin];\n}\n\n\n/**\n * Splits range of vector values into equal intervals\n * @param {number[]} x - vector with values\n * @param {number} n - number of intervals\n * @returns {number[]} vector with boundaries of the intervals\n */\nexport function split(x, n) {\n   if (x === undefined || !Array.isArray(x) || x.length < 2) {\n      throw new Error(\"split: 'x' must bet a vector with numbers.\");\n   }\n\n   if (n === undefined || n < 2) {\n      throw new Erro(\"split: 'n' must be a positive integer number.\");\n   }\n\n   const mn = min(x);\n   const mx = max(x);\n\n   if (mn === mx) {\n      throw new Error(\"split: values in a vector 'x' should vary.\");\n   }\n\n   const step = (mx - mn) / n;\n   return Array.from({length: n + 1}, (v, i) => mn + i * step + 0.0);\n}\n\n\n/**\n * Counts how many values from a vector falls into provided intervals (bins)\n * @param {number[]} x - vector with values\n * @param {number[]} bins - vector with bins boundaries\n * @returns {number[]} vector with counts for each bean\n */\nexport function count(x, bins) {\n\n   if (x === undefined || !Array.isArray(x) ||x.length < 2) {\n      throw new Error(\"count: 'x' must be a vector with numbers.\")\n   }\n\n   if (bins === undefined || !Array.isArray(bins) || bins.length < 2) {\n      throw new Error(\"count: 'bins' must be a vector with numbers.\")\n   }\n\n   const n = bins.length;\n\n   // add a bit extra to right side of the last bin\n   bins[n - 1] = bins[n - 1] * 1.0001\n\n   // count\n   let counts = Array(n - 1).fill(0);\n   for (let i = 0; i < x.length; i++) {\n      for (let j = 0; j < n - 1; j++) {\n         if (x[i] >= bins[j] && x[i] < bins[j + 1]) counts[j] = counts[j] + 1;\n      }\n   }\n   return counts;\n}\n\n\n/**\n * Computes middle points between values of a vector\n * @param {number[]} x - vector with values\n * @returns {number[]} vector with middle points\n */\nexport function mids(x) {\n   return x.slice(1).map((v, i) => (0.5 * (v + x[i])));\n}\n\n\n/**\n * Computes difference between all adjacent values in a vector\n * @param {number[]} x - vector with values\n * @returns {number[]} vector with the differences\n */\nexport function diff(x) {\n   return x.slice(1).map( (y, i) => (y - x[i]));\n}\n\n\n/**\n * Finds outliers in a vector based on inter-quartile range distance\n * @param {Array} x - vector with values\n * @param {number} Q1 - first quartile (optional parameter)\n * @param {Array} Q3 - third quartile (optional parameter)\n * @returns {Array} vector with outliers or empty vector if none were found.\n */\nexport function getOutliers(x, Q1 = undefined, Q3 = undefined) {\n\n   if (Q1 === undefined) Q1 = quantile(x, 0.25);\n   if (Q3 === undefined) Q3 = quantile(x, 0.75);\n\n   const IQR = Q3 - Q1;\n   const bl = Q1 - 1.5 * IQR\n   const bu = Q3 + 1.5 * IQR\n   return(x.filter(v => v < bl || v > bu));\n}\n\n\n/**\n * Returns ranks of values in a vector (ranks start from 1, not 0)\n * @param {number[]} x - vector with values\n * @returns {number[]} vector with ranks\n */\nexport function rank(x) {\n   const y = [...x].sort((a, b) => a - b);\n   return(x.map(v => y.indexOf(v) + 1));\n}\n\n\n/**\n * Generate probability points for QQ plot\n * @param {number} n - number of points\n * @returns {Array} a sequence of probabilities between 0 and 1\n */\nexport function ppoints(n) {\n   const a = n < 10 ? 3.0/8.0 : 0.5;\n   return Array.from({length: n}, (v, i) => (i + 1 - a) / (n + (1 - a) - a));\n}\n\n\n/**\n * Computes cumulative sums for the vector values\n * @param {number[]} x - vector with values\n * @returns {number[]}\n */\nexport function cumsum(x) {\n   let s = 0;\n   return x.map(v => s += v);\n}\n\n\n\n/***********************************************\n * Functions for theoretical distribution      *\n ***********************************************/\n\n\n/**\n * Generates 'n' random numbers from a uniform distribution\n * @param {number} n - amount of numbers to generate\n * @param {number} a - smallest value (min) of the population\n * @param {number} b - largest value (max) of the population\n * @returns {number[]} vector with generated numbers\n */\nexport function runif(n, a = 0, b = 1) {\n   let out = Array(n);\n   for (let i = 0; i < n; i++) out[i] = (a + Math.random() * (b - a));\n   return out;\n}\n\n\n/**\n * Probability density function for uniform distribution\n * @param {Array} x - vector of values\n * @param {number} a - smallest value (min) of the population\n * @param {number} b - largest value (max) of the population\n * @returns {Array} vector with densities\n */\nexport function dunif(x, a = 0, b = 1) {\n\n   if (!Array.isArray(x)) x = [x];\n\n   const n = x.length;\n   const A = 1 / (b - a);\n   let d = Array(n);\n\n   for (let i = 0; i < n; i++) {\n      d[i] = (x[i] < a || x[i] > b ) ? 0 : A;\n   }\n\n   return d;\n}\n\n\n/**\n * Cumulative distribution function for uniform distribution\n * @param {Array} x - vector of values\n * @param {number} a - smallest value (min) of the population\n * @param {number} b - largest value (max) of the population\n * @returns {Array} vector with probabilities\n */\nexport function punif(x, a = 0, b = 1) {\n\n   if (!Array.isArray(x)) x = [x];\n\n   const n = x.length;\n   let p = Array(n);\n   for (let i = 0; i < n; i++) {\n      if (x[i] < a) {\n         p[i] = 0;\n      } else if (x[i] > b) {\n         p[i] = 1;\n      } else {\n         p[i] = (x[i] - a) / (b - a)\n      }\n   }\n\n   return p;\n}\n\n\n /**\n * Generates 'n' random numbers from a normal distribution\n * @param {number} n - amount of numbers to generate\n * @param {number} mu - average value of the population\n * @param {number} sigma - standard deviation of the population\n * @returns {Array} vector with generated numbers\n */\nexport function rnorm(n, mu = 0, sigma = 1) {\n\n   let out = Array(n);\n   for (let i = 0; i < n; i ++) {\n      const a = Math.sqrt(-2 * Math.log(Math.random()));\n      const b = 2 * Math.PI * Math.random();\n      out[i] = (a * Math.sin(b) * sigma + mu);\n   }\n\n   return out;\n}\n\n\n/**\n * Probability density function for normal distribution\n * @param {Array} x - vector of values\n * @param {number} mu - average value of the population\n * @param {number} sigma - standard deviation of the population\n * @returns {Array} vector with densities\n */\nexport function dnorm(x, mu = 0, sigma = 1) {\n\n   if (!Array.isArray(x)) x = [x];\n\n   const n = x.length;\n   const A = 1 / (Math.sqrt(2 * Math.PI) * sigma);\n   const frac = -0.5 / sigma ** 2;\n\n   let d = Array(n);\n   for (let i = 0; i < n; i++) {\n      const df = x[i] - mu;\n      d[i] = A * Math.exp(frac * df * df);\n   }\n\n   return x.length === 1 ? d[0] : d;\n}\n\n\n/**\n * Cumulative distribution function for normal distribution\n * @param {Array} x - vector of values\n * @param {number} mu - average value of the population\n * @param {number} sigma - standard deviation of the population\n * @returns {Array} vector with probabilities\n */\nexport function pnorm(x, mu = 0, sigma = 1) {\n\n   if (!Array.isArray(x)) x = [x];\n\n   const n = x.length;\n   const frac = 1 / (Math.sqrt(2) * sigma);\n\n   let p = Array(n);\n   for (let i = 0; i < n; i++) {\n      p[i] = 0.5 * (1 + erf((x[i] - mu) * frac))\n   }\n\n   return p.length === 1 ? p[0] : p;\n}\n\n/**\n * Inverse cumulative distribution function for normal distribution\n * @param {number|number[]} p - vector of probabilities or a single probability value\n * @param {number} mu - average value of the population\n * @param {number} sigma - standard deviation of the population\n * @returns {number|number[]} vector with quantiles or single quantile value\n */\nexport function qnorm(p, mu = 0, sigma = 1) {\n\n   if (Array.isArray(p)) {\n      return p.map(v => qnorm(v, mu, sigma));\n   }\n\n   if (mu !== 0 || sigma !== 1) {\n      return qnorm(p) * sigma + mu;\n   }\n\n   if (p < 0 || p > 1) {\n      throw Error(\"Parameter 'p' must be between 0 and 1.\");\n   }\n\n   if (p < 0.0000000001) return -Infinity;\n   if (p > 0.9999999999) return +Infinity;\n\n   const SP1 = 0.425;\n   const SP2 = 5.0;\n   const C1 = 0.180625;\n   const C2 = 1.6;\n\n   const a0 = 3.3871327179;\n   const a1 = 5.0434271938 * 10;\n   const a2 = 1.5929113202 * 100;\n   const a3 = 5.9109374720 * 10;\n   const b1 = 1.7895169469 * 10;\n   const b2 = 7.8757757664 * 10;\n   const b3 = 6.7187563600 * 10;\n\n   const c0 = 1.4234372777;\n   const c1 = 2.7568153900;\n   const c2 = 1.3067284816;\n   const c3 = 1.7023821103 * 0.1;\n   const d1 = 7.3700164250 * 0.1;\n   const d2 = 1.2021132975 * 0.1;\n\n   const e0 = 6.6579051150;\n   const e1 = 3.0812263860;\n   const e2 = 4.2868294337 * 0.1;\n   const e3 = 1.7337203997 * 0.01;\n   const f1 = 2.4197894225 * 0.1;\n   const f2 = 1.2258202635 * 0.01;\n\n   const q = p - 0.5;\n   let r;\n\n   if (Math.abs(q) <= SP1) {\n      r = C1 - q * q;\n      return q * (((a3 * r + a2) * r + a1) *r + a0) / (((b3 * r + b2) * r + b1) * r + 1.0);\n   }\n\n   r = q < 0 ? p : 1 - p;\n   r = Math.sqrt(-Math.log(r));\n   let res;\n\n   if (r <= SP2) {\n      r = r - C2;\n      res = (((c3 * r + c2) * r + c1) * r + c0) / ((d2 * r + d1) * r + 1.0);\n   } else {\n      r = r - SP2;\n      res = (((e3 * r + e2) * r + e1) + e0) / ((f2 * r + f1) * r + 1.0);\n   }\n\n   return q < 0 ? -res : res;\n}\n\n/**\n * Probability density function for Student's t-distribution\n * @param {number|number[]} t - t-value or a vector of t-values\n * @param {number} dof - degrees of freedom\n */\nexport function dt(t, dof) {\n\n   if (dof < 0) {\n      throw new Error(\"Parameter 'dof' should be a positive number.\");\n   }\n\n   if (Array.isArray(t)) {\n      return t.map(v => dt(v, dof));\n   }\n\n   const pow = -0.5 * (dof + 1);\n   const A = 1 / (Math.sqrt(dof) * beta(0.5, dof/2));\n   return (A * Math.pow((1 + t * t / dof), pow));\n}\n\n\n/**\n * Cumulative distribution function for Student's t-distribution\n * @param {number|number[]} t - t-value or a vector of t-values\n * @param {number} dof - degrees of freedom\n */\nexport function pt(t, dof) {\n\n   if (dof === undefined || dof === null || dof < 1) {\n      throw Error(\"Parameter 'dof' (degrees of freedom) must be an integer number >= 1.\");\n   }\n\n   if (Array.isArray(t)) {\n      return t.map(v => pt(v, dof));\n   }\n\n   // since distribution in symmetric we can use only left tail\n   if (t === 0) return 0.5;\n   if (t === -Infinity) return 0;\n   if (t === Infinity) return 1;\n   if (t > 0) return (1 - pt(-t, dof));\n\n   return integrate((x) => dt(x, dof), -Infinity, t);\n}\n\n\n/**\n * Inverse cumulative distribution function for Student's t-distribution\n * @param {number|number[]} p - probability or vector with probabilities\n * @param {number} dof - degrees of freedom\n */\nexport function qt(p, dof) {\n\n   if (dof === undefined || dof === null || dof < 1) {\n      throw Error(\"Parameter 'dof' (degrees of freedom) must be an integer number >= 1.\");\n   }\n\n   if (p < 0 || p > 1) {\n      throw Error(\"Parameter 'p' must be between 0 and 1.\");\n   }\n\n   if (Array.isArray(p)) {\n      return p.map(v => qt(v, dof));\n   }\n\n   if (p < 0.0000000001) return -Infinity;\n   if (p > 0.9999999999) return +Infinity;\n\n\n   // simple cases — exact solutions\n   if (dof === 1) {\n      return Math.tan(Math.PI * (p - 0.5));\n   }\n\n   if (dof === 2) {\n      return 2 * (p - 0.5) * Math.sqrt(2 / (4 * p * (1 - p)));\n   }\n\n   // approximation\n\n   let sign = -1;\n   if (p >= 0.5){\n      sign = +1 ;\n      p = 2 * (1 - p);\n   } else {\n      sign = -1;\n      p = 2 * p;\n   }\n\n   const a = 1.0 / (dof - 0.5);\n   const b = 48.0 / (a ** 2);\n   let c = ((20700 * a / b - 98) * a - 16) * a + 96.36;\n   const d = ((94.5 / (b + c) - 3.0)/b + 1.0) * Math.sqrt(a * Math.PI / 2) * dof;\n\n   let x = d * p;\n   let y = x ** (2.0/dof);\n\n   if (y > 0.05 + a) {\n\n      // asymptotic inverse expansion about normal\n      x = qnorm(p * 0.5);\n      y = x ** 2;\n\n      if (dof < 5) {\n         c = c + 0.3 * (dof - 4.5) * (x + 0.6);\n      }\n\n      c = (((0.05 * d * x - 5.0) * x - 7.0) * x - 2.0) * x + b + c;\n      y = (((((0.4 * y + 6.3) * y + 36.0) * y + 94.5) / c - y - 3.0)/b + 1.0) * x;\n      y = a * (y ** 2);\n      y = y > 0.002 ? Math.exp(y) - 1.0 : 0.5 * (y ** 2) + y;\n   } else {\n      y = ((1.0 / (((dof + 6.0)/(dof * y) - 0.089 * d - 0.822) * (dof + 2.0) * 3.0) + 0.5/(dof + 4.0)) * y - 1.0) *\n         (dof + 1.0)/(dof + 2.0) + 1.0/y;\n   }\n\n   return sign * Math.sqrt(dof * y);\n}\n\n\n\n/**\n * Probability density function for F-distribution\n * @param {number|number[]} F - F-value or a vector of t-values\n * @param {number} d1 - degrees of freedom\n * @param {number} d2 - degrees of freedom\n */\nexport function df(F, d1, d2) {\n\n   if (F < 0 || d1 < 0 || d2 < 0) {\n      throw new Error(\"All 3 parameters must be positive.\");\n   }\n\n   if (d2 <= d1) {\n      throw new Error(\"Parameter 'd1' must be larger 'd2'.\");\n   }\n\n   if (Array.isArray(F)) {\n      return F.map(v => df(v, d1, d2));\n   }\n\n   return Math.sqrt( ( (d1 * F)**d1 * d2**d2) / ((d1 * F + d2)**(d1 + d2))) / (F * beta(d1/2, d2/2))\n}\n\n\n/**\n * Cumulative distribution function for F-distribution\n * @param {number|number[]} F - F-value or a vector of t-values\n * @param {number} d1 - degrees of freedom\n * @param {number} d2 - degrees of freedom\n */\nexport function pf(F, d1, d2) {\n\n   if (F < 0 || d1 < 0 || d2 < 0) {\n      throw new Error(\"All 3 parameters must be positive.\");\n   }\n\n   if (d2 <= d1) {\n      throw new Error(\"Parameter 'd1' must be larger 'd2'.\");\n   }\n\n   if (Array.isArray(F)) {\n      return F.map(v => pf(v, d1, d2));\n   }\n\n   return ibeta(d1 * F / (d1 * F + d2), d1/2, d2/2)\n}\n\n\n\n/***********************************************\n * Functions for manipulations with values     *\n ***********************************************/\n\n\n/**\n * Sorts values in a vector\n * @param {Array} x - vector with values\n * @returns {Array} vector with sorted values\n */\nexport function sort(x, decreasing = false) {\n   return decreasing ? [...x].sort((a, b) => b - a) : [...x].sort((a, b) => a - b);\n}\n\n\n/**\n * Replicates values in x n times\n * @param {any} x - single value or a vector with values\n * @param {number} n - how many times to replicate\n */\nexport function rep(x, n) {\n\n   if (Array.isArray(n)) {\n      if (x.length != n.length) {\n         throw new Error(\"Parameter 'n' should be a single value or a vector of the same length as x.\");\n      }\n\n      let out = [];\n      for (let i = 0; i < n.length; i++) {\n         out.push(...rep([x[i]], n[i]));\n      }\n\n      return out;\n   }\n\n   if (!Array.isArray(x)) x = [x];\n   if (n <= 1) return x;\n\n   const nx = x.length;\n   x.length = nx * n\n   for (let i = 0; i < n - 1; i ++) {\n      for (let j = 0; j < nx; j++) {\n         x[nx * (i + 1) + j] = x[j];\n      }\n   }\n\n   return x;\n}\n\n\n/**\n * Create a subset of vectors based on a vector of indices\n * @param {number[]} x - a vector with values\n * @param {number[]} indices - a vector with element indices (first index is 1 not 0!)\n */\nexport function subset(x, indices) {\n\n   if (!Array.isArray(x)) x = [x];\n   if (!Array.isArray(indices)) indices = [indices];\n\n   if (max(indices) > x.length || min(indices) < 1) {\n      throw new Error(\"Parameter 'indices' must have values between 1 and 'x.length'.\");\n   }\n\n   const n = indices.length;\n   let out = Array(n);\n   for (let i = 0; i < n; i++) {\n      out[i] = x[indices[i] - 1];\n   }\n\n   return out;\n}\n\n\n/**\n * Generate combination of all levels of vectors\n * @param {...} args - a sequence of vectors\n */\nexport function expandGrid(...args) {\n\n   const nargs = args.length;\n   const d = args.map(v => v.length);\n   let orep = prod(d);\n\n   let grid = Array(nargs);\n   let repFac = 1;\n\n   for (let i = 0; i < nargs; i++) {\n      const x = args[i];\n      const nx = x.length;\n      orep = orep/nx;\n      grid[i] = subset(x, rep(rep(seq(1, nx, nx), rep(repFac, nx)), orep));\n      repFac = repFac * nx;\n   }\n\n   return grid;\n}\n\n\n/**\n * Shuffles values in vector x using Fisher–Yates algorithm\n * @param {Array} x - a vector with values\n */\nexport function shuffle(x) {\n  let y = [...x];\n  let n = y.length;\n  let t, i;\n\n  while (n) {\n    i = Math.floor(Math.random() * n--);\n    t = y[n];\n    y[n] = y[i];\n    y[i] = t;\n  }\n\n  return y;\n}\n\n\n/**\n * Finds index of value in x which is closest to the value a\n * @param {number[]} x - a vector with values\n * @param {number}  a - a value\n */\nexport function closestIndex(x, a) {\n   const c = x.reduce((prev, curr) => Math.abs(curr - a) < Math.abs(prev - a) ? curr : prev);\n   return x.indexOf(c);\n}\n\n\n/**\n * Rounds number (or vector of numbers) to given amount of decimals\n * @param {number | number[]} x - a vector with values\n * @return {number | number[]}\n */\nexport function round(x, n = 0) {\n   if (Array.isArray(x)) {\n      return x.map(v => round(v, n));\n   }\n   return Number.parseFloat(x.toFixed(n));\n}\n\n/**\n * Standardize (mean center and sd scale) values from a vector\n * @param {number | number[]} x - a vector with values\n * @return {number} center - value for centering the values (if undefined, will use mean(x))\n * @return {number} scale - value for scaling the values (if undefined, will use sd(x))\n *\n */\nexport function scale(x, center = undefined, scale = undefined) {\n   if (center === undefined) center = mean(x);\n   if (scale === undefined) scale = sd(x);\n\n   const n = x.length;\n   let y = Array(n);\n\n   for (let i = 0; i < n; i++) {\n      y[i] = (x[i] - center) / scale;\n   }\n\n   return y;\n}\n\n\n\n/***************************************************************\n * Mathematical functions and methods needed for computations  *\n ***************************************************************/\n\n/**\n * Computes numeric integral for function \"f\" with limits (a, b)\n * @param {function} f - a reference to a function\n * @param {number} a - lower limit for integration\n * @param {number} b - upper limit for integration\n * @param {number} acc - absolute accuracy\n * @param {number} eps - relative accuracy\n * @param {number[]} oldfs - vector of values needed for recursion\n * @returns {number} result of integration\n */\nexport function integrate(f, a, b, acc = 0.000001, eps = 0.00001, oldfs = undefined) {\n\n   if (typeof(a) !== \"number\" || typeof(b) !== \"number\") {\n      throw Error(\"Parameters 'a' and 'b' must be numbers.\");\n   }\n\n   if (b < a) {\n      throw Error(\"Parameter 'b' must be larger 'a'.\");\n   }\n\n   // special case when left limit is minus infinity\n   if (a === -Infinity && b !== Infinity) {\n      return integrate((t) => f(b - (1 - t) / t) / (t ** 2), 0, 1);\n   }\n\n   // special case when right limit is plus infinity\n   if (a !== -Infinity && b === Infinity) {\n      return integrate((t) => f(a + (1 - t) / t) / (t ** 2), 0, 1);\n   }\n\n   // special case when both limits are infinite\n   if (a === -Infinity && b === Infinity) {\n      return integrate((t) => (f((1 - t) / t) + f((t - 1) / t)) / t ** 2, 0, 1);\n   }\n\n   // constants for splitting the integration interval\n   const x = [1/6, 2/6, 4/6, 5/6];\n   const w = [2/6, 1/6, 1/6, 2/6];\n   const v = [1/4, 1/4, 1/4, 1/4];\n   const p = [1, 0, 0, 1];\n\n   let n = x.length, h = b - a;\n   let fs;\n\n   if (oldfs === undefined) {\n      fs = x.map(v => f(a + v * h));\n   } else {\n      fs = new Array(n);\n      for (let k = 0, i = 0; i < n; i++) {\n         fs[i] = p[i] === 1 ? f(a + x[i] * h) : oldfs[k++];\n      }\n   }\n\n   let q4 = 0, q2 = 0;\n   for (let i = 0; i < n; i++) {\n      q4 += w[i] * fs[i] * h;\n      q2 += v[i] * fs[i] * h;\n   }\n\n   let tol = acc + eps * Math.abs(q4);\n   let err = Math.abs((q4 - q2)/3);\n\n   if (err < tol) return q4;\n\n   acc = acc / Math.sqrt(2.);\n   let mid = (a + b) / 2;\n   let left = fs.filter((v, i) => i < n/2);\n   let right = fs.filter((v, i) => i >= n/2);\n\n   let ql = integrate(f, a, mid, eps, acc, left);\n   let qr = integrate(f, mid, b, eps, acc, right);\n   return (ql + qr);\n}\n\n\n/**\n * Error function for normal distribution\n * @param {number} x - a number\n * @returns {number} value for erf\n */\nexport function erf(x) {\n\n  const sign = (x >= 0) ? 1 : -1;\n  x = Math.abs(x);\n\n  // constants\n  const a1 =  0.254829592;\n  const a2 = -0.284496736;\n  const a3 =  1.421413741;\n  const a4 = -1.453152027;\n  const a5 =  1.061405429;\n  const p  =  0.3275911;\n\n  // approximation\n  const t = 1.0 / (1.0 + p * x);\n  const y = 1.0 - (((((a5 * t + a4) * t) + a3) * t + a2) * t + a1) * t * Math.exp(-x * x);\n  return sign * y;\n}\n\n\n/**\n * Gamma function (approximation)\n * @param {number|number[]} z - argument (one value or a vector)\n * @returns {number} value of the Gamma function\n */\nexport function gamma(z) {\n\n   if (Array.isArray(z)) {\n      return z.map(v => gamma(v));\n   }\n\n   if (z <= 0) {\n      throw new Error(\"Gamma function only works with arguments > 0.\");\n   }\n\n   // coefficients\n   const p = [\n        676.5203681218851,\n      -1259.1392167224028,\n        771.32342877765313,\n       -176.61502916214059,\n         12.507343278686905,\n         -0.13857109526572012,\n          9.9843695780195716e-6,\n          1.5056327351493116e-7\n    ];\n\n   if (z < 0.5) {\n      return Math.PI / (Math.sin(Math.PI * z) + gamma(1 - z));\n   }\n\n   z = z - 1;\n   let x = 0.99999999999980993;\n\n   for (let i = 0; i < p.length; i++) {\n      x = x + p[i] / (z + i + 1);\n   }\n\n   const t = z + p.length - 0.5;\n   return Math.sqrt(2 * Math.PI) * Math.pow(t, z + 0.5) * Math.exp(-t) * x;\n}\n\n\n/**\n * Betta function (approximation)\n * @param {number} x - first argument (one value)\n * @param {number} y - second argument (one value)\n * @returns {number} value of the Beta function\n */\nexport function beta(x, y) {\n   return gamma(x) * gamma(y) / gamma(x + y);\n}\n\n\n/**\n * Incomplete Betta function (approximation via numeric integration)\n * @param {number} x - first argument (one value)\n * @param {number} a - second argument (one value)\n * @param {number} b - third argument (one value)\n * @returns {number} value of the function\n */\nexport function ibeta(x, a, b) {\n   if (x === 0) return 0;\n   if (x === 1) return 1;\n   if (b === 1) return x ** a;\n   if (a === 1) return (1 - (1 - x)**b);\n   return integrate((t) => t ** (a - 1) * (1 - t) ** (b - 1), 0, x) / beta(a, b);\n}\n","<script>\n\n   import { getContext } from 'svelte';\n   import { mrange } from 'mdatools/stat';\n   import { Colors } from './Colors';\n   import TextLabels from './TextLabels.svelte';\n\n   // input parameters\n\texport let xValues;\n   export let yValues;\n   export let marker = 1\n   export let title = \"\";\n   export let faceColor = \"transparent\";\n   export let borderColor = Colors.PRIMARY;\n   export let borderWidth = 1;\n   export let markerSize = 1;\n\n   // TODO: implement later\n   //export let labels = yValues;\n   //export let showLabels = \"no\"; // can be \"no\", \"hover\", \"always\"\n\n   /* constants for internal use */\n   const markers = [\"●\", \"◼\", \"▲\", \"▼\", \"⬥\", \"+\", \"*\", \"⨯\"];\n   let markerSymbol;\n\n   /* sanity check of input parameters */\n   if (typeof(marker) !== \"number\" || marker < 1 || marker > markers.length) {\n      throw(`ScatterSeries: parameter 'marker' must be a number from 1 to ${markers.length}.\"`);\n   }\n\n   // to access shared parameters and methods from Axes\n   const axes = getContext('axes');\n\n   /* reactive actions related to x-values, fires when there are changes in:\n    * - xValues\n    * - marker\n    */\n   $: {\n      if (!Array.isArray(xValues)) {\n         throw(\"ScatterSeries: parameter 'xValues' must be a numeric vector.\");\n      }\n\n      const xValuesRange = mrange(xValues, 0.05);\n      axes.adjustXAxisLimits(xValuesRange);\n\n      markerSymbol = \"\";\n      markerSymbol = markers[marker - 1];\n   }\n\n   /* reactive actions related to y-values, fires when there are changes in:\n    * - yValues\n    */\n   $: {\n      if (!Array.isArray(yValues) || xValues.length != yValues.length) {\n         throw(\"BarSeries: parameter 'yValues' must be a numeric vector of the same length as 'xValues'.\");\n      }\n\n      const yValuesRange = mrange(yValues, 0.05);\n      axes.adjustYAxisLimits(yValuesRange);\n   }\n</script>\n\n<TextLabels\n   {xValues} {yValues} {faceColor} {borderColor} {borderWidth} {title}\n   style=\"series_scatter\"\n   labels={markerSymbol}\n   textSize={markerSize}\n/>\n\n<style>\n\n:global(.series_scatter > text) {\n   font-size: 1em;\n   cursor: default;\n}\n\n:global(.series_scatter > text:hover) {\n   opacity: 90%;\n}\n\n:global(.series_scatter > *:hover + .labels_hover) {\n   visibility: visible;\n   opacity: 1;\n}\n</style>\n","<script>\n   import { getContext } from 'svelte';\n   import { mrange } from 'mdatools/stat';\n   import { Colors } from './Colors';\n\n   // input parameters\n\texport let xValues;\n   export let yValues;\n   export let title = \"\";\n   export let lineWidth = 1;\n   export let lineColor = Colors.PRIMARY;\n   export let lineType = 1;\n\n   /* sanity check of input parameters */\n   if (!Array.isArray(xValues) || !Array.isArray(yValues) || xValues.length != yValues.length) {\n      throw(\"LineSeries: parameters 'xValues' and 'yValues' must be numeric vectors of the same length.\");\n   }\n\n   // compute ranges for x and y values\n   const xValuesRange = mrange(xValues, 0.05);\n   const yValuesRange = mrange(yValues, 0.05);\n\n   // get axes context and adjust axes limits\n   const axes = getContext('axes');\n   axes.adjustXAxisLimits(xValuesRange);\n   axes.adjustYAxisLimits(yValuesRange);\n\n   // get reactive variables needed to compute coordinates\n   const xLim = axes.xLim;\n   const yLim = axes.yLim;\n   const axesWidth = axes.width;\n   const axesHeight = axes.height;\n   const scale = axes.scale;\n\n   // reactive variables for coordinates of data points in pixels\n   $: x = axes.scaleX(xValues, $xLim, $axesWidth);\n   $: y = axes.scaleY(yValues, $yLim, $axesHeight);\n   $: p = x !== undefined && y !== undefined ? x.map((v, i) => `${v},${y[i]}`).join(' ') : undefined;\n   $: lineStyleStr = `fill:transparent;stroke:${lineColor};stroke-width: ${lineWidth}px;\n      stroke-dasharray:${axes.LINE_STYLES[$scale][lineType - 1]}`;\n</script>\n\n{#if p !== undefined}\n   <g class=\"series series_line\" style={lineStyleStr} title={title}>\n      <polyline class=\"line\" points={p}/>\n   </g>\n{/if}\n\n<style>\n</style>\n","<script>\n\n   import { getContext } from 'svelte';\n   import { mrange } from 'mdatools/stat';\n   import { Colors } from './Colors';\n\n   // input parameters\n\texport let xValues;\n   export let yValues;\n   export let title = \"\";\n   export let lineWidth = 1;\n   export let lineColor = Colors.PRIMARY;\n   export let fillColor = Colors.PRIMARY;\n   export let opacity = 1;\n   export let lineType = 1;\n\n   /* sanity check of input parameters */\n   if (!Array.isArray(xValues) || !Array.isArray(yValues) || xValues.length != yValues.length) {\n      throw(\"AreaSeries: parameters 'xValues' and 'yValues' must be numeric vectors of the same length.\");\n   }\n\n   // compute ranges for x and y values\n   const xValuesRange = mrange(xValues, 0.05);\n   const yValuesRange = mrange(yValues, 0.05);\n\n   // get axes context and adjust axes limits\n   const axes = getContext('axes');\n   axes.adjustXAxisLimits(xValuesRange);\n   axes.adjustYAxisLimits(yValuesRange);\n\n   // get reactive variables needed to compute coordinates\n   const xLim = axes.xLim;\n   const yLim = axes.yLim;\n   const axesWidth = axes.width;\n   const axesHeight = axes.height;\n   const scale = axes.scale;\n\n   // reactive variables for coordinates of data points in pixels\n   $: y0 = axes.scaleY([0], $yLim, $axesHeight);\n   $: x = axes.scaleX(xValues, $xLim, $axesWidth);\n   $: y = axes.scaleY(yValues, $yLim, $axesHeight);\n   $: p = x !== undefined && y !== undefined ? x.map((v, i) => `${v},${y[i]}`).join(' ') : undefined;\n   $: areaStyleStr = `opacity:${opacity};fill:${fillColor};stroke:${lineColor};stroke-width: ${lineWidth}px;stroke-dasharray:${axes.LINE_STYLES[$scale][lineType - 1]}`;\n</script>\n\n{#if p !== undefined}\n   <g class=\"series lineseries\" style=\"{areaStyleStr}\" title=\"{title}\">\n   <polygon points=\"{x[0] + \",\" + y0 + \" \" + p + \" \" + x[x.length - 1] + \",\" + y0[0]}\"/>\n   </g>\n{/if}\n\n<style>\n</style>\n","<script>\n   import { seq, dnorm, rep, mean, sd, max, mrange } from 'mdatools/stat';\n   import { Axes, XAxis, LineSeries, Segments,  TextLegend, ScatterSeries, AreaSeries } from 'svelte-plots-basic';\n   import { formatLabels } from '../../shared/graasta';\n\n   export let popMean;\n   export let popSD;\n   export let sample;\n   export let popColor;\n   export let popAreaColor;\n   export let sampColor;\n   export let limX = [80, 120];\n\n   // left position of the legend\n   $: left = limX[0] + 0.75 * (limX[1] - limX[0]);\n\n   // parameters of PDF curve\n   $: popX = seq(popMean - 3.5 * popSD, popMean + 3.5 * popSD, 100);\n   $: popY = dnorm(popX, popMean, popSD);\n\n   // sample statistics\n   $: sampY = rep(max(popY) * 0.05, sample.length);\n   $: sampMean = mean(sample);\n\n   // limits for y-axis\n   $: limY = mrange(popY, 0.01);\n\n   // text values for legend\n   $: labelsStr = formatLabels([\n      {name: \"Sample mean\", value: mean(sample).toFixed(1)},\n      {name: \"Sample sd\", value: sd(sample).toFixed(1)}\n   ])\n</script>\n\n<Axes title={`Population: µ = ${popMean}, σ = ${popSD.toFixed(1)}`} xLabel={\"Chloride in water, [mg/L]\"} {limX} {limY}>\n\n   <slot></slot>\n\n   <!-- population distribution and mean  -->\n   <LineSeries xValues={popX} yValues={popY} lineColor={popColor} />\n   <AreaSeries xValues={popX} yValues={popY} lineColor={\"transparent\"} fillColor={popAreaColor}  />\n   <Segments xStart={[sampMean]} xEnd={[sampMean]} yStart={[0]} yEnd={[max(popY)]} lineColor={sampColor} lineType={3} />\n\n   <!-- sample points and mean  -->\n   <ScatterSeries xValues={sample} yValues={sampY} borderWidth={2} markerSize={1.25} faceColor={\"transparent\"} borderColor={sampColor} />\n   <Segments xStart={[popMean]} xEnd={[popMean]} yStart={[0]} yEnd={[max(popY)]} lineColor={popColor} lineType={2} />\n\n   <!-- sample statistics -->\n   <TextLegend textSize={1.15} {left} top={max(popY) * 0.90} dx=\"0\" elements={labelsStr} />\n\n   <XAxis slot=\"xaxis\"></XAxis>\n</Axes>\n\n","<script>\n   import { max, mrange, subset, seq, rep, closestIndex } from \"mdatools/stat\";\n   import { Axes, XAxis, LineSeries, AreaSeries, Segments } from \"svelte-plots-basic\";\n\n   export let lineColor = \"#000000\";\n   export let areaColor = lineColor + \"40\";\n   export let statColor = \"#000000\";\n\n   export let x;\n   export let f;\n   export let crit = [];\n   export let tail = \"left\";\n\n   export let limX = mrange(x, 0.1);\n   export let limY = [0, max(f) * 1.2];\n   export let xLabel = \"\";\n   export let yLabel = undefined;\n   export let title = null;\n\n   let axLeft = [], axRight = [], afLeft = [], afRight = [];\n   let cxInd, cx, cf;\n\n   $: {\n      cxInd = crit.map(v => closestIndex(x, v) + 1);\n\n      cx = subset(x, cxInd);\n      cf = subset(f, cxInd);\n\n      if (tail === \"left\" || tail === \"both\") {\n         const indLeft = cxInd[0] >= 1 ? seq(1, (cxInd[0])) : [];\n         axLeft = subset(x, indLeft);\n         afLeft = subset(f, indLeft);\n      }\n\n      if (tail === \"right\" || tail === \"both\") {\n         const indRight = seq((cxInd.length > 1 ? cxInd[1] : cxInd[0]), x.length);\n         axRight = subset(x, indRight);\n         afRight = subset(f, indRight);\n      }\n   }\n</script>\n\n<!-- plot with population based CI and position of current sample proportion -->\n<Axes {limX} {limY} {xLabel} {yLabel} {title}>\n   <slot name=\"box\"></slot>\n\n   <!-- legend with statistics -->\n   <slot name=\"legend\"></slot>\n\n   <!-- area for left tail -->\n   {#if axLeft && axLeft.length > 1 && (tail === \"left\" || tail === \"both\")}\n      <AreaSeries xValues={axLeft} yValues={afLeft} lineColor=\"transparent\" fillColor={areaColor}/>\n   {/if}\n\n   <!-- area for right tail -->\n   {#if axRight !== undefined && axRight.length > 1 && (tail === \"right\" || tail === \"both\")}\n      <AreaSeries xValues={axRight} yValues={afRight} lineColor=\"transparent\" fillColor={areaColor}/>\n   {/if}\n\n   <!-- distribution curve -->\n   <LineSeries xValues={x} yValues={f} lineColor={lineColor} />\n\n   <!-- critical values -->\n   {#if cx.length > 0}\n   <Segments xStart={cx} xEnd={cx} yStart={rep(0, cf.length)} yEnd={cf} lineColor={statColor} />\n   {/if}\n\n   <slot></slot>\n   <slot name=\"yaxis\"></slot>\n   <XAxis slot=\"xaxis\" ></XAxis>\n</Axes>\n\n","<script>\n   import { mrange, max } from \"mdatools/stat\";\n   import { TextLegend } from \"svelte-plots-basic\";\n\n   // graasta shared components\n   import DistributionPlot from '../../shared/plots/DistributionPlot.svelte';\n   import { formatLabels } from \"../../shared/graasta.js\";\n\n   export let x;\n   export let f;\n   export let crit;\n   export let tail;\n   export let pValue;\n   export let alpha;\n   export let clicked;\n\n   export let showLegend = true;\n   export let H0LegendStr = \"\";\n   export let xLabel = \"\";\n\n   export let reset = false;\n   export let limX = mrange(x, 0.1);\n   export let limY = null;\n\n   export let mainColor = \"#b0b0b0\";\n   export let testFailColor = \"#ff8866\";\n\n   let nSamples = 0;\n   let nSamplesBelowAlpha = 0;\n\n   $: lineColor = pValue < alpha ? testFailColor : mainColor;\n   $: areaColor = lineColor + \"40\";\n   $: statColor = lineColor + \"90\";\n\n   $: limYLocal = limY === null ? [0, max(f) * (showLegend ? 1.45 : 1.2)] : limY;\n\n   // cumulative statistics\n   $: {\n      clicked;\n\n      // reset statistics if sample size, population proportion or a test tail has been changed\n      if (reset) {\n         nSamples = 0;\n         nSamplesBelowAlpha = 0;\n      }\n\n      // count number of samples taken for the same test conditions and how many have p-value < 0.05\n      nSamples = nSamples + 1;\n      nSamplesBelowAlpha = nSamplesBelowAlpha + (pValue < alpha);\n   }\n\n   // text values for stat table\n   $: labelsStr = formatLabels([\n      {\n         name: H0LegendStr + \", p\",\n         value: `<tspan ${pValue < alpha ? \"fill=\" + testFailColor : \"\"}>${pValue.toFixed(3)}</tspan>`\n      },\n      {\n         name: `# samples p < ${alpha}`,\n         value:  `${nSamplesBelowAlpha}/${nSamples} (${(100 * nSamplesBelowAlpha/nSamples).toFixed(1)}%)`\n      }\n   ]);\n</script>\n\n<!-- plot with population based CI and position of current sample proportion -->\n<DistributionPlot {x} {f} {xLabel} {crit} {tail} {lineColor} {areaColor} {statColor} {limX} limY={limYLocal} >\n   <slot></slot>\n   <slot name=\"legend\">\n   {#if showLegend}\n      <TextLegend textSize={1.15} left={limX[0]} top={max(f) * 1.35} dx=\"0.5em\" dy=\"1.35em\" elements={labelsStr} />\n   {/if}\n   </slot>\n</DistributionPlot>\n\n\n","<script>\n   import { seq, dt } from \"mdatools/stat\";\n   import TestPlot from \"../../shared/plots/TestPlot.svelte\";\n\n   export let testRes;\n   export let showLegend = true;\n   export let H0LegendStr = \"\";\n   export let xLabel = \"\";\n   export let limX = undefined;\n   export let limY = undefined;\n   export let mainColor = \"#808080\";\n   export let reset;\n   export let clicked;\n\n   const signs = {\"both\": \"=\", \"left\": \"≥\", \"right\": \"≤\"};\n\n   // PDF curve for sampling distribution\n   $: t = seq(-10, 10, 300)\n   $: x = t.map(v => v * testRes.se + testRes.effectExpected);\n   $: f = dt(t, testRes.DoF);\n\n   // critical values\n   $: dp = Math.abs(testRes.effectObserved - testRes.effectExpected)\n   $: crit = testRes.tail === \"both\" ? [testRes.effectExpected - dp, testRes.effectExpected + dp] : [testRes.effectObserved];\n\n   $: H0LegendStr = testRes.test === \"Two sample t-test\" ?\n      `H0: µ1 – µ2 = 0` :\n      `H0: µ ${signs[testRes.tail]} ${testRes.effectExpected.toFixed(2)}`;\n</script>\n\n<TestPlot\n   {x} {f} {crit} {showLegend} {mainColor} {xLabel} {H0LegendStr} {limX} {limY} {reset} {clicked}\n   pValue={testRes.pValue}\n   alpha={testRes.alpha}\n   tail={testRes.tail}\n>\n<slot></slot>\n</TestPlot>\n","<script>\n   import {rnorm, tTest1} from 'mdatools/stat';\n\n   // shared components\n   import {default as StatApp} from \"../../shared/StatApp.svelte\";\n   import { colors } from \"../../shared/graasta.js\";\n\n   // shared components - controls\n   import AppControlArea from \"../../shared/controls/AppControlArea.svelte\";\n   import AppControlButton from \"../../shared/controls/AppControlButton.svelte\";\n   import AppControlSwitch from \"../../shared/controls/AppControlSwitch.svelte\";\n   import AppControlRange from \"../../shared/controls/AppControlRange.svelte\";\n\n   // shared components - здщеы\n   import PopulationPlot from \"../../shared/plots/MeanPopulationPlot.svelte\";\n   import TTestPlot from \"../../shared/plots/TTestPlot.svelte\";\n\n   const popColor = colors.plots.POPULATIONS[0];\n   const popAreaColor = colors.plots.POPULATIONS_PALE[0];\n   const sampColor = colors.plots.SAMPLES[0]\n   const popMean = 100;\n\n   // variable parameters\n   let popSD = 3;\n   let sampSize = 5;\n   let tail = \"left\";\n   let sample = [];\n   let sampSizeOld;\n   let popSDOld;\n   let reset = false;\n   let clicked;\n\n\n   // when sample size or population SD changed - reset statistics and take new sample\n   $: {\n      if (sample && (sampSizeOld !== sampSize || popSDOld !== popSD)) {\n         reset = true;\n         sampSizeOld = sampSize;\n         popSDOld = popSD;\n         takeNewSample()\n      } else {\n         reset = false;\n      }\n   }\n\n   function takeNewSample() {\n      sample = rnorm(sampSize, popMean, popSD);\n      clicked = Math.random();\n   }\n\n   $: testRes = tTest1(sample, popMean, 0.05, tail);\n\n   // take first sample\n   takeNewSample()\n</script>\n\n<StatApp>\n   <div class=\"app-layout\">\n\n      <!-- plot for population individuals  -->\n      <div class=\"app-population-plot-area\">\n         <PopulationPlot {popMean} {popSD} {sample} {popAreaColor} {popColor} {sampColor}/>\n      </div>\n\n      <!-- confidence intervals and statistic table -->\n      <div class=\"app-ci-plot-area\">\n         <TTestPlot {clicked} {reset} {testRes}  />\n      </div>\n\n      <!-- control elements -->\n      <div class=\"app-controls-area\">\n         <AppControlArea>\n            <AppControlSwitch id=\"tail\" label=\"Tail\" bind:value={tail} options={[\"left\", \"both\", \"right\"]} />\n            <AppControlRange id=\"popSD\" label=\"Sigma (σ)\" bind:value={popSD} min={1} max={5} step={0.1} decNum={1} />\n            <AppControlSwitch id=\"sampleSize\" label=\"Sample size\" bind:value={sampSize} options={[5, 10, 20, 40]} />\n            <AppControlButton id=\"newSample\" label=\"Sample\" text=\"Take new\" on:click={takeNewSample} />\n         </AppControlArea>\n      </div>\n\n   </div>\n\n   <div slot=\"help\">\n      <h2>One-sample t-test</h2>\n      <p>\n         This app helps to understand how does the one sample t-test work. Here we have a normally distributed\n         population — concentration of Chloride in different parts of a water source. The null hypothesis in this case\n         is made about the population mean, µ, and, depending on a tail, you have the following options — \"both\": H0: µ = 100 mg/L,\n         \"left\": µ ≥ 100 mg/L, and \"right\": µ ≤ 100 mg/L.\n         The population in this app has µ exactly equal to 100 mg/L, so all three hypothesis are true in this case.\n         You have a possibility to change the standard deviation of the population, which by default is set to 3 mg/L\n         but you will see, that it does not influence the outcome of the test.\n      </p>\n      <p>\n         Then you can take a random sample from this population and see how far the mean of the sample\n         is from the mean of the population. The app computes a chance to get a sample as extreme as given or even\n         more extreme assuming that H0 is correct — the <strong>p-value</strong>. Usually p-value is used to assess how\n         extreme your particlar sample is for being taken from population where H0 is true. If p-value is small,\n         it is considered as unlikely event and H0 is rejected.\n      </p>\n      <p>\n         Often researchers use 5% (0.05) as a threshold for that. It is called <em>significance limit</em>. You will see\n         that if you take many samples (100 or more), you will find out that approximately 5% of the samples will have\n         p-value below 0.05 although the H0 is true. And this happens regardless the sample size. So this threshold is\n         simply a chance to make a wrong decision by rejection the correct H0. So, if you use 0.05 you have 5% chance to\n         make a wrong decision and e.g. \"see\" an effect, which does not exist.\n      </p>\n   </div>\n</StatApp>\n\n<style>\n\n.app-layout {\n   width: 100%;\n   height: 100%;\n   position: relative;\n   display: grid;\n   grid-template-areas:\n      \"pop ciplot\"\n      \"pop controls\"\n      \"pop .\";\n   grid-template-rows: max(250px, 30%) 1fr min-content;\n   grid-template-columns: 65% 35%;\n}\n\n\n.app-population-plot-area {\n   grid-area: pop;\n   box-sizing: border-box;\n   height: 100%;\n   width: 100%;\n   padding-right: 20px;\n}\n\n\n.app-ci-plot-area {\n   grid-area: ciplot;\n}\n\n.app-controls-area {\n   padding-top: 20px;\n   grid-area: controls;\n}\n\n</style>","import App from './App.svelte';\n\nconst app = new App({\n\ttarget: document.getElementById(\"graasta-app-container\"),\n});\n\nexport default app;"],"names":["noop","run","fn","blank_object","Object","create","run_all","fns","forEach","is_function","thing","safe_not_equal","a","b","component_subscribe","component","store","callback","$$","on_destroy","push","callbacks","unsub","subscribe","unsubscribe","create_slot","definition","ctx","$$scope","slot_ctx","get_slot_context","tar","src","k","assign","slice","get_slot_changes","dirty","lets","undefined","merged","len","Math","max","length","i","update_slot_base","slot","slot_definition","slot_changes","get_slot_context_fn","slot_context","p","get_all_dirty_from_scope","append","target","node","appendChild","insert","anchor","insertBefore","detach","parentNode","removeChild","destroy_each","iterations","detaching","d","element","name","document","createElement","svg_element","createElementNS","text","data","createTextNode","space","empty","listen","event","handler","options","addEventListener","removeEventListener","attr","attribute","value","removeAttribute","getAttribute","setAttribute","set_data","wholeText","set_input_value","input","set_style","key","important","style","removeProperty","setProperty","toggle_class","toggle","classList","current_component","set_current_component","get_current_component","Error","createEventDispatcher","type","detail","cancelable","bubbles","e","createEvent","initCustomEvent","custom_event","call","defaultPrevented","getContext","context","get","bubble","this","dirty_components","binding_callbacks","render_callbacks","flush_callbacks","resolved_promise","Promise","resolve","update_scheduled","add_render_callback","add_flush_callback","seen_callbacks","Set","flushidx","flush","saved_component","update","pop","has","add","clear","fragment","before_update","after_update","outroing","outros","group_outros","r","c","check_outros","transition_in","block","local","delete","transition_out","o","destroy_block","lookup","bind","index","props","bound","create_component","mount_component","customElement","on_mount","m","new_on_destroy","map","filter","destroy_component","make_dirty","then","fill","init","instance","create_fragment","not_equal","append_styles","parent_component","on_disconnect","Map","skip_bound","root","ready","ret","rest","hydrate","nodes","Array","from","childNodes","children","l","intro","SvelteComponent","$destroy","$on","indexOf","splice","$set","$$props","obj","$$set","keys","getPValue","pfun","crit","tail","params","min","tTest1","x","mu","alpha","nx","effectExpected","effectObserved","mean","se","sd","sqrt","tValue","DoF","errMargin","qt","test","pValue","pt","ci","n","Number","POSITIVE_INFINITY","NEGATIVE_INFINITY","s","sum","variance","biased","y","mx","my","cov","seq","isInteger","step","out","abs","pow","round","log10","v","EPSILON","mrange","margin","mn","qnorm","sigma","isArray","Infinity","q","res","log","dt","t","dof","integrate","u","gamma","beta","tan","PI","sign","exp","rep","j","subset","indices","method","includes","f","acc","eps","oldfs","w","fs","h","q4","q2","isNaN","tol","mid","left","right","z","sin","div","create_if_block","main","showHelp","$$invalidate","colors","POPULATIONS_PALE","POPULATIONS","SAMPLES","STAT_NAME","STAT_VALUE","formatLabels","labels","labelsStr","fieldset","errormsg","label_1","id","label","button","t_value","old_blocks","get_key","dynamic","list","destroy","create_each_block","next","get_context","old_indexes","new_blocks","new_lookup","deltas","child_ctx","set","will_move","did_move","first","new_block","old_block","new_key","old_key","option","toFixed","div1","div0","span","t1","t1_value","decNum","dispatch","sliderElement","sliderContainer","isDragging","computeValue","tmpValue","getRelativePosition","sliderRect","getBoundingClientRect","parentRect","minX","maxX","width","clientX","$$value","to_number","subscriber_queue","writable","start","stop","subscribers","new_value","run_queue","subscriber","invalidate","size","if_block0","create_if_block_3","if_block1","create_if_block_2","if_block2","create_if_block_1","rect","rect_x_value","rect_y_value","rect_width_value","rect_height_value","div1_class_value","svg","defs","clipPath","g","current","niceNum","localRange","exponent","floor","fraction","niceFraction","getScale","height","limX","limY","title","xLabel","yLabel","multiSeries","AXES_MARGIN_FACTORS","small","medium","large","clipPathID","random","axesWrapper","axesMargins","xLim","yLim","scale","isOk","adjustAxisLimits","lim","newLim","adjustedLim","scaleX","doSizeScale","$isOk","margins","scaleY","setContext","addXAxisMargins","addYAxisMargins","adjustXAxisLimits","some","adjustYAxisLimits","getAxisTicks","ticks","maxTickNum","range","tickSpacing","tickMin","ceil","tickMax","LINE_STYLES","LABELS_MARGIN","TICK_NUM","ro","ResizeObserver","entries","entry","cr","contentRect","dispatchClickEvent","eventName","el","seriesTitle","elementID","dataset","observe","$scale","$yLim","$xLim","$width","$height","cpx","cpy","tagName","contains","Colors","AXIS_LINE","AXIS_TICK","WHITE","BLACK","GRAY","MIDDLEGRAY","LIGHTGRAY","DARKGRAY","PRIMARY","PRIMARY_TEXT","line","line_x__value","line_x__value_1","line_y__value","line_y__value_1","line0","line0_y__value","line0_y__value_1","line1","line1_y__value","line1_y__value_1","text_1","text_1_y_value","if_block","tickLabels","showGrid","tickMode","axisLineStyleStr","gridLineStyleStr","axes","axesWidth","axesHeight","$axesWidth","$axesHeight","dy","tickNum","ticksX","ticksY","xStart","xEnd","yStart","yEnd","lineColor","lineType","lineWidth","x1","x2","y1","y2","lineStyleStr","raw_value","text_1_x_value","innerHTML","xValues","yValues","pos","faceColor","borderColor","borderWidth","textSize","textAnchors","dx","textStyleStr","tspan","tspan_dy_value","top","elements","marker","markerSize","markers","markerSymbol","xValuesRange","yValuesRange","polyline","join","polygon","fillColor","opacity","y0","areaStyleStr","segments0_changes","segments1_changes","axes_changes","popMean","popSD","sample","popColor","popAreaColor","sampColor","popX","popY","A","frac","df","dnorm","sampY","sampMean","segments_changes","cxInd","cx","cf","areaColor","statColor","axLeft","axRight","afLeft","afRight","reduce","prev","curr","closestIndex","indLeft","indRight","textlegend_changes","clicked","showLegend","H0LegendStr","reset","mainColor","testFailColor","nSamples","nSamplesBelowAlpha","limYLocal","testplot_changes","testRes","signs","both","dp","div3","div2","sampSizeOld","popSDOld","sampSize","takeNewSample","rnorm","getElementById"],"mappings":"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"}