{"version":3,"file":"asta-b308.js","sources":["../../node_modules/svelte/internal/index.mjs","../../shared/StatApp.svelte","../../shared/controls/AppControlArea.svelte","../../shared/controls/AppControl.svelte","../../shared/controls/AppControlRange.svelte","../../shared/controls/AppControlSelect.svelte","../../shared/graasta.js","../../node_modules/svelte/store/index.mjs","../../node_modules/mdatools/stat/index.js","../../node_modules/mdatools/matrix/index.js","../../shared/plots3d/Utils.js","../../shared/plots3d/Axes.svelte","../../shared/plots3d/Colors.js","../../shared/plots3d/AxisLines.svelte","../../shared/plots3d/TextLabels.svelte","../../shared/plots3d/Axis.svelte","../../shared/plots3d/XAxis.svelte","../../shared/plots3d/YAxis.svelte","../../shared/plots3d/ZAxis.svelte","../src/AppPlot.svelte","../../shared/plots3d/Segments.svelte","../src/ModelPlot.svelte","../../shared/plots3d/ScatterSeries.svelte","../src/PointPlot.svelte","../src/PointLineEquation.svelte","../src/App.svelte","../src/main.js"],"sourcesContent":["function noop() { }\nconst identity = x => x;\nfunction assign(tar, src) {\n    // @ts-ignore\n    for (const k in src)\n        tar[k] = src[k];\n    return tar;\n}\nfunction is_promise(value) {\n    return value && typeof value === 'object' && typeof value.then === 'function';\n}\nfunction add_location(element, file, line, column, char) {\n    element.__svelte_meta = {\n        loc: { file, line, column, char }\n    };\n}\nfunction run(fn) {\n    return fn();\n}\nfunction blank_object() {\n    return Object.create(null);\n}\nfunction run_all(fns) {\n    fns.forEach(run);\n}\nfunction is_function(thing) {\n    return typeof thing === 'function';\n}\nfunction safe_not_equal(a, b) {\n    return a != a ? b == b : a !== b || ((a && typeof a === 'object') || typeof a === 'function');\n}\nlet src_url_equal_anchor;\nfunction src_url_equal(element_src, url) {\n    if (!src_url_equal_anchor) {\n        src_url_equal_anchor = document.createElement('a');\n    }\n    src_url_equal_anchor.href = url;\n    return element_src === src_url_equal_anchor.href;\n}\nfunction not_equal(a, b) {\n    return a != a ? b == b : a !== b;\n}\nfunction is_empty(obj) {\n    return Object.keys(obj).length === 0;\n}\nfunction validate_store(store, name) {\n    if (store != null && typeof store.subscribe !== 'function') {\n        throw new Error(`'${name}' is not a store with a 'subscribe' method`);\n    }\n}\nfunction subscribe(store, ...callbacks) {\n    if (store == null) {\n        return noop;\n    }\n    const unsub = store.subscribe(...callbacks);\n    return unsub.unsubscribe ? () => unsub.unsubscribe() : unsub;\n}\nfunction get_store_value(store) {\n    let value;\n    subscribe(store, _ => value = _)();\n    return value;\n}\nfunction component_subscribe(component, store, callback) {\n    component.$$.on_destroy.push(subscribe(store, callback));\n}\nfunction create_slot(definition, ctx, $$scope, fn) {\n    if (definition) {\n        const slot_ctx = get_slot_context(definition, ctx, $$scope, fn);\n        return definition[0](slot_ctx);\n    }\n}\nfunction get_slot_context(definition, ctx, $$scope, fn) {\n    return definition[1] && fn\n        ? assign($$scope.ctx.slice(), definition[1](fn(ctx)))\n        : $$scope.ctx;\n}\nfunction get_slot_changes(definition, $$scope, dirty, fn) {\n    if (definition[2] && fn) {\n        const lets = definition[2](fn(dirty));\n        if ($$scope.dirty === undefined) {\n            return lets;\n        }\n        if (typeof lets === 'object') {\n            const merged = [];\n            const len = Math.max($$scope.dirty.length, lets.length);\n            for (let i = 0; i < len; i += 1) {\n                merged[i] = $$scope.dirty[i] | lets[i];\n            }\n            return merged;\n        }\n        return $$scope.dirty | lets;\n    }\n    return $$scope.dirty;\n}\nfunction update_slot_base(slot, slot_definition, ctx, $$scope, slot_changes, get_slot_context_fn) {\n    if (slot_changes) {\n        const slot_context = get_slot_context(slot_definition, ctx, $$scope, get_slot_context_fn);\n        slot.p(slot_context, slot_changes);\n    }\n}\nfunction update_slot(slot, slot_definition, ctx, $$scope, dirty, get_slot_changes_fn, get_slot_context_fn) {\n    const slot_changes = get_slot_changes(slot_definition, $$scope, dirty, get_slot_changes_fn);\n    update_slot_base(slot, slot_definition, ctx, $$scope, slot_changes, get_slot_context_fn);\n}\nfunction get_all_dirty_from_scope($$scope) {\n    if ($$scope.ctx.length > 32) {\n        const dirty = [];\n        const length = $$scope.ctx.length / 32;\n        for (let i = 0; i < length; i++) {\n            dirty[i] = -1;\n        }\n        return dirty;\n    }\n    return -1;\n}\nfunction exclude_internal_props(props) {\n    const result = {};\n    for (const k in props)\n        if (k[0] !== '$')\n            result[k] = props[k];\n    return result;\n}\nfunction compute_rest_props(props, keys) {\n    const rest = {};\n    keys = new Set(keys);\n    for (const k in props)\n        if (!keys.has(k) && k[0] !== '$')\n            rest[k] = props[k];\n    return rest;\n}\nfunction compute_slots(slots) {\n    const result = {};\n    for (const key in slots) {\n        result[key] = true;\n    }\n    return result;\n}\nfunction once(fn) {\n    let ran = false;\n    return function (...args) {\n        if (ran)\n            return;\n        ran = true;\n        fn.call(this, ...args);\n    };\n}\nfunction null_to_empty(value) {\n    return value == null ? '' : value;\n}\nfunction set_store_value(store, ret, value) {\n    store.set(value);\n    return ret;\n}\nconst has_prop = (obj, prop) => Object.prototype.hasOwnProperty.call(obj, prop);\nfunction action_destroyer(action_result) {\n    return action_result && is_function(action_result.destroy) ? action_result.destroy : noop;\n}\n\nconst is_client = typeof window !== 'undefined';\nlet now = is_client\n    ? () => window.performance.now()\n    : () => Date.now();\nlet raf = is_client ? cb => requestAnimationFrame(cb) : noop;\n// used internally for testing\nfunction set_now(fn) {\n    now = fn;\n}\nfunction set_raf(fn) {\n    raf = fn;\n}\n\nconst tasks = new Set();\nfunction run_tasks(now) {\n    tasks.forEach(task => {\n        if (!task.c(now)) {\n            tasks.delete(task);\n            task.f();\n        }\n    });\n    if (tasks.size !== 0)\n        raf(run_tasks);\n}\n/**\n * For testing purposes only!\n */\nfunction clear_loops() {\n    tasks.clear();\n}\n/**\n * Creates a new task that runs on each raf frame\n * until it returns a falsy value or is aborted\n */\nfunction loop(callback) {\n    let task;\n    if (tasks.size === 0)\n        raf(run_tasks);\n    return {\n        promise: new Promise(fulfill => {\n            tasks.add(task = { c: callback, f: fulfill });\n        }),\n        abort() {\n            tasks.delete(task);\n        }\n    };\n}\n\n// Track which nodes are claimed during hydration. Unclaimed nodes can then be removed from the DOM\n// at the end of hydration without touching the remaining nodes.\nlet is_hydrating = false;\nfunction start_hydrating() {\n    is_hydrating = true;\n}\nfunction end_hydrating() {\n    is_hydrating = false;\n}\nfunction upper_bound(low, high, key, value) {\n    // Return first index of value larger than input value in the range [low, high)\n    while (low < high) {\n        const mid = low + ((high - low) >> 1);\n        if (key(mid) <= value) {\n            low = mid + 1;\n        }\n        else {\n            high = mid;\n        }\n    }\n    return low;\n}\nfunction init_hydrate(target) {\n    if (target.hydrate_init)\n        return;\n    target.hydrate_init = true;\n    // We know that all children have claim_order values since the unclaimed have been detached if target is not <head>\n    let children = target.childNodes;\n    // If target is <head>, there may be children without claim_order\n    if (target.nodeName === 'HEAD') {\n        const myChildren = [];\n        for (let i = 0; i < children.length; i++) {\n            const node = children[i];\n            if (node.claim_order !== undefined) {\n                myChildren.push(node);\n            }\n        }\n        children = myChildren;\n    }\n    /*\n    * Reorder claimed children optimally.\n    * We can reorder claimed children optimally by finding the longest subsequence of\n    * nodes that are already claimed in order and only moving the rest. The longest\n    * subsequence of nodes that are claimed in order can be found by\n    * computing the longest increasing subsequence of .claim_order values.\n    *\n    * This algorithm is optimal in generating the least amount of reorder operations\n    * possible.\n    *\n    * Proof:\n    * We know that, given a set of reordering operations, the nodes that do not move\n    * always form an increasing subsequence, since they do not move among each other\n    * meaning that they must be already ordered among each other. Thus, the maximal\n    * set of nodes that do not move form a longest increasing subsequence.\n    */\n    // Compute longest increasing subsequence\n    // m: subsequence length j => index k of smallest value that ends an increasing subsequence of length j\n    const m = new Int32Array(children.length + 1);\n    // Predecessor indices + 1\n    const p = new Int32Array(children.length);\n    m[0] = -1;\n    let longest = 0;\n    for (let i = 0; i < children.length; i++) {\n        const current = children[i].claim_order;\n        // Find the largest subsequence length such that it ends in a value less than our current value\n        // upper_bound returns first greater value, so we subtract one\n        // with fast path for when we are on the current longest subsequence\n        const seqLen = ((longest > 0 && children[m[longest]].claim_order <= current) ? longest + 1 : upper_bound(1, longest, idx => children[m[idx]].claim_order, current)) - 1;\n        p[i] = m[seqLen] + 1;\n        const newLen = seqLen + 1;\n        // We can guarantee that current is the smallest value. Otherwise, we would have generated a longer sequence.\n        m[newLen] = i;\n        longest = Math.max(newLen, longest);\n    }\n    // The longest increasing subsequence of nodes (initially reversed)\n    const lis = [];\n    // The rest of the nodes, nodes that will be moved\n    const toMove = [];\n    let last = children.length - 1;\n    for (let cur = m[longest] + 1; cur != 0; cur = p[cur - 1]) {\n        lis.push(children[cur - 1]);\n        for (; last >= cur; last--) {\n            toMove.push(children[last]);\n        }\n        last--;\n    }\n    for (; last >= 0; last--) {\n        toMove.push(children[last]);\n    }\n    lis.reverse();\n    // We sort the nodes being moved to guarantee that their insertion order matches the claim order\n    toMove.sort((a, b) => a.claim_order - b.claim_order);\n    // Finally, we move the nodes\n    for (let i = 0, j = 0; i < toMove.length; i++) {\n        while (j < lis.length && toMove[i].claim_order >= lis[j].claim_order) {\n            j++;\n        }\n        const anchor = j < lis.length ? lis[j] : null;\n        target.insertBefore(toMove[i], anchor);\n    }\n}\nfunction append(target, node) {\n    target.appendChild(node);\n}\nfunction append_styles(target, style_sheet_id, styles) {\n    const append_styles_to = get_root_for_style(target);\n    if (!append_styles_to.getElementById(style_sheet_id)) {\n        const style = element('style');\n        style.id = style_sheet_id;\n        style.textContent = styles;\n        append_stylesheet(append_styles_to, style);\n    }\n}\nfunction get_root_for_style(node) {\n    if (!node)\n        return document;\n    const root = node.getRootNode ? node.getRootNode() : node.ownerDocument;\n    if (root && root.host) {\n        return root;\n    }\n    return node.ownerDocument;\n}\nfunction append_empty_stylesheet(node) {\n    const style_element = element('style');\n    append_stylesheet(get_root_for_style(node), style_element);\n    return style_element.sheet;\n}\nfunction append_stylesheet(node, style) {\n    append(node.head || node, style);\n    return style.sheet;\n}\nfunction append_hydration(target, node) {\n    if (is_hydrating) {\n        init_hydrate(target);\n        if ((target.actual_end_child === undefined) || ((target.actual_end_child !== null) && (target.actual_end_child.parentNode !== target))) {\n            target.actual_end_child = target.firstChild;\n        }\n        // Skip nodes of undefined ordering\n        while ((target.actual_end_child !== null) && (target.actual_end_child.claim_order === undefined)) {\n            target.actual_end_child = target.actual_end_child.nextSibling;\n        }\n        if (node !== target.actual_end_child) {\n            // We only insert if the ordering of this node should be modified or the parent node is not target\n            if (node.claim_order !== undefined || node.parentNode !== target) {\n                target.insertBefore(node, target.actual_end_child);\n            }\n        }\n        else {\n            target.actual_end_child = node.nextSibling;\n        }\n    }\n    else if (node.parentNode !== target || node.nextSibling !== null) {\n        target.appendChild(node);\n    }\n}\nfunction insert(target, node, anchor) {\n    target.insertBefore(node, anchor || null);\n}\nfunction insert_hydration(target, node, anchor) {\n    if (is_hydrating && !anchor) {\n        append_hydration(target, node);\n    }\n    else if (node.parentNode !== target || node.nextSibling != anchor) {\n        target.insertBefore(node, anchor || null);\n    }\n}\nfunction detach(node) {\n    if (node.parentNode) {\n        node.parentNode.removeChild(node);\n    }\n}\nfunction destroy_each(iterations, detaching) {\n    for (let i = 0; i < iterations.length; i += 1) {\n        if (iterations[i])\n            iterations[i].d(detaching);\n    }\n}\nfunction element(name) {\n    return document.createElement(name);\n}\nfunction element_is(name, is) {\n    return document.createElement(name, { is });\n}\nfunction object_without_properties(obj, exclude) {\n    const target = {};\n    for (const k in obj) {\n        if (has_prop(obj, k)\n            // @ts-ignore\n            && exclude.indexOf(k) === -1) {\n            // @ts-ignore\n            target[k] = obj[k];\n        }\n    }\n    return target;\n}\nfunction svg_element(name) {\n    return document.createElementNS('http://www.w3.org/2000/svg', name);\n}\nfunction text(data) {\n    return document.createTextNode(data);\n}\nfunction space() {\n    return text(' ');\n}\nfunction empty() {\n    return text('');\n}\nfunction listen(node, event, handler, options) {\n    node.addEventListener(event, handler, options);\n    return () => node.removeEventListener(event, handler, options);\n}\nfunction prevent_default(fn) {\n    return function (event) {\n        event.preventDefault();\n        // @ts-ignore\n        return fn.call(this, event);\n    };\n}\nfunction stop_propagation(fn) {\n    return function (event) {\n        event.stopPropagation();\n        // @ts-ignore\n        return fn.call(this, event);\n    };\n}\nfunction self(fn) {\n    return function (event) {\n        // @ts-ignore\n        if (event.target === this)\n            fn.call(this, event);\n    };\n}\nfunction trusted(fn) {\n    return function (event) {\n        // @ts-ignore\n        if (event.isTrusted)\n            fn.call(this, event);\n    };\n}\nfunction attr(node, attribute, value) {\n    if (value == null)\n        node.removeAttribute(attribute);\n    else if (node.getAttribute(attribute) !== value)\n        node.setAttribute(attribute, value);\n}\nfunction set_attributes(node, attributes) {\n    // @ts-ignore\n    const descriptors = Object.getOwnPropertyDescriptors(node.__proto__);\n    for (const key in attributes) {\n        if (attributes[key] == null) {\n            node.removeAttribute(key);\n        }\n        else if (key === 'style') {\n            node.style.cssText = attributes[key];\n        }\n        else if (key === '__value') {\n            node.value = node[key] = attributes[key];\n        }\n        else if (descriptors[key] && descriptors[key].set) {\n            node[key] = attributes[key];\n        }\n        else {\n            attr(node, key, attributes[key]);\n        }\n    }\n}\nfunction set_svg_attributes(node, attributes) {\n    for (const key in attributes) {\n        attr(node, key, attributes[key]);\n    }\n}\nfunction set_custom_element_data_map(node, data_map) {\n    Object.keys(data_map).forEach((key) => {\n        set_custom_element_data(node, key, data_map[key]);\n    });\n}\nfunction set_custom_element_data(node, prop, value) {\n    if (prop in node) {\n        node[prop] = typeof node[prop] === 'boolean' && value === '' ? true : value;\n    }\n    else {\n        attr(node, prop, value);\n    }\n}\nfunction xlink_attr(node, attribute, value) {\n    node.setAttributeNS('http://www.w3.org/1999/xlink', attribute, value);\n}\nfunction get_binding_group_value(group, __value, checked) {\n    const value = new Set();\n    for (let i = 0; i < group.length; i += 1) {\n        if (group[i].checked)\n            value.add(group[i].__value);\n    }\n    if (!checked) {\n        value.delete(__value);\n    }\n    return Array.from(value);\n}\nfunction to_number(value) {\n    return value === '' ? null : +value;\n}\nfunction time_ranges_to_array(ranges) {\n    const array = [];\n    for (let i = 0; i < ranges.length; i += 1) {\n        array.push({ start: ranges.start(i), end: ranges.end(i) });\n    }\n    return array;\n}\nfunction children(element) {\n    return Array.from(element.childNodes);\n}\nfunction init_claim_info(nodes) {\n    if (nodes.claim_info === undefined) {\n        nodes.claim_info = { last_index: 0, total_claimed: 0 };\n    }\n}\nfunction claim_node(nodes, predicate, processNode, createNode, dontUpdateLastIndex = false) {\n    // Try to find nodes in an order such that we lengthen the longest increasing subsequence\n    init_claim_info(nodes);\n    const resultNode = (() => {\n        // We first try to find an element after the previous one\n        for (let i = nodes.claim_info.last_index; i < nodes.length; i++) {\n            const node = nodes[i];\n            if (predicate(node)) {\n                const replacement = processNode(node);\n                if (replacement === undefined) {\n                    nodes.splice(i, 1);\n                }\n                else {\n                    nodes[i] = replacement;\n                }\n                if (!dontUpdateLastIndex) {\n                    nodes.claim_info.last_index = i;\n                }\n                return node;\n            }\n        }\n        // Otherwise, we try to find one before\n        // We iterate in reverse so that we don't go too far back\n        for (let i = nodes.claim_info.last_index - 1; i >= 0; i--) {\n            const node = nodes[i];\n            if (predicate(node)) {\n                const replacement = processNode(node);\n                if (replacement === undefined) {\n                    nodes.splice(i, 1);\n                }\n                else {\n                    nodes[i] = replacement;\n                }\n                if (!dontUpdateLastIndex) {\n                    nodes.claim_info.last_index = i;\n                }\n                else if (replacement === undefined) {\n                    // Since we spliced before the last_index, we decrease it\n                    nodes.claim_info.last_index--;\n                }\n                return node;\n            }\n        }\n        // If we can't find any matching node, we create a new one\n        return createNode();\n    })();\n    resultNode.claim_order = nodes.claim_info.total_claimed;\n    nodes.claim_info.total_claimed += 1;\n    return resultNode;\n}\nfunction claim_element_base(nodes, name, attributes, create_element) {\n    return claim_node(nodes, (node) => node.nodeName === name, (node) => {\n        const remove = [];\n        for (let j = 0; j < node.attributes.length; j++) {\n            const attribute = node.attributes[j];\n            if (!attributes[attribute.name]) {\n                remove.push(attribute.name);\n            }\n        }\n        remove.forEach(v => node.removeAttribute(v));\n        return undefined;\n    }, () => create_element(name));\n}\nfunction claim_element(nodes, name, attributes) {\n    return claim_element_base(nodes, name, attributes, element);\n}\nfunction claim_svg_element(nodes, name, attributes) {\n    return claim_element_base(nodes, name, attributes, svg_element);\n}\nfunction claim_text(nodes, data) {\n    return claim_node(nodes, (node) => node.nodeType === 3, (node) => {\n        const dataStr = '' + data;\n        if (node.data.startsWith(dataStr)) {\n            if (node.data.length !== dataStr.length) {\n                return node.splitText(dataStr.length);\n            }\n        }\n        else {\n            node.data = dataStr;\n        }\n    }, () => text(data), true // Text nodes should not update last index since it is likely not worth it to eliminate an increasing subsequence of actual elements\n    );\n}\nfunction claim_space(nodes) {\n    return claim_text(nodes, ' ');\n}\nfunction find_comment(nodes, text, start) {\n    for (let i = start; i < nodes.length; i += 1) {\n        const node = nodes[i];\n        if (node.nodeType === 8 /* comment node */ && node.textContent.trim() === text) {\n            return i;\n        }\n    }\n    return nodes.length;\n}\nfunction claim_html_tag(nodes, is_svg) {\n    // find html opening tag\n    const start_index = find_comment(nodes, 'HTML_TAG_START', 0);\n    const end_index = find_comment(nodes, 'HTML_TAG_END', start_index);\n    if (start_index === end_index) {\n        return new HtmlTagHydration(undefined, is_svg);\n    }\n    init_claim_info(nodes);\n    const html_tag_nodes = nodes.splice(start_index, end_index - start_index + 1);\n    detach(html_tag_nodes[0]);\n    detach(html_tag_nodes[html_tag_nodes.length - 1]);\n    const claimed_nodes = html_tag_nodes.slice(1, html_tag_nodes.length - 1);\n    for (const n of claimed_nodes) {\n        n.claim_order = nodes.claim_info.total_claimed;\n        nodes.claim_info.total_claimed += 1;\n    }\n    return new HtmlTagHydration(claimed_nodes, is_svg);\n}\nfunction set_data(text, data) {\n    data = '' + data;\n    if (text.wholeText !== data)\n        text.data = data;\n}\nfunction set_input_value(input, value) {\n    input.value = value == null ? '' : value;\n}\nfunction set_input_type(input, type) {\n    try {\n        input.type = type;\n    }\n    catch (e) {\n        // do nothing\n    }\n}\nfunction set_style(node, key, value, important) {\n    if (value === null) {\n        node.style.removeProperty(key);\n    }\n    else {\n        node.style.setProperty(key, value, important ? 'important' : '');\n    }\n}\nfunction select_option(select, value) {\n    for (let i = 0; i < select.options.length; i += 1) {\n        const option = select.options[i];\n        if (option.__value === value) {\n            option.selected = true;\n            return;\n        }\n    }\n    select.selectedIndex = -1; // no option should be selected\n}\nfunction select_options(select, value) {\n    for (let i = 0; i < select.options.length; i += 1) {\n        const option = select.options[i];\n        option.selected = ~value.indexOf(option.__value);\n    }\n}\nfunction select_value(select) {\n    const selected_option = select.querySelector(':checked') || select.options[0];\n    return selected_option && selected_option.__value;\n}\nfunction select_multiple_value(select) {\n    return [].map.call(select.querySelectorAll(':checked'), option => option.__value);\n}\n// unfortunately this can't be a constant as that wouldn't be tree-shakeable\n// so we cache the result instead\nlet crossorigin;\nfunction is_crossorigin() {\n    if (crossorigin === undefined) {\n        crossorigin = false;\n        try {\n            if (typeof window !== 'undefined' && window.parent) {\n                void window.parent.document;\n            }\n        }\n        catch (error) {\n            crossorigin = true;\n        }\n    }\n    return crossorigin;\n}\nfunction add_resize_listener(node, fn) {\n    const computed_style = getComputedStyle(node);\n    if (computed_style.position === 'static') {\n        node.style.position = 'relative';\n    }\n    const iframe = element('iframe');\n    iframe.setAttribute('style', 'display: block; position: absolute; top: 0; left: 0; width: 100%; height: 100%; ' +\n        'overflow: hidden; border: 0; opacity: 0; pointer-events: none; z-index: -1;');\n    iframe.setAttribute('aria-hidden', 'true');\n    iframe.tabIndex = -1;\n    const crossorigin = is_crossorigin();\n    let unsubscribe;\n    if (crossorigin) {\n        iframe.src = \"data:text/html,<script>onresize=function(){parent.postMessage(0,'*')}</script>\";\n        unsubscribe = listen(window, 'message', (event) => {\n            if (event.source === iframe.contentWindow)\n                fn();\n        });\n    }\n    else {\n        iframe.src = 'about:blank';\n        iframe.onload = () => {\n            unsubscribe = listen(iframe.contentWindow, 'resize', fn);\n        };\n    }\n    append(node, iframe);\n    return () => {\n        if (crossorigin) {\n            unsubscribe();\n        }\n        else if (unsubscribe && iframe.contentWindow) {\n            unsubscribe();\n        }\n        detach(iframe);\n    };\n}\nfunction toggle_class(element, name, toggle) {\n    element.classList[toggle ? 'add' : 'remove'](name);\n}\nfunction custom_event(type, detail, { bubbles = false, cancelable = false } = {}) {\n    const e = document.createEvent('CustomEvent');\n    e.initCustomEvent(type, bubbles, cancelable, detail);\n    return e;\n}\nfunction query_selector_all(selector, parent = document.body) {\n    return Array.from(parent.querySelectorAll(selector));\n}\nfunction head_selector(nodeId, head) {\n    const result = [];\n    let started = 0;\n    for (const node of head.childNodes) {\n        if (node.nodeType === 8 /* comment node */) {\n            const comment = node.textContent.trim();\n            if (comment === `HEAD_${nodeId}_END`) {\n                started -= 1;\n                result.push(node);\n            }\n            else if (comment === `HEAD_${nodeId}_START`) {\n                started += 1;\n                result.push(node);\n            }\n        }\n        else if (started > 0) {\n            result.push(node);\n        }\n    }\n    return result;\n}\nclass HtmlTag {\n    constructor(is_svg = false) {\n        this.is_svg = false;\n        this.is_svg = is_svg;\n        this.e = this.n = null;\n    }\n    c(html) {\n        this.h(html);\n    }\n    m(html, target, anchor = null) {\n        if (!this.e) {\n            if (this.is_svg)\n                this.e = svg_element(target.nodeName);\n            else\n                this.e = element(target.nodeName);\n            this.t = target;\n            this.c(html);\n        }\n        this.i(anchor);\n    }\n    h(html) {\n        this.e.innerHTML = html;\n        this.n = Array.from(this.e.childNodes);\n    }\n    i(anchor) {\n        for (let i = 0; i < this.n.length; i += 1) {\n            insert(this.t, this.n[i], anchor);\n        }\n    }\n    p(html) {\n        this.d();\n        this.h(html);\n        this.i(this.a);\n    }\n    d() {\n        this.n.forEach(detach);\n    }\n}\nclass HtmlTagHydration extends HtmlTag {\n    constructor(claimed_nodes, is_svg = false) {\n        super(is_svg);\n        this.e = this.n = null;\n        this.l = claimed_nodes;\n    }\n    c(html) {\n        if (this.l) {\n            this.n = this.l;\n        }\n        else {\n            super.c(html);\n        }\n    }\n    i(anchor) {\n        for (let i = 0; i < this.n.length; i += 1) {\n            insert_hydration(this.t, this.n[i], anchor);\n        }\n    }\n}\nfunction attribute_to_object(attributes) {\n    const result = {};\n    for (const attribute of attributes) {\n        result[attribute.name] = attribute.value;\n    }\n    return result;\n}\nfunction get_custom_elements_slots(element) {\n    const result = {};\n    element.childNodes.forEach((node) => {\n        result[node.slot || 'default'] = true;\n    });\n    return result;\n}\nfunction construct_svelte_component(component, props) {\n    return new component(props);\n}\n\n// we need to store the information for multiple documents because a Svelte application could also contain iframes\n// https://github.com/sveltejs/svelte/issues/3624\nconst managed_styles = new Map();\nlet active = 0;\n// https://github.com/darkskyapp/string-hash/blob/master/index.js\nfunction hash(str) {\n    let hash = 5381;\n    let i = str.length;\n    while (i--)\n        hash = ((hash << 5) - hash) ^ str.charCodeAt(i);\n    return hash >>> 0;\n}\nfunction create_style_information(doc, node) {\n    const info = { stylesheet: append_empty_stylesheet(node), rules: {} };\n    managed_styles.set(doc, info);\n    return info;\n}\nfunction create_rule(node, a, b, duration, delay, ease, fn, uid = 0) {\n    const step = 16.666 / duration;\n    let keyframes = '{\\n';\n    for (let p = 0; p <= 1; p += step) {\n        const t = a + (b - a) * ease(p);\n        keyframes += p * 100 + `%{${fn(t, 1 - t)}}\\n`;\n    }\n    const rule = keyframes + `100% {${fn(b, 1 - b)}}\\n}`;\n    const name = `__svelte_${hash(rule)}_${uid}`;\n    const doc = get_root_for_style(node);\n    const { stylesheet, rules } = managed_styles.get(doc) || create_style_information(doc, node);\n    if (!rules[name]) {\n        rules[name] = true;\n        stylesheet.insertRule(`@keyframes ${name} ${rule}`, stylesheet.cssRules.length);\n    }\n    const animation = node.style.animation || '';\n    node.style.animation = `${animation ? `${animation}, ` : ''}${name} ${duration}ms linear ${delay}ms 1 both`;\n    active += 1;\n    return name;\n}\nfunction delete_rule(node, name) {\n    const previous = (node.style.animation || '').split(', ');\n    const next = previous.filter(name\n        ? anim => anim.indexOf(name) < 0 // remove specific animation\n        : anim => anim.indexOf('__svelte') === -1 // remove all Svelte animations\n    );\n    const deleted = previous.length - next.length;\n    if (deleted) {\n        node.style.animation = next.join(', ');\n        active -= deleted;\n        if (!active)\n            clear_rules();\n    }\n}\nfunction clear_rules() {\n    raf(() => {\n        if (active)\n            return;\n        managed_styles.forEach(info => {\n            const { ownerNode } = info.stylesheet;\n            // there is no ownerNode if it runs on jsdom.\n            if (ownerNode)\n                detach(ownerNode);\n        });\n        managed_styles.clear();\n    });\n}\n\nfunction create_animation(node, from, fn, params) {\n    if (!from)\n        return noop;\n    const to = node.getBoundingClientRect();\n    if (from.left === to.left && from.right === to.right && from.top === to.top && from.bottom === to.bottom)\n        return noop;\n    const { delay = 0, duration = 300, easing = identity, \n    // @ts-ignore todo: should this be separated from destructuring? Or start/end added to public api and documentation?\n    start: start_time = now() + delay, \n    // @ts-ignore todo:\n    end = start_time + duration, tick = noop, css } = fn(node, { from, to }, params);\n    let running = true;\n    let started = false;\n    let name;\n    function start() {\n        if (css) {\n            name = create_rule(node, 0, 1, duration, delay, easing, css);\n        }\n        if (!delay) {\n            started = true;\n        }\n    }\n    function stop() {\n        if (css)\n            delete_rule(node, name);\n        running = false;\n    }\n    loop(now => {\n        if (!started && now >= start_time) {\n            started = true;\n        }\n        if (started && now >= end) {\n            tick(1, 0);\n            stop();\n        }\n        if (!running) {\n            return false;\n        }\n        if (started) {\n            const p = now - start_time;\n            const t = 0 + 1 * easing(p / duration);\n            tick(t, 1 - t);\n        }\n        return true;\n    });\n    start();\n    tick(0, 1);\n    return stop;\n}\nfunction fix_position(node) {\n    const style = getComputedStyle(node);\n    if (style.position !== 'absolute' && style.position !== 'fixed') {\n        const { width, height } = style;\n        const a = node.getBoundingClientRect();\n        node.style.position = 'absolute';\n        node.style.width = width;\n        node.style.height = height;\n        add_transform(node, a);\n    }\n}\nfunction add_transform(node, a) {\n    const b = node.getBoundingClientRect();\n    if (a.left !== b.left || a.top !== b.top) {\n        const style = getComputedStyle(node);\n        const transform = style.transform === 'none' ? '' : style.transform;\n        node.style.transform = `${transform} translate(${a.left - b.left}px, ${a.top - b.top}px)`;\n    }\n}\n\nlet current_component;\nfunction set_current_component(component) {\n    current_component = component;\n}\nfunction get_current_component() {\n    if (!current_component)\n        throw new Error('Function called outside component initialization');\n    return current_component;\n}\n/**\n * Schedules a callback to run immediately before the component is updated after any state change.\n *\n * The first time the callback runs will be before the initial `onMount`\n *\n * https://svelte.dev/docs#run-time-svelte-beforeupdate\n */\nfunction beforeUpdate(fn) {\n    get_current_component().$$.before_update.push(fn);\n}\n/**\n * The `onMount` function schedules a callback to run as soon as the component has been mounted to the DOM.\n * It must be called during the component's initialisation (but doesn't need to live *inside* the component;\n * it can be called from an external module).\n *\n * `onMount` does not run inside a [server-side component](/docs#run-time-server-side-component-api).\n *\n * https://svelte.dev/docs#run-time-svelte-onmount\n */\nfunction onMount(fn) {\n    get_current_component().$$.on_mount.push(fn);\n}\n/**\n * Schedules a callback to run immediately after the component has been updated.\n *\n * The first time the callback runs will be after the initial `onMount`\n */\nfunction afterUpdate(fn) {\n    get_current_component().$$.after_update.push(fn);\n}\n/**\n * Schedules a callback to run immediately before the component is unmounted.\n *\n * Out of `onMount`, `beforeUpdate`, `afterUpdate` and `onDestroy`, this is the\n * only one that runs inside a server-side component.\n *\n * https://svelte.dev/docs#run-time-svelte-ondestroy\n */\nfunction onDestroy(fn) {\n    get_current_component().$$.on_destroy.push(fn);\n}\n/**\n * Creates an event dispatcher that can be used to dispatch [component events](/docs#template-syntax-component-directives-on-eventname).\n * Event dispatchers are functions that can take two arguments: `name` and `detail`.\n *\n * Component events created with `createEventDispatcher` create a\n * [CustomEvent](https://developer.mozilla.org/en-US/docs/Web/API/CustomEvent).\n * These events do not [bubble](https://developer.mozilla.org/en-US/docs/Learn/JavaScript/Building_blocks/Events#Event_bubbling_and_capture).\n * The `detail` argument corresponds to the [CustomEvent.detail](https://developer.mozilla.org/en-US/docs/Web/API/CustomEvent/detail)\n * property and can contain any type of data.\n *\n * https://svelte.dev/docs#run-time-svelte-createeventdispatcher\n */\nfunction createEventDispatcher() {\n    const component = get_current_component();\n    return (type, detail, { cancelable = false } = {}) => {\n        const callbacks = component.$$.callbacks[type];\n        if (callbacks) {\n            // TODO are there situations where events could be dispatched\n            // in a server (non-DOM) environment?\n            const event = custom_event(type, detail, { cancelable });\n            callbacks.slice().forEach(fn => {\n                fn.call(component, event);\n            });\n            return !event.defaultPrevented;\n        }\n        return true;\n    };\n}\n/**\n * Associates an arbitrary `context` object with the current component and the specified `key`\n * and returns that object. The context is then available to children of the component\n * (including slotted content) with `getContext`.\n *\n * Like lifecycle functions, this must be called during component initialisation.\n *\n * https://svelte.dev/docs#run-time-svelte-setcontext\n */\nfunction setContext(key, context) {\n    get_current_component().$$.context.set(key, context);\n    return context;\n}\n/**\n * Retrieves the context that belongs to the closest parent component with the specified `key`.\n * Must be called during component initialisation.\n *\n * https://svelte.dev/docs#run-time-svelte-getcontext\n */\nfunction getContext(key) {\n    return get_current_component().$$.context.get(key);\n}\n/**\n * Retrieves the whole context map that belongs to the closest parent component.\n * Must be called during component initialisation. Useful, for example, if you\n * programmatically create a component and want to pass the existing context to it.\n *\n * https://svelte.dev/docs#run-time-svelte-getallcontexts\n */\nfunction getAllContexts() {\n    return get_current_component().$$.context;\n}\n/**\n * Checks whether a given `key` has been set in the context of a parent component.\n * Must be called during component initialisation.\n *\n * https://svelte.dev/docs#run-time-svelte-hascontext\n */\nfunction hasContext(key) {\n    return get_current_component().$$.context.has(key);\n}\n// TODO figure out if we still want to support\n// shorthand events, or if we want to implement\n// a real bubbling mechanism\nfunction bubble(component, event) {\n    const callbacks = component.$$.callbacks[event.type];\n    if (callbacks) {\n        // @ts-ignore\n        callbacks.slice().forEach(fn => fn.call(this, event));\n    }\n}\n\nconst dirty_components = [];\nconst intros = { enabled: false };\nconst binding_callbacks = [];\nconst render_callbacks = [];\nconst flush_callbacks = [];\nconst resolved_promise = Promise.resolve();\nlet update_scheduled = false;\nfunction schedule_update() {\n    if (!update_scheduled) {\n        update_scheduled = true;\n        resolved_promise.then(flush);\n    }\n}\nfunction tick() {\n    schedule_update();\n    return resolved_promise;\n}\nfunction add_render_callback(fn) {\n    render_callbacks.push(fn);\n}\nfunction add_flush_callback(fn) {\n    flush_callbacks.push(fn);\n}\n// flush() calls callbacks in this order:\n// 1. All beforeUpdate callbacks, in order: parents before children\n// 2. All bind:this callbacks, in reverse order: children before parents.\n// 3. All afterUpdate callbacks, in order: parents before children. EXCEPT\n//    for afterUpdates called during the initial onMount, which are called in\n//    reverse order: children before parents.\n// Since callbacks might update component values, which could trigger another\n// call to flush(), the following steps guard against this:\n// 1. During beforeUpdate, any updated components will be added to the\n//    dirty_components array and will cause a reentrant call to flush(). Because\n//    the flush index is kept outside the function, the reentrant call will pick\n//    up where the earlier call left off and go through all dirty components. The\n//    current_component value is saved and restored so that the reentrant call will\n//    not interfere with the \"parent\" flush() call.\n// 2. bind:this callbacks cannot trigger new flush() calls.\n// 3. During afterUpdate, any updated components will NOT have their afterUpdate\n//    callback called a second time; the seen_callbacks set, outside the flush()\n//    function, guarantees this behavior.\nconst seen_callbacks = new Set();\nlet flushidx = 0; // Do *not* move this inside the flush() function\nfunction flush() {\n    const saved_component = current_component;\n    do {\n        // first, call beforeUpdate functions\n        // and update components\n        while (flushidx < dirty_components.length) {\n            const component = dirty_components[flushidx];\n            flushidx++;\n            set_current_component(component);\n            update(component.$$);\n        }\n        set_current_component(null);\n        dirty_components.length = 0;\n        flushidx = 0;\n        while (binding_callbacks.length)\n            binding_callbacks.pop()();\n        // then, once components are updated, call\n        // afterUpdate functions. This may cause\n        // subsequent updates...\n        for (let i = 0; i < render_callbacks.length; i += 1) {\n            const callback = render_callbacks[i];\n            if (!seen_callbacks.has(callback)) {\n                // ...so guard against infinite loops\n                seen_callbacks.add(callback);\n                callback();\n            }\n        }\n        render_callbacks.length = 0;\n    } while (dirty_components.length);\n    while (flush_callbacks.length) {\n        flush_callbacks.pop()();\n    }\n    update_scheduled = false;\n    seen_callbacks.clear();\n    set_current_component(saved_component);\n}\nfunction update($$) {\n    if ($$.fragment !== null) {\n        $$.update();\n        run_all($$.before_update);\n        const dirty = $$.dirty;\n        $$.dirty = [-1];\n        $$.fragment && $$.fragment.p($$.ctx, dirty);\n        $$.after_update.forEach(add_render_callback);\n    }\n}\n\nlet promise;\nfunction wait() {\n    if (!promise) {\n        promise = Promise.resolve();\n        promise.then(() => {\n            promise = null;\n        });\n    }\n    return promise;\n}\nfunction dispatch(node, direction, kind) {\n    node.dispatchEvent(custom_event(`${direction ? 'intro' : 'outro'}${kind}`));\n}\nconst outroing = new Set();\nlet outros;\nfunction group_outros() {\n    outros = {\n        r: 0,\n        c: [],\n        p: outros // parent group\n    };\n}\nfunction check_outros() {\n    if (!outros.r) {\n        run_all(outros.c);\n    }\n    outros = outros.p;\n}\nfunction transition_in(block, local) {\n    if (block && block.i) {\n        outroing.delete(block);\n        block.i(local);\n    }\n}\nfunction transition_out(block, local, detach, callback) {\n    if (block && block.o) {\n        if (outroing.has(block))\n            return;\n        outroing.add(block);\n        outros.c.push(() => {\n            outroing.delete(block);\n            if (callback) {\n                if (detach)\n                    block.d(1);\n                callback();\n            }\n        });\n        block.o(local);\n    }\n    else if (callback) {\n        callback();\n    }\n}\nconst null_transition = { duration: 0 };\nfunction create_in_transition(node, fn, params) {\n    let config = fn(node, params);\n    let running = false;\n    let animation_name;\n    let task;\n    let uid = 0;\n    function cleanup() {\n        if (animation_name)\n            delete_rule(node, animation_name);\n    }\n    function go() {\n        const { delay = 0, duration = 300, easing = identity, tick = noop, css } = config || null_transition;\n        if (css)\n            animation_name = create_rule(node, 0, 1, duration, delay, easing, css, uid++);\n        tick(0, 1);\n        const start_time = now() + delay;\n        const end_time = start_time + duration;\n        if (task)\n            task.abort();\n        running = true;\n        add_render_callback(() => dispatch(node, true, 'start'));\n        task = loop(now => {\n            if (running) {\n                if (now >= end_time) {\n                    tick(1, 0);\n                    dispatch(node, true, 'end');\n                    cleanup();\n                    return running = false;\n                }\n                if (now >= start_time) {\n                    const t = easing((now - start_time) / duration);\n                    tick(t, 1 - t);\n                }\n            }\n            return running;\n        });\n    }\n    let started = false;\n    return {\n        start() {\n            if (started)\n                return;\n            started = true;\n            delete_rule(node);\n            if (is_function(config)) {\n                config = config();\n                wait().then(go);\n            }\n            else {\n                go();\n            }\n        },\n        invalidate() {\n            started = false;\n        },\n        end() {\n            if (running) {\n                cleanup();\n                running = false;\n            }\n        }\n    };\n}\nfunction create_out_transition(node, fn, params) {\n    let config = fn(node, params);\n    let running = true;\n    let animation_name;\n    const group = outros;\n    group.r += 1;\n    function go() {\n        const { delay = 0, duration = 300, easing = identity, tick = noop, css } = config || null_transition;\n        if (css)\n            animation_name = create_rule(node, 1, 0, duration, delay, easing, css);\n        const start_time = now() + delay;\n        const end_time = start_time + duration;\n        add_render_callback(() => dispatch(node, false, 'start'));\n        loop(now => {\n            if (running) {\n                if (now >= end_time) {\n                    tick(0, 1);\n                    dispatch(node, false, 'end');\n                    if (!--group.r) {\n                        // this will result in `end()` being called,\n                        // so we don't need to clean up here\n                        run_all(group.c);\n                    }\n                    return false;\n                }\n                if (now >= start_time) {\n                    const t = easing((now - start_time) / duration);\n                    tick(1 - t, t);\n                }\n            }\n            return running;\n        });\n    }\n    if (is_function(config)) {\n        wait().then(() => {\n            // @ts-ignore\n            config = config();\n            go();\n        });\n    }\n    else {\n        go();\n    }\n    return {\n        end(reset) {\n            if (reset && config.tick) {\n                config.tick(1, 0);\n            }\n            if (running) {\n                if (animation_name)\n                    delete_rule(node, animation_name);\n                running = false;\n            }\n        }\n    };\n}\nfunction create_bidirectional_transition(node, fn, params, intro) {\n    let config = fn(node, params);\n    let t = intro ? 0 : 1;\n    let running_program = null;\n    let pending_program = null;\n    let animation_name = null;\n    function clear_animation() {\n        if (animation_name)\n            delete_rule(node, animation_name);\n    }\n    function init(program, duration) {\n        const d = (program.b - t);\n        duration *= Math.abs(d);\n        return {\n            a: t,\n            b: program.b,\n            d,\n            duration,\n            start: program.start,\n            end: program.start + duration,\n            group: program.group\n        };\n    }\n    function go(b) {\n        const { delay = 0, duration = 300, easing = identity, tick = noop, css } = config || null_transition;\n        const program = {\n            start: now() + delay,\n            b\n        };\n        if (!b) {\n            // @ts-ignore todo: improve typings\n            program.group = outros;\n            outros.r += 1;\n        }\n        if (running_program || pending_program) {\n            pending_program = program;\n        }\n        else {\n            // if this is an intro, and there's a delay, we need to do\n            // an initial tick and/or apply CSS animation immediately\n            if (css) {\n                clear_animation();\n                animation_name = create_rule(node, t, b, duration, delay, easing, css);\n            }\n            if (b)\n                tick(0, 1);\n            running_program = init(program, duration);\n            add_render_callback(() => dispatch(node, b, 'start'));\n            loop(now => {\n                if (pending_program && now > pending_program.start) {\n                    running_program = init(pending_program, duration);\n                    pending_program = null;\n                    dispatch(node, running_program.b, 'start');\n                    if (css) {\n                        clear_animation();\n                        animation_name = create_rule(node, t, running_program.b, running_program.duration, 0, easing, config.css);\n                    }\n                }\n                if (running_program) {\n                    if (now >= running_program.end) {\n                        tick(t = running_program.b, 1 - t);\n                        dispatch(node, running_program.b, 'end');\n                        if (!pending_program) {\n                            // we're done\n                            if (running_program.b) {\n                                // intro — we can tidy up immediately\n                                clear_animation();\n                            }\n                            else {\n                                // outro — needs to be coordinated\n                                if (!--running_program.group.r)\n                                    run_all(running_program.group.c);\n                            }\n                        }\n                        running_program = null;\n                    }\n                    else if (now >= running_program.start) {\n                        const p = now - running_program.start;\n                        t = running_program.a + running_program.d * easing(p / running_program.duration);\n                        tick(t, 1 - t);\n                    }\n                }\n                return !!(running_program || pending_program);\n            });\n        }\n    }\n    return {\n        run(b) {\n            if (is_function(config)) {\n                wait().then(() => {\n                    // @ts-ignore\n                    config = config();\n                    go(b);\n                });\n            }\n            else {\n                go(b);\n            }\n        },\n        end() {\n            clear_animation();\n            running_program = pending_program = null;\n        }\n    };\n}\n\nfunction handle_promise(promise, info) {\n    const token = info.token = {};\n    function update(type, index, key, value) {\n        if (info.token !== token)\n            return;\n        info.resolved = value;\n        let child_ctx = info.ctx;\n        if (key !== undefined) {\n            child_ctx = child_ctx.slice();\n            child_ctx[key] = value;\n        }\n        const block = type && (info.current = type)(child_ctx);\n        let needs_flush = false;\n        if (info.block) {\n            if (info.blocks) {\n                info.blocks.forEach((block, i) => {\n                    if (i !== index && block) {\n                        group_outros();\n                        transition_out(block, 1, 1, () => {\n                            if (info.blocks[i] === block) {\n                                info.blocks[i] = null;\n                            }\n                        });\n                        check_outros();\n                    }\n                });\n            }\n            else {\n                info.block.d(1);\n            }\n            block.c();\n            transition_in(block, 1);\n            block.m(info.mount(), info.anchor);\n            needs_flush = true;\n        }\n        info.block = block;\n        if (info.blocks)\n            info.blocks[index] = block;\n        if (needs_flush) {\n            flush();\n        }\n    }\n    if (is_promise(promise)) {\n        const current_component = get_current_component();\n        promise.then(value => {\n            set_current_component(current_component);\n            update(info.then, 1, info.value, value);\n            set_current_component(null);\n        }, error => {\n            set_current_component(current_component);\n            update(info.catch, 2, info.error, error);\n            set_current_component(null);\n            if (!info.hasCatch) {\n                throw error;\n            }\n        });\n        // if we previously had a then/catch block, destroy it\n        if (info.current !== info.pending) {\n            update(info.pending, 0);\n            return true;\n        }\n    }\n    else {\n        if (info.current !== info.then) {\n            update(info.then, 1, info.value, promise);\n            return true;\n        }\n        info.resolved = promise;\n    }\n}\nfunction update_await_block_branch(info, ctx, dirty) {\n    const child_ctx = ctx.slice();\n    const { resolved } = info;\n    if (info.current === info.then) {\n        child_ctx[info.value] = resolved;\n    }\n    if (info.current === info.catch) {\n        child_ctx[info.error] = resolved;\n    }\n    info.block.p(child_ctx, dirty);\n}\n\nconst globals = (typeof window !== 'undefined'\n    ? window\n    : typeof globalThis !== 'undefined'\n        ? globalThis\n        : global);\n\nfunction destroy_block(block, lookup) {\n    block.d(1);\n    lookup.delete(block.key);\n}\nfunction outro_and_destroy_block(block, lookup) {\n    transition_out(block, 1, 1, () => {\n        lookup.delete(block.key);\n    });\n}\nfunction fix_and_destroy_block(block, lookup) {\n    block.f();\n    destroy_block(block, lookup);\n}\nfunction fix_and_outro_and_destroy_block(block, lookup) {\n    block.f();\n    outro_and_destroy_block(block, lookup);\n}\nfunction update_keyed_each(old_blocks, dirty, get_key, dynamic, ctx, list, lookup, node, destroy, create_each_block, next, get_context) {\n    let o = old_blocks.length;\n    let n = list.length;\n    let i = o;\n    const old_indexes = {};\n    while (i--)\n        old_indexes[old_blocks[i].key] = i;\n    const new_blocks = [];\n    const new_lookup = new Map();\n    const deltas = new Map();\n    i = n;\n    while (i--) {\n        const child_ctx = get_context(ctx, list, i);\n        const key = get_key(child_ctx);\n        let block = lookup.get(key);\n        if (!block) {\n            block = create_each_block(key, child_ctx);\n            block.c();\n        }\n        else if (dynamic) {\n            block.p(child_ctx, dirty);\n        }\n        new_lookup.set(key, new_blocks[i] = block);\n        if (key in old_indexes)\n            deltas.set(key, Math.abs(i - old_indexes[key]));\n    }\n    const will_move = new Set();\n    const did_move = new Set();\n    function insert(block) {\n        transition_in(block, 1);\n        block.m(node, next);\n        lookup.set(block.key, block);\n        next = block.first;\n        n--;\n    }\n    while (o && n) {\n        const new_block = new_blocks[n - 1];\n        const old_block = old_blocks[o - 1];\n        const new_key = new_block.key;\n        const old_key = old_block.key;\n        if (new_block === old_block) {\n            // do nothing\n            next = new_block.first;\n            o--;\n            n--;\n        }\n        else if (!new_lookup.has(old_key)) {\n            // remove old block\n            destroy(old_block, lookup);\n            o--;\n        }\n        else if (!lookup.has(new_key) || will_move.has(new_key)) {\n            insert(new_block);\n        }\n        else if (did_move.has(old_key)) {\n            o--;\n        }\n        else if (deltas.get(new_key) > deltas.get(old_key)) {\n            did_move.add(new_key);\n            insert(new_block);\n        }\n        else {\n            will_move.add(old_key);\n            o--;\n        }\n    }\n    while (o--) {\n        const old_block = old_blocks[o];\n        if (!new_lookup.has(old_block.key))\n            destroy(old_block, lookup);\n    }\n    while (n)\n        insert(new_blocks[n - 1]);\n    return new_blocks;\n}\nfunction validate_each_keys(ctx, list, get_context, get_key) {\n    const keys = new Set();\n    for (let i = 0; i < list.length; i++) {\n        const key = get_key(get_context(ctx, list, i));\n        if (keys.has(key)) {\n            throw new Error('Cannot have duplicate keys in a keyed each');\n        }\n        keys.add(key);\n    }\n}\n\nfunction get_spread_update(levels, updates) {\n    const update = {};\n    const to_null_out = {};\n    const accounted_for = { $$scope: 1 };\n    let i = levels.length;\n    while (i--) {\n        const o = levels[i];\n        const n = updates[i];\n        if (n) {\n            for (const key in o) {\n                if (!(key in n))\n                    to_null_out[key] = 1;\n            }\n            for (const key in n) {\n                if (!accounted_for[key]) {\n                    update[key] = n[key];\n                    accounted_for[key] = 1;\n                }\n            }\n            levels[i] = n;\n        }\n        else {\n            for (const key in o) {\n                accounted_for[key] = 1;\n            }\n        }\n    }\n    for (const key in to_null_out) {\n        if (!(key in update))\n            update[key] = undefined;\n    }\n    return update;\n}\nfunction get_spread_object(spread_props) {\n    return typeof spread_props === 'object' && spread_props !== null ? spread_props : {};\n}\n\n// source: https://html.spec.whatwg.org/multipage/indices.html\nconst boolean_attributes = new Set([\n    'allowfullscreen',\n    'allowpaymentrequest',\n    'async',\n    'autofocus',\n    'autoplay',\n    'checked',\n    'controls',\n    'default',\n    'defer',\n    'disabled',\n    'formnovalidate',\n    'hidden',\n    'inert',\n    'ismap',\n    'itemscope',\n    'loop',\n    'multiple',\n    'muted',\n    'nomodule',\n    'novalidate',\n    'open',\n    'playsinline',\n    'readonly',\n    'required',\n    'reversed',\n    'selected'\n]);\n\n/** regex of all html void element names */\nconst void_element_names = /^(?:area|base|br|col|command|embed|hr|img|input|keygen|link|meta|param|source|track|wbr)$/;\nfunction is_void(name) {\n    return void_element_names.test(name) || name.toLowerCase() === '!doctype';\n}\n\nconst invalid_attribute_name_character = /[\\s'\">/=\\u{FDD0}-\\u{FDEF}\\u{FFFE}\\u{FFFF}\\u{1FFFE}\\u{1FFFF}\\u{2FFFE}\\u{2FFFF}\\u{3FFFE}\\u{3FFFF}\\u{4FFFE}\\u{4FFFF}\\u{5FFFE}\\u{5FFFF}\\u{6FFFE}\\u{6FFFF}\\u{7FFFE}\\u{7FFFF}\\u{8FFFE}\\u{8FFFF}\\u{9FFFE}\\u{9FFFF}\\u{AFFFE}\\u{AFFFF}\\u{BFFFE}\\u{BFFFF}\\u{CFFFE}\\u{CFFFF}\\u{DFFFE}\\u{DFFFF}\\u{EFFFE}\\u{EFFFF}\\u{FFFFE}\\u{FFFFF}\\u{10FFFE}\\u{10FFFF}]/u;\n// https://html.spec.whatwg.org/multipage/syntax.html#attributes-2\n// https://infra.spec.whatwg.org/#noncharacter\nfunction spread(args, attrs_to_add) {\n    const attributes = Object.assign({}, ...args);\n    if (attrs_to_add) {\n        const classes_to_add = attrs_to_add.classes;\n        const styles_to_add = attrs_to_add.styles;\n        if (classes_to_add) {\n            if (attributes.class == null) {\n                attributes.class = classes_to_add;\n            }\n            else {\n                attributes.class += ' ' + classes_to_add;\n            }\n        }\n        if (styles_to_add) {\n            if (attributes.style == null) {\n                attributes.style = style_object_to_string(styles_to_add);\n            }\n            else {\n                attributes.style = style_object_to_string(merge_ssr_styles(attributes.style, styles_to_add));\n            }\n        }\n    }\n    let str = '';\n    Object.keys(attributes).forEach(name => {\n        if (invalid_attribute_name_character.test(name))\n            return;\n        const value = attributes[name];\n        if (value === true)\n            str += ' ' + name;\n        else if (boolean_attributes.has(name.toLowerCase())) {\n            if (value)\n                str += ' ' + name;\n        }\n        else if (value != null) {\n            str += ` ${name}=\"${value}\"`;\n        }\n    });\n    return str;\n}\nfunction merge_ssr_styles(style_attribute, style_directive) {\n    const style_object = {};\n    for (const individual_style of style_attribute.split(';')) {\n        const colon_index = individual_style.indexOf(':');\n        const name = individual_style.slice(0, colon_index).trim();\n        const value = individual_style.slice(colon_index + 1).trim();\n        if (!name)\n            continue;\n        style_object[name] = value;\n    }\n    for (const name in style_directive) {\n        const value = style_directive[name];\n        if (value) {\n            style_object[name] = value;\n        }\n        else {\n            delete style_object[name];\n        }\n    }\n    return style_object;\n}\nconst ATTR_REGEX = /[&\"]/g;\nconst CONTENT_REGEX = /[&<]/g;\n/**\n * Note: this method is performance sensitive and has been optimized\n * https://github.com/sveltejs/svelte/pull/5701\n */\nfunction escape(value, is_attr = false) {\n    const str = String(value);\n    const pattern = is_attr ? ATTR_REGEX : CONTENT_REGEX;\n    pattern.lastIndex = 0;\n    let escaped = '';\n    let last = 0;\n    while (pattern.test(str)) {\n        const i = pattern.lastIndex - 1;\n        const ch = str[i];\n        escaped += str.substring(last, i) + (ch === '&' ? '&amp;' : (ch === '\"' ? '&quot;' : '&lt;'));\n        last = i + 1;\n    }\n    return escaped + str.substring(last);\n}\nfunction escape_attribute_value(value) {\n    // keep booleans, null, and undefined for the sake of `spread`\n    const should_escape = typeof value === 'string' || (value && typeof value === 'object');\n    return should_escape ? escape(value, true) : value;\n}\nfunction escape_object(obj) {\n    const result = {};\n    for (const key in obj) {\n        result[key] = escape_attribute_value(obj[key]);\n    }\n    return result;\n}\nfunction each(items, fn) {\n    let str = '';\n    for (let i = 0; i < items.length; i += 1) {\n        str += fn(items[i], i);\n    }\n    return str;\n}\nconst missing_component = {\n    $$render: () => ''\n};\nfunction validate_component(component, name) {\n    if (!component || !component.$$render) {\n        if (name === 'svelte:component')\n            name += ' this={...}';\n        throw new Error(`<${name}> is not a valid SSR component. You may need to review your build config to ensure that dependencies are compiled, rather than imported as pre-compiled modules. Otherwise you may need to fix a <${name}>.`);\n    }\n    return component;\n}\nfunction debug(file, line, column, values) {\n    console.log(`{@debug} ${file ? file + ' ' : ''}(${line}:${column})`); // eslint-disable-line no-console\n    console.log(values); // eslint-disable-line no-console\n    return '';\n}\nlet on_destroy;\nfunction create_ssr_component(fn) {\n    function $$render(result, props, bindings, slots, context) {\n        const parent_component = current_component;\n        const $$ = {\n            on_destroy,\n            context: new Map(context || (parent_component ? parent_component.$$.context : [])),\n            // these will be immediately discarded\n            on_mount: [],\n            before_update: [],\n            after_update: [],\n            callbacks: blank_object()\n        };\n        set_current_component({ $$ });\n        const html = fn(result, props, bindings, slots);\n        set_current_component(parent_component);\n        return html;\n    }\n    return {\n        render: (props = {}, { $$slots = {}, context = new Map() } = {}) => {\n            on_destroy = [];\n            const result = { title: '', head: '', css: new Set() };\n            const html = $$render(result, props, {}, $$slots, context);\n            run_all(on_destroy);\n            return {\n                html,\n                css: {\n                    code: Array.from(result.css).map(css => css.code).join('\\n'),\n                    map: null // TODO\n                },\n                head: result.title + result.head\n            };\n        },\n        $$render\n    };\n}\nfunction add_attribute(name, value, boolean) {\n    if (value == null || (boolean && !value))\n        return '';\n    const assignment = (boolean && value === true) ? '' : `=\"${escape(value, true)}\"`;\n    return ` ${name}${assignment}`;\n}\nfunction add_classes(classes) {\n    return classes ? ` class=\"${classes}\"` : '';\n}\nfunction style_object_to_string(style_object) {\n    return Object.keys(style_object)\n        .filter(key => style_object[key])\n        .map(key => `${key}: ${style_object[key]};`)\n        .join(' ');\n}\nfunction add_styles(style_object) {\n    const styles = style_object_to_string(style_object);\n    return styles ? ` style=\"${styles}\"` : '';\n}\n\nfunction bind(component, name, callback) {\n    const index = component.$$.props[name];\n    if (index !== undefined) {\n        component.$$.bound[index] = callback;\n        callback(component.$$.ctx[index]);\n    }\n}\nfunction create_component(block) {\n    block && block.c();\n}\nfunction claim_component(block, parent_nodes) {\n    block && block.l(parent_nodes);\n}\nfunction mount_component(component, target, anchor, customElement) {\n    const { fragment, after_update } = component.$$;\n    fragment && fragment.m(target, anchor);\n    if (!customElement) {\n        // onMount happens before the initial afterUpdate\n        add_render_callback(() => {\n            const new_on_destroy = component.$$.on_mount.map(run).filter(is_function);\n            // if the component was destroyed immediately\n            // it will update the `$$.on_destroy` reference to `null`.\n            // the destructured on_destroy may still reference to the old array\n            if (component.$$.on_destroy) {\n                component.$$.on_destroy.push(...new_on_destroy);\n            }\n            else {\n                // Edge case - component was destroyed immediately,\n                // most likely as a result of a binding initialising\n                run_all(new_on_destroy);\n            }\n            component.$$.on_mount = [];\n        });\n    }\n    after_update.forEach(add_render_callback);\n}\nfunction destroy_component(component, detaching) {\n    const $$ = component.$$;\n    if ($$.fragment !== null) {\n        run_all($$.on_destroy);\n        $$.fragment && $$.fragment.d(detaching);\n        // TODO null out other refs, including component.$$ (but need to\n        // preserve final state?)\n        $$.on_destroy = $$.fragment = null;\n        $$.ctx = [];\n    }\n}\nfunction make_dirty(component, i) {\n    if (component.$$.dirty[0] === -1) {\n        dirty_components.push(component);\n        schedule_update();\n        component.$$.dirty.fill(0);\n    }\n    component.$$.dirty[(i / 31) | 0] |= (1 << (i % 31));\n}\nfunction init(component, options, instance, create_fragment, not_equal, props, append_styles, dirty = [-1]) {\n    const parent_component = current_component;\n    set_current_component(component);\n    const $$ = component.$$ = {\n        fragment: null,\n        ctx: [],\n        // state\n        props,\n        update: noop,\n        not_equal,\n        bound: blank_object(),\n        // lifecycle\n        on_mount: [],\n        on_destroy: [],\n        on_disconnect: [],\n        before_update: [],\n        after_update: [],\n        context: new Map(options.context || (parent_component ? parent_component.$$.context : [])),\n        // everything else\n        callbacks: blank_object(),\n        dirty,\n        skip_bound: false,\n        root: options.target || parent_component.$$.root\n    };\n    append_styles && append_styles($$.root);\n    let ready = false;\n    $$.ctx = instance\n        ? instance(component, options.props || {}, (i, ret, ...rest) => {\n            const value = rest.length ? rest[0] : ret;\n            if ($$.ctx && not_equal($$.ctx[i], $$.ctx[i] = value)) {\n                if (!$$.skip_bound && $$.bound[i])\n                    $$.bound[i](value);\n                if (ready)\n                    make_dirty(component, i);\n            }\n            return ret;\n        })\n        : [];\n    $$.update();\n    ready = true;\n    run_all($$.before_update);\n    // `false` as a special case of no DOM component\n    $$.fragment = create_fragment ? create_fragment($$.ctx) : false;\n    if (options.target) {\n        if (options.hydrate) {\n            start_hydrating();\n            const nodes = children(options.target);\n            // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n            $$.fragment && $$.fragment.l(nodes);\n            nodes.forEach(detach);\n        }\n        else {\n            // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n            $$.fragment && $$.fragment.c();\n        }\n        if (options.intro)\n            transition_in(component.$$.fragment);\n        mount_component(component, options.target, options.anchor, options.customElement);\n        end_hydrating();\n        flush();\n    }\n    set_current_component(parent_component);\n}\nlet SvelteElement;\nif (typeof HTMLElement === 'function') {\n    SvelteElement = class extends HTMLElement {\n        constructor() {\n            super();\n            this.attachShadow({ mode: 'open' });\n        }\n        connectedCallback() {\n            const { on_mount } = this.$$;\n            this.$$.on_disconnect = on_mount.map(run).filter(is_function);\n            // @ts-ignore todo: improve typings\n            for (const key in this.$$.slotted) {\n                // @ts-ignore todo: improve typings\n                this.appendChild(this.$$.slotted[key]);\n            }\n        }\n        attributeChangedCallback(attr, _oldValue, newValue) {\n            this[attr] = newValue;\n        }\n        disconnectedCallback() {\n            run_all(this.$$.on_disconnect);\n        }\n        $destroy() {\n            destroy_component(this, 1);\n            this.$destroy = noop;\n        }\n        $on(type, callback) {\n            // TODO should this delegate to addEventListener?\n            if (!is_function(callback)) {\n                return noop;\n            }\n            const callbacks = (this.$$.callbacks[type] || (this.$$.callbacks[type] = []));\n            callbacks.push(callback);\n            return () => {\n                const index = callbacks.indexOf(callback);\n                if (index !== -1)\n                    callbacks.splice(index, 1);\n            };\n        }\n        $set($$props) {\n            if (this.$$set && !is_empty($$props)) {\n                this.$$.skip_bound = true;\n                this.$$set($$props);\n                this.$$.skip_bound = false;\n            }\n        }\n    };\n}\n/**\n * Base class for Svelte components. Used when dev=false.\n */\nclass SvelteComponent {\n    $destroy() {\n        destroy_component(this, 1);\n        this.$destroy = noop;\n    }\n    $on(type, callback) {\n        if (!is_function(callback)) {\n            return noop;\n        }\n        const callbacks = (this.$$.callbacks[type] || (this.$$.callbacks[type] = []));\n        callbacks.push(callback);\n        return () => {\n            const index = callbacks.indexOf(callback);\n            if (index !== -1)\n                callbacks.splice(index, 1);\n        };\n    }\n    $set($$props) {\n        if (this.$$set && !is_empty($$props)) {\n            this.$$.skip_bound = true;\n            this.$$set($$props);\n            this.$$.skip_bound = false;\n        }\n    }\n}\n\nfunction dispatch_dev(type, detail) {\n    document.dispatchEvent(custom_event(type, Object.assign({ version: '3.53.1' }, detail), { bubbles: true }));\n}\nfunction append_dev(target, node) {\n    dispatch_dev('SvelteDOMInsert', { target, node });\n    append(target, node);\n}\nfunction append_hydration_dev(target, node) {\n    dispatch_dev('SvelteDOMInsert', { target, node });\n    append_hydration(target, node);\n}\nfunction insert_dev(target, node, anchor) {\n    dispatch_dev('SvelteDOMInsert', { target, node, anchor });\n    insert(target, node, anchor);\n}\nfunction insert_hydration_dev(target, node, anchor) {\n    dispatch_dev('SvelteDOMInsert', { target, node, anchor });\n    insert_hydration(target, node, anchor);\n}\nfunction detach_dev(node) {\n    dispatch_dev('SvelteDOMRemove', { node });\n    detach(node);\n}\nfunction detach_between_dev(before, after) {\n    while (before.nextSibling && before.nextSibling !== after) {\n        detach_dev(before.nextSibling);\n    }\n}\nfunction detach_before_dev(after) {\n    while (after.previousSibling) {\n        detach_dev(after.previousSibling);\n    }\n}\nfunction detach_after_dev(before) {\n    while (before.nextSibling) {\n        detach_dev(before.nextSibling);\n    }\n}\nfunction listen_dev(node, event, handler, options, has_prevent_default, has_stop_propagation) {\n    const modifiers = options === true ? ['capture'] : options ? Array.from(Object.keys(options)) : [];\n    if (has_prevent_default)\n        modifiers.push('preventDefault');\n    if (has_stop_propagation)\n        modifiers.push('stopPropagation');\n    dispatch_dev('SvelteDOMAddEventListener', { node, event, handler, modifiers });\n    const dispose = listen(node, event, handler, options);\n    return () => {\n        dispatch_dev('SvelteDOMRemoveEventListener', { node, event, handler, modifiers });\n        dispose();\n    };\n}\nfunction attr_dev(node, attribute, value) {\n    attr(node, attribute, value);\n    if (value == null)\n        dispatch_dev('SvelteDOMRemoveAttribute', { node, attribute });\n    else\n        dispatch_dev('SvelteDOMSetAttribute', { node, attribute, value });\n}\nfunction prop_dev(node, property, value) {\n    node[property] = value;\n    dispatch_dev('SvelteDOMSetProperty', { node, property, value });\n}\nfunction dataset_dev(node, property, value) {\n    node.dataset[property] = value;\n    dispatch_dev('SvelteDOMSetDataset', { node, property, value });\n}\nfunction set_data_dev(text, data) {\n    data = '' + data;\n    if (text.wholeText === data)\n        return;\n    dispatch_dev('SvelteDOMSetData', { node: text, data });\n    text.data = data;\n}\nfunction validate_each_argument(arg) {\n    if (typeof arg !== 'string' && !(arg && typeof arg === 'object' && 'length' in arg)) {\n        let msg = '{#each} only iterates over array-like objects.';\n        if (typeof Symbol === 'function' && arg && Symbol.iterator in arg) {\n            msg += ' You can use a spread to convert this iterable into an array.';\n        }\n        throw new Error(msg);\n    }\n}\nfunction validate_slots(name, slot, keys) {\n    for (const slot_key of Object.keys(slot)) {\n        if (!~keys.indexOf(slot_key)) {\n            console.warn(`<${name}> received an unexpected slot \"${slot_key}\".`);\n        }\n    }\n}\nfunction validate_dynamic_element(tag) {\n    const is_string = typeof tag === 'string';\n    if (tag && !is_string) {\n        throw new Error('<svelte:element> expects \"this\" attribute to be a string.');\n    }\n}\nfunction validate_void_dynamic_element(tag) {\n    if (tag && is_void(tag)) {\n        console.warn(`<svelte:element this=\"${tag}\"> is self-closing and cannot have content.`);\n    }\n}\nfunction construct_svelte_component_dev(component, props) {\n    const error_message = 'this={...} of <svelte:component> should specify a Svelte component.';\n    try {\n        const instance = new component(props);\n        if (!instance.$$ || !instance.$set || !instance.$on || !instance.$destroy) {\n            throw new Error(error_message);\n        }\n        return instance;\n    }\n    catch (err) {\n        const { message } = err;\n        if (typeof message === 'string' && message.indexOf('is not a constructor') !== -1) {\n            throw new Error(error_message);\n        }\n        else {\n            throw err;\n        }\n    }\n}\n/**\n * Base class for Svelte components with some minor dev-enhancements. Used when dev=true.\n */\nclass SvelteComponentDev extends SvelteComponent {\n    constructor(options) {\n        if (!options || (!options.target && !options.$$inline)) {\n            throw new Error(\"'target' is a required option\");\n        }\n        super();\n    }\n    $destroy() {\n        super.$destroy();\n        this.$destroy = () => {\n            console.warn('Component was already destroyed'); // eslint-disable-line no-console\n        };\n    }\n    $capture_state() { }\n    $inject_state() { }\n}\n/**\n * Base class to create strongly typed Svelte components.\n * This only exists for typing purposes and should be used in `.d.ts` files.\n *\n * ### Example:\n *\n * You have component library on npm called `component-library`, from which\n * you export a component called `MyComponent`. For Svelte+TypeScript users,\n * you want to provide typings. Therefore you create a `index.d.ts`:\n * ```ts\n * import { SvelteComponentTyped } from \"svelte\";\n * export class MyComponent extends SvelteComponentTyped<{foo: string}> {}\n * ```\n * Typing this makes it possible for IDEs like VS Code with the Svelte extension\n * to provide intellisense and to use the component like this in a Svelte file\n * with TypeScript:\n * ```svelte\n * <script lang=\"ts\">\n * \timport { MyComponent } from \"component-library\";\n * </script>\n * <MyComponent foo={'bar'} />\n * ```\n *\n * #### Why not make this part of `SvelteComponent(Dev)`?\n * Because\n * ```ts\n * class ASubclassOfSvelteComponent extends SvelteComponent<{foo: string}> {}\n * const component: typeof SvelteComponent = ASubclassOfSvelteComponent;\n * ```\n * will throw a type error, so we need to separate the more strictly typed class.\n */\nclass SvelteComponentTyped extends SvelteComponentDev {\n    constructor(options) {\n        super(options);\n    }\n}\nfunction loop_guard(timeout) {\n    const start = Date.now();\n    return () => {\n        if (Date.now() - start > timeout) {\n            throw new Error('Infinite loop detected');\n        }\n    };\n}\n\nexport { HtmlTag, HtmlTagHydration, SvelteComponent, SvelteComponentDev, SvelteComponentTyped, SvelteElement, action_destroyer, add_attribute, add_classes, add_flush_callback, add_location, add_render_callback, add_resize_listener, add_styles, add_transform, afterUpdate, append, append_dev, append_empty_stylesheet, append_hydration, append_hydration_dev, append_styles, assign, attr, attr_dev, attribute_to_object, beforeUpdate, bind, binding_callbacks, blank_object, bubble, check_outros, children, claim_component, claim_element, claim_html_tag, claim_space, claim_svg_element, claim_text, clear_loops, component_subscribe, compute_rest_props, compute_slots, construct_svelte_component, construct_svelte_component_dev, createEventDispatcher, create_animation, create_bidirectional_transition, create_component, create_in_transition, create_out_transition, create_slot, create_ssr_component, current_component, custom_event, dataset_dev, debug, destroy_block, destroy_component, destroy_each, detach, detach_after_dev, detach_before_dev, detach_between_dev, detach_dev, dirty_components, dispatch_dev, each, element, element_is, empty, end_hydrating, escape, escape_attribute_value, escape_object, exclude_internal_props, fix_and_destroy_block, fix_and_outro_and_destroy_block, fix_position, flush, getAllContexts, getContext, get_all_dirty_from_scope, get_binding_group_value, get_current_component, get_custom_elements_slots, get_root_for_style, get_slot_changes, get_spread_object, get_spread_update, get_store_value, globals, group_outros, handle_promise, hasContext, has_prop, head_selector, identity, init, insert, insert_dev, insert_hydration, insert_hydration_dev, intros, invalid_attribute_name_character, is_client, is_crossorigin, is_empty, is_function, is_promise, is_void, listen, listen_dev, loop, loop_guard, merge_ssr_styles, missing_component, mount_component, noop, not_equal, now, null_to_empty, object_without_properties, onDestroy, onMount, once, outro_and_destroy_block, prevent_default, prop_dev, query_selector_all, raf, run, run_all, safe_not_equal, schedule_update, select_multiple_value, select_option, select_options, select_value, self, setContext, set_attributes, set_current_component, set_custom_element_data, set_custom_element_data_map, set_data, set_data_dev, set_input_type, set_input_value, set_now, set_raf, set_store_value, set_style, set_svg_attributes, space, spread, src_url_equal, start_hydrating, stop_propagation, subscribe, svg_element, text, tick, time_ranges_to_array, to_number, toggle_class, transition_in, transition_out, trusted, update_await_block_branch, update_keyed_each, update_slot, update_slot_base, validate_component, validate_dynamic_element, validate_each_argument, validate_each_keys, validate_slots, validate_store, validate_void_dynamic_element, xlink_attr };\n","<script>\n   let showHelp = false;\n\n   const toggleHelp = () => showHelp = !showHelp;\n\n   const handleKeyPress = e => {\n      if (e.key === 'h') toggleHelp();\n   };\n\n   // $: showHelp = window.location.hash === \"#help\";\n</script>\n\n<svelte:window on:keypress={handleKeyPress}/>\n<main class=\"graasta-app\">\n\n   <div class=\"content\">\n      <slot></slot>\n   </div>\n\n   {#if showHelp}\n   <div class=\"helptext\">\n      <slot name=\"help\"></slot>\n   </div>\n   {/if}\n\n</main>\n\n<style>\n\n/* main styles for graasta-app and children */\n:global(#graasta-app-container) {\n   height: max-content;\n   width: 100% !important;\n}\n\n.graasta-app {\n   font-family: Helvetica, Areal, Verdana, sans-serif;\n   display: block;\n   position: relative;\n   font-size: max(14px, 1vw);\n\n   aspect-ratio: 16/9;\n   min-width: 800px;\n\n   width: 100%;\n   height: auto;\n\n   box-sizing: border-box;\n   padding: 0;\n   margin: 0 auto;\n   background: #fdfdfd;\n}\n\n.graasta-app  * {\n   box-sizing: border-box;\n   margin: 0;\n   padding: 0;\n}\n\n.graasta-app :glbal(.plot) {\n   box-shadow: 0px 0px 5px  #30303020;\n}\n\n.graasta-app .content {\n   width: 100%;\n   height: 100%;\n}\n\n/* help text and button */\n\n.helptext {\n   font-family: 'Open Sans', sans-serif;\n\n   position: absolute;\n   top: 0;\n   width: 0;\n   left: 0;\n   bottom: 0;\n\n   z-index: 999;\n   background: white;\n   box-sizing: border-box;\n\n   width: 100%;\n   height: 100%;\n   padding: 1em;\n   margin: 0;\n   line-height: 1.35em;\n   font-size: 1em;\n   color: #303030;\n}\n\n.helptext :global(h2) {\n   padding: 1.25em 0 0.5em 0;\n   font-size: 1.2em;\n}\n\n.helptext :global(p) {\n   padding: 0 0 0.5em 0;\n   line-height: 1.5em;\n   font-size: 1em;\n}\n\n</style>","<script>\n   export let errormsg = undefined;\n   export let legend = \"\";\n</script>\n\n<fieldset class=\"app-control-area\">\n   {#if legend !== \"\"}\n   <legend>{legend}</legend>\n   {/if}\n   <slot></slot>\n   {#if errormsg}<div class=\"app-control-error\">{errormsg}</div>{/if}\n</fieldset>\n\n<style>\n   .app-control-error {\n      padding: 0.5em 0.5em 0.25em 0.65em;\n      font-size: 0.75em;\n      color: crimson;\n   }\n\n   fieldset {\n      background: #f4f4f4;\n      margin: 0;\n      box-shadow: 0px 0px 2px  #30303020;\n      border: none;\n      padding: 0.5em;\n   }\n\n   legend {\n      color: #606060;\n      float: left;\n      width: 100%;\n      display: block;\n      margin: 0;\n      padding: 0.25em 0em;\n      font-size: 1.1em;\n      font-weight: bold;\n   }\n</style>","<script>\n   export let id;\n   export let label;\n   export let disable = false;\n   export let hidden = false;\n</script>\n\n<div class=\"app-control\" class:hidden class:disable>\n   <div class=\"shield\"></div>\n   <label for={id}>{@html label}</label>\n   <slot></slot>\n</div>\n\n<style>\n   .app-control {\n      font-size: 1em;\n      margin: 0.25em 0 0 0;\n      padding: 0.15em 0.25em;\n      display: flex;\n      align-items: center;\n      justify-content: flex-begin;\n      position: relative;\n   }\n\n\n   .app-control > label {\n      height: 1.5em;\n      line-height: 1.5em;\n      flex: 0 0 90px;\n      max-width: 90px;\n   }\n\n   .app-control > slot {\n      width: 100%;\n   }\n\n   .shield {\n      display: none;\n   }\n\n   @media(min-width: 959px) {\n      .app-control > label {\n         flex: 0 0 120px;\n         max-width: 120px;\n      }\n   }\n\n   @media(min-width: 1279px) {\n      .app-control > label {\n         flex: 0 0 150px;\n         max-width: 150px;\n      }\n   }\n\n   /* disabled styles */\n   .app-control.disable > label{\n      color: #b0b0b0;\n   }\n\n   .app-control.hidden {\n      visibility: hidden;\n   }\n\n   .app-control.disable > .shield {\n      display: block;\n      background: #ffffff50;\n      position: absolute;\n      top: 0;\n      left: 0;\n      width: 100%;\n      height: 100%;\n      z-index: 999;\n   }\n</style>","<script>\n   import { createEventDispatcher } from \"svelte\";\n   import AppControl from \"./AppControl.svelte\";\n\n   export let id;\n   export let label;\n   export let value;\n   export let min;\n   export let max;\n   export let decNum = 1;\n   export let step = +((max - min) / 100).toFixed(4);\n   export let disable = false;\n   export let hidden = false;\n\n   if (value < min || value > max) {\n      throw(\"The value is outside of the provided range.\");\n   }\n\n   const dispatch = createEventDispatcher();\n\n   let sliderElement;\n   let sliderContainer;\n   let isDragging = false;\n\n   const computeValue = (p) => {\n      const tmpValue = min + p * (max - min);\n\n      // strange construction below is needed for:\n      // a. make a value fractionated according to step\n      // b. get rid of small decimals added by JS due to loss of precision\n      return(+(Math.round(tmpValue / step) * step).toFixed(4));\n   }\n\n   const getRelativePosition = (e) => {\n      const sliderRect = sliderElement.getBoundingClientRect();\n      const parentRect = sliderContainer.getBoundingClientRect();\n      const minX = sliderRect.x;\n      const maxX = parentRect.x + parentRect.width;\n\n      return (e.clientX - minX) / (maxX - minX);\n   }\n\n   const startChanging = (e) => {\n      const p = getRelativePosition(e);\n      if (p < 0 || p > 1) return;\n      isDragging = p * 100 > width - 5 && p * 100 < width + 5;\n   }\n\n   const cancelChanging = (e) => {\n      isDragging = false;\n   }\n\n   const stopChanging = (e) => {\n      isDragging = false;\n      const p = getRelativePosition(e);\n      if (p < 0 || p > 1) return;\n\n      value = computeValue(p);\n   }\n\n   const changing = (e) => {\n      if (!isDragging) return;\n      const p = getRelativePosition(e);\n      if (p < 0 || p > 1) return;\n\n      value = computeValue(p);\n   }\n\n   $: width = (value - min) / (max - min) * 100;\n   $: dispatch(\"change\", value);\n</script>\n\n<AppControl id={id} label={label} {disable} {hidden}>\n   <div\n      class=\"rangeSliderContainer\"\n      bind:this={sliderContainer}\n      on:mousewheel={changing}\n      on:mousemove={changing}\n      on:mousedown={startChanging}\n      on:mouseleave={cancelChanging}\n      on:mouseup={stopChanging}>\n\n      <div class=\"rangeSlider\" style=\"width:{width}%\" bind:this={sliderElement}></div>\n      <span>{value.toFixed(decNum)}</span>\n   </div>\n   <input type=\"range\" step={step} bind:value=\"{value}\" min={min} max={max}>\n</AppControl>\n\n<style>\n   .rangeSliderContainer {\n      position: relative;\n      box-sizing: border-box;\n      display: inline-block;\n      flex: 1 1 auto;\n      background: #e0e0e0;\n      height: 1.5em;\n      margin: 0;\n      padding: 0;\n      width: auto;\n      border-radius: 2px;\n\n      user-select: none;\n      -webkit-user-select: none;\n      -moz-user-select: none;\n\n   }\n\n   .rangeSlider {\n      position: relative;\n      display: inline-block;\n      background: #606060;\n      border-radius: 2px;\n\n      margin: 0;\n      padding: 0;\n      height: 100%;\n      cursor:default;\n      user-select: none;\n      -webkit-user-select: none;\n      -moz-user-select: none;\n\n   }\n\n   .rangeSliderContainer span {\n      display: inline-block;\n      position: absolute;\n      right: 0;\n      top: 0;\n      font-size: 0.85em;\n      padding: 1px 5px;\n      color: #606060;\n      mix-blend-mode: difference;\n      line-height: 1.6em;\n      user-select: none;\n      -webkit-user-select: none;\n      -moz-user-select: none;\n   }\n\n   input {\n      display: none;\n      width: 100%;\n   }\n</style>\n\n","<script>\n   import { fade } from 'svelte/transition';\n   import AppControl from \"./AppControl.svelte\";\n\n   export let id;\n   export let label;\n   export let options;\n   export let value = options[0];\n   export let disable = false;\n   export let hidden = false;\n\n</script>\n\n<AppControl {id} {label} {disable} {hidden} >\n\n   <div class=\"selector\">\n      {#each options as option (option)}\n      <div on:click={() => value = option} on:keydown={() => value = option} class=\"option\" class:selected={option==value}>{@html option}</div>\n      {/each}\n   </div>\n   <input name={id} bind:value={value}>\n</AppControl>\n\n<style>\n   input {\n      display: none;\n   }\n\n   .selector {\n      position: relative;\n      box-sizing: border-box;\n      display: inline-block;\n      flex: 0 0 auto;\n      background: #e0e0e0;\n\n      font-size: 1em;\n      height: 1.5em;\n      line-height: 1.5em;\n      margin: 0;\n      padding: 0;\n      width: auto;\n      border-radius: 2px;\n\n      user-select: none;\n      -webkit-user-select: none;\n      -moz-user-select: none;\n\n      display: flex;\n   }\n\n   .option {\n      cursor: default;\n      padding: 0 1em;\n      margin: 0 1px;\n      color: #606060;\n      transition: background-color 0.5s ease;\n   }\n\n   .option.selected {\n      border-radius: 3px;\n      background-color: #606060;\n      color: #fefefe;\n   }\n\n</style>","export let colors = {\n   plots: {\n      // population colors\n      POPULATIONS_PALE: [\"#33668820\", \"#ff990020\"],\n      POPULATIONS: [\"#33668850\", \"#ff990050\"],\n      SAMPLES: [\"#336688\", \"#ff9900\"],\n\n      // statistics on plot legend\n      STAT_NAME: \"#808080\",\n      STAT_VALUE: \"#202020\"\n   }\n};\n\n\nexport function formatLabels(labels) {\n\n   if (!Array.isArray(labels)) labels = [labels];\n   let labelsStr = Array(length = labels.length);\n\n\n   for (let i = 0; i < labels.length; i++) {\n      labelsStr[i] =    \"<tspan fill=\" + colors.plots.STAT_NAME + \">\" + labels[i].name + \":</tspan> \" + labels[i].value;\n   }\n\n   return labelsStr;\n}","import { noop, safe_not_equal, subscribe, run_all, is_function } from '../internal/index.mjs';\nexport { get_store_value as get } from '../internal/index.mjs';\n\nconst subscriber_queue = [];\n/**\n * Creates a `Readable` store that allows reading by subscription.\n * @param value initial value\n * @param {StartStopNotifier}start start and stop notifications for subscriptions\n */\nfunction readable(value, start) {\n    return {\n        subscribe: writable(value, start).subscribe\n    };\n}\n/**\n * Create a `Writable` store that allows both updating and reading by subscription.\n * @param {*=}value initial value\n * @param {StartStopNotifier=}start start and stop notifications for subscriptions\n */\nfunction writable(value, start = noop) {\n    let stop;\n    const subscribers = new Set();\n    function set(new_value) {\n        if (safe_not_equal(value, new_value)) {\n            value = new_value;\n            if (stop) { // store is ready\n                const run_queue = !subscriber_queue.length;\n                for (const subscriber of subscribers) {\n                    subscriber[1]();\n                    subscriber_queue.push(subscriber, value);\n                }\n                if (run_queue) {\n                    for (let i = 0; i < subscriber_queue.length; i += 2) {\n                        subscriber_queue[i][0](subscriber_queue[i + 1]);\n                    }\n                    subscriber_queue.length = 0;\n                }\n            }\n        }\n    }\n    function update(fn) {\n        set(fn(value));\n    }\n    function subscribe(run, invalidate = noop) {\n        const subscriber = [run, invalidate];\n        subscribers.add(subscriber);\n        if (subscribers.size === 1) {\n            stop = start(set) || noop;\n        }\n        run(value);\n        return () => {\n            subscribers.delete(subscriber);\n            if (subscribers.size === 0) {\n                stop();\n                stop = null;\n            }\n        };\n    }\n    return { set, update, subscribe };\n}\nfunction derived(stores, fn, initial_value) {\n    const single = !Array.isArray(stores);\n    const stores_array = single\n        ? [stores]\n        : stores;\n    const auto = fn.length < 2;\n    return readable(initial_value, (set) => {\n        let inited = false;\n        const values = [];\n        let pending = 0;\n        let cleanup = noop;\n        const sync = () => {\n            if (pending) {\n                return;\n            }\n            cleanup();\n            const result = fn(single ? values[0] : values, set);\n            if (auto) {\n                set(result);\n            }\n            else {\n                cleanup = is_function(result) ? result : noop;\n            }\n        };\n        const unsubscribers = stores_array.map((store, i) => subscribe(store, (value) => {\n            values[i] = value;\n            pending &= ~(1 << i);\n            if (inited) {\n                sync();\n            }\n        }, () => {\n            pending |= (1 << i);\n        }));\n        inited = true;\n        sync();\n        return function stop() {\n            run_all(unsubscribers);\n            cleanup();\n        };\n    });\n}\n\nexport { derived, readable, writable };\n","/**********************************************\n * Functions for statistical tests and models *\n **********************************************/\n\n/**\n * Returns a p-value for any test\n * @param {function} pfun - reference to a CDF function (e.g. pnorm)\n * @param {number} crit - critical value for the test (e.g. z-score or t-score)\n * @param {string} tail - which tail to use (\"left\", \"right\", or \"both\")\n * @param {Array} params - additional parameters to CDF function\n * @returns {number} - a p-value for the test\n */\nexport function getPValue(pfun, crit, tail, params = []) {\n\n   if (tail === \"left\") {\n      return(pfun(crit, ...params));\n   }\n\n   if (tail === \"right\") {\n      return(1 - pfun(crit, ...params));\n   }\n\n   if (tail === \"both\") {\n      let p = pfun(crit, ...params);\n      return min([p, 1 - p]) * 2;\n   }\n}\n\n\n/**\n * Makes one-sample t-test for a mean\n * @param {number[]} x - vector with sample values\n * @param {number} mu - assumed mean value for population (H0)\n * @param {number} alpha - significance level (used to compute confidence interval)\n * @param {string} tail - which tail to use (\"left\", \"right\", or \"both\")\n * @returns {Object} - a JSON with test results\n */\nexport function tTest1(x, mu = 0, alpha = 0.05, tail = \"both\") {\n\n   if (typeof(mu) !== \"number\") {\n      throw Error(\"Parameter 'mu' should be a number.\");\n   }\n\n   const nx = x.length;\n\n   const effectExpected = mu;\n   const effectObserved = mean(x);\n   const se = sd(x) / Math.sqrt(nx);\n   const tValue = (effectObserved - effectExpected) / se;\n   const DoF = nx - 1\n   const errMargin = qt(1 - alpha/2, DoF) * se;\n\n   return {\n      test: \"One sample t-test\",\n      effectExpected: mu,\n      effectObserved: effectObserved,\n      se: se,\n      tValue: tValue,\n      alpha: alpha,\n      tail: tail,\n      DoF: DoF,\n      pValue: getPValue(pt, tValue, tail, [DoF]),\n      ci: [effectObserved - errMargin, effectObserved + errMargin]\n   };\n}\n\n/**\n * Makes two-sample t-test for a difference of means assuming population variances equal\n * @param {number[]} x - vector with sample 1 values\n * @param {number[]} y - vector with sample 2 values\n * @param {number} alpha - significance level (used to compute confidence interval)\n * @param {string} tail - which tail to use (\"left\", \"right\", or \"both\")\n * @returns {Object} - a JSON with test results\n */\nexport function tTest2(x, y, alpha = 0.05, tail = \"both\") {\n   const nx = x.length;\n   const mx = mean(x);\n   const my = mean(y);\n   const ny = y.length;\n\n   const effectExpected = 0;\n   const effectObserved = mx - my;\n   const se = Math.sqrt( (sd(x)**2 / nx) + (sd(y)**2 / ny));\n   const tValue = (effectObserved - effectExpected) / se;\n   const DoF = (nx - 1) + (ny - 1);\n   const errMargin = qt(1 - alpha/2, DoF) * se;\n\n   return {\n      test: \"Two sample t-test\",\n      effectExpected: effectExpected,\n      effectObserved: effectObserved,\n      se: se,\n      tValue: tValue,\n      alpha: alpha,\n      tail: tail,\n      DoF: DoF,\n      pValue: getPValue(pt, tValue, tail, [DoF]),\n      ci: [effectObserved - errMargin, effectObserved + errMargin]\n   };\n}\n\n/**********************************************\n * Functions for computing single statistics  *\n **********************************************/\n\n/**\n * Computes kurtosis of values\n * @param {number[]} x - vector with values\n * @returns {number}\n */\nexport function kurtosis(x) {\n   let n = x.length;\n   let m = mean(x);\n\n   let m4 = 0.0;\n   let m2 = 0.0;\n   for (let i = 0; i < n; i++) {\n      m2 = m2 + Math.pow((x[i] - m), 2);\n      m4 = m4 + Math.pow((x[i] - m), 4);\n   }\n\n   return (m4/n) / Math.pow((m2/n), 2);\n}\n\n\n/**\n * Computes skewness of values\n * @param {number[]} x - vector with values\n * @returns {number}\n */\nexport function skewness(x) {\n   let n = x.length;\n   let m = mean(x);\n\n   let m3 = 0.0;\n   let m2 = 0.0;\n   for (let i = 0; i < n; i++) {\n      m2 = m2 + Math.pow((x[i] - m), 2);\n      m3 = m3 + Math.pow((x[i] - m), 3);\n   }\n\n   return (m3/n) / Math.pow((m2/n), 1.5);\n}\n\n\n/**\n * Finds smallest value in a vector\n * @param {number[]} x - vector with values\n * @returns {number}\n */\nexport function min(x) {\n   let n = x.length;\n   let min = Number.POSITIVE_INFINITY\n\n   while (n--) min = x[n] < min ? x[n] : min;\n   return min;\n}\n\n\n/**\n * Finds largest value in a vector\n * @param {number[]} x - vector with values\n * @returns {number}\n */\nexport function max(x) {\n   let n = x.length;\n   let max = Number.NEGATIVE_INFINITY\n\n   while (n--) max = x[n] > max ? x[n] : max;\n   return max;\n}\n\n\n/**\n * Computes sum of all values in a vector\n * @param {number[]} x - vector with values\n * @returns {number}\n */\nexport function sum(x) {\n   let s = 0;\n   for (let i = 0; i < x.length; i++) {\n      s = s + x[i];\n   }\n\n   return s;\n}\n\n\n/**\n * Computes product of all value in a vector\n * @param {number[]} x - vector with values\n * @returns {number}\n */\nexport function prod(x) {\n   let p = 1;\n   for (let i = 0; i < x.length; i++) {\n      p = p * x[i];\n   }\n\n   return p;\n}\n\n\n/**\n * Computes mean (average) value for a vector\n * @param {number[]} x - vector with values\n * @returns {number}\n */\nexport function mean(x) {\n   return sum(x) / x.length;\n}\n\n\n/**\n * Computes covariance between two vectors\n * @param {number[]} x - vector with values\n * @param {number[]} y - vector with values\n * @param {boolean} biased - compute a biased version with n degrees of freedom or not (with n-1).\n * @param {number} mx - mean of x values (if already known)\n * @param {number} my - mean of y values (if already known)\n * @returns {number}\n */\nexport function cov(x, y, biased = false, mx = undefined, my = undefined) {\n\n   const n = x.length;\n\n   if (y.length !== n) {\n      throw Error(\"Vectors 'x' and 'y' must have the same length.\");\n   }\n\n   if (n < 2) {\n      throw Error(\"Vectors 'x' and 'y' must have at least two values.\");\n   }\n\n   if (mx === undefined) mx = mean(x);\n   if (my === undefined) my = mean(y);\n\n   let cov = 0;\n   for (let i = 0; i < n; i++) {\n      cov = cov + (x[i] - mx) * (y[i] - my);\n   }\n\n   return cov / (biased ? n : n - 1);\n}\n\n\n/**\n * Computes variance for a vector\n * @param {number[]} x - vector with values\n * @param {boolean} biased - compute a biased version with n degrees of freedom or not (with n-1).\n * @param {number} m - mean value (e.g. if already computed).\n * @returns {number}\n */\nexport function variance(x, biased = false, m = undefined) {\n   return cov(x, x, biased, m, m);\n}\n\n\n/**\n * Computes standard deviation for a vector\n * @param {number[]} x - vector with values\n * @param {boolean} biased - compute a biased version with n degrees of freedom or not (with n-1).\n * @param {number} m - mean value (e.g. if already computed).\n * @returns {number}\n */\nexport function sd(x, biased = false, m = undefined) {\n   return Math.sqrt(variance(x, biased, m));\n}\n\n\n/**\n * Computes correlation between two vectors\n * @param {number[]} x - vector with values\n * @param {number[]} y - vector with values\n * @param {string} method - which method to use (\"pearson\" or \"spearman\")\n * @returns {number}\n */\nexport function cor(x, y, method = \"pearson\") {\n\n   if (method === \"spearman\") {\n      return cor(rank(x), rank(y));\n   }\n\n   return cov(x, y) / (sd(x) * sd(y));\n}\n\n\n\n/***************************************************\n * Functions for computing vectors of statistics   *\n ***************************************************/\n\n\n/**\n * Computes a p-th quantile/quantiles for a numeric vector\n * @param {number[]} x - vector with values\n * @param {number|number[]} p - probability (one value or a vector)\n * @returns {number}\n */\nexport function quantile(x, p) {\n\n   x = sort(x);\n   const n = x.length;\n\n   if (!Array.isArray(p)) p = [p];\n   if (typeof(p[0]) !== \"number\" || min(p) < 0 || max(p) > 1) {\n      throw new Error(\"Parameter 'p' must be between 0 and 1 (both included).\");\n   }\n\n   function q(x, p) {\n      const h = (n - 1) * p + 1;\n      const n1 = Math.floor(h);\n      const n2 = Math.ceil(h);\n      return x[n1 - 1] + (x[n2 - 1] - x[n1 - 1]) * (h - Math.floor(h));\n   }\n\n   const out =  p.map(v => q(x, v));\n   return p.length == 1 ? out[0] : out;\n}\n\n\n/**\n * Generate a sequence of n numbers between min and max.\n * @param {number} min - first value in the sequence\n * @param {number} max - last value in the sequence\n * @param {number} n - number of values in the sequence\n * @returns {number[]} array with the sequence values\n */\nexport function seq(min, max, n) {\n\n   if (n < 2) {\n      throw new Error(\"Parameter 'n' should be ≥ 2.\");\n   }\n\n   if (n === undefined && Number.isInteger(min) && Number.isInteger(max)) {\n      if (max === min) return [max];\n      n = max - min + 1;\n   }\n\n   const step = (max - min + 0.0) / (n - 1 + 0.0)\n   let out = [...Array(n)].map((x, i) => min + i * step);\n\n   // if step is smaller than 1 round values to remove small decimals accidentally added by JS\n   if (Math.abs(step) < 1) {\n      const r = Math.pow(10, Math.round(-Math.log10(step)) + 1);\n      out = out.map(v => Math.round((v + Number.EPSILON) * r) / r)\n   }\n\n   return(out)\n}\n\n\n/**\n * Finds a range of values in a vector (min and max)\n * @param {number[]} x - vector with values\n * @returns {number[]} array with min and max values\n */\nexport function range(x) {\n   return [min(x), max(x)];\n}\n\n\n/**\n * Computes a range of values in a vector with a margin\n * @param {number[]} x - vector with values\n * @param {number} margin - margin in parts of one (e.g. 0.1 for 10% or 2 for 200%)\n * @returns{number[]} array with marginal range boundaries\n */\nexport function mrange(x, margin = 0.05) {\n   const mn = min(x);\n   const mx = max(x);\n   const d = mx - mn;\n\n   return [mn - d * margin, max(x) + d * margin];\n}\n\n\n/**\n * Splits range of vector values into equal intervals\n * @param {number[]} x - vector with values\n * @param {number} n - number of intervals\n * @returns {number[]} vector with boundaries of the intervals\n */\nexport function split(x, n) {\n   if (x === undefined || !Array.isArray(x) || x.length < 2) {\n      throw new Error(\"split: 'x' must bet a vector with numbers.\");\n   }\n\n   if (n === undefined || n < 2) {\n      throw new Erro(\"split: 'n' must be a positive integer number.\");\n   }\n\n   const mn = min(x);\n   const mx = max(x);\n\n   if (mn === mx) {\n      throw new Error(\"split: values in a vector 'x' should vary.\");\n   }\n\n   const step = (mx - mn) / n;\n   return Array.from({length: n + 1}, (v, i) => mn + i * step + 0.0);\n}\n\n\n/**\n * Counts how many values from a vector falls into provided intervals (bins)\n * @param {number[]} x - vector with values\n * @param {number[]} bins - vector with bins boundaries\n * @returns {number[]} vector with counts for each bean\n */\nexport function count(x, bins) {\n\n   if (x === undefined || !Array.isArray(x) ||x.length < 2) {\n      throw new Error(\"count: 'x' must be a vector with numbers.\")\n   }\n\n   if (bins === undefined || !Array.isArray(bins) || bins.length < 2) {\n      throw new Error(\"count: 'bins' must be a vector with numbers.\")\n   }\n\n   const n = bins.length;\n\n   // add a bit extra to right side of the last bin\n   bins[n - 1] = bins[n - 1] * 1.0001\n\n   // count\n   let counts = Array(n - 1).fill(0);\n   for (let i = 0; i < x.length; i++) {\n      for (let j = 0; j < n - 1; j++) {\n         if (x[i] >= bins[j] && x[i] < bins[j + 1]) counts[j] = counts[j] + 1;\n      }\n   }\n   return counts;\n}\n\n\n/**\n * Computes middle points between values of a vector\n * @param {number[]} x - vector with values\n * @returns {number[]} vector with middle points\n */\nexport function mids(x) {\n   return x.slice(1).map((v, i) => (0.5 * (v + x[i])));\n}\n\n\n/**\n * Computes difference between all adjacent values in a vector\n * @param {number[]} x - vector with values\n * @returns {number[]} vector with the differences\n */\nexport function diff(x) {\n   return x.slice(1).map( (y, i) => (y - x[i]));\n}\n\n\n/**\n * Finds outliers in a vector based on inter-quartile range distance\n * @param {Array} x - vector with values\n * @param {number} Q1 - first quartile (optional parameter)\n * @param {Array} Q3 - third quartile (optional parameter)\n * @returns {Array} vector with outliers or empty vector if none were found.\n */\nexport function getOutliers(x, Q1 = undefined, Q3 = undefined) {\n\n   if (Q1 === undefined) Q1 = quantile(x, 0.25);\n   if (Q3 === undefined) Q3 = quantile(x, 0.75);\n\n   const IQR = Q3 - Q1;\n   const bl = Q1 - 1.5 * IQR\n   const bu = Q3 + 1.5 * IQR\n   return(x.filter(v => v < bl || v > bu));\n}\n\n\n/**\n * Returns ranks of values in a vector (ranks start from 1, not 0)\n * @param {number[]} x - vector with values\n * @returns {number[]} vector with ranks\n */\nexport function rank(x) {\n   const y = [...x].sort((a, b) => a - b);\n   return(x.map(v => y.indexOf(v) + 1));\n}\n\n\n/**\n * Generate probability points for QQ plot\n * @param {number} n - number of points\n * @returns {Array} a sequence of probabilities between 0 and 1\n */\nexport function ppoints(n) {\n   const a = n < 10 ? 3.0/8.0 : 0.5;\n   return Array.from({length: n}, (v, i) => (i + 1 - a) / (n + (1 - a) - a));\n}\n\n\n/**\n * Computes cumulative sums for the vector values\n * @param {number[]} x - vector with values\n * @returns {number[]}\n */\nexport function cumsum(x) {\n   let s = 0;\n   return x.map(v => s += v);\n}\n\n\n\n/***********************************************\n * Functions for theoretical distribution      *\n ***********************************************/\n\n\n/**\n * Generates 'n' random numbers from a uniform distribution\n * @param {number} n - amount of numbers to generate\n * @param {number} a - smallest value (min) of the population\n * @param {number} b - largest value (max) of the population\n * @returns {number[]} vector with generated numbers\n */\nexport function runif(n, a = 0, b = 1) {\n   let out = Array(n);\n   for (let i = 0; i < n; i++) out[i] = (a + Math.random() * (b - a));\n   return out;\n}\n\n\n/**\n * Probability density function for uniform distribution\n * @param {Array} x - vector of values\n * @param {number} a - smallest value (min) of the population\n * @param {number} b - largest value (max) of the population\n * @returns {Array} vector with densities\n */\nexport function dunif(x, a = 0, b = 1) {\n\n   if (!Array.isArray(x)) x = [x];\n\n   const n = x.length;\n   const A = 1 / (b - a);\n   let d = Array(n);\n\n   for (let i = 0; i < n; i++) {\n      d[i] = (x[i] < a || x[i] > b ) ? 0 : A;\n   }\n\n   return d;\n}\n\n\n/**\n * Cumulative distribution function for uniform distribution\n * @param {Array} x - vector of values\n * @param {number} a - smallest value (min) of the population\n * @param {number} b - largest value (max) of the population\n * @returns {Array} vector with probabilities\n */\nexport function punif(x, a = 0, b = 1) {\n\n   if (!Array.isArray(x)) x = [x];\n\n   const n = x.length;\n   let p = Array(n);\n   for (let i = 0; i < n; i++) {\n      if (x[i] < a) {\n         p[i] = 0;\n      } else if (x[i] > b) {\n         p[i] = 1;\n      } else {\n         p[i] = (x[i] - a) / (b - a)\n      }\n   }\n\n   return p;\n}\n\n\n /**\n * Generates 'n' random numbers from a normal distribution\n * @param {number} n - amount of numbers to generate\n * @param {number} mu - average value of the population\n * @param {number} sigma - standard deviation of the population\n * @returns {Array} vector with generated numbers\n */\nexport function rnorm(n, mu = 0, sigma = 1) {\n\n   let out = Array(n);\n   for (let i = 0; i < n; i ++) {\n      const a = Math.sqrt(-2 * Math.log(Math.random()));\n      const b = 2 * Math.PI * Math.random();\n      out[i] = (a * Math.sin(b) * sigma + mu);\n   }\n\n   return out;\n}\n\n\n/**\n * Probability density function for normal distribution\n * @param {Array} x - vector of values\n * @param {number} mu - average value of the population\n * @param {number} sigma - standard deviation of the population\n * @returns {Array} vector with densities\n */\nexport function dnorm(x, mu = 0, sigma = 1) {\n\n   if (!Array.isArray(x)) x = [x];\n\n   const n = x.length;\n   const A = 1 / (Math.sqrt(2 * Math.PI) * sigma);\n   const frac = -0.5 / sigma ** 2;\n\n   let d = Array(n);\n   for (let i = 0; i < n; i++) {\n      const df = x[i] - mu;\n      d[i] = A * Math.exp(frac * df * df);\n   }\n\n   return x.length === 1 ? d[0] : d;\n}\n\n\n/**\n * Cumulative distribution function for normal distribution\n * @param {Array} x - vector of values\n * @param {number} mu - average value of the population\n * @param {number} sigma - standard deviation of the population\n * @returns {Array} vector with probabilities\n */\nexport function pnorm(x, mu = 0, sigma = 1) {\n\n   if (!Array.isArray(x)) x = [x];\n\n   const n = x.length;\n   const frac = 1 / (Math.sqrt(2) * sigma);\n\n   let p = Array(n);\n   for (let i = 0; i < n; i++) {\n      p[i] = 0.5 * (1 + erf((x[i] - mu) * frac))\n   }\n\n   return p.length === 1 ? p[0] : p;\n}\n\n/**\n * Inverse cumulative distribution function for normal distribution\n * @param {number|number[]} p - vector of probabilities or a single probability value\n * @param {number} mu - average value of the population\n * @param {number} sigma - standard deviation of the population\n * @returns {number|number[]} vector with quantiles or single quantile value\n */\nexport function qnorm(p, mu = 0, sigma = 1) {\n\n   if (Array.isArray(p)) {\n      return p.map(v => qnorm(v, mu, sigma));\n   }\n\n   if (mu !== 0 || sigma !== 1) {\n      return qnorm(p) * sigma + mu;\n   }\n\n   if (p < 0 || p > 1) {\n      throw Error(\"Parameter 'p' must be between 0 and 1.\");\n   }\n\n   if (p < 0.0000000001) return -Infinity;\n   if (p > 0.9999999999) return +Infinity;\n\n   const SP1 = 0.425;\n   const SP2 = 5.0;\n   const C1 = 0.180625;\n   const C2 = 1.6;\n\n   const a0 = 3.3871327179;\n   const a1 = 5.0434271938 * 10;\n   const a2 = 1.5929113202 * 100;\n   const a3 = 5.9109374720 * 10;\n   const b1 = 1.7895169469 * 10;\n   const b2 = 7.8757757664 * 10;\n   const b3 = 6.7187563600 * 10;\n\n   const c0 = 1.4234372777;\n   const c1 = 2.7568153900;\n   const c2 = 1.3067284816;\n   const c3 = 1.7023821103 * 0.1;\n   const d1 = 7.3700164250 * 0.1;\n   const d2 = 1.2021132975 * 0.1;\n\n   const e0 = 6.6579051150;\n   const e1 = 3.0812263860;\n   const e2 = 4.2868294337 * 0.1;\n   const e3 = 1.7337203997 * 0.01;\n   const f1 = 2.4197894225 * 0.1;\n   const f2 = 1.2258202635 * 0.01;\n\n   const q = p - 0.5;\n   let r;\n\n   if (Math.abs(q) <= SP1) {\n      r = C1 - q * q;\n      return q * (((a3 * r + a2) * r + a1) *r + a0) / (((b3 * r + b2) * r + b1) * r + 1.0);\n   }\n\n   r = q < 0 ? p : 1 - p;\n   r = Math.sqrt(-Math.log(r));\n   let res;\n\n   if (r <= SP2) {\n      r = r - C2;\n      res = (((c3 * r + c2) * r + c1) * r + c0) / ((d2 * r + d1) * r + 1.0);\n   } else {\n      r = r - SP2;\n      res = (((e3 * r + e2) * r + e1) + e0) / ((f2 * r + f1) * r + 1.0);\n   }\n\n   return q < 0 ? -res : res;\n}\n\n/**\n * Probability density function for Student's t-distribution\n * @param {number|number[]} t - t-value or a vector of t-values\n * @param {number} dof - degrees of freedom\n */\nexport function dt(t, dof) {\n\n   if (dof < 0) {\n      throw new Error(\"Parameter 'dof' should be a positive number.\");\n   }\n\n   if (Array.isArray(t)) {\n      return t.map(v => dt(v, dof));\n   }\n\n   const pow = -0.5 * (dof + 1);\n   const A = 1 / (Math.sqrt(dof) * beta(0.5, dof/2));\n   return (A * Math.pow((1 + t * t / dof), pow));\n}\n\n\n/**\n * Cumulative distribution function for Student's t-distribution\n * @param {number|number[]} t - t-value or a vector of t-values\n * @param {number} dof - degrees of freedom\n */\nexport function pt(t, dof) {\n\n   if (dof === undefined || dof === null || dof < 1) {\n      throw Error(\"Parameter 'dof' (degrees of freedom) must be an integer number >= 1.\");\n   }\n\n   if (Array.isArray(t)) {\n      return t.map(v => pt(v, dof));\n   }\n\n   // since distribution in symmetric we can use only left tail\n   if (t === 0) return 0.5;\n   if (t === -Infinity) return 0;\n   if (t === Infinity) return 1;\n   if (t > 0) return (1 - pt(-t, dof));\n\n   return integrate((x) => dt(x, dof), -Infinity, t);\n}\n\n\n/**\n * Inverse cumulative distribution function for Student's t-distribution\n * @param {number|number[]} p - probability or vector with probabilities\n * @param {number} dof - degrees of freedom\n */\nexport function qt(p, dof) {\n\n   if (dof === undefined || dof === null || dof < 1) {\n      throw Error(\"Parameter 'dof' (degrees of freedom) must be an integer number >= 1.\");\n   }\n\n   if (p < 0 || p > 1) {\n      throw Error(\"Parameter 'p' must be between 0 and 1.\");\n   }\n\n   if (Array.isArray(p)) {\n      return p.map(v => qt(v, dof));\n   }\n\n   if (p < 0.0000000001) return -Infinity;\n   if (p > 0.9999999999) return +Infinity;\n\n\n   // simple cases — exact solutions\n   if (dof === 1) {\n      return Math.tan(Math.PI * (p - 0.5));\n   }\n\n   if (dof === 2) {\n      return 2 * (p - 0.5) * Math.sqrt(2 / (4 * p * (1 - p)));\n   }\n\n   // approximation\n\n   let sign = -1;\n   if (p >= 0.5){\n      sign = +1 ;\n      p = 2 * (1 - p);\n   } else {\n      sign = -1;\n      p = 2 * p;\n   }\n\n   const a = 1.0 / (dof - 0.5);\n   const b = 48.0 / (a ** 2);\n   let c = ((20700 * a / b - 98) * a - 16) * a + 96.36;\n   const d = ((94.5 / (b + c) - 3.0)/b + 1.0) * Math.sqrt(a * Math.PI / 2) * dof;\n\n   let x = d * p;\n   let y = x ** (2.0/dof);\n\n   if (y > 0.05 + a) {\n\n      // asymptotic inverse expansion about normal\n      x = qnorm(p * 0.5);\n      y = x ** 2;\n\n      if (dof < 5) {\n         c = c + 0.3 * (dof - 4.5) * (x + 0.6);\n      }\n\n      c = (((0.05 * d * x - 5.0) * x - 7.0) * x - 2.0) * x + b + c;\n      y = (((((0.4 * y + 6.3) * y + 36.0) * y + 94.5) / c - y - 3.0)/b + 1.0) * x;\n      y = a * (y ** 2);\n      y = y > 0.002 ? Math.exp(y) - 1.0 : 0.5 * (y ** 2) + y;\n   } else {\n      y = ((1.0 / (((dof + 6.0)/(dof * y) - 0.089 * d - 0.822) * (dof + 2.0) * 3.0) + 0.5/(dof + 4.0)) * y - 1.0) *\n         (dof + 1.0)/(dof + 2.0) + 1.0/y;\n   }\n\n   return sign * Math.sqrt(dof * y);\n}\n\n\n\n/**\n * Probability density function for F-distribution\n * @param {number|number[]} F - F-value or a vector of t-values\n * @param {number} d1 - degrees of freedom\n * @param {number} d2 - degrees of freedom\n */\nexport function df(F, d1, d2) {\n\n   if (F < 0 || d1 < 0 || d2 < 0) {\n      throw new Error(\"All 3 parameters must be positive.\");\n   }\n\n   if (d2 <= d1) {\n      throw new Error(\"Parameter 'd1' must be larger 'd2'.\");\n   }\n\n   if (Array.isArray(F)) {\n      return F.map(v => df(v, d1, d2));\n   }\n\n   return Math.sqrt( ( (d1 * F)**d1 * d2**d2) / ((d1 * F + d2)**(d1 + d2))) / (F * beta(d1/2, d2/2))\n}\n\n\n/**\n * Cumulative distribution function for F-distribution\n * @param {number|number[]} F - F-value or a vector of t-values\n * @param {number} d1 - degrees of freedom\n * @param {number} d2 - degrees of freedom\n */\nexport function pf(F, d1, d2) {\n\n   if (F < 0 || d1 < 0 || d2 < 0) {\n      throw new Error(\"All 3 parameters must be positive.\");\n   }\n\n   if (Array.isArray(F)) {\n      return F.map(v => pf(v, d1, d2));\n   }\n\n   return ibeta(d1 * F / (d1 * F + d2), d1/2, d2/2)\n}\n\n\n\n/***********************************************\n * Functions for manipulations with values     *\n ***********************************************/\n\n\n/**\n * Sorts values in a vector\n * @param {Array} x - vector with values\n * @returns {Array} vector with sorted values\n */\nexport function sort(x, decreasing = false) {\n   return decreasing ? [...x].sort((a, b) => b - a) : [...x].sort((a, b) => a - b);\n}\n\n\n/**\n * Replicates values in x n times\n * @param {any} x - single value or a vector with values\n * @param {number} n - how many times to replicate\n */\nexport function rep(x, n) {\n\n   if (Array.isArray(n)) {\n      if (x.length != n.length) {\n         throw new Error(\"Parameter 'n' should be a single value or a vector of the same length as x.\");\n      }\n\n      let out = [];\n      for (let i = 0; i < n.length; i++) {\n         out.push(...rep([x[i]], n[i]));\n      }\n\n      return out;\n   }\n\n   if (!Array.isArray(x)) x = [x];\n   if (n <= 1) return x;\n\n   const nx = x.length;\n   x.length = nx * n\n   for (let i = 0; i < n - 1; i ++) {\n      for (let j = 0; j < nx; j++) {\n         x[nx * (i + 1) + j] = x[j];\n      }\n   }\n\n   return x;\n}\n\n\n/**\n * Create a subset of vectors based on a vector of indices\n * @param {number[]} x - a vector with values\n * @param {number[]} indices - a vector with element indices (first index is 1 not 0!)\n * @param {string} method - what to do with values (\"select\" or \"remove\")\n */\nexport function subset(x, indices, method) {\n\n   if (!Array.isArray(x)) x = [x];\n   if (!Array.isArray(indices)) indices = [indices];\n\n   if (indices.length === 0) return [...x];\n\n   if (max(indices) > x.length || min(indices) < 1) {\n      throw new Error(\"Parameter 'indices' must have values between 1 and 'x.length'.\");\n   }\n\n   const n = indices.length;\n\n   if (!method || method === \"select\") {\n      let out = Array(n);\n      for (let i = 0; i < n; i++) {\n         out[i] = x[indices[i] - 1];\n      }\n      return out;\n   }\n\n   if (method === \"remove\") {\n      let out = [...x];\n      return out.filter((v, i) => !indices.includes(i + 1));\n   }\n\n   throw Error(\"Wrong value for argument 'method'.\");\n}\n\n\n/**\n * Generate combination of all levels of vectors\n * @param {...} args - a sequence of vectors\n */\nexport function expandGrid(...args) {\n\n   const nargs = args.length;\n   const d = args.map(v => v.length);\n   let orep = prod(d);\n\n   let grid = Array(nargs);\n   let repFac = 1;\n\n   for (let i = 0; i < nargs; i++) {\n      const x = args[i];\n      const nx = x.length;\n      orep = orep/nx;\n      grid[i] = subset(x, rep(rep(seq(1, nx, nx), rep(repFac, nx)), orep));\n      repFac = repFac * nx;\n   }\n\n   return grid;\n}\n\n\n/**\n * Shuffles values in vector x using Fisher–Yates algorithm\n * @param {Array} x - a vector with values\n */\nexport function shuffle(x) {\n  let y = [...x];\n  let n = y.length;\n  let t, i;\n\n  while (n) {\n    i = Math.floor(Math.random() * n--);\n    t = y[n];\n    y[n] = y[i];\n    y[i] = t;\n  }\n\n  return y;\n}\n\n\n/**\n * Finds index of value in x which is closest to the value a\n * @param {number[]} x - a vector with values\n * @param {number}  a - a value\n */\nexport function closestIndex(x, a) {\n   const c = x.reduce((prev, curr) => Math.abs(curr - a) < Math.abs(prev - a) ? curr : prev);\n   return x.indexOf(c);\n}\n\n\n/**\n * Rounds number (or vector of numbers) to given amount of decimals\n * @param {number | number[]} x - a vector with values\n * @return {number | number[]}\n */\nexport function round(x, n = 0) {\n   if (Array.isArray(x)) {\n      return x.map(v => round(v, n));\n   }\n   return Number.parseFloat(x.toFixed(n));\n}\n\n/**\n * Standardize (mean center and sd scale) values from a vector\n * @param {number | number[]} x - a vector with values\n * @return {number} center - value for centering the values (if undefined, will use mean(x))\n * @return {number} scale - value for scaling the values (if undefined, will use sd(x))\n *\n */\nexport function scale(x, center = undefined, scale = undefined) {\n   if (center === undefined) center = mean(x);\n   if (scale === undefined) scale = sd(x);\n\n   const n = x.length;\n   let y = Array(n);\n\n   for (let i = 0; i < n; i++) {\n      y[i] = (x[i] - center) / scale;\n   }\n\n   return y;\n}\n\n\n\n/***************************************************************\n * Mathematical functions and methods needed for computations  *\n ***************************************************************/\n\n/**\n * Computes numeric integral for function \"f\" with limits (a, b)\n * @param {function} f - a reference to a function\n * @param {number} a - lower limit for integration\n * @param {number} b - upper limit for integration\n * @param {number} acc - absolute accuracy\n * @param {number} eps - relative accuracy\n * @param {number[]} oldfs - vector of values needed for recursion\n * @returns {number} result of integration\n */\nexport function integrate(f, a, b, acc = 0.000001, eps = 0.00001, oldfs = undefined) {\n\n   if (typeof(a) !== \"number\" || typeof(b) !== \"number\") {\n      throw Error(\"Parameters 'a' and 'b' must be numbers.\");\n   }\n\n   if (b < a) {\n      throw Error(\"Parameter 'b' must be larger 'a'.\");\n   }\n\n   // special case when left limit is minus infinity\n   if (a === -Infinity && b !== Infinity) {\n      return integrate((t) => f(b - (1 - t) / t) / (t ** 2), 0, 1);\n   }\n\n   // special case when right limit is plus infinity\n   if (a !== -Infinity && b === Infinity) {\n      return integrate((t) => f(a + (1 - t) / t) / (t ** 2), 0, 1);\n   }\n\n   // special case when both limits are infinite\n   if (a === -Infinity && b === Infinity) {\n      return integrate((t) => (f((1 - t) / t) + f((t - 1) / t)) / t ** 2, 0, 1);\n   }\n\n   // constants for splitting the integration interval\n   const x = [1/6, 2/6, 4/6, 5/6];\n   const w = [2/6, 1/6, 1/6, 2/6];\n   const v = [1/4, 1/4, 1/4, 1/4];\n   const p = [1, 0, 0, 1];\n\n   let n = x.length, h = b - a;\n   let fs;\n\n   if (oldfs === undefined) {\n      fs = x.map(v => f(a + v * h));\n   } else {\n      fs = new Array(n);\n      for (let k = 0, i = 0; i < n; i++) {\n         fs[i] = p[i] === 1 ? f(a + x[i] * h) : oldfs[k++];\n      }\n   }\n\n   let q4 = 0, q2 = 0;\n   for (let i = 0; i < n; i++) {\n      q4 += w[i] * fs[i] * h;\n      q2 += v[i] * fs[i] * h;\n   }\n\n   if (isNaN(q2) || isNaN(q4)) {\n      throw Error(\"Numerical integration ended up with NaN number.\")\n   }\n\n   let tol = acc + eps * Math.abs(q4);\n   let err = Math.abs((q4 - q2)/3);\n\n   if (err < tol) return q4;\n\n   acc = acc / Math.sqrt(2.);\n   let mid = (a + b) / 2;\n   let left = fs.filter((v, i) => i < n/2);\n   let right = fs.filter((v, i) => i >= n/2);\n\n   let ql = integrate(f, a, mid, eps, acc, left);\n   let qr = integrate(f, mid, b, eps, acc, right);\n   return (ql + qr);\n}\n\n\n/**\n * Error function for normal distribution\n * @param {number} x - a number\n * @returns {number} value for erf\n */\nexport function erf(x) {\n\n  const sign = (x >= 0) ? 1 : -1;\n  x = Math.abs(x);\n\n  // constants\n  const a1 =  0.254829592;\n  const a2 = -0.284496736;\n  const a3 =  1.421413741;\n  const a4 = -1.453152027;\n  const a5 =  1.061405429;\n  const p  =  0.3275911;\n\n  // approximation\n  const t = 1.0 / (1.0 + p * x);\n  const y = 1.0 - (((((a5 * t + a4) * t) + a3) * t + a2) * t + a1) * t * Math.exp(-x * x);\n  return sign * y;\n}\n\n\n/**\n * Gamma function (approximation)\n * @param {number|number[]} z - argument (one value or a vector)\n * @returns {number} value of the Gamma function\n */\nexport function gamma(z) {\n\n   if (Array.isArray(z)) {\n      return z.map(v => gamma(v));\n   }\n\n   if (z <= 0) {\n      throw new Error(\"Gamma function only works with arguments > 0.\");\n   }\n\n   // coefficients\n   const p = [\n        676.5203681218851,\n      -1259.1392167224028,\n        771.32342877765313,\n       -176.61502916214059,\n         12.507343278686905,\n         -0.13857109526572012,\n          9.9843695780195716e-6,\n          1.5056327351493116e-7\n    ];\n\n   if (z < 0.5) {\n      return Math.PI / (Math.sin(Math.PI * z) + gamma(1 - z));\n   }\n\n   z = z - 1;\n   let x = 0.99999999999980993;\n\n   for (let i = 0; i < p.length; i++) {\n      x = x + p[i] / (z + i + 1);\n   }\n\n   const t = z + p.length - 0.5;\n   return Math.sqrt(2 * Math.PI) * Math.pow(t, z + 0.5) * Math.exp(-t) * x;\n}\n\n\n/**\n * Betta function (approximation)\n * @param {number} x - first argument (one value)\n * @param {number} y - second argument (one value)\n * @returns {number} value of the Beta function\n */\nexport function beta(x, y) {\n\n   if (y > 100) {\n      // for large y we use slower integrate version\n      return integrate((u) => Math.pow(u, x - 1) / Math.pow(1 + u, x + y), 0, Infinity)\n   }\n\n   return gamma(x) * gamma(y) / gamma(x + y);\n}\n\n\n/**\n * Incomplete Betta function (approximation via numeric integration)\n * @param {number} x - first argument (one value)\n * @param {number} a - second argument (one value)\n * @param {number} b - third argument (one value)\n * @returns {number} value of the function\n */\nexport function ibeta(x, a, b) {\n   if (x === 0) return 0;\n   if (x === 1) return 1;\n   if (b === 1) return x ** a;\n   if (a === 1) return (1 - (1 - x)**b);\n   return integrate((t) => t ** (a - 1) * (1 - t) ** (b - 1), 0, x) / beta(a, b);\n}\n","import {max, min, rep, seq, subset, sum} from '../stat/index.js';\n\n/**********************************************\n * Functions for manipulations with vectors   *\n **********************************************/\n\n/* Simple functions for arithmetics */\nconst add = (a, b) => a + b;\nconst subtract = (a, b) => a - b;\nconst times = (a, b) => a * b;\nconst divide = (a, b) => a/b;\n\n/**\n * Computes a Euclidean norm of a vector x\n * @param {Array} x — a vector of values\n * @returns a number (the norm)\n */\nexport function norm2(x) {\n\n   if (!isvector(x)) {\n      throw Error(\"Argument 'x' must be a vector.\");\n   }\n\n   return Math.sqrt(sum(x.map(v => v**2)));\n}\n\n/**\n * Replaces subset of values in vector x, specified by indices, with values from vector y\n *\n * @param {Array} x — vector with values to be replaced\n * @param {Array} y — vector with values used for replacement\n * @param {Array} ind — vector of indices to select (starting from 1)\n */\nexport function vreplace(x, y, ind) {\n\n   if (!isvector(x)) {\n      throw Error(\"Argument 'x' must be a vector.\");\n   }\n\n   if (!isvector(y)) {\n      throw Error(\"Argument 'y' must be a vector.\");\n   }\n\n   ind = processIndices(ind, x.length, true);\n\n   if (ind.length !== y.length) {\n      throw Error(\"Number of values in 'ind' should match the number of elements in 'y'.\");\n   }\n\n   let z = subset(x, []);\n   for (let i = 0; i < ind.length; i++) {\n      z[ind[i] - 1] = y[i];\n   }\n\n   return z;\n}\n\n/**\n * Applies a function to each element of a vector\n *\n * @param {Array} x - a vector\n * @param {function} fun - a function which takes a numbers and returns a number\n * @returns {Array} - result of the operation\n */\nexport function vapply(x, fun) {\n\n   if (!isvector(x)) {\n      throw Error(\"Argument 'x' must be a vector.\");\n   }\n\n   return x.map(v => fun(v));\n}\n\n/**\n * Does element by element division of two vectors, or a vector and a scalar\n * (one of the arguments must be a vector)\n *\n * @param {Array|number} x - a vector or a scalar\n * @param {Array|number} y - a vector or a scalar\n * @returns {Array} - result of the multiplication\n */\nexport function vdiv(x, y) {\n   return vop(x, y, divide);\n}\n\n\n/**\n * Does element by element multiplication of two vectors, or a vector and a scalar\n * (one of the arguments must be a vector)\n *\n * @param {Array|number} x - a vector or a scalar\n * @param {Array|number} y - a vector or a scalar\n * @returns {Array} - result of the multiplication\n */\nexport function vmult(x, y) {\n   return vop(x, y, times);\n}\n\n\n/**\n * Does element by element addition of two vectors, or a vector and a scalar\n * (one of the arguments must be a vector)\n *\n * @param {Array|number} x - a vector or a scalar\n * @param {Array|number} y - a vector or a scalar\n * @returns {Array} - result of the addition\n */\nexport function vadd(x, y) {\n   return vop(x, y, add);\n}\n\n\n/**\n * Does element by element subtraction of two vectors, or a vector and a scalar\n * (one of the arguments must be a vector)\n *\n * @param {Array|number} x - a vector or a scalar\n * @param {Array|number} y - a vector or a scalar\n * @returns {Array} - result of the subtraction\n */\nexport function vsubtract(x, y) {\n   return vop(x, y, subtract);\n}\n\n\n/**\n * Does element by element arithmetic operation for two vectors, or for a vector and a scalar\n * (one of the arguments must be a vector)\n *\n * @param {Array|number} x - a vector or a scalar\n * @param {Array|number} y - a vector or a scalar\n * @param {function} op - a function which takes two numbers and return a number\n * @returns {Array} - result of the operation\n */\nexport function vop(x, y, op) {\n\n   // find the longest vector\n   const n = x.length | y.length;\n\n   if (n < 1) {\n      throw Error(\"One of the arguments must be a vector.\");\n   }\n\n   if (!isvector(y)) {\n      y = rep(y, n);\n   }\n\n   if (!isvector(x)) {\n      x = rep(x, n);\n   }\n\n   if (x.length !== y.length) {\n      throw Error(\"Dimensions of 'x' and 'y' mismatch.\");\n   }\n\n   let res = Array(n).fill(0);\n   for (let i = 0; i < n; i++) {\n      res[i] = op(x[i], y[i]);\n   }\n\n   return res;\n}\n\n/**\n * Checks if argument is a vector (1D Array)\n * @param {any} X - an object/variable\n * @returns {boolean} - result of check\n */\nexport function isvector(X) {\n\n   if (!isarray(X)) return false;\n   if (Array.isArray(X[0])) return false;\n\n   return true;\n}\n\n\n/**\n * Computes a dot product of two vectors\n * @param {Array} x - a vector of values (1D Array)\n * @param {Array} y - a vector of values (same length as x)\n * @returns {Number} - result of dot product of the two vectors\n */\nexport function vdot(x, y) {\n\n   if (!isvector(x)) {\n      throw Error(\"Argument 'x' must be a vector of numbers.\");\n   }\n\n   if (!isvector(y)) {\n      throw Error(\"Argument 'y' must be a vector of numbers.\");\n   }\n\n   if (x.length != y.length) {\n      throw Error(\"Vectors 'x' and 'y' must have the same length.\");\n   }\n\n   let res = 0;\n   for (let i = 0; i < x.length; i++) {\n      res = res + x[i] * y[i];\n   }\n\n   return res;\n}\n\n\n/**********************************************\n * Functions for manipulations with matrices  *\n **********************************************/\n\n\nexport function cbind(X, Y) {\n\n   if (!isarray(X) || !isarray(Y)) {\n      throw Error(\"Both 'X' and 'Y' must arrays (matrices or vectors).\");\n   }\n\n   if (isvector(X)) {\n      X = [X];\n   }\n\n   if (isvector(Y)) {\n      Y = [Y];\n   }\n\n   if (nrow(X) !== nrow(Y)) {\n      throw Error(\"Number of rows (or vector elements) in X and Y must be be the same.\");\n   }\n\n   return X.concat(Y);\n}\n\nexport function rbind(X, Y) {\n\n   if (!isarray(X) || !isarray(Y)) {\n      throw Error(\"Both 'X' and 'Y' must arrays (matrices or vectors).\");\n   }\n\n   if (isvector(X)) {\n      X = transpose([X]);\n   }\n\n   if (isvector(Y)) {\n      Y = transpose([Y]);\n   }\n\n   if (ncol(X) !== ncol(Y)) {\n      throw Error(\"Number of columns (or vector elements) in X and Y must be be the same.\");\n   }\n\n\n   return transpose(cbind(transpose(X), transpose(Y)));\n}\n/**\n * Check row or column indices\n * @param {Array|number} ind — vector or a value with indices\n * @param {number} n — number of rows or columns in original matrix\n * @param {number} fill — logical, if 'true' and 'ind' is empty, will generate values from 1 to n\n * @returns array with indices\n */\nfunction processIndices(ind, n, fill) {\n   if (!Array.isArray(ind)) {\n      ind = [ind];\n   }\n\n   if (ind.length > 0 && (min(ind) < 1 || max(ind) > n)) {\n      throw Error(\"Wrong values for indices.\");\n   }\n\n   if (ind.length === 0 && fill) {\n      ind = seq(1, n);\n   }\n\n   return ind;\n}\n\n/**\n * Creates a subset of matrix X specified by row and column indices\n *\n * If all rows or all columns must be selected provide empty array, [], as indices.\n *\n * @param {Array} X — matrix with values\n * @param {Array} rowInd — vector of row indices to select (starting from 1)\n * @param {Array} colInd — vector of column indices to select (starting from 1)\n * @param {string} method - what to do with values (\"select\" or \"remove\")\n */\nexport function msubset(X, rowInd, colInd, method) {\n\n   if (!ismatrix(X)) {\n      throw Error(\"Argument 'X' must be a matrix.\");\n   }\n\n   colInd = processIndices(colInd, ncol(X), method === \"select\");\n   rowInd = processIndices(rowInd, nrow(X), false);\n\n   if (method === \"remove\" || colInd.length === 0) {\n      colInd = subset(seq(1, ncol(X)), colInd, \"remove\");\n   }\n\n   let Y = Array(colInd.length);\n   for (let c = 0; c < colInd.length; c++) {\n      Y[c] = subset(X[colInd[c] - 1], rowInd, method);\n   }\n\n   return Y;\n}\n\n\n/**\n * Replaces subset of values in matrix X, specified by row and column indices, with values from matrix Y\n *\n * If all rows or all columns must be taken provide empty array, [], as indices.\n *\n * @param {Array} X — matrix with values to be replaced\n * @param {Array} Y — matrix with values used for replacement\n * @param {Array} rowInd — vector of row indices to select (starting from 1)\n * @param {Array} colInd — vector of column indices to select (starting from 1)\n */\nexport function mreplace(X, Y, rowInd, colInd) {\n\n   if (!ismatrix(X)) {\n      throw Error(\"Argument 'X' must be a matrix.\");\n   }\n\n   rowInd = processIndices(rowInd, nrow(X), true);\n   colInd = processIndices(colInd, ncol(X), true);\n\n   if (rowInd.length !== nrow(Y)) {\n      throw Error(\"Number of values in 'rowInd' should match the number of rows in 'Y'.\");\n   }\n\n   if (colInd.length !== ncol(Y)) {\n      throw Error(\"Number of values in 'colInd' should match the number of columns in 'Y'.\");\n   }\n\n   let Z = msubset(X, [], []);\n   for (let c = 0; c < colInd.length; c++) {\n      for (let r = 0; r < rowInd.length; r++) {\n         Z[colInd[c] - 1][rowInd[r] - 1] = Y[c][r];\n      }\n   }\n\n   return Z;\n}\n\n\n/**\n * Computes XY' product\n *\n * @param {Array} X - a matrix\n * @param {Array} Y - a matrix\n * @returns {Array} - result of the product\n */\nexport function tcrossprod(X, Y) {\n\n   if (!Y) {\n      Y = msubset(X, [], []);\n   }\n\n   if (!ismatrix(X)  || !ismatrix(Y)) {\n      throw Error(\"Both arguments must be matrices (2D Arrays).\");\n   }\n\n   return mdot(X, transpose(Y));\n}\n\n\n/**\n * Computes X'Y product\n *\n * @param {Array} X - a matrix\n * @param {Array} Y - a matrix\n * @returns {Array} - result of the product\n */\nexport function crossprod(X, Y) {\n\n   if (!Y) {\n      Y = msubset(X, [], []);\n   }\n\n   if (!ismatrix(X)  || !ismatrix(Y)) {\n      throw Error(\"Both arguments must be matrices (2D Arrays).\");\n   }\n\n   return mdot(transpose(X), Y);\n}\n\n\n/**\n * Does element by element operation of two matrices, a matrix and a scalar or a matrix and a vector\n *\n * if second argument is a vector, function checks its dimension. If it has the same number of elements\n * as number of rows in 'X' it will be applied to every column of 'X'. If it has the same number of\n * elements as number of columns in 'X', it will be applied to every row.\n *\n * @param {Array} X - a matrix\n * @param {Array|number} Y - a matrix, a vector or a scalar\n * @returns {Array} - result of the addition\n */\nexport function mop(X, Y, op) {\n\n   if (!ismatrix(X)) {\n      throw Error(\"Argument 'X' must be a matrix (2D Array).\");\n   }\n\n   const nrows = nrow(X);\n   const ncols = ncol(X);\n\n   if (!ismatrix(Y)) {\n      Y = tomatrix(Y, nrows, ncols);\n   }\n\n   if (nrow(X) !== nrow(Y) || ncol(X) !== ncol(Y)) {\n      throw Error(\"Dimensions of 'X' and 'Y' mismatch.\");\n   }\n\n   let res = zeros(nrows, ncols);\n   for (let i = 0; i < nrows; i++) {\n      for (let j = 0; j < ncols; j++) {\n         res[j][i] = op(X[j][i], Y[j][i])\n      }\n   }\n\n   return res;\n}\n\n\n/**\n * Does element by element division of two matrices, a matrix and a scalar or a matrix and a vector\n *\n * if second argument is a vector, function checks its dimension. If it has the same number of elements\n * as number of rows in 'X' it will be applied to every column of 'X'. If it has the same number of\n * elements as number of columns in 'X', it will be applied to every row.\n *\n * @param {Array} X - a matrix\n * @param {Array|number} Y - a matrix, a vector or a scalar\n * @returns {Array} - result of the multiplication\n */\nexport function mdiv(X, Y) {\n   return mop(X, Y, divide);\n}\n\n\n/**\n * Does element by element addition of two matrices, a matrix and a scalar or a matrix and a vector\n *\n * if second argument is a vector, function checks its dimension. If it has the same number of elements\n * as number of rows in 'X' it will be applied to every column of 'X'. If it has the same number of\n * elements as number of columns in 'X', it will be applied to every row.\n *\n * @param {Array} X - a matrix\n * @param {Array|number} Y - a matrix, a vector or a scalar\n * @returns {Array} - result of the addition\n */\nexport function madd(X, Y) {\n   return mop(X, Y, add);\n}\n\n/**\n * Does element by element subtraction of two matrices, a matrix and a scalar or a matrix and a vector\n *\n * if second argument is a vector, function checks its dimension. If it has the same number of elements\n * as number of rows in 'X' it will be applied to every column of 'X'. If it has the same number of\n * elements as number of columns in 'X', it will be applied to every row.\n *\n * @param {Array} X - a matrix\n * @param {Array|number} Y - a matrix, a vector or a scalar\n * @returns {Array} - result of the subtraction\n */\nexport function msubtract(X, Y) {\n   return mop(X, Y, subtract);\n}\n\n\n/**\n * Does element by element multiplication of two matrices, a matrix and a scalar or a matrix and a vector\n *\n * if second argument is a vector, function checks its dimension. If it has the same number of elements\n * as number of rows in 'X' it will be applied to every column of 'X'. If it has the same number of\n * elements as number of columns in 'X', it will be applied to every row.\n *\n * @param {Array} X - a matrix\n * @param {Array|number} Y - a matrix, a vector or a scalar\n * @returns {Array} - result of the multiplication\n */\nexport function mmult(X, Y) {\n   return mop(X, Y, times);\n}\n\n\n/**\n * Computes inner (dot) product of two matrices\n * @param {Array} X - a matrix (array of vectors of the same length)\n * @param {Array} Y - a matrix (array of vectors of the same length)\n * @returns {Array} - result of dot product\n */\nexport function mdot(X, Y) {\n\n   if (isvector(X)) {\n      X = [X];\n   }\n\n   if (!ismatrix(X)) {\n      throw Error(\"Argument 'X' must be a vector or a matrix (1D or 2D Array).\");\n   }\n\n   if (isvector(Y)) {\n      Y = [Y];\n   }\n\n   if (!ismatrix(Y)) {\n      throw Error(\"Argument 'Y' must be a vector or a matrix (1D or 2D Array).\");\n   }\n\n\n   if (ncol(X) != nrow(Y)) {\n      throw Error(\"Dimensions of 'X' and 'Y' mismatch.\");\n   }\n\n   const n = nrow(X);\n   const m = ncol(Y);\n   let res = zeros(n, m);\n\n   X = transpose(X);\n   for (let i = 0; i < n; i++) {\n      for (let j = 0; j < m; j++) {\n         res[j][i] = vdot(X[i], Y[j])\n      }\n   }\n\n   return res;\n}\n\n/**\n * Returns a transposed matrix\n * @param {Array} X - a vector or a matrix (1D or 2D Array)\n * @returns {Array} - a transposed\n */\nexport function transpose(X) {\n\n   if (isvector(X)) {\n      X = [X];\n   }\n\n   if (!ismatrix(X)) {\n      throw Error(\"Argument 'X' must be a vector or a matrix (1D or 2D Array).\");\n   }\n\n   return X[0].map((_, colIndex) => X.map(row => row[colIndex]));\n}\n\n/**\n * Creates an identity matrix of size 'n'\n * @param {number} n - number of rows and columns in the matrix\n */\nexport function eye(n) {\n   let res = zeros(n, n);\n   for (let i = 0; i < n; i++) {\n      res[i][i] = 1;\n   }\n\n   return res;\n}\n\n\n/**\n * Returns a vector with values from main diagonal of squared matrix 'x'\n * @param {Array} x - a squared matrix\n * @return vector with diagonal elements\n */\nexport function diag(x) {\n\n   if (!issquaredmat(x)) throw Error(\"Argument 'x' must be a squared matrix.\");\n\n   const n = nrow(x);\n   let res = rep(0, n);\n   for (let i = 0; i < n; i++) {\n      res[i] = x[i][i];\n   }\n\n   return res;\n}\n\n/**\n * Creates a diagonal matrix filled with values from vector 'x'\n * @param {Array} x - a vector with values\n */\nexport function diagm(x) {\n   if (!isvector(x)) throw Error(\"Argument 'x' must be a vector.\");\n\n   const n = x.length;\n   let res = zeros(n, n);\n   for (let i = 0; i < n; i++) {\n      res[i][i] = x[i];\n   }\n\n   return res;\n}\n\n/**\n * Returns a matrix (2D Array) filled with zeros\n * @param {Number} n - number of rows\n * @param {Number} m - number of columns\n * @returns {Array} - the generated matrix\n */\nexport function zeros(n, m) {\n   return matrix(n, m, 0);\n}\n\n\n/**\n * Creates a matrix (2D Array) filled with constant value\n * @param {Number} n - number of rows\n * @param {Number} m - number of columns\n * @param {Number} a - value\n * @returns {Array} - the generated matrix\n */\nexport function matrix(n, m, a) {\n   return [...Array(m)].map(v => Array(n).fill(a));\n}\n\n\n/**\n * Returns number of rows in a matrix\n * @param {Array} X - a vector or a matrix (array of vectors of the same length)\n * @returns {Number} - number of rows\n */\nexport function nrow(X) {\n\n   if (isvector(X)) {\n      // if vector we treat it as column-vector\n      return X.length\n   }\n\n   if (!ismatrix(X)) {\n      throw Error(\"Argument 'X' must be a vector or a matrix (1D or 2D Array).\");\n   }\n\n   return X[0].length;\n}\n\n\n/**\n * Returns number of columns in a matrix\n * @param {Array} X - a vector or a matrix (1D or 2D Array)\n * @returns {Number} - number of rows\n */\nexport function ncol(X) {\n\n\n   if (isvector(X)) {\n      // if vector we treat it as column-vector\n      return 1\n   }\n\n   if (!ismatrix(X)) {\n      throw Error(\"Argument 'X' must be a vector or a matrix (1D or 2D Array).\");\n   }\n\n   return X.length;\n}\n\n/**\n * Converts a scalar or a vector into a matrix\n *\n * if 'x' is a scalar it returns a matrix filled with this value, if 'x' is a vector, function\n * checks its dimension. If it has the same number of elements  as 'nrows' it replicates 'x' as\n * columns of the matrix, if it has the same number of elements as 'ncols', it replicates 'x' as\n * rows of the matrix.\n * @param {Array|number} x - a scalar or a vector of values\n * @param {number} nrows - number of rows in final matrix\n * @param {number} ncols - number of columns in the final matrix\n */\nexport function tomatrix(x, nrows, ncols) {\n\n   if (!isarray(x)) return matrix(nrows, ncols, x);\n\n   if (!isvector(x)) {\n      throw Error(\"Argument 'x' must me a scalar or a vector.\");\n   }\n\n   // if number of elements in vector is the same as number of rows — replicate the vector column wise\n   if (x.length === nrows) return Array(ncols).fill(x);\n\n   // if number of elements in vector is the same as number of columns — replicate the vector row wise\n   if (x.length === ncols) return transpose(Array(nrows).fill(x));\n\n   // if number of elements in vector is the same as product of number of rows and columns — reshape the vector into matrix\n   if (x.length === nrows * ncols) return Array(ncols).fill(null).map((v, i) => subset(x, vadd(seq(1, nrows), nrows * i )));\n\n   throw Error(\"Number of elements in 'x' does not match neither 'nrows' nor 'ncols'.\")\n}\n\n\n/**\n * Checks if argument is a non empty array\n * @param {any} X - an object/variable\n * @returns {boolean} - result of check\n */\nexport function isarray(X) {\n   return Array.isArray(X) && X.length > 0;\n}\n\n\n/**\n * Checks if argument is a matrix (2D Array)\n * @param {any} X - an object/variable\n * @returns {boolean} - result of check\n */\nexport function ismatrix(X) {\n\n   if (!isarray(X)) return false;\n   if (!isarray(X[0])) return false;\n\n   // check that all columns/vectors have the same length\n   if (!X.every(v => v.length == X[0].length)) return false;\n\n   return true;\n}\n\n/**\n * Return true if matrix is squared\n * @param {number[]} X - matrix to check (2D Array)\n * @returns logical value\n */\nexport function issquaredmat(X) {\n   return ismatrix(X) && (nrow(X) === ncol(X));\n}\n\n\n/**\n * Return true if matrix is lower triangular\n * @param {number[]} X - matrix to check (2D Array)\n * @returns logical value\n */\nexport function islowertrianmat(X) {\n   return isuppertrianmat(transpose(X));\n}\n\n\n/**\n * Return true if matrix is diagonal\n * @param {number[]} X - matrix to check (2D Array)\n * @returns logical value\n */\nexport function isdiagmat(X) {\n   if (!issquaredmat(X)) throw Error(\"Argument 'X' must be a squared matrix.\");\n\n   const n = nrow(X);\n   if (nrow(X) != ncol(X)) return false;\n\n   for (let i = 0; i < n; i++) {\n      for (let j = 0; j < n; j++) {\n         if ((i !== j) && Math.abs(X[i][j]) > Number.EPSILON) return false;\n      }\n   }\n\n   return true;\n}\n\n/**\n * Return true if matrix is upper triangular\n * @param {number[]} X - matrix to check (2D Array)\n * @returns logical value\n */\nexport function isuppertrianmat(X) {\n\n   if (!issquaredmat) return false;\n\n   const n = ncol(X);\n   for (let i = 0; i < n; i++)\n      for (let j = i + 1; j < n; j++)\n         if (Math.abs(X[i][j]) > 10**(-10) )\n            return false;\n\n   return true;\n}","   /** Computes a nice spacing value for a given range\n    *  @param {Number} localRange - a range (max - min)\n    *  @param {boolean} round - round or not the fractions when computing the number\n    *  @returns {Number} the computed spacing value\n    */\n   export function niceNum( localRange,  round) {\n\n      const exponent = Math.floor(Math.log10(localRange));\n      const fraction = localRange / Math.pow(10, exponent);\n      let niceFraction;\n\n      if (round) {\n         if (fraction < 1.5)\n            niceFraction = 1;\n         else if (fraction < 3)\n            niceFraction = 2;\n         else if (fraction < 7)\n            niceFraction = 5;\n         else\n            niceFraction = 10;\n      } else {\n         if (fraction <= 1)\n            niceFraction = 1;\n         else if (fraction <= 2)\n            niceFraction = 2;\n         else if (fraction <= 5)\n            niceFraction = 5;\n         else\n            niceFraction = 10;\n      }\n\n      return niceFraction * Math.pow(10, exponent);\n   }","<script>\n\timport { setContext, createEventDispatcher, onMount, onDestroy } from 'svelte';\n\timport { writable } from 'svelte/store';\n   import { mdot, transpose, eye } from 'mdatools/matrix';\n   import { rep } from 'mdatools/stat';\n   import { niceNum } from './Utils.js';\n\n   /*****************************************/\n   /* Input parameters                      */\n   /*****************************************/\n\n   export let limX = [undefined, undefined];    // limits for x-axis (in plot units) [min, max]\n   export let limY = [undefined, undefined];    // limits for y-axis (in plot units) [min, max]\n   export let limZ = [undefined, undefined];    // limits for z-axis (in plot units) [min, max]\n   export let theta = 0;\n   export let phi = 0;\n   export let zoom = 1;\n\n\n   /*****************************************/\n   /* Constants                             */\n   /*****************************************/\n\n   // event dispatcher\n   const dispatch = createEventDispatcher();\n\n\n   // number of ticks along each axis\n   const TICK_NUM = {\n      \"small\": 5,\n      \"medium\": 8,\n      \"large\": 12\n   };\n\n   // margin between plot series elements and data labels\n   const LABELS_MARGIN = {\n      \"small\": 5,\n      \"medium\": 10,\n      \"large\": 15\n   };\n\n\n   // line styles for different scales and types\n   const LINE_STYLES = {\n      small:  [\"0\", \"3,3\", \"1,1\", \"3,1\"],\n      medium: [\"0\", \"5,5\", \"2,2\", \"5,2\"],\n      large:  [\"0\", \"7,7\", \"3,3\", \"7,3\"],\n   }\n\n   // constant to make clip path ID unique\n   const clipPathID = \"plottingArea\" + Math.round(Math.random() * 10000);\n\n\n   /*****************************************/\n   /* Variable parameters for internal use  */\n   /*****************************************/\n\n   // bindings to plot DOM elements\n   let plotElement;\n   let axesElement;\n\n\n   /*****************************************/\n   /* Helper functions                      */\n   /*****************************************/\n\n\n   /** Transforms world coordinates to 2D scene pixels by applying the transformation matrix 'tM'\n    *  @param {Array} coords - matrix with coordinates [X, Y, Z]\n    *  @param {Array} tM - transformation matrix\n    *  @returns {Array} matrix with transformed coordinates [x, y]\n    */\n   const world2pixels = function(coords, tM) {\n      const coords2D = transpose(mdot(tM, transpose([...coords, rep(1, coords[0].length)])));\n//      return [coords2D[0].map(x => Math.round(x)), coords2D[1].map(y => Math.round(y))];\n      return [coords2D[0], coords2D[1]];\n   }\n\n   /** Computes nice tick values for axis\n    *  @param {Array} ticks - vector with ticks if alredy available (if not, new will be computed)\n    *  @param {Array} lim - vector with axis limits tickets must be computed for\n    *  @param {number} maxTickNum - maximum number of ticks to compute\n    *  @param {boolean} round - round or not the fractions when computing nice numbers for the ticks\n    *  @returns {Array} a vector with computed tick positions\n    */\n   const getAxisTicks = function(ticks, lim, maxTickNum, round = true) {\n\n      // if ticks are already provided do not recompute them\n      if (ticks !== undefined) return ticks;\n\n      // check if limits are ok\n      if (!Array.isArray(lim) || lim[0] === undefined || lim[1] === undefined) return undefined;\n\n      // get range as a nice number and compute min, max and steps for the tick sequence\n      const range = niceNum(lim[1] - lim[0], round);\n      const tickSpacing = niceNum(range / (maxTickNum - 1), round);\n      const tickMin = Math.ceil(lim[0] / tickSpacing) * tickSpacing + tickSpacing;\n      const tickMax = Math.floor(lim[1] / tickSpacing) * tickSpacing;\n\n      // recompute maxTickNum\n      maxTickNum = Math.round((tickMax - tickMin + 1) / tickSpacing) + 1;\n\n      // create a sequence and return\n      ticks = [...Array(maxTickNum)].map((x, i) => tickMin + i * tickSpacing);\n\n      // if step is smaller than 1 round values to remove small decimals accidentiall added by JS\n      if (Math.abs(tickSpacing) < 1) {\n         const r = Math.pow(10, 1 + Math.round(-Math.log10(tickSpacing)));\n         ticks = ticks.map(v => Math.round((v + Number.EPSILON) * r) / r)\n      }\n\n      // make sure the ticks are not aligned with axes limits\n      return ticks.filter(x => x >= lim[0] && x <= lim[1]);\n   }\n\n   /** Computes a scale level based on plot area size\n    *  @param {Number} width - width of plotting area in pixels\n    *  @param {Number} height - height of plotting area in pixels\n    *  @returns {String} the scale level (\"small\", \"medium\" or \"large\")\n    */\n   function getScale(width, height) {\n      if (height < 300.2 || width < 300.2) return \"small\";\n      if (height < 600.2 || width < 600.2) return \"medium\";\n      return \"large\";\n   }\n\n   /** Adjusts limits for x-axis (e.g. when new series is added)\n    *  @param {Array} newLim - vector with new limits  (two values)\n    */\n   const adjustXAxisLimits = function(newLim) {\n      if (!limX.some(v => v === undefined)) return;\n      xLim.update(lim => adjustAxisLimits(lim, newLim));\n   }\n\n   /** Adjusts limits for y-axis (e.g. when new series is added)\n    *  @param {Array} newLim - vector with new limits  (two values)\n    */\n   const adjustYAxisLimits = function(newLim) {\n      if (!limY.some(v => v === undefined)) return;\n      yLim.update(lim => adjustAxisLimits(lim, newLim));\n   }\n\n   /** Adjusts limits for y-axis (e.g. when new series is added)\n    *  @param {Array} newLim - vector with new limits  (two values)\n    */\n   const adjustZAxisLimits = function(newLim) {\n      if (!limZ.some(v => v === undefined)) return;\n      zLim.update(lim => adjustAxisLimits(lim, newLim));\n   }\n\n   /** Adjusts x- or y- axis limits (e.g. when new elements are added)\n    *  @param {Array} lim - vector with limits for current axis (two values)\n    *  @param {Array} newLim - vector with new limits  (two values)\n    *  @returns {Array} vector with rescaled values\n    *\n    *  The new limits are set separately for min and max. Either if current value is undefined or\n    *  if new value is outside the current limits (smaller than min or larger than max).\n    */\n   const adjustAxisLimits = function(lim, newLim) {\n      const multiSeries = true;\n\n      let adjustedLim = [\n         (lim[0] !== undefined && multiSeries === true && lim[0] < newLim[0]) ? lim[0] : newLim[0],\n         (lim[1] !== undefined && multiSeries === true && lim[1] > newLim[1]) ? lim[1] : newLim[1]\n      ];\n\n      // special case when both limits are zero\n      if (adjustedLim[0] === 0 && adjustedLim[1] === 0) {\n         adjustedLim = [-0.1, 0.1];\n      }\n\n      // special case when limits are equal (add ±5%)\n      if (adjustedLim[0] === adjustedLim[1]) {\n         adjustedLim = [adjustedLim[0] * 0.95, adjustedLim[0] * 1.05];\n      }\n\n      return adjustedLim;\n   }\n\n   /** Mouse click handler dispatcher\n    *  @param {String} eventName - name of event\n    *  @param {HTMLElement} el - DOM element which received the event\n    */\n   function dispatchClickEvent(eventName, el) {\n      dispatch(eventName, {seriesTitle: el.parentNode.getAttribute('title'), elementID: el.dataset.id});\n   }\n\n   /*****************************************/\n   /* Storage to share with children        */\n   /*****************************************/\n\n   const tM = writable(eye(4));                    // transformation matrix\n   const scale = writable(\"medium\");               // plot scale (small/medium/large)\n   const xLim = writable([undefined, undefined]);  // x-axis limits in 3D (before projection)\n   const yLim = writable([undefined, undefined]);  // y-axis limits in 3D (before projection)\n   const zLim = writable([undefined, undefined]);  // z-axis limits in 3D (before projection)\n   const width = writable(100)                     // current width of axes in pixels\n   const height = writable(100)                    // current heigh of axes in pixels\n   const isOk = writable(false);                   // indicator that axes works fine\n\n\n   /*****************************************/\n   /* Axes context                          */\n   /*****************************************/\n\n   let context = {\n\n      // methods\n      adjustXAxisLimits: adjustXAxisLimits,\n      adjustYAxisLimits: adjustYAxisLimits,\n      adjustZAxisLimits: adjustZAxisLimits,\n\n      getAxisTicks: getAxisTicks,\n      world2pixels: world2pixels,\n\n      // state proporties\n      scale: scale,\n      tM: tM,\n      isOk: isOk,\n      xLim: xLim,\n      yLim: yLim,\n      zLim: zLim,\n\n      // constants\n      LINE_STYLES: LINE_STYLES,\n      LABELS_MARGIN: LABELS_MARGIN,\n      TICK_NUM: TICK_NUM\n   }\n\n\tsetContext('axes', context);\n\n\n   /*****************************************/\n   /* Reactive updates of the parameters    */\n   /*****************************************/\n\n   // projection matrix (step 1)\n   $: P2 = [\n         [1, 0, 0, 0],\n         [0, Math.cos(theta), Math.sin(theta), 0],\n         [0, -Math.sin(theta),  Math.cos(theta), 0],\n         [0, 0, 0, 1],\n   ];\n\n   // projection matrix (step 2)\n   $: P1 = [\n         [ Math.cos(phi), 0, -Math.sin(phi), 0],\n         [0, 1, 0, 0],\n         [Math.sin(phi), 0, Math.cos(phi), 0],\n         [0, 0, 0, 1]\n      ];\n\n   // matrix for projection and zooming\n   // we shift [0, 1] cube to center, project, zoom, and then shift back\n   $: P = mdot([[1, 0, 0, 0],[0, 1, 0, 0],[0, 0, 1, 0],[0.5, 0.5, 0.5, 1]],\n            mdot([[zoom, 0, 0, 0], [0, zoom, 0, 0], [0, 0, zoom, 0], [0, 0, 0, 1]],\n            mdot(P2,\n               mdot(P1,\n                  [[1, 0, 0, 0],[0, 1, 0, 0],[0, 0, 1, 0],[-0.5, -0.5, -0.5, 1]]\n               )\n            ))\n         );\n\n   // update transformation matrix if angles of the norm vectors are changed\n   $: {\n\n      if ($isOk) {\n\n         // translate\n         const T1 = [\n            [1, 0, 0, 0],\n            [0, 1, 0, 0],\n            [0, 0, 1, 0],\n            [-$xLim[0], -$yLim[0], -$zLim[0], 1]\n         ];\n\n         // scale the whole cube to [0, 1] limits\n         const S1 = [\n            [1 / ($xLim[1] - $xLim[0]) ,  0, 0, 0],\n            [0, 1 / ($yLim[1] - $yLim[0]), 0, 0],\n            [0, 0, 1 / ($zLim[1] - $zLim[0]), 0],\n            [0, 0, 0, 1]\n         ];\n\n\n         // scale to screen coordinates\n         const S2 = [\n            [$width,  0, 0, 0],\n            [0, $height, 0, 0],\n            [0, 0, 1, 0],\n            [0, 0, 0, 1]\n         ];\n\n         tM.update(x => mdot(S2, mdot(P, mdot(S1, T1))));\n      } else {\n         tM.update(x => eye(4));\n      }\n   }\n\n   // adjust axis limits\n   // this is reactive in case if limX and limY are interactively changed by parent script\n   $: if (!limX.some(v => v === undefined)) xLim.update(v => limX);\n   $: if (!limY.some(v => v === undefined)) yLim.update(v => limY);\n   $: if (!limZ.some(v => v === undefined)) zLim.update(v => limZ);\n\n\n   /*****************************************/\n   /* Events observers                      */\n   /*****************************************/\n\n   // observer for the plot area size — to update scale\n   const ro1 = new ResizeObserver(entries => {\n      for (let entry of entries) {\n         const pcr = plotElement.getBoundingClientRect();\n         scale.update(x => getScale(pcr.width, pcr.height));\n      }\n   });\n\n   // observer for the axes area size - to update size of axes\n   const ro2 = new ResizeObserver(entries => {\n      for (let entry of entries) {\n         const acr = axesElement.getBoundingClientRect();\n         width.update(x => acr.width);\n         height.update(x => acr.height);\n      }\n   });\n\n   onMount(() => {\n      ro1.observe(plotElement);\n      ro2.observe(plotElement);\n   });\n\n   onDestroy(() => {\n      ro1.unobserve(plotElement);\n      ro2.unobserve(plotElement);\n   })\n\n   // check if everything is ok regadring the axis limits\n   $: isOk.update(v =>\n      !$yLim.some(v => v === undefined) &&\n      !$xLim.some(v => v === undefined) &&\n      !$zLim.some(v => v === undefined) &&\n      !$yLim.some(v => isNaN(v)) &&\n      !$xLim.some(v => isNaN(v)) &&\n      !$zLim.some(v => isNaN(v))\n   )\n</script>\n\n\n<div class=\"plot {'plot_' + $scale}\"  bind:this={plotElement} class:plot_error=\"{!$isOk}\">\n\n   <!-- axes (coordinate system) -->\n   <div class=\"axes-wrapper\" bind:this={axesElement} >\n      <slot name=\"title\"></slot>\n\n      <svg vector-effect=\"non-scaling-stroke\" preserveAspectRatio=\"none\" class=\"axes\">\n         <!-- axis and box -->\n         <slot name=\"xaxis\"></slot>\n         <slot name=\"yaxis\"></slot>\n         <slot name=\"zaxis\"></slot>\n\n         <!-- main plot content -->\n         <g class=\"axes-content\" clip-path=\"url(#{clipPathID})\">\n            <slot></slot>\n         </g>\n\n         <!-- axis and box -->\n         <slot name=\"box\"></slot>\n      </svg>\n\n      {#if !$isOk}\n      <p class=\"message_error\">\n         Axes component was not properly initialized. <br />\n         Add plot series (check that coordinates are numeric) or define axes limits manually.\n      </p>\n      {/if}\n   </div>\n\n\n</div>\n\n<style>\n\n   /* Plot (main container) */\n   .plot {\n      font-family: Arial, Helvetica, sans-serif;\n\n      display: grid;\n      grid-template-columns: min-content auto;\n      grid-template-rows: min-content auto min-content;\n      grid-template-areas:\n         \". title\"\n         \"ylab axes\"\n         \". xlab\";\n\n      box-sizing: border-box;\n      min-width: 100px;\n      min-height: 50px;\n      width: 100%;\n      height: 100%;\n      padding: 0;\n      margin: 0;\n   }\n\n   :global(.plot_small) {\n      font-size: 11px;\n   }\n\n   :global(.plot_medium) {\n      font-size: 13px;\n   }\n\n   :global(.plot_large) {\n      font-size: 16px;\n   }\n\n   :global(.plot_error) {\n      display: flex;\n   }\n\n   :global(.plot_error > .axes-wrapper) {\n      display: none;\n   }\n\n   .message_error {\n      font-size: 1.2em;\n      color: crimson;\n      padding: 20px;\n      text-align: center;\n      width: 100%;\n   }\n\n   /* Axes (coordinate system) */\n   .axes-wrapper {\n      grid-area: axes;\n      position:relative;\n      box-sizing: border-box;\n      display: flex;\n      width: 100%;\n      height: 100%;\n      padding: 0;\n      margin: 0;\n   }\n\n   .axes {\n      display: block;\n      box-sizing: border-box;\n      position:absolute;\n      user-select: none;\n      cursor: default;\n      padding: 0;\n      margin: 0;\n      height: 100%;\n      width: 100%;\n      max-height: 100%;\n      max-width: 100%;\n      min-height: 100%;\n      min-width: 100%;\n   }\n\n   .axes :global(text) {\n       -webkit-user-select: none;\n      user-select: none;\n      cursor: default;\n   }\n\n   :global(.axes-content) {\n      padding: 0;\n      margin: 0;\n      height: 100%;\n      width: 100%;\n      max-height: 100%;\n      max-width: 100%;\n      min-height: 100%;\n      min-width: 100%;\n\n   }\n\n   :global(.axes__xlabel) {\n      grid-area: xlab;\n      font-size: 1.0em;\n      font-weight: 600;\n      padding: 0.25em;\n      text-align: center;\n   }\n\n\n   :global(.axes__ylabel) {\n      grid-area: ylab;\n      font-size: 1.0em;\n      font-weight: 600;\n      padding: 0.25em;\n      text-align: center;\n      vertical-align: middle;\n      display: flex;\n   }\n\n   :global(.axes__ylabel > span) {\n      width: 1.5em;\n      line-height: 1.5em;\n      display: inline-block;\n      writing-mode: vertical-rl;\n      transform: rotate(180deg);\n   }\n\n\n   :global(.axes__title) {\n      background: transparent;\n      grid-area: title;\n\n      font-size: 1.3em;\n      font-weight: bold;\n      line-height: 1.2em;\n      padding: 0.5em 0;\n      text-align: center;\n   }\n\n   /* Axis */\n   :global(.axis-labels) {\n      fill: #303030;\n      font-size: 0.95em;\n   }\n\n   /* Data labels */\n   :global(.labels) {\n      fill: #606060;\n      font-size: 0.90em;\n   }\n\n   :global(.labels) {\n      visibility: hidden;\n      transition:visibility 0.25s linear, opacity 0.25s linear;\n      opacity: 0;\n   }\n\n</style>","export const Colors = {\n   \"AXIS_LINE\": \"#303030\",\n   \"AXIS_TICK\": \"#606060\",\n   \"WHITE\":     \"#fff\",\n   \"BLACK\":     \"#000\",\n   \"GRAY\":      \"#909090\",\n   \"MIDDLEGRAY\": \"#dadada\",\n   \"LIGHTGRAY\": \"#f0f0f0\",\n   \"DARKGRAY\":  \"#606060\",\n\n   \"PRIMARY\": \"#2266ff\",\n   \"PRIMARY_TEXT\": \"#333\",\n}\n\n\n","<script>\n   /****************************************************\n   * Axis lines                                        *\n   * --------------------                              *\n   * shows lines for axis (main, grid, etc)            *\n   *                                                   *\n   *****************************************************/\n\n   import { getContext } from 'svelte';\n   import { Colors } from './Colors';\n\n\n   /*****************************************/\n   /* Input parameters                      */\n   /*****************************************/\n\n   export let lineCoords = [];\n   export let lineColor = Colors.DARKGRAY;\n   export let lineType = 1;\n   export let lineWidth = 1;\n\n   // get axes context and reactive variables needed to compute coordinates\n   const axes = getContext('axes');\n   const scale = axes.scale;\n   const tM = axes.tM;\n\n   let x1, x2, y1, y2, lineStyleStr = undefined;\n   $: if (lineCoords.length == 2) {\n      const coords1 = axes.world2pixels(lineCoords[0], $tM)\n      const coords2 = axes.world2pixels(lineCoords[1], $tM)\n      x1 = coords1[0];\n      x2 = coords2[0];\n      y1 = coords1[1];\n      y2 = coords2[1];\n   }\n\n   lineStyleStr = `stroke:${lineColor};stroke-width: ${lineWidth}px;stroke-dasharray:${axes.LINE_STYLES[$scale][lineType - 1]}`;\n</script>\n\n{#if x1 !== undefined && y1 !== undefined && x2 !== undefined && y2 !== undefined}\n<g class=\"axis__grid\">\n   {#each x1 as v, i}\n   <line vector-effect=\"non-scaling-stroke\" x1={x1[i]} x2={x2[i]} y1={y1[i]} y2={y2[i]} style={lineStyleStr} />\n   {/each}\n</g>\n{/if}\n\n","<script>\n   /****************************************************\n   * TextLabels component                              *\n   * --------------------                              *\n   * shows a series of text labels on the plot         *\n   * can be used as basis for marker plot              *\n   *****************************************************/\n\n   import { rep } from 'mdatools/stat';\n   import { getContext } from 'svelte';\n   import { Colors } from './Colors';\n\n\n   /*****************************************/\n   /* Input parameters                      */\n   /*****************************************/\n\n   export let title = \"\";\n\texport let xValues;\n   export let yValues;\n   export let zValues = undefined;\n   export let labels;\n\n   export let pos = 0;\n   export let faceColor = Colors.PRIMARY_TEXT;\n   export let borderColor = \"transparent\";\n   export let borderWidth = 0;\n   export let textSize = 1;\n   export let style = \"series_textlabel\";\n\n   // text-anchor values depending on position\n   const textAnchors = [\"middle\", \"middle\", \"end\", \"middle\", \"start\"];\n\n   // sanity check for input parameters\n   $: {\n      if (!Array.isArray(xValues) || !Array.isArray(yValues) || xValues.length !== yValues.length) {\n         throw(\"TextLabels: parameters 'xValues' and 'yValues' must be vectors of the same length.\")\n      }\n\n      if (zValues === undefined) {\n         zValues = rep(0, xValues.length);\n      }\n   }\n\n   // multiply label values if needed\n   $: {\n      const n = xValues.length;\n      if (!Array.isArray(labels)) labels = Array(n).fill(labels);\n\n      // workaround for an issue when xValues and yValues are changed in parent app\n      // but array of labels is still the same as in the\n      if (labels.length != n) labels = rep(labels[0], n);\n\n      // check that the length of labels vector is correct\n      if (labels.length !== n) {\n         throw(\"TextLabels: parameter 'labels' must be a single text value or a vector of the same size as 'x' and 'y'.\")\n      }\n   }\n\n   // get axes context and reactive variables needed to compute coordinates\n   const axes = getContext('axes');\n   const scale = axes.scale;\n   const tM = axes.tM;\n\n   // reactive variables for coordinates of data points in pixels\n   $: coords = axes.world2pixels([xValues, yValues, zValues], $tM)\n   $: x = coords[0];\n   $: y = coords[1];\n\n   $: dx = [0,  0, -1,  0,  1][pos] * axes.LABELS_MARGIN[$scale];\n   $: dy = [0,  1,  0, -1,  0][pos] * axes.LABELS_MARGIN[$scale];\n\n   // styles for the elements\n   $: textStyleStr = `fill:${faceColor};stroke-width:${borderWidth}px;stroke:${borderColor};\n      font-size:${textSize}em; text-anchor:${textAnchors[pos]};`;\n</script>\n\n{#if x !== undefined && y !== undefined}\n<g class=\"series {style}\" data-title={title} style={textStyleStr} >\n   {#each x as v, i}\n      <text vector-effect=\"none\" data-id={i} x={x[i]} y={y[i]} dx={dx} dy={dy}>{@html labels[i]}</text>\n   {/each}\n</g>\n{/if}\n\n<style>\n   text, text > :global(tspan) {\n      dominant-baseline: middle;\n   }\n</style>","<script>\n   import { Colors } from './Colors';\n   import AxisLines from './AxisLines.svelte';\n   import TextLabels from './TextLabels.svelte';\n\n   // input parameters\n   export let tickLabels = [];     // vector with labels for each tick\n   export let showGrid = false;        // logical, show or not grid lines\n   export let title = \"\"              // axis title\n\n   export let pos = 1;\n   export let style = \"\";\n   export let grid1 = [];\n   export let grid2 = [];\n   export let axisLine = [];\n   export let tickCoords = [];\n   export let titleCoords = [];\n\n   export let lineColor = Colors.DARKGRAY;\n   export let gridColor = Colors.MIDDLEGRAY;\n   export let textColor = Colors.DARKGRAY;\n\n\n</script>\n\n<g class=\"mdaplot__axis {style}\">\n\n   <!-- grid -->\n   {#if showGrid }\n      <AxisLines lineCoords={grid1} lineColor={gridColor} lineType={3} />\n      <AxisLines lineCoords={grid2} lineColor={gridColor} lineType={3} />\n   {/if}\n\n   <!-- main axis line -->\n   <AxisLines lineCoords={axisLine} lineColor={lineColor} lineType={1} />\n\n   <!-- ticks-->\n   <AxisLines lineCoords={tickCoords} lineColor={lineColor} lineType={1} />\n\n   <!-- labels -->\n   {#if tickCoords.length === 2 && tickLabels.length === tickCoords[1][0].length}\n   <TextLabels\n      xValues={tickCoords[0][0]} yValues={tickCoords[0][1]} zValues={tickCoords[0][2]}\n      faceColor={textColor}\n      labels={tickLabels} {pos}\n   />\n   {/if}\n\n   <!-- title -->\n   {#if titleCoords.length === 3 && title !== \"\"}\n   <TextLabels\n      xValues={titleCoords[0]} yValues={titleCoords[1]} zValues={titleCoords[2]}\n      faceColor={textColor}\n      labels={title} {pos}\n   />\n   {/if}\n</g>\n\n","<script>\n   import { mean, rep } from 'mdatools/stat';\n   import { getContext } from 'svelte';\n   import { Colors } from './Colors';\n   import Axis from './Axis.svelte';\n\n   // input parameters\n   export let slot = \"xaxis\";         // slot the component must be placed in\n   export let ticks = undefined;      // vector with numeric tick positions in plot units\n   export let tickLabels = ticks;     // vector with labels for each tick\n   export let showGrid = false;        // logical, show or not grid lines\n   export let title = \"\"              // axis title\n\n   export let lineColor = Colors.DARKGRAY;\n   export let gridColor = Colors.MIDDLEGRAY;\n   export let textColor = Colors.DARKGRAY;\n\n   // set up tick mode\n   const tickMode = ticks === undefined ? \"auto\" : \"manual\";\n\n   // sanity checks\n   if (slot !== \"xaxis\") {\n      throw(\"XAxis: this component must have \\\"slot='xaxis'\\\" attribute.\")\n   }\n\n   if (ticks !== undefined && !Array.isArray(ticks)) {\n      throw(\"XAxis: 'ticks' must be a vector of numbers.\")\n   }\n\n   if (ticks !== undefined && !(Array.isArray(tickLabels) && tickLabels.length == ticks.length)) {\n      throw(\"XAxis: 'tickLabels' must be a vector of the same size as ticks.\")\n   }\n\n   // get axes context and adjust x margins\n   const axes = getContext('axes');\n\n   // get reactive variables needed to compute coordinates\n   const xLim = axes.xLim;\n   const yLim = axes.yLim;\n   const zLim = axes.zLim;\n   const scale = axes.scale;\n   const isOk = axes.isOk;\n\n   // prepare variables for coordinates\n   let titleCoords = [];\n   let grid1 = [];\n   let grid2 = [];\n   let axisLine = [];\n   let tickCoords = [];\n\n   // compute tick x-coordinates\n   $: if ($isOk) {\n      const ticksX = tickMode === \"auto\" ? axes.getAxisTicks(undefined, $xLim, axes.TICK_NUM[$scale], true) : ticks;\n      const tickNum = ticksX.length;\n\n      // compute tick y-coordinates (middle, up and bottom)\n      const dY = ($yLim[1] - $yLim[0]) / 100; // 1% of axis size\n      const ticksY  = rep($yLim[0], tickNum)\n      const ticksY1 = rep($yLim[0] - dY, tickNum)\n      const ticksY2 = rep($yLim[0] + dY, tickNum)\n\n      // tick z-coordinates\n      const ticksZ  = rep($zLim[0], tickNum)\n\n      // coordinates for the ends of grid\n      const gridYEnd = rep($yLim[1], tickNum);\n      const gridZEnd = rep($zLim[1], tickNum);\n\n      // tick labels\n      tickLabels = tickMode === \"auto\" ? ticksX : tickLabels;\n\n      // combine all coordinates together\n      grid1 = [\n         [ticksX, ticksY, ticksZ],\n         [ticksX, gridYEnd, ticksZ]\n      ];\n\n      grid2 = [\n         [ticksX, ticksY, ticksZ],\n         [ticksX, ticksY2, gridZEnd]\n      ];\n\n      axisLine = [\n         [[$xLim[0]], [$yLim[0]], [$zLim[0]]],\n         [[$xLim[1]], [$yLim[0]], [$zLim[0]]]\n      ]\n\n      tickCoords = [\n         [ticksX, ticksY1, ticksZ],\n         [ticksX, ticksY2, ticksZ]\n      ];\n\n      titleCoords = [\n         [$xLim[1]], [ticksY1[0] - 0.05 * ($yLim[1] - $yLim[0])], [$zLim[0]]\n      ];\n   }\n</script>\n\n{#if $isOk && axisLine.length > 0}\n<Axis\n   style=\"mdaplot__xaxis\" pos={1}\n   {title} {lineColor} {gridColor} {textColor} {titleCoords}\n   {showGrid} {grid1} {grid2} {axisLine} {tickCoords} {tickLabels}\n/>\n{/if}\n\n","<script>\n   import { mean, rep } from 'mdatools/stat';\n   import { getContext } from 'svelte';\n   import { Colors } from './Colors';\n   import Axis from './Axis.svelte';\n\n   // input parameters\n   export let slot = \"yaxis\";         // slot the component must be placed in\n   export let ticks = undefined;      // vector with numeric tick positions in plot units\n   export let tickLabels = ticks;     // vector with labels for each tick\n   export let showGrid = false;       // logical, show or not grid lines\n   export let title = \"\"              // axis title\n\n   export let lineColor = Colors.DARKGRAY;\n   export let gridColor = Colors.MIDDLEGRAY;\n   export let textColor = Colors.DARKGRAY;\n\n   // set up tick mode\n   const tickMode = ticks === undefined ? \"auto\" : \"manual\";\n\n   // sanity checks\n   if (slot !== \"yaxis\") {\n      throw(\"YAxis: this component must have \\\"slot='yaxis'\\\" attribute.\")\n   }\n\n   if (ticks !== undefined && !Array.isArray(ticks)) {\n      throw(\"YAxis: 'ticks' must be a vector of numbers.\")\n   }\n\n   if (ticks !== undefined && !(Array.isArray(tickLabels) && tickLabels.length == ticks.length)) {\n      throw(\"YAxis: 'tickLabels' must be a vector of the same size as ticks.\")\n   }\n\n   // get axes context and adjust x margins\n   const axes = getContext('axes');\n\n   // get reactive variables needed to compute coordinates\n   const xLim = axes.xLim;\n   const yLim = axes.yLim;\n   const zLim = axes.zLim;\n   const scale = axes.scale;\n   const isOk = axes.isOk;\n\n   // prepare variables for coordinates\n   let titleCoords = [];\n   let grid1 = [];\n   let grid2 = [];\n   let axisLine = [];\n   let tickCoords = [];\n\n   // compute tick x-coordinates\n   $: if ($isOk) {\n      const ticksY = tickMode === \"auto\" ? axes.getAxisTicks(undefined, $yLim, axes.TICK_NUM[$scale], true) : ticks;\n      const tickNum = ticksY.length;\n\n      // compute tick y-coordinates (middle, up and bottom)\n      const dX = ($xLim[1] - $xLim[0]) / 100; // 1% of axis size\n      const ticksX  = rep($xLim[0], tickNum)\n      const ticksX1 = rep($xLim[0] - dX, tickNum)\n      const ticksX2 = rep($xLim[0] + dX, tickNum)\n\n      // tick z-coordinates\n      const ticksZ  = rep($zLim[0], tickNum)\n\n      // coordinates for the ends of grid\n      const gridXEnd = rep($xLim[1], tickNum);\n      const gridZEnd = rep($zLim[1], tickNum);\n\n      // tick labels\n      tickLabels = tickMode === \"auto\" ? ticksY : tickLabels;\n\n      // combine all coordinates together\n\n      grid1 = [\n         [ticksX, ticksY, ticksZ],\n         [gridXEnd, ticksY, ticksZ]\n      ];\n\n      grid2 = [\n         [ticksX, ticksY, ticksZ],\n         [ticksX, ticksY, gridZEnd]\n      ];\n\n      axisLine = [\n         [[$xLim[0]], [$yLim[0]], [$zLim[0]]],\n         [[$xLim[0]], [$yLim[1]], [$zLim[0]]]\n      ]\n\n      tickCoords = [\n         [ticksX1, ticksY, ticksZ],\n         [ticksX2, ticksY, ticksZ]\n      ];\n\n\n      titleCoords = [\n         [ticksX1[0] - 0.05 * ($xLim[1] - $xLim[0])], [$yLim[1]], [$zLim[0]]\n      ];\n   }\n</script>\n\n{#if $isOk && axisLine.length > 0}\n<Axis\n   style=\"mdaplot__yaxis\" pos = {2}\n   {title} {lineColor} {gridColor} {textColor} {titleCoords}\n   {showGrid} {grid1} {grid2} {axisLine} {tickCoords} {tickLabels}\n/>\n{/if}\n\n","<script>\n   import { rep } from 'mdatools/stat';\n   import { getContext } from 'svelte';\n   import { Colors } from './Colors';\n   import Axis from './Axis.svelte';\n\n   // input parameters\n   export let slot = \"zaxis\";         // slot the component must be placed in\n   export let ticks = undefined;      // vector with numeric tick positions in plot units\n   export let tickLabels = ticks;     // vector with labels for each tick\n   export let showGrid = false;       // logical, show or not grid lines\n   export let title = \"\"              // axis title\n\n   export let lineColor = Colors.DARKGRAY;\n   export let gridColor = Colors.MIDDLEGRAY;\n   export let textColor = Colors.DARKGRAY;\n\n   // set up tick mode\n   const tickMode = ticks === undefined ? \"auto\" : \"manual\";\n\n   // sanity checks\n   if (slot !== \"zaxis\") {\n      throw(\"ZAxis: this component must have \\\"slot='zaxis'\\\" attribute.\")\n   }\n\n   if (ticks !== undefined && !Array.isArray(ticks)) {\n      throw(\"ZAxis: 'ticks' must be a vector of numbers.\")\n   }\n\n   if (ticks !== undefined && !(Array.isArray(tickLabels) && tickLabels.length == ticks.length)) {\n      throw(\"ZAxis: 'tickLabels' must be a vector of the same size as ticks.\")\n   }\n\n   // get axes context\n   const axes = getContext('axes');\n\n   // get reactive variables needed to compute coordinates\n   const xLim = axes.xLim;\n   const yLim = axes.yLim;\n   const zLim = axes.zLim;\n   const scale = axes.scale;\n   const isOk = axes.isOk;\n\n   // prepare variables for coordinates\n   let titleCoords = [];\n   let grid1 = [];\n   let grid2 = [];\n   let axisLine = [];\n   let tickCoords = [];\n\n   // compute tick x-coordinates\n   if ($isOk) {\n      const ticksZ = tickMode === \"auto\" ? axes.getAxisTicks(undefined, $zLim, axes.TICK_NUM[$scale], true) : ticks;\n      const tickNum = ticksZ.length;\n\n      // compute tick y-coordinates (middle, up and bottom)\n      const dX = ($xLim[1] - $xLim[0]) / 100; // 1% of axis size\n      const ticksX  = rep($xLim[0], tickNum)\n      const ticksX1 = rep($xLim[0] - dX, tickNum)\n      const ticksX2 = rep($xLim[0] + dX, tickNum)\n\n      // tick z-coordinates\n      const ticksY  = rep($yLim[0], tickNum)\n\n      // coordinates for the ends of grid\n      const gridXEnd = rep($xLim[1], tickNum);\n      const gridYEnd = rep($yLim[1], tickNum);\n\n      // tick labels\n      tickLabels = tickMode === \"auto\" ? ticksZ : tickLabels;\n\n      // combine all coordinates together\n\n      grid1 = [\n         [ticksX, ticksY, ticksZ],\n         [gridXEnd, ticksY, ticksZ]\n      ];\n\n      grid2 = [\n         [ticksX, ticksY, ticksZ],\n         [ticksX, gridYEnd, ticksZ]\n      ];\n\n      axisLine = [\n         [[$xLim[0]], [$yLim[0]], [$zLim[0]]],\n         [[$xLim[0]], [$yLim[0]], [$zLim[1]]]\n      ]\n\n      tickCoords = [\n         [ticksX1, ticksY, ticksZ],\n         [ticksX2, ticksY, ticksZ]\n      ];\n\n\n      titleCoords = [\n         [ticksX1[0] - 0.05 * ($xLim[1] - $xLim[0])], [$yLim[0]], [$zLim[1]]\n      ];\n\n   }\n</script>\n\n{#if $isOk && axisLine.length > 0}\n<Axis\n   style=\"mdaplot__yaxis\" pos = {2}\n   {title} {lineColor} {gridColor} {textColor} {titleCoords}\n   {showGrid} {grid1} {grid2} {axisLine} {tickCoords} {tickLabels}\n/>\n{/if}\n\n","<script>\n   // shared components - 3d plot elements\n   import Axes from '../../shared/plots3d/Axes.svelte';\n   import XAxis from '../../shared/plots3d/XAxis.svelte';\n   import YAxis from '../../shared/plots3d/YAxis.svelte';\n   import ZAxis from '../../shared/plots3d/ZAxis.svelte';\n\n   export let limX;\n   export let limY;\n   export let limZ;\n\n   // initial orientation\n   let phi = -25.264 / 180 * Math.PI\n   let theta = 215 / 180 * Math.PI;\n   let zoom = 0.5;\n\n   // drugging settings\n   let isDragging = false;\n   let draggingStartPosition = [];\n   let plotPane;\n\n   const zoomScene = (e) => {\n      zoom = zoom + e.deltaY / 100\n      if (zoom < 0.1) zoom = 0.1;\n      if (zoom > 2.0) zoom = 2.0;\n   }\n\n   const startRotation = (e) => {\n      draggingStartPosition = [e.clientX, e.clientY];\n      isDragging = true;\n   }\n\n   const stopRotation = (e) => {\n      isDragging = false;\n   }\n\n   const rotate = (e) => {\n      if (!isDragging || !plotPane) return;\n\n      // get size of plot pane and coordinates of current mouse position\n      const width = plotPane.getBoundingClientRect().width;\n      const height = plotPane.getBoundingClientRect().height;\n      const currentPosition = [e.clientX, e.clientY];\n      if (width < 100) return;\n\n      // compute angle for horizontal rotation\n      const dx = currentPosition[0] - draggingStartPosition[0];\n      phi = phi + (dx / width * Math.PI)\n\n      // compute angle for vertical rotation\n      const dy = currentPosition[1] - draggingStartPosition[1];\n      theta = theta + (dy / height * Math.PI)\n\n      // update start moust position\n      draggingStartPosition = currentPosition;\n   }\n\n   /* rotate and move plot by keyboard */\n   document.onkeydown = function (event) {\n      if (event.key == \"ArrowLeft\") phi = phi - 0.05;\n      if (event.key == \"ArrowRight\") phi = phi + 0.05;\n      if (event.key == \"ArrowUp\") theta = theta - 0.01;\n      if (event.key == \"ArrowDown\") theta = theta + 0.01;\n      if (event.key == \"+\") zoom = zoom * 1.1;\n      if (event.key == \"-\") zoom = zoom * 0.9;\n   }\n</script>\n\n<div  bind:this={plotPane}\n      on:mousewheel={zoomScene}\n      on:mousemove={rotate}\n      on:mousedown={startRotation}\n      on:mouseleave={stopRotation}\n      on:mouseup={stopRotation}\n>\n   <Axes {limX} {limY} {limZ} {zoom} {phi} {theta}>\n      <slot></slot>\n      <XAxis showGrid={true} title=\"X1\" slot=\"xaxis\" />\n      <YAxis showGrid={true} title=\"Y\" slot=\"yaxis\" />\n      <ZAxis showGrid={true} title=\"X2\" slot=\"zaxis\" />\n   </Axes>\n</div>\n\n<style>\n   div {\n      display: block;\n      width: 100%;\n      height: 100%;\n   }\n</style>","<script>\n   /****************************************************\n   * Segments component                                *\n   * --------------------                              *\n   * shows a series of line segments on the plot       *\n   *                                                   *\n   *****************************************************/\n\n   import { mrange, rep } from 'mdatools/stat';\n   import { getContext } from 'svelte';\n   import { Colors } from './Colors';\n\n\n   /*****************************************/\n   /* Input parameters                      */\n   /*****************************************/\n\n   export let title = \"\";\n\texport let xStart;\n   export let xEnd;\n   export let yStart;\n   export let yEnd;\n   export let zStart = undefined;\n   export let zEnd = undefined;\n\n   export let lineColor = Colors.PRIMARY;\n   export let lineType = 1;\n   export let lineWidth = 1;\n\n   // sanity check for input parameters\n   $: {\n      if (!Array.isArray(xStart) || !Array.isArray(xEnd) || !Array.isArray(yStart) || !Array.isArray(yEnd)) {\n         throw(\"Segments: parameters 'xStart', 'yStart', 'xEnd' and 'yEnd' must be vectors.\")\n      }\n\n      const n = xStart.length;\n      if (xEnd.length !== n || yStart.length !== n || yEnd.length !== n) {\n         throw(\"Segments: parameters 'xStart', 'yStart', 'xEnd' and 'yEnd' should have the same length.\")\n      }\n\n      if (zStart === undefined) {\n         zStart = rep(0, n);\n      }\n\n      if (zEnd === undefined) {\n         zEnd = zStart;\n      }\n   }\n\n   // get axes context and reactive variables needed to compute coordinates\n   const axes = getContext('axes');\n   const scale = axes.scale;\n   const tM = axes.tM;\n\n   $: axes.adjustXAxisLimits(mrange(xStart.concat(xEnd)));\n   $: axes.adjustYAxisLimits(mrange(yStart.concat(yEnd)));\n   $: axes.adjustZAxisLimits(mrange(zStart.concat(zEnd)));\n\n   // reactive variables for coordinates of data points in pixels (and line style)\n   $: coords1 = axes.world2pixels([xStart, yStart, zStart], $tM)\n   $: coords2 = axes.world2pixels([xEnd, yEnd, zEnd], $tM)\n   $: x1 = coords1[0];\n   $: x2 = coords2[0];\n   $: y1 = coords1[1];\n   $: y2 = coords2[1];\n   $: lineStyleStr = `stroke:${lineColor};stroke-width: ${lineWidth}px;stroke-dasharray:${axes.LINE_STYLES[$scale][lineType - 1]}`;\n</script>\n\n<g class=\"series series_segment\" data-title=\"{title}\">\n{#if x1 !== undefined && y1 !== undefined && x2 !== undefined && y2 !== undefined}\n   {#each x1 as v, i}\n      <line vector-effect=\"non-scaling-stroke\" x1={x1[i]} x2={x2[i]} y1={y1[i]} y2={y2[i]} style={lineStyleStr} />\n   {/each}\n{/if}\n</g>\n\n","<script>\n   import {rep, seq} from 'mdatools/stat';\n   import { mdot, vmult } from 'mdatools/matrix';\n\n   import Segments from '../../shared/plots3d/Segments.svelte';\n\n   export let coeffs;\n   export let X1Range;\n   export let X2Range;\n   export let showLines;\n   export let color;\n\n   const n = 20;\n   const x0 = rep(1, n);\n\n   let X1Start, X1End = [];\n   let X2Start, X2End = [];\n\n   // generated points at fixed X2Range values\n   $: {\n      const x1 = seq(X1Range[0], X1Range[1], n);\n      const x21 = rep(X2Range[0], n);\n      const x22 = rep(X2Range[1], n);\n\n      X2Start = [\n         x1,\n         x21,\n         mdot([x0, x1, x21, vmult(x1, x21)], coeffs)[0]\n      ];\n\n      X2End = [\n         x1,\n         x22,\n         mdot([x0, x1, x22, vmult(x1, x22)], coeffs)[0]\n      ];\n   }\n\n   $: {\n      const x11 = rep(X1Range[0], n);\n      const x12 = rep(X1Range[1], n);\n      const x2 = seq(X2Range[0], X2Range[1], n);\n\n      X1Start = [\n         x11,\n         x2,\n         mdot([x0, x11, x2, vmult(x11, x2)], coeffs)[0]\n      ];\n\n      X1End = [\n         x12,\n         x2,\n         mdot([x0, x12, x2, vmult(x12, x2)], coeffs)[0]\n      ];\n   }\n</script>\n\n<!-- lines for X1 is constant -->\n{#if showLines == \"X1\" || showLines == \"Both\"}\n<Segments\n   xStart={X1Start[0]} zStart={X1Start[1]} yStart={X1Start[2]}\n   xEnd={X1End[0]} zEnd={X1End[1]} yEnd={X1End[2]}\n   lineColor={color}\n/>\n{/if}\n\n{#if showLines == \"X2\" || showLines == \"Both\"}\n<Segments\n   xStart={X2Start[0]} zStart={X2Start[1]} yStart={X2Start[2]}\n   xEnd={X2End[0]} zEnd={X2End[1]} yEnd={X2End[2]}\n   lineColor={color}\n/>\n{/if}\n","<script>\n   /****************************************************\n   * ScatterSeries component                           *\n   * --------------------                              *\n   * shows a series of points on the plot              *\n   *                                                   *\n   *****************************************************/\n\n   import { range, mrange, rep } from 'mdatools/stat';\n   import { getContext } from 'svelte';\n   import { Colors } from './Colors';\n   import TextLabels from './TextLabels.svelte';\n\n   /*****************************************/\n   /* Input parameters                      */\n   /*****************************************/\n\n   // input parameters\n\texport let xValues;\n   export let yValues;\n   export let zValues = undefined\n   export let marker = 1\n   export let title = \"\";\n   export let faceColor = \"transparent\";\n   export let borderColor = Colors.PRIMARY;\n   export let borderWidth = 1;\n   export let markerSize = 1;\n\n   /* constants for internal use */\n   const markers = [\"●\", \"◼\", \"▲\", \"▼\", \"⬥\", \"+\", \"*\", \"⨯\"];\n   let markerSymbol;\n\n   /* sanity check of input parameters */\n   if (typeof(marker) !== \"number\" || marker < 1 || marker > markers.length) {\n      throw(`ScatterSeries: parameter 'marker' must be a number from 1 to ${markers.length}.\"`);\n   }\n\n   // sanity check for input parameters\n   $: {\n      if (!Array.isArray(xValues) || !Array.isArray(yValues)) {\n         throw(\"ScatterSeries: parameters 'xValues' and 'yValues' must be vectors.\")\n      }\n\n      const n = xValues.length;\n      if (yValues.length !== n) {\n         throw(\"ScatterSeries: parameters 'xValues', 'yValues' should have the same length.\")\n      }\n\n      if (zValues === undefined) {\n         zValues = rep(0, n);\n      }\n   }\n\n   // get axes context and reactive variables needed to compute coordinates\n   const axes = getContext('axes');\n   $: axes.adjustXAxisLimits(mrange(xValues));\n   $: axes.adjustYAxisLimits(mrange(yValues));\n   $: axes.adjustZAxisLimits(mrange(zValues));\n\n   // reactive variables for coordinates of data points in pixels (and line style)\n   $: markerSymbol = markers[marker - 1];\n</script>\n\n<TextLabels\n   {xValues} {yValues} {zValues} {faceColor} {borderColor} {borderWidth} {title}\n   style=\"series_scatter\"\n   labels={markerSymbol}\n   textSize={markerSize}\n/>\n\n<style>\n   :global(.series_scatter > text) {\n      font-size: 1em;\n      cursor: default;\n   }\n\n   :global(.series_scatter > text:hover) {\n      opacity: 90%;\n   }\n\n   :global(.series_scatter > *:hover + .labels_hover) {\n      visibility: visible;\n      opacity: 1;\n   }\n</style>\n","<script>\n   // shared components - 3d plot elements\n   import Segments from '../../shared/plots3d/Segments.svelte';\n   import ScatterSeries from '../../shared/plots3d/ScatterSeries.svelte';\n\n   import { mdot, transpose, vmult } from 'mdatools/matrix';\n\n   export let X1Range;\n   export let X2Range;\n   export let pX1;\n   export let pX2;\n   export let coeffs;\n   export let showLines = \"Both\";\n   export let color;\n\n   let X1Start, X1End = [];\n   let X2Start, X2End = [];\n\n   // generated points at fixed X2Range values\n   $: {\n      const x1 = [pX1];\n      const x21 = [X2Range[0]];\n      const x22 = [X2Range[1]];\n\n      // X1, X2 and y coordinates of start and end points of the line\n      X2Start = [x1, x21, mdot([[1], x1, x21, vmult(x1, x21)], coeffs)[0]];\n      X2End = [x1, x22, mdot([[1], x1, x22, vmult(x1, x22)], coeffs)[0]];\n   }\n\n   $: {\n      const x11 = [X1Range[0]];\n      const x12 = [X1Range[1]];\n      const x2 = [pX2];\n\n      // X1, X2 and y coordinates of start and end points of the line\n      X1Start = [x11, x2, mdot([[1], x11, x2, vmult(x11, x2)], coeffs)[0]];\n      X1End = [x12, x2, mdot([[1], x12, x2, vmult(x12, x2)], coeffs)[0]];\n   }\n\n   // generated points at fixed X2Range values\n   $: pCoords = [pX1, pX2, mdot(transpose([1, pX1, pX2, pX1 * pX2]), coeffs)[0]];\n</script>\n\n<!-- the point -->\n<ScatterSeries\n   faceColor={color} borderColor={color}\n   xValues={[pCoords[0]]} zValues={[pCoords[1]]} yValues={[pCoords[2]]}\n/>\n\n<!-- lines for point model constant -->\n{#if showLines == \"X1\" || showLines == \"Both\"}\n<Segments\n   xStart={X1Start[0]} zStart={X1Start[1]} yStart={X1Start[2]}\n   xEnd={X1End[0]} zEnd={X1End[1]} yEnd={X1End[2]}\n   lineColor={color}\n/>\n{/if}\n\n{#if showLines == \"X2\" || showLines == \"Both\"}\n<Segments\n   xStart={X2Start[0]} zStart={X2Start[1]} yStart={X2Start[2]}\n   xEnd={X2End[0]} zEnd={X2End[1]} yEnd={X2End[2]}\n   lineColor={color}\n/>\n\n<!-- lines for point X1 and X2 -->\n<ScatterSeries borderColor={\"#b0b0b0\"} faceColor={\"#b0b0b0\"} xValues={[pX1]} zValues={[pX2]} yValues={[0]} />\n\n<Segments xStart={[0]} zStart={[pX2]} yStart={[0]} xEnd={[pX1]} zEnd={[pX2]} yEnd={[0]} lineColor=\"#b0b0b0\" />\n<Segments xStart={[pX1]} zStart={[0]} yStart={[0]} xEnd={[pX1]} zEnd={[pX2]} yEnd={[0]} lineColor=\"#b0b0b0\" />\n<Segments\n   xStart={[pX1]} zStart={[pX2]} yStart={[0]}\n   xEnd={[pCoords[0]]} zEnd={[pCoords[1]]} yEnd={[pCoords[2]]}\n   lineColor=\"#b0b0b0\"\n/>\n\n{/if}\n","<script>\n   import { mdot } from 'mdatools/matrix';\n\n   export let pX1;\n   export let pX2;\n   export let coeffs;\n   export let showLines = \"Both\";\n\n   $: X = [[1], [pX1], [pX2], [pX1 * pX2]];\n   $: y = mdot(X, coeffs)[0][0]\n</script>\n\n<div class=\"eq\">\n\n   <!-- y -->\n   <div class=\"eq_term eq_term__val\"><span>{y.toFixed(2)}</span><span>y</span></div>\n   <div class=\"eq_term eq_term__op\"><span>=</span><span>=</span></div>\n\n   <!-- b0 -->\n   <div class=\"eq_term eq_term__op\">\n      <span></span><span></span>\n   </div>\n   <div class=\"eq_term eq_term__coeff\" >\n      <span>{coeffs[0].toFixed(1)}</span><span>b0</span>\n   </div>\n\n   <!-- b1 -->\n   <div class=\"eq_term eq_term__op\">\n      <span>{@html coeffs[1] < 0 ? '&minus;' : '+'}</span><span>+</span>\n   </div>\n   <div class=\"eq_term eq_term__coeff\">\n      <span>{Math.abs(coeffs[1]).toFixed(1)}</span><span>b<sub>1</sub></span>\n   </div>\n   <div class=\"eq_term eq_term__op\">\n      <span>&times;</span><span>&times;</span>\n   </div>\n   <div class=\"eq_term {showLines != \"X2\" ? 'eq_term__val' : 'eq_term__coeff'}\">\n      <span>{pX1.toFixed(1)}</span><span>X<sub>1</sub></span>\n   </div>\n\n   <!-- b2 -->\n   <div class=\"eq_term eq_term__op\">\n      <span>{@html coeffs[2] < 0 ? '&minus;' : '+'}</span><span>+</span>\n   </div>\n   <div class=\"eq_term eq_term__coeff\">\n      <span>{Math.abs(coeffs[2]).toFixed(1)}</span><span>b<sub>2</sub></span>\n   </div>\n   <div class=\"eq_term eq_term__op\">\n      <span>&times;</span><span>&times;</span>\n   </div>\n   <div class=\"eq_term {showLines != \"X1\" ? 'eq_term__val' : 'eq_term__coeff'}\">\n      <span>{pX2.toFixed(1)}</span><span>X<sub>2</sub></span>\n   </div>\n\n   <!-- b12 -->\n   <div class=\"eq_term eq_term__op\">\n      <span>{@html coeffs[3] < 0 ? '&minus;' : '+'}</span><span>+</span>\n   </div>\n   <div class=\"eq_term eq_term__coeff\">\n      <span>{Math.abs(coeffs[3]).toFixed(2)}</span><span>b<sub>12</sub></span>\n   </div>\n   <div class=\"eq_term eq_term__op\">\n      <span>&times;</span><span>&times;</span>\n   </div>\n   <div class=\"eq_term {showLines != \"X2\" ? 'eq_term__val' : 'eq_term__coeff'}\">\n      <span>{pX1.toFixed(1)}</span><span>X<sub>1</sub></span>\n   </div>\n   <div class=\"eq_term eq_term__op\">\n      <span>&times;</span><span>&times;</span>\n   </div>\n   <div class=\"eq_term {showLines != \"X1\" ? 'eq_term__val' : 'eq_term__coeff'}\">\n      <span>{pX2.toFixed(1)}</span><span>X<sub>2</sub></span>\n   </div>\n</div>\n\n<style>\n   .eq {\n      display: flex;\n      flex-direction: row;\n      font-size: 1.5em;\n      align-items: stretch;\n      justify-content: center;\n      margin: 0.5em;\n   }\n\n   .eq_term{\n      display: flex;\n      flex-direction: column;\n      text-align: right;\n      margin: 1px;\n   }\n\n   .eq_term__op{\n      color: #a0a0a0;\n   }\n\n   .eq_term__val{\n      color: #336688;\n   }\n\n   .eq_term__coeff{\n      color: #a0a0ef;\n   }\n\n   .eq_term > :global(span){\n      text-align: center;\n      padding: 0.15em;\n      line-break: none;\n   }\n\n</style>","<script>\n   // shared components\n   import {default as StatApp} from \"../../shared/StatApp.svelte\";\n\n   // shared components - controls\n   import AppControlArea from \"../../shared/controls/AppControlArea.svelte\";\n   import AppControlRange from \"../../shared/controls/AppControlRange.svelte\";\n   import AppControlSelect from '../../shared/controls/AppControlSelect.svelte';\n   import {colors} from '../../shared/graasta';\n\n   // local components\n   import AppPlot from \"./AppPlot.svelte\";\n   import ModelPlot from \"./ModelPlot.svelte\";\n   import PointPlot from \"./PointPlot.svelte\";\n   import PointLineEquation from './PointLineEquation.svelte';\n\n   // constant parameters\n   const X1Range = [1, 4];\n   const X2Range = [1, 4];\n   const modelColor = colors.plots.POPULATIONS[0];\n   const pointColor = colors.plots.SAMPLES[0];\n\n   // axes limits (a bit wider the X range)\n   const limX = [0, 5];\n   const limY = [0, 15];\n   const limZ = [0, 5];\n\n\n   // regression coefficients\n   let b0 = 10;\n   let b1 = 0.1;\n   let b2 = 0.1;\n   let b12 = 0.00;\n\n   // coordinates of the selected point\n   let pX1 = 2.0;\n   let pX2 = 2.0;\n\n   // model lines mode\n   let showLines = \"Both\";\n\n   // combine coefficients to a vector\n   $: coeffs = [b0, b1, b2, b12];\n</script>\n\n<StatApp>\n   <div class=\"app-layout\">\n\n      <div class=\"app-plot-area\">\n         <!-- Line equation for selected point -->\n         <PointLineEquation {pX1} {pX2} {coeffs} {showLines} />\n\n         <!-- 3D plot -->\n         <AppPlot {limX} {limY} {limZ}>\n            <PointPlot color={pointColor} {coeffs} {pX1} {pX2} {X1Range} {X2Range} {showLines} />\n            <ModelPlot color={modelColor} {coeffs} {X1Range} {X2Range} {showLines} />\n         </AppPlot>\n      </div>\n\n      <div class=\"app-controls-area\">\n         <!-- Control elements for point -->\n         <AppControlArea>\n            <AppControlSelect id=\"showLines\" label=\"Show lines\" bind:value={showLines} options={[\"X1\", \"X2\", \"Both\"]} />\n            <AppControlRange id=\"pX1\" label=\"point X<sub>1</sub>\" bind:value={pX1} min={1} max={4} step={0.1} decNum={1}/>\n            <AppControlRange id=\"pX2\" label=\"point X<sub>2</sub>\" bind:value={pX2} min={1} max={4} step={0.1} decNum={1}/>\n         </AppControlArea>\n\n         <!-- Control elements for model -->\n         <AppControlArea>\n            <AppControlRange id=\"b0\" label=\"b<sub>0</sub>\" bind:value={b0} min={5} max={15}  step={0.1} decNum={1}/>\n            <AppControlRange id=\"b1\" label=\"b<sub>1</sub>\" bind:value={b1} min={-1} max={1}  step={0.1} decNum={1}/>\n            <AppControlRange id=\"b2\" label=\"b<sub>2</sub>\" bind:value={b2} min={-1} max={1}  step={0.1} decNum={1}/>\n            <AppControlRange id=\"b12\" label=\"b<sub>12</sub>\" bind:value={b12} min={-0.5} max={0.5} step={0.02} decNum={2} />\n         </AppControlArea>\n      </div>\n   </div>\n\n   <div slot=\"help\">\n      <h2>Multiple linear regression model</h2>\n      <p>This app helps to understand a Multiple Linear Regression model, where a response variable (<em>y</em>) depends on two predictors (<em>X</em><sub>1</sub> and <em>X</em><sub>2</sub>) as well as on their interaction. The model is represented by a set of four coefficients, <em>b</em><sub>0</sub> (bias or intercept), <em>b</em><sub>1</sub> (effect of <em>X</em><sub>1</sub>), <em>b</em><sub>2</sub> (effect of <em>X</em><sub>2</sub>) and <em>b</em><sub>12</sub> (effect of interaction between <em>X</em><sub>1</sub> and <em>X</em><sub>2</sub>). You can change the values of the coefficients using corresponding controls.\n      </p>\n      <p>\n      The model is visualized as a surface in (<em>X</em><sub>1</sub>, <em>X</em><sub>2</sub>, <em>y</em>) Cartesian space as it is shown on the 3D plot. The model surface is represented by a two sets of parallel straight lines. One set of lines shows how <em>y</em> depends on <em>X</em><sub>1</sub>, when <em>X</em><sub>2</sub> has different fixed values (one line for each fixed <em>X</em><sub>2</sub>). The second set of lines, which is orthogonal to the first set, shows how <em>y</em> depends on <em>X</em><sub>2</sub> when <em>X</em><sub>1</sub> has different fixed values. You can show both sets or only one of them by using control element \"Show lines\".\n      </p>\n      <p>\n         The 3D scene can be rotated and zoomed in/out. You can do it with a mouse (drag for rotation and scroll for zooming) or by keyboard (arrows for rotation and \"+\", \"-\" for zooming). You can also see a selected point whose X-coordinates you can change. As well as the equation, which shows how y-value of this point is computed using the current model.\n      </p>\n   </div>\n</StatApp>\n\n<style>\n\n.app-layout {\n   width: 100%;\n   height: 100%;\n   position: relative;\n   display: grid;\n   grid-template-areas:\n      \"plot controls\";\n   grid-template-rows: 100%;\n   grid-template-columns: 65% minmax(350px, 35%);\n}\n\n.app-plot-area {\n   grid-area: plot;\n}\n\n.app-controls-area {\n   padding-left: 1em;\n   grid-area: controls;\n}\n\n.app-controls-area > :global(*){\n   margin: 1em 0;\n}\n\n</style>","import App from './App.svelte';\n\nconst app = new App({\n\ttarget: document.getElementById(\"graasta-app-container\"),\n});\n\nexport default app;"],"names":["noop","assign","tar","src","k","run","fn","blank_object","run_all","fns","is_function","thing","safe_not_equal","a","b","is_empty","obj","subscribe","store","callbacks","unsub","component_subscribe","component","callback","create_slot","definition","ctx","$$scope","slot_ctx","get_slot_context","get_slot_changes","dirty","lets","merged","len","i","update_slot_base","slot","slot_definition","slot_changes","get_slot_context_fn","slot_context","get_all_dirty_from_scope","length","append","target","node","insert","anchor","detach","destroy_each","iterations","detaching","element","name","svg_element","text","data","space","empty","listen","event","handler","options","attr","attribute","value","to_number","children","set_data","set_input_value","input","set_style","key","important","toggle_class","toggle","custom_event","type","detail","bubbles","cancelable","e","current_component","set_current_component","get_current_component","onMount","onDestroy","createEventDispatcher","setContext","context","getContext","dirty_components","binding_callbacks","render_callbacks","flush_callbacks","resolved_promise","update_scheduled","schedule_update","flush","add_render_callback","add_flush_callback","seen_callbacks","flushidx","saved_component","update","$$","outroing","outros","group_outros","check_outros","transition_in","block","local","transition_out","destroy_block","lookup","update_keyed_each","old_blocks","get_key","dynamic","list","destroy","create_each_block","next","get_context","o","n","old_indexes","new_blocks","new_lookup","deltas","child_ctx","will_move","did_move","new_block","old_block","new_key","old_key","bind","index","create_component","mount_component","customElement","fragment","after_update","new_on_destroy","destroy_component","make_dirty","init","instance","create_fragment","not_equal","props","append_styles","parent_component","ready","ret","rest","nodes","SvelteComponent","$$props","div","create_if_block","main","showHelp","toggleHelp","$$invalidate","handleKeyPress","legend_1","if_block0","create_if_block_1","fieldset","errormsg","legend","div1","div0","label_1","id","label","disable","hidden","span","t1","t1_value","min","max","decNum","step","dispatch","sliderElement","sliderContainer","isDragging","computeValue","p","tmpValue","getRelativePosition","sliderRect","parentRect","minX","maxX","startChanging","width","cancelChanging","stopChanging","changing","$$value","raw_value","click_handler","option","keydown_handler","colors","subscriber_queue","writable","start","stop","subscribers","set","new_value","run_queue","subscriber","invalidate","x","seq","out","r","v","mrange","margin","mn","d","rep","nx","j","times","vmult","y","vop","op","isvector","res","X","isarray","vdot","mdot","Y","ismatrix","ncol","nrow","m","zeros","transpose","_","colIndex","row","eye","matrix","niceNum","localRange","round","exponent","fraction","niceFraction","div1_class_value","svg","g","current","getScale","height","limX","limY","limZ","theta","phi","zoom","TICK_NUM","LABELS_MARGIN","LINE_STYLES","clipPathID","plotElement","axesElement","world2pixels","coords","tM","coords2D","getAxisTicks","ticks","lim","maxTickNum","range","tickSpacing","tickMin","tickMax","adjustXAxisLimits","newLim","xLim","adjustAxisLimits","adjustYAxisLimits","yLim","adjustZAxisLimits","zLim","adjustedLim","scale","isOk","ro1","entries","entry","pcr","ro2","acr","P2","P1","P","$isOk","T1","$xLim","$yLim","$zLim","S1","S2","$width","$height","Colors","line","line_x__value","line_x__value_1","line_y__value","line_y__value_1","if_block","lineCoords","lineColor","lineType","lineWidth","axes","x1","x2","y1","y2","lineStyleStr","$scale","coords1","$tM","coords2","text_1","text_1_x_value","text_1_y_value","title","xValues","yValues","zValues","labels","pos","faceColor","borderColor","borderWidth","textSize","style","textAnchors","dx","dy","textStyleStr","textlabels_changes","create_if_block_2","if_block1","if_block2","tickLabels","showGrid","grid1","grid2","axisLine","tickCoords","titleCoords","gridColor","textColor","tickMode","ticksX","tickNum","dY","ticksY","ticksY1","ticksY2","ticksZ","gridYEnd","gridZEnd","dX","ticksX1","ticksX2","gridXEnd","draggingStartPosition","plotPane","zoomScene","startRotation","stopRotation","rotate","currentPosition","xStart","xEnd","yStart","yEnd","zStart","zEnd","segments_changes","coeffs","X1Range","X2Range","showLines","color","x0","X1Start","X1End","X2Start","X2End","x21","x22","x11","x12","marker","markerSize","markers","markerSymbol","segments0_changes","segments3_changes","scatterseries_changes","pX1","pX2","pCoords","t7_value","raw0_value","raw1_value","raw2_value","div7","div7_class_value","div11","div11_class_value","div15","div15_class_value","div17","div17_class_value","div18","span0","span1","div2","div3","span6","span7","div4","span8","span9","div5","span10","span11","div6","span14","span15","div8","span16","span17","div9","span18","span19","div10","span22","span23","div12","span24","span25","div13","span26","span27","div14","span30","span31","div16","span34","span35","t0","t0_value","t7","t12","t12_value","t19","t19_value","t25","t25_value","t32","t32_value","t38","t38_value","t45","t45_value","t52","t52_value","modelColor","pointColor","b0","b1","b2","b12","App"],"mappings":"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"}