{"version":3,"file":"asta-b102.js","sources":["../../node_modules/svelte/internal/index.mjs","../../../stat-js/src/index.js","../../shared/StatApp.svelte","../../shared/AppControlArea.svelte","../../shared/AppControl.svelte","../../shared/AppControlButton.svelte","../../shared/AppControlSwitch.svelte","../../shared/AppControlRange.svelte","../../node_modules/svelte/store/index.mjs","../../../svelte-plots-basic/src/Axes.svelte","../../../svelte-plots-basic/src/Colors.js","../../../svelte-plots-basic/src/XAxis.svelte","../../../svelte-plots-basic/src/YAxis.svelte","../../../svelte-plots-basic/src/Rectangles.svelte","../../../svelte-plots-basic/src/Box.svelte","../../../svelte-plots-basic/src/Segments.svelte","../../../svelte-plots-basic/src/TextLabels.svelte","../../../svelte-plots-basic/src/BarSeries.svelte","../../../svelte-plots-basic/src/ScatterSeries.svelte","../../../svelte-plots-basic/src/LineSeries.svelte","../../../svelte-plots-stat/src/Histogram.svelte","../../../svelte-plots-stat/src/BoxAndWhiskers.svelte","../src/AppHistPlot.svelte","../src/AppPercentilePlot.svelte","../src/App.svelte","../src/main.js"],"sourcesContent":["function noop() { }\nconst identity = x => x;\nfunction assign(tar, src) {\n    // @ts-ignore\n    for (const k in src)\n        tar[k] = src[k];\n    return tar;\n}\nfunction is_promise(value) {\n    return value && typeof value === 'object' && typeof value.then === 'function';\n}\nfunction add_location(element, file, line, column, char) {\n    element.__svelte_meta = {\n        loc: { file, line, column, char }\n    };\n}\nfunction run(fn) {\n    return fn();\n}\nfunction blank_object() {\n    return Object.create(null);\n}\nfunction run_all(fns) {\n    fns.forEach(run);\n}\nfunction is_function(thing) {\n    return typeof thing === 'function';\n}\nfunction safe_not_equal(a, b) {\n    return a != a ? b == b : a !== b || ((a && typeof a === 'object') || typeof a === 'function');\n}\nfunction not_equal(a, b) {\n    return a != a ? b == b : a !== b;\n}\nfunction is_empty(obj) {\n    return Object.keys(obj).length === 0;\n}\nfunction validate_store(store, name) {\n    if (store != null && typeof store.subscribe !== 'function') {\n        throw new Error(`'${name}' is not a store with a 'subscribe' method`);\n    }\n}\nfunction subscribe(store, ...callbacks) {\n    if (store == null) {\n        return noop;\n    }\n    const unsub = store.subscribe(...callbacks);\n    return unsub.unsubscribe ? () => unsub.unsubscribe() : unsub;\n}\nfunction get_store_value(store) {\n    let value;\n    subscribe(store, _ => value = _)();\n    return value;\n}\nfunction component_subscribe(component, store, callback) {\n    component.$$.on_destroy.push(subscribe(store, callback));\n}\nfunction create_slot(definition, ctx, $$scope, fn) {\n    if (definition) {\n        const slot_ctx = get_slot_context(definition, ctx, $$scope, fn);\n        return definition[0](slot_ctx);\n    }\n}\nfunction get_slot_context(definition, ctx, $$scope, fn) {\n    return definition[1] && fn\n        ? assign($$scope.ctx.slice(), definition[1](fn(ctx)))\n        : $$scope.ctx;\n}\nfunction get_slot_changes(definition, $$scope, dirty, fn) {\n    if (definition[2] && fn) {\n        const lets = definition[2](fn(dirty));\n        if ($$scope.dirty === undefined) {\n            return lets;\n        }\n        if (typeof lets === 'object') {\n            const merged = [];\n            const len = Math.max($$scope.dirty.length, lets.length);\n            for (let i = 0; i < len; i += 1) {\n                merged[i] = $$scope.dirty[i] | lets[i];\n            }\n            return merged;\n        }\n        return $$scope.dirty | lets;\n    }\n    return $$scope.dirty;\n}\nfunction update_slot(slot, slot_definition, ctx, $$scope, dirty, get_slot_changes_fn, get_slot_context_fn) {\n    const slot_changes = get_slot_changes(slot_definition, $$scope, dirty, get_slot_changes_fn);\n    if (slot_changes) {\n        const slot_context = get_slot_context(slot_definition, ctx, $$scope, get_slot_context_fn);\n        slot.p(slot_context, slot_changes);\n    }\n}\nfunction update_slot_spread(slot, slot_definition, ctx, $$scope, dirty, get_slot_changes_fn, get_slot_spread_changes_fn, get_slot_context_fn) {\n    const slot_changes = get_slot_spread_changes_fn(dirty) | get_slot_changes(slot_definition, $$scope, dirty, get_slot_changes_fn);\n    if (slot_changes) {\n        const slot_context = get_slot_context(slot_definition, ctx, $$scope, get_slot_context_fn);\n        slot.p(slot_context, slot_changes);\n    }\n}\nfunction exclude_internal_props(props) {\n    const result = {};\n    for (const k in props)\n        if (k[0] !== '$')\n            result[k] = props[k];\n    return result;\n}\nfunction compute_rest_props(props, keys) {\n    const rest = {};\n    keys = new Set(keys);\n    for (const k in props)\n        if (!keys.has(k) && k[0] !== '$')\n            rest[k] = props[k];\n    return rest;\n}\nfunction compute_slots(slots) {\n    const result = {};\n    for (const key in slots) {\n        result[key] = true;\n    }\n    return result;\n}\nfunction once(fn) {\n    let ran = false;\n    return function (...args) {\n        if (ran)\n            return;\n        ran = true;\n        fn.call(this, ...args);\n    };\n}\nfunction null_to_empty(value) {\n    return value == null ? '' : value;\n}\nfunction set_store_value(store, ret, value = ret) {\n    store.set(value);\n    return ret;\n}\nconst has_prop = (obj, prop) => Object.prototype.hasOwnProperty.call(obj, prop);\nfunction action_destroyer(action_result) {\n    return action_result && is_function(action_result.destroy) ? action_result.destroy : noop;\n}\n\nconst is_client = typeof window !== 'undefined';\nlet now = is_client\n    ? () => window.performance.now()\n    : () => Date.now();\nlet raf = is_client ? cb => requestAnimationFrame(cb) : noop;\n// used internally for testing\nfunction set_now(fn) {\n    now = fn;\n}\nfunction set_raf(fn) {\n    raf = fn;\n}\n\nconst tasks = new Set();\nfunction run_tasks(now) {\n    tasks.forEach(task => {\n        if (!task.c(now)) {\n            tasks.delete(task);\n            task.f();\n        }\n    });\n    if (tasks.size !== 0)\n        raf(run_tasks);\n}\n/**\n * For testing purposes only!\n */\nfunction clear_loops() {\n    tasks.clear();\n}\n/**\n * Creates a new task that runs on each raf frame\n * until it returns a falsy value or is aborted\n */\nfunction loop(callback) {\n    let task;\n    if (tasks.size === 0)\n        raf(run_tasks);\n    return {\n        promise: new Promise(fulfill => {\n            tasks.add(task = { c: callback, f: fulfill });\n        }),\n        abort() {\n            tasks.delete(task);\n        }\n    };\n}\n\nfunction append(target, node) {\n    target.appendChild(node);\n}\nfunction insert(target, node, anchor) {\n    target.insertBefore(node, anchor || null);\n}\nfunction detach(node) {\n    node.parentNode.removeChild(node);\n}\nfunction destroy_each(iterations, detaching) {\n    for (let i = 0; i < iterations.length; i += 1) {\n        if (iterations[i])\n            iterations[i].d(detaching);\n    }\n}\nfunction element(name) {\n    return document.createElement(name);\n}\nfunction element_is(name, is) {\n    return document.createElement(name, { is });\n}\nfunction object_without_properties(obj, exclude) {\n    const target = {};\n    for (const k in obj) {\n        if (has_prop(obj, k)\n            // @ts-ignore\n            && exclude.indexOf(k) === -1) {\n            // @ts-ignore\n            target[k] = obj[k];\n        }\n    }\n    return target;\n}\nfunction svg_element(name) {\n    return document.createElementNS('http://www.w3.org/2000/svg', name);\n}\nfunction text(data) {\n    return document.createTextNode(data);\n}\nfunction space() {\n    return text(' ');\n}\nfunction empty() {\n    return text('');\n}\nfunction listen(node, event, handler, options) {\n    node.addEventListener(event, handler, options);\n    return () => node.removeEventListener(event, handler, options);\n}\nfunction prevent_default(fn) {\n    return function (event) {\n        event.preventDefault();\n        // @ts-ignore\n        return fn.call(this, event);\n    };\n}\nfunction stop_propagation(fn) {\n    return function (event) {\n        event.stopPropagation();\n        // @ts-ignore\n        return fn.call(this, event);\n    };\n}\nfunction self(fn) {\n    return function (event) {\n        // @ts-ignore\n        if (event.target === this)\n            fn.call(this, event);\n    };\n}\nfunction attr(node, attribute, value) {\n    if (value == null)\n        node.removeAttribute(attribute);\n    else if (node.getAttribute(attribute) !== value)\n        node.setAttribute(attribute, value);\n}\nfunction set_attributes(node, attributes) {\n    // @ts-ignore\n    const descriptors = Object.getOwnPropertyDescriptors(node.__proto__);\n    for (const key in attributes) {\n        if (attributes[key] == null) {\n            node.removeAttribute(key);\n        }\n        else if (key === 'style') {\n            node.style.cssText = attributes[key];\n        }\n        else if (key === '__value') {\n            node.value = node[key] = attributes[key];\n        }\n        else if (descriptors[key] && descriptors[key].set) {\n            node[key] = attributes[key];\n        }\n        else {\n            attr(node, key, attributes[key]);\n        }\n    }\n}\nfunction set_svg_attributes(node, attributes) {\n    for (const key in attributes) {\n        attr(node, key, attributes[key]);\n    }\n}\nfunction set_custom_element_data(node, prop, value) {\n    if (prop in node) {\n        node[prop] = typeof node[prop] === 'boolean' && value === '' ? true : value;\n    }\n    else {\n        attr(node, prop, value);\n    }\n}\nfunction xlink_attr(node, attribute, value) {\n    node.setAttributeNS('http://www.w3.org/1999/xlink', attribute, value);\n}\nfunction get_binding_group_value(group, __value, checked) {\n    const value = new Set();\n    for (let i = 0; i < group.length; i += 1) {\n        if (group[i].checked)\n            value.add(group[i].__value);\n    }\n    if (!checked) {\n        value.delete(__value);\n    }\n    return Array.from(value);\n}\nfunction to_number(value) {\n    return value === '' ? null : +value;\n}\nfunction time_ranges_to_array(ranges) {\n    const array = [];\n    for (let i = 0; i < ranges.length; i += 1) {\n        array.push({ start: ranges.start(i), end: ranges.end(i) });\n    }\n    return array;\n}\nfunction children(element) {\n    return Array.from(element.childNodes);\n}\nfunction claim_element(nodes, name, attributes, svg) {\n    for (let i = 0; i < nodes.length; i += 1) {\n        const node = nodes[i];\n        if (node.nodeName === name) {\n            let j = 0;\n            const remove = [];\n            while (j < node.attributes.length) {\n                const attribute = node.attributes[j++];\n                if (!attributes[attribute.name]) {\n                    remove.push(attribute.name);\n                }\n            }\n            for (let k = 0; k < remove.length; k++) {\n                node.removeAttribute(remove[k]);\n            }\n            return nodes.splice(i, 1)[0];\n        }\n    }\n    return svg ? svg_element(name) : element(name);\n}\nfunction claim_text(nodes, data) {\n    for (let i = 0; i < nodes.length; i += 1) {\n        const node = nodes[i];\n        if (node.nodeType === 3) {\n            node.data = '' + data;\n            return nodes.splice(i, 1)[0];\n        }\n    }\n    return text(data);\n}\nfunction claim_space(nodes) {\n    return claim_text(nodes, ' ');\n}\nfunction set_data(text, data) {\n    data = '' + data;\n    if (text.wholeText !== data)\n        text.data = data;\n}\nfunction set_input_value(input, value) {\n    input.value = value == null ? '' : value;\n}\nfunction set_input_type(input, type) {\n    try {\n        input.type = type;\n    }\n    catch (e) {\n        // do nothing\n    }\n}\nfunction set_style(node, key, value, important) {\n    node.style.setProperty(key, value, important ? 'important' : '');\n}\nfunction select_option(select, value) {\n    for (let i = 0; i < select.options.length; i += 1) {\n        const option = select.options[i];\n        if (option.__value === value) {\n            option.selected = true;\n            return;\n        }\n    }\n}\nfunction select_options(select, value) {\n    for (let i = 0; i < select.options.length; i += 1) {\n        const option = select.options[i];\n        option.selected = ~value.indexOf(option.__value);\n    }\n}\nfunction select_value(select) {\n    const selected_option = select.querySelector(':checked') || select.options[0];\n    return selected_option && selected_option.__value;\n}\nfunction select_multiple_value(select) {\n    return [].map.call(select.querySelectorAll(':checked'), option => option.__value);\n}\n// unfortunately this can't be a constant as that wouldn't be tree-shakeable\n// so we cache the result instead\nlet crossorigin;\nfunction is_crossorigin() {\n    if (crossorigin === undefined) {\n        crossorigin = false;\n        try {\n            if (typeof window !== 'undefined' && window.parent) {\n                void window.parent.document;\n            }\n        }\n        catch (error) {\n            crossorigin = true;\n        }\n    }\n    return crossorigin;\n}\nfunction add_resize_listener(node, fn) {\n    const computed_style = getComputedStyle(node);\n    if (computed_style.position === 'static') {\n        node.style.position = 'relative';\n    }\n    const iframe = element('iframe');\n    iframe.setAttribute('style', 'display: block; position: absolute; top: 0; left: 0; width: 100%; height: 100%; ' +\n        'overflow: hidden; border: 0; opacity: 0; pointer-events: none; z-index: -1;');\n    iframe.setAttribute('aria-hidden', 'true');\n    iframe.tabIndex = -1;\n    const crossorigin = is_crossorigin();\n    let unsubscribe;\n    if (crossorigin) {\n        iframe.src = \"data:text/html,<script>onresize=function(){parent.postMessage(0,'*')}</script>\";\n        unsubscribe = listen(window, 'message', (event) => {\n            if (event.source === iframe.contentWindow)\n                fn();\n        });\n    }\n    else {\n        iframe.src = 'about:blank';\n        iframe.onload = () => {\n            unsubscribe = listen(iframe.contentWindow, 'resize', fn);\n        };\n    }\n    append(node, iframe);\n    return () => {\n        if (crossorigin) {\n            unsubscribe();\n        }\n        else if (unsubscribe && iframe.contentWindow) {\n            unsubscribe();\n        }\n        detach(iframe);\n    };\n}\nfunction toggle_class(element, name, toggle) {\n    element.classList[toggle ? 'add' : 'remove'](name);\n}\nfunction custom_event(type, detail) {\n    const e = document.createEvent('CustomEvent');\n    e.initCustomEvent(type, false, false, detail);\n    return e;\n}\nfunction query_selector_all(selector, parent = document.body) {\n    return Array.from(parent.querySelectorAll(selector));\n}\nclass HtmlTag {\n    constructor(anchor = null) {\n        this.a = anchor;\n        this.e = this.n = null;\n    }\n    m(html, target, anchor = null) {\n        if (!this.e) {\n            this.e = element(target.nodeName);\n            this.t = target;\n            this.h(html);\n        }\n        this.i(anchor);\n    }\n    h(html) {\n        this.e.innerHTML = html;\n        this.n = Array.from(this.e.childNodes);\n    }\n    i(anchor) {\n        for (let i = 0; i < this.n.length; i += 1) {\n            insert(this.t, this.n[i], anchor);\n        }\n    }\n    p(html) {\n        this.d();\n        this.h(html);\n        this.i(this.a);\n    }\n    d() {\n        this.n.forEach(detach);\n    }\n}\nfunction attribute_to_object(attributes) {\n    const result = {};\n    for (const attribute of attributes) {\n        result[attribute.name] = attribute.value;\n    }\n    return result;\n}\nfunction get_custom_elements_slots(element) {\n    const result = {};\n    element.childNodes.forEach((node) => {\n        result[node.slot || 'default'] = true;\n    });\n    return result;\n}\n\nconst active_docs = new Set();\nlet active = 0;\n// https://github.com/darkskyapp/string-hash/blob/master/index.js\nfunction hash(str) {\n    let hash = 5381;\n    let i = str.length;\n    while (i--)\n        hash = ((hash << 5) - hash) ^ str.charCodeAt(i);\n    return hash >>> 0;\n}\nfunction create_rule(node, a, b, duration, delay, ease, fn, uid = 0) {\n    const step = 16.666 / duration;\n    let keyframes = '{\\n';\n    for (let p = 0; p <= 1; p += step) {\n        const t = a + (b - a) * ease(p);\n        keyframes += p * 100 + `%{${fn(t, 1 - t)}}\\n`;\n    }\n    const rule = keyframes + `100% {${fn(b, 1 - b)}}\\n}`;\n    const name = `__svelte_${hash(rule)}_${uid}`;\n    const doc = node.ownerDocument;\n    active_docs.add(doc);\n    const stylesheet = doc.__svelte_stylesheet || (doc.__svelte_stylesheet = doc.head.appendChild(element('style')).sheet);\n    const current_rules = doc.__svelte_rules || (doc.__svelte_rules = {});\n    if (!current_rules[name]) {\n        current_rules[name] = true;\n        stylesheet.insertRule(`@keyframes ${name} ${rule}`, stylesheet.cssRules.length);\n    }\n    const animation = node.style.animation || '';\n    node.style.animation = `${animation ? `${animation}, ` : ''}${name} ${duration}ms linear ${delay}ms 1 both`;\n    active += 1;\n    return name;\n}\nfunction delete_rule(node, name) {\n    const previous = (node.style.animation || '').split(', ');\n    const next = previous.filter(name\n        ? anim => anim.indexOf(name) < 0 // remove specific animation\n        : anim => anim.indexOf('__svelte') === -1 // remove all Svelte animations\n    );\n    const deleted = previous.length - next.length;\n    if (deleted) {\n        node.style.animation = next.join(', ');\n        active -= deleted;\n        if (!active)\n            clear_rules();\n    }\n}\nfunction clear_rules() {\n    raf(() => {\n        if (active)\n            return;\n        active_docs.forEach(doc => {\n            const stylesheet = doc.__svelte_stylesheet;\n            let i = stylesheet.cssRules.length;\n            while (i--)\n                stylesheet.deleteRule(i);\n            doc.__svelte_rules = {};\n        });\n        active_docs.clear();\n    });\n}\n\nfunction create_animation(node, from, fn, params) {\n    if (!from)\n        return noop;\n    const to = node.getBoundingClientRect();\n    if (from.left === to.left && from.right === to.right && from.top === to.top && from.bottom === to.bottom)\n        return noop;\n    const { delay = 0, duration = 300, easing = identity, \n    // @ts-ignore todo: should this be separated from destructuring? Or start/end added to public api and documentation?\n    start: start_time = now() + delay, \n    // @ts-ignore todo:\n    end = start_time + duration, tick = noop, css } = fn(node, { from, to }, params);\n    let running = true;\n    let started = false;\n    let name;\n    function start() {\n        if (css) {\n            name = create_rule(node, 0, 1, duration, delay, easing, css);\n        }\n        if (!delay) {\n            started = true;\n        }\n    }\n    function stop() {\n        if (css)\n            delete_rule(node, name);\n        running = false;\n    }\n    loop(now => {\n        if (!started && now >= start_time) {\n            started = true;\n        }\n        if (started && now >= end) {\n            tick(1, 0);\n            stop();\n        }\n        if (!running) {\n            return false;\n        }\n        if (started) {\n            const p = now - start_time;\n            const t = 0 + 1 * easing(p / duration);\n            tick(t, 1 - t);\n        }\n        return true;\n    });\n    start();\n    tick(0, 1);\n    return stop;\n}\nfunction fix_position(node) {\n    const style = getComputedStyle(node);\n    if (style.position !== 'absolute' && style.position !== 'fixed') {\n        const { width, height } = style;\n        const a = node.getBoundingClientRect();\n        node.style.position = 'absolute';\n        node.style.width = width;\n        node.style.height = height;\n        add_transform(node, a);\n    }\n}\nfunction add_transform(node, a) {\n    const b = node.getBoundingClientRect();\n    if (a.left !== b.left || a.top !== b.top) {\n        const style = getComputedStyle(node);\n        const transform = style.transform === 'none' ? '' : style.transform;\n        node.style.transform = `${transform} translate(${a.left - b.left}px, ${a.top - b.top}px)`;\n    }\n}\n\nlet current_component;\nfunction set_current_component(component) {\n    current_component = component;\n}\nfunction get_current_component() {\n    if (!current_component)\n        throw new Error('Function called outside component initialization');\n    return current_component;\n}\nfunction beforeUpdate(fn) {\n    get_current_component().$$.before_update.push(fn);\n}\nfunction onMount(fn) {\n    get_current_component().$$.on_mount.push(fn);\n}\nfunction afterUpdate(fn) {\n    get_current_component().$$.after_update.push(fn);\n}\nfunction onDestroy(fn) {\n    get_current_component().$$.on_destroy.push(fn);\n}\nfunction createEventDispatcher() {\n    const component = get_current_component();\n    return (type, detail) => {\n        const callbacks = component.$$.callbacks[type];\n        if (callbacks) {\n            // TODO are there situations where events could be dispatched\n            // in a server (non-DOM) environment?\n            const event = custom_event(type, detail);\n            callbacks.slice().forEach(fn => {\n                fn.call(component, event);\n            });\n        }\n    };\n}\nfunction setContext(key, context) {\n    get_current_component().$$.context.set(key, context);\n}\nfunction getContext(key) {\n    return get_current_component().$$.context.get(key);\n}\nfunction hasContext(key) {\n    return get_current_component().$$.context.has(key);\n}\n// TODO figure out if we still want to support\n// shorthand events, or if we want to implement\n// a real bubbling mechanism\nfunction bubble(component, event) {\n    const callbacks = component.$$.callbacks[event.type];\n    if (callbacks) {\n        callbacks.slice().forEach(fn => fn(event));\n    }\n}\n\nconst dirty_components = [];\nconst intros = { enabled: false };\nconst binding_callbacks = [];\nconst render_callbacks = [];\nconst flush_callbacks = [];\nconst resolved_promise = Promise.resolve();\nlet update_scheduled = false;\nfunction schedule_update() {\n    if (!update_scheduled) {\n        update_scheduled = true;\n        resolved_promise.then(flush);\n    }\n}\nfunction tick() {\n    schedule_update();\n    return resolved_promise;\n}\nfunction add_render_callback(fn) {\n    render_callbacks.push(fn);\n}\nfunction add_flush_callback(fn) {\n    flush_callbacks.push(fn);\n}\nlet flushing = false;\nconst seen_callbacks = new Set();\nfunction flush() {\n    if (flushing)\n        return;\n    flushing = true;\n    do {\n        // first, call beforeUpdate functions\n        // and update components\n        for (let i = 0; i < dirty_components.length; i += 1) {\n            const component = dirty_components[i];\n            set_current_component(component);\n            update(component.$$);\n        }\n        set_current_component(null);\n        dirty_components.length = 0;\n        while (binding_callbacks.length)\n            binding_callbacks.pop()();\n        // then, once components are updated, call\n        // afterUpdate functions. This may cause\n        // subsequent updates...\n        for (let i = 0; i < render_callbacks.length; i += 1) {\n            const callback = render_callbacks[i];\n            if (!seen_callbacks.has(callback)) {\n                // ...so guard against infinite loops\n                seen_callbacks.add(callback);\n                callback();\n            }\n        }\n        render_callbacks.length = 0;\n    } while (dirty_components.length);\n    while (flush_callbacks.length) {\n        flush_callbacks.pop()();\n    }\n    update_scheduled = false;\n    flushing = false;\n    seen_callbacks.clear();\n}\nfunction update($$) {\n    if ($$.fragment !== null) {\n        $$.update();\n        run_all($$.before_update);\n        const dirty = $$.dirty;\n        $$.dirty = [-1];\n        $$.fragment && $$.fragment.p($$.ctx, dirty);\n        $$.after_update.forEach(add_render_callback);\n    }\n}\n\nlet promise;\nfunction wait() {\n    if (!promise) {\n        promise = Promise.resolve();\n        promise.then(() => {\n            promise = null;\n        });\n    }\n    return promise;\n}\nfunction dispatch(node, direction, kind) {\n    node.dispatchEvent(custom_event(`${direction ? 'intro' : 'outro'}${kind}`));\n}\nconst outroing = new Set();\nlet outros;\nfunction group_outros() {\n    outros = {\n        r: 0,\n        c: [],\n        p: outros // parent group\n    };\n}\nfunction check_outros() {\n    if (!outros.r) {\n        run_all(outros.c);\n    }\n    outros = outros.p;\n}\nfunction transition_in(block, local) {\n    if (block && block.i) {\n        outroing.delete(block);\n        block.i(local);\n    }\n}\nfunction transition_out(block, local, detach, callback) {\n    if (block && block.o) {\n        if (outroing.has(block))\n            return;\n        outroing.add(block);\n        outros.c.push(() => {\n            outroing.delete(block);\n            if (callback) {\n                if (detach)\n                    block.d(1);\n                callback();\n            }\n        });\n        block.o(local);\n    }\n}\nconst null_transition = { duration: 0 };\nfunction create_in_transition(node, fn, params) {\n    let config = fn(node, params);\n    let running = false;\n    let animation_name;\n    let task;\n    let uid = 0;\n    function cleanup() {\n        if (animation_name)\n            delete_rule(node, animation_name);\n    }\n    function go() {\n        const { delay = 0, duration = 300, easing = identity, tick = noop, css } = config || null_transition;\n        if (css)\n            animation_name = create_rule(node, 0, 1, duration, delay, easing, css, uid++);\n        tick(0, 1);\n        const start_time = now() + delay;\n        const end_time = start_time + duration;\n        if (task)\n            task.abort();\n        running = true;\n        add_render_callback(() => dispatch(node, true, 'start'));\n        task = loop(now => {\n            if (running) {\n                if (now >= end_time) {\n                    tick(1, 0);\n                    dispatch(node, true, 'end');\n                    cleanup();\n                    return running = false;\n                }\n                if (now >= start_time) {\n                    const t = easing((now - start_time) / duration);\n                    tick(t, 1 - t);\n                }\n            }\n            return running;\n        });\n    }\n    let started = false;\n    return {\n        start() {\n            if (started)\n                return;\n            delete_rule(node);\n            if (is_function(config)) {\n                config = config();\n                wait().then(go);\n            }\n            else {\n                go();\n            }\n        },\n        invalidate() {\n            started = false;\n        },\n        end() {\n            if (running) {\n                cleanup();\n                running = false;\n            }\n        }\n    };\n}\nfunction create_out_transition(node, fn, params) {\n    let config = fn(node, params);\n    let running = true;\n    let animation_name;\n    const group = outros;\n    group.r += 1;\n    function go() {\n        const { delay = 0, duration = 300, easing = identity, tick = noop, css } = config || null_transition;\n        if (css)\n            animation_name = create_rule(node, 1, 0, duration, delay, easing, css);\n        const start_time = now() + delay;\n        const end_time = start_time + duration;\n        add_render_callback(() => dispatch(node, false, 'start'));\n        loop(now => {\n            if (running) {\n                if (now >= end_time) {\n                    tick(0, 1);\n                    dispatch(node, false, 'end');\n                    if (!--group.r) {\n                        // this will result in `end()` being called,\n                        // so we don't need to clean up here\n                        run_all(group.c);\n                    }\n                    return false;\n                }\n                if (now >= start_time) {\n                    const t = easing((now - start_time) / duration);\n                    tick(1 - t, t);\n                }\n            }\n            return running;\n        });\n    }\n    if (is_function(config)) {\n        wait().then(() => {\n            // @ts-ignore\n            config = config();\n            go();\n        });\n    }\n    else {\n        go();\n    }\n    return {\n        end(reset) {\n            if (reset && config.tick) {\n                config.tick(1, 0);\n            }\n            if (running) {\n                if (animation_name)\n                    delete_rule(node, animation_name);\n                running = false;\n            }\n        }\n    };\n}\nfunction create_bidirectional_transition(node, fn, params, intro) {\n    let config = fn(node, params);\n    let t = intro ? 0 : 1;\n    let running_program = null;\n    let pending_program = null;\n    let animation_name = null;\n    function clear_animation() {\n        if (animation_name)\n            delete_rule(node, animation_name);\n    }\n    function init(program, duration) {\n        const d = program.b - t;\n        duration *= Math.abs(d);\n        return {\n            a: t,\n            b: program.b,\n            d,\n            duration,\n            start: program.start,\n            end: program.start + duration,\n            group: program.group\n        };\n    }\n    function go(b) {\n        const { delay = 0, duration = 300, easing = identity, tick = noop, css } = config || null_transition;\n        const program = {\n            start: now() + delay,\n            b\n        };\n        if (!b) {\n            // @ts-ignore todo: improve typings\n            program.group = outros;\n            outros.r += 1;\n        }\n        if (running_program || pending_program) {\n            pending_program = program;\n        }\n        else {\n            // if this is an intro, and there's a delay, we need to do\n            // an initial tick and/or apply CSS animation immediately\n            if (css) {\n                clear_animation();\n                animation_name = create_rule(node, t, b, duration, delay, easing, css);\n            }\n            if (b)\n                tick(0, 1);\n            running_program = init(program, duration);\n            add_render_callback(() => dispatch(node, b, 'start'));\n            loop(now => {\n                if (pending_program && now > pending_program.start) {\n                    running_program = init(pending_program, duration);\n                    pending_program = null;\n                    dispatch(node, running_program.b, 'start');\n                    if (css) {\n                        clear_animation();\n                        animation_name = create_rule(node, t, running_program.b, running_program.duration, 0, easing, config.css);\n                    }\n                }\n                if (running_program) {\n                    if (now >= running_program.end) {\n                        tick(t = running_program.b, 1 - t);\n                        dispatch(node, running_program.b, 'end');\n                        if (!pending_program) {\n                            // we're done\n                            if (running_program.b) {\n                                // intro — we can tidy up immediately\n                                clear_animation();\n                            }\n                            else {\n                                // outro — needs to be coordinated\n                                if (!--running_program.group.r)\n                                    run_all(running_program.group.c);\n                            }\n                        }\n                        running_program = null;\n                    }\n                    else if (now >= running_program.start) {\n                        const p = now - running_program.start;\n                        t = running_program.a + running_program.d * easing(p / running_program.duration);\n                        tick(t, 1 - t);\n                    }\n                }\n                return !!(running_program || pending_program);\n            });\n        }\n    }\n    return {\n        run(b) {\n            if (is_function(config)) {\n                wait().then(() => {\n                    // @ts-ignore\n                    config = config();\n                    go(b);\n                });\n            }\n            else {\n                go(b);\n            }\n        },\n        end() {\n            clear_animation();\n            running_program = pending_program = null;\n        }\n    };\n}\n\nfunction handle_promise(promise, info) {\n    const token = info.token = {};\n    function update(type, index, key, value) {\n        if (info.token !== token)\n            return;\n        info.resolved = value;\n        let child_ctx = info.ctx;\n        if (key !== undefined) {\n            child_ctx = child_ctx.slice();\n            child_ctx[key] = value;\n        }\n        const block = type && (info.current = type)(child_ctx);\n        let needs_flush = false;\n        if (info.block) {\n            if (info.blocks) {\n                info.blocks.forEach((block, i) => {\n                    if (i !== index && block) {\n                        group_outros();\n                        transition_out(block, 1, 1, () => {\n                            if (info.blocks[i] === block) {\n                                info.blocks[i] = null;\n                            }\n                        });\n                        check_outros();\n                    }\n                });\n            }\n            else {\n                info.block.d(1);\n            }\n            block.c();\n            transition_in(block, 1);\n            block.m(info.mount(), info.anchor);\n            needs_flush = true;\n        }\n        info.block = block;\n        if (info.blocks)\n            info.blocks[index] = block;\n        if (needs_flush) {\n            flush();\n        }\n    }\n    if (is_promise(promise)) {\n        const current_component = get_current_component();\n        promise.then(value => {\n            set_current_component(current_component);\n            update(info.then, 1, info.value, value);\n            set_current_component(null);\n        }, error => {\n            set_current_component(current_component);\n            update(info.catch, 2, info.error, error);\n            set_current_component(null);\n            if (!info.hasCatch) {\n                throw error;\n            }\n        });\n        // if we previously had a then/catch block, destroy it\n        if (info.current !== info.pending) {\n            update(info.pending, 0);\n            return true;\n        }\n    }\n    else {\n        if (info.current !== info.then) {\n            update(info.then, 1, info.value, promise);\n            return true;\n        }\n        info.resolved = promise;\n    }\n}\nfunction update_await_block_branch(info, ctx, dirty) {\n    const child_ctx = ctx.slice();\n    const { resolved } = info;\n    if (info.current === info.then) {\n        child_ctx[info.value] = resolved;\n    }\n    if (info.current === info.catch) {\n        child_ctx[info.error] = resolved;\n    }\n    info.block.p(child_ctx, dirty);\n}\n\nconst globals = (typeof window !== 'undefined'\n    ? window\n    : typeof globalThis !== 'undefined'\n        ? globalThis\n        : global);\n\nfunction destroy_block(block, lookup) {\n    block.d(1);\n    lookup.delete(block.key);\n}\nfunction outro_and_destroy_block(block, lookup) {\n    transition_out(block, 1, 1, () => {\n        lookup.delete(block.key);\n    });\n}\nfunction fix_and_destroy_block(block, lookup) {\n    block.f();\n    destroy_block(block, lookup);\n}\nfunction fix_and_outro_and_destroy_block(block, lookup) {\n    block.f();\n    outro_and_destroy_block(block, lookup);\n}\nfunction update_keyed_each(old_blocks, dirty, get_key, dynamic, ctx, list, lookup, node, destroy, create_each_block, next, get_context) {\n    let o = old_blocks.length;\n    let n = list.length;\n    let i = o;\n    const old_indexes = {};\n    while (i--)\n        old_indexes[old_blocks[i].key] = i;\n    const new_blocks = [];\n    const new_lookup = new Map();\n    const deltas = new Map();\n    i = n;\n    while (i--) {\n        const child_ctx = get_context(ctx, list, i);\n        const key = get_key(child_ctx);\n        let block = lookup.get(key);\n        if (!block) {\n            block = create_each_block(key, child_ctx);\n            block.c();\n        }\n        else if (dynamic) {\n            block.p(child_ctx, dirty);\n        }\n        new_lookup.set(key, new_blocks[i] = block);\n        if (key in old_indexes)\n            deltas.set(key, Math.abs(i - old_indexes[key]));\n    }\n    const will_move = new Set();\n    const did_move = new Set();\n    function insert(block) {\n        transition_in(block, 1);\n        block.m(node, next);\n        lookup.set(block.key, block);\n        next = block.first;\n        n--;\n    }\n    while (o && n) {\n        const new_block = new_blocks[n - 1];\n        const old_block = old_blocks[o - 1];\n        const new_key = new_block.key;\n        const old_key = old_block.key;\n        if (new_block === old_block) {\n            // do nothing\n            next = new_block.first;\n            o--;\n            n--;\n        }\n        else if (!new_lookup.has(old_key)) {\n            // remove old block\n            destroy(old_block, lookup);\n            o--;\n        }\n        else if (!lookup.has(new_key) || will_move.has(new_key)) {\n            insert(new_block);\n        }\n        else if (did_move.has(old_key)) {\n            o--;\n        }\n        else if (deltas.get(new_key) > deltas.get(old_key)) {\n            did_move.add(new_key);\n            insert(new_block);\n        }\n        else {\n            will_move.add(old_key);\n            o--;\n        }\n    }\n    while (o--) {\n        const old_block = old_blocks[o];\n        if (!new_lookup.has(old_block.key))\n            destroy(old_block, lookup);\n    }\n    while (n)\n        insert(new_blocks[n - 1]);\n    return new_blocks;\n}\nfunction validate_each_keys(ctx, list, get_context, get_key) {\n    const keys = new Set();\n    for (let i = 0; i < list.length; i++) {\n        const key = get_key(get_context(ctx, list, i));\n        if (keys.has(key)) {\n            throw new Error('Cannot have duplicate keys in a keyed each');\n        }\n        keys.add(key);\n    }\n}\n\nfunction get_spread_update(levels, updates) {\n    const update = {};\n    const to_null_out = {};\n    const accounted_for = { $$scope: 1 };\n    let i = levels.length;\n    while (i--) {\n        const o = levels[i];\n        const n = updates[i];\n        if (n) {\n            for (const key in o) {\n                if (!(key in n))\n                    to_null_out[key] = 1;\n            }\n            for (const key in n) {\n                if (!accounted_for[key]) {\n                    update[key] = n[key];\n                    accounted_for[key] = 1;\n                }\n            }\n            levels[i] = n;\n        }\n        else {\n            for (const key in o) {\n                accounted_for[key] = 1;\n            }\n        }\n    }\n    for (const key in to_null_out) {\n        if (!(key in update))\n            update[key] = undefined;\n    }\n    return update;\n}\nfunction get_spread_object(spread_props) {\n    return typeof spread_props === 'object' && spread_props !== null ? spread_props : {};\n}\n\n// source: https://html.spec.whatwg.org/multipage/indices.html\nconst boolean_attributes = new Set([\n    'allowfullscreen',\n    'allowpaymentrequest',\n    'async',\n    'autofocus',\n    'autoplay',\n    'checked',\n    'controls',\n    'default',\n    'defer',\n    'disabled',\n    'formnovalidate',\n    'hidden',\n    'ismap',\n    'loop',\n    'multiple',\n    'muted',\n    'nomodule',\n    'novalidate',\n    'open',\n    'playsinline',\n    'readonly',\n    'required',\n    'reversed',\n    'selected'\n]);\n\nconst invalid_attribute_name_character = /[\\s'\">/=\\u{FDD0}-\\u{FDEF}\\u{FFFE}\\u{FFFF}\\u{1FFFE}\\u{1FFFF}\\u{2FFFE}\\u{2FFFF}\\u{3FFFE}\\u{3FFFF}\\u{4FFFE}\\u{4FFFF}\\u{5FFFE}\\u{5FFFF}\\u{6FFFE}\\u{6FFFF}\\u{7FFFE}\\u{7FFFF}\\u{8FFFE}\\u{8FFFF}\\u{9FFFE}\\u{9FFFF}\\u{AFFFE}\\u{AFFFF}\\u{BFFFE}\\u{BFFFF}\\u{CFFFE}\\u{CFFFF}\\u{DFFFE}\\u{DFFFF}\\u{EFFFE}\\u{EFFFF}\\u{FFFFE}\\u{FFFFF}\\u{10FFFE}\\u{10FFFF}]/u;\n// https://html.spec.whatwg.org/multipage/syntax.html#attributes-2\n// https://infra.spec.whatwg.org/#noncharacter\nfunction spread(args, classes_to_add) {\n    const attributes = Object.assign({}, ...args);\n    if (classes_to_add) {\n        if (attributes.class == null) {\n            attributes.class = classes_to_add;\n        }\n        else {\n            attributes.class += ' ' + classes_to_add;\n        }\n    }\n    let str = '';\n    Object.keys(attributes).forEach(name => {\n        if (invalid_attribute_name_character.test(name))\n            return;\n        const value = attributes[name];\n        if (value === true)\n            str += ' ' + name;\n        else if (boolean_attributes.has(name.toLowerCase())) {\n            if (value)\n                str += ' ' + name;\n        }\n        else if (value != null) {\n            str += ` ${name}=\"${String(value).replace(/\"/g, '&#34;').replace(/'/g, '&#39;')}\"`;\n        }\n    });\n    return str;\n}\nconst escaped = {\n    '\"': '&quot;',\n    \"'\": '&#39;',\n    '&': '&amp;',\n    '<': '&lt;',\n    '>': '&gt;'\n};\nfunction escape(html) {\n    return String(html).replace(/[\"'&<>]/g, match => escaped[match]);\n}\nfunction each(items, fn) {\n    let str = '';\n    for (let i = 0; i < items.length; i += 1) {\n        str += fn(items[i], i);\n    }\n    return str;\n}\nconst missing_component = {\n    $$render: () => ''\n};\nfunction validate_component(component, name) {\n    if (!component || !component.$$render) {\n        if (name === 'svelte:component')\n            name += ' this={...}';\n        throw new Error(`<${name}> is not a valid SSR component. You may need to review your build config to ensure that dependencies are compiled, rather than imported as pre-compiled modules`);\n    }\n    return component;\n}\nfunction debug(file, line, column, values) {\n    console.log(`{@debug} ${file ? file + ' ' : ''}(${line}:${column})`); // eslint-disable-line no-console\n    console.log(values); // eslint-disable-line no-console\n    return '';\n}\nlet on_destroy;\nfunction create_ssr_component(fn) {\n    function $$render(result, props, bindings, slots, context) {\n        const parent_component = current_component;\n        const $$ = {\n            on_destroy,\n            context: new Map(parent_component ? parent_component.$$.context : context || []),\n            // these will be immediately discarded\n            on_mount: [],\n            before_update: [],\n            after_update: [],\n            callbacks: blank_object()\n        };\n        set_current_component({ $$ });\n        const html = fn(result, props, bindings, slots);\n        set_current_component(parent_component);\n        return html;\n    }\n    return {\n        render: (props = {}, { $$slots = {}, context = new Map() } = {}) => {\n            on_destroy = [];\n            const result = { title: '', head: '', css: new Set() };\n            const html = $$render(result, props, {}, $$slots, context);\n            run_all(on_destroy);\n            return {\n                html,\n                css: {\n                    code: Array.from(result.css).map(css => css.code).join('\\n'),\n                    map: null // TODO\n                },\n                head: result.title + result.head\n            };\n        },\n        $$render\n    };\n}\nfunction add_attribute(name, value, boolean) {\n    if (value == null || (boolean && !value))\n        return '';\n    return ` ${name}${value === true ? '' : `=${typeof value === 'string' ? JSON.stringify(escape(value)) : `\"${value}\"`}`}`;\n}\nfunction add_classes(classes) {\n    return classes ? ` class=\"${classes}\"` : '';\n}\n\nfunction bind(component, name, callback) {\n    const index = component.$$.props[name];\n    if (index !== undefined) {\n        component.$$.bound[index] = callback;\n        callback(component.$$.ctx[index]);\n    }\n}\nfunction create_component(block) {\n    block && block.c();\n}\nfunction claim_component(block, parent_nodes) {\n    block && block.l(parent_nodes);\n}\nfunction mount_component(component, target, anchor, customElement) {\n    const { fragment, on_mount, on_destroy, after_update } = component.$$;\n    fragment && fragment.m(target, anchor);\n    if (!customElement) {\n        // onMount happens before the initial afterUpdate\n        add_render_callback(() => {\n            const new_on_destroy = on_mount.map(run).filter(is_function);\n            if (on_destroy) {\n                on_destroy.push(...new_on_destroy);\n            }\n            else {\n                // Edge case - component was destroyed immediately,\n                // most likely as a result of a binding initialising\n                run_all(new_on_destroy);\n            }\n            component.$$.on_mount = [];\n        });\n    }\n    after_update.forEach(add_render_callback);\n}\nfunction destroy_component(component, detaching) {\n    const $$ = component.$$;\n    if ($$.fragment !== null) {\n        run_all($$.on_destroy);\n        $$.fragment && $$.fragment.d(detaching);\n        // TODO null out other refs, including component.$$ (but need to\n        // preserve final state?)\n        $$.on_destroy = $$.fragment = null;\n        $$.ctx = [];\n    }\n}\nfunction make_dirty(component, i) {\n    if (component.$$.dirty[0] === -1) {\n        dirty_components.push(component);\n        schedule_update();\n        component.$$.dirty.fill(0);\n    }\n    component.$$.dirty[(i / 31) | 0] |= (1 << (i % 31));\n}\nfunction init(component, options, instance, create_fragment, not_equal, props, dirty = [-1]) {\n    const parent_component = current_component;\n    set_current_component(component);\n    const $$ = component.$$ = {\n        fragment: null,\n        ctx: null,\n        // state\n        props,\n        update: noop,\n        not_equal,\n        bound: blank_object(),\n        // lifecycle\n        on_mount: [],\n        on_destroy: [],\n        on_disconnect: [],\n        before_update: [],\n        after_update: [],\n        context: new Map(parent_component ? parent_component.$$.context : options.context || []),\n        // everything else\n        callbacks: blank_object(),\n        dirty,\n        skip_bound: false\n    };\n    let ready = false;\n    $$.ctx = instance\n        ? instance(component, options.props || {}, (i, ret, ...rest) => {\n            const value = rest.length ? rest[0] : ret;\n            if ($$.ctx && not_equal($$.ctx[i], $$.ctx[i] = value)) {\n                if (!$$.skip_bound && $$.bound[i])\n                    $$.bound[i](value);\n                if (ready)\n                    make_dirty(component, i);\n            }\n            return ret;\n        })\n        : [];\n    $$.update();\n    ready = true;\n    run_all($$.before_update);\n    // `false` as a special case of no DOM component\n    $$.fragment = create_fragment ? create_fragment($$.ctx) : false;\n    if (options.target) {\n        if (options.hydrate) {\n            const nodes = children(options.target);\n            // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n            $$.fragment && $$.fragment.l(nodes);\n            nodes.forEach(detach);\n        }\n        else {\n            // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n            $$.fragment && $$.fragment.c();\n        }\n        if (options.intro)\n            transition_in(component.$$.fragment);\n        mount_component(component, options.target, options.anchor, options.customElement);\n        flush();\n    }\n    set_current_component(parent_component);\n}\nlet SvelteElement;\nif (typeof HTMLElement === 'function') {\n    SvelteElement = class extends HTMLElement {\n        constructor() {\n            super();\n            this.attachShadow({ mode: 'open' });\n        }\n        connectedCallback() {\n            const { on_mount } = this.$$;\n            this.$$.on_disconnect = on_mount.map(run).filter(is_function);\n            // @ts-ignore todo: improve typings\n            for (const key in this.$$.slotted) {\n                // @ts-ignore todo: improve typings\n                this.appendChild(this.$$.slotted[key]);\n            }\n        }\n        attributeChangedCallback(attr, _oldValue, newValue) {\n            this[attr] = newValue;\n        }\n        disconnectedCallback() {\n            run_all(this.$$.on_disconnect);\n        }\n        $destroy() {\n            destroy_component(this, 1);\n            this.$destroy = noop;\n        }\n        $on(type, callback) {\n            // TODO should this delegate to addEventListener?\n            const callbacks = (this.$$.callbacks[type] || (this.$$.callbacks[type] = []));\n            callbacks.push(callback);\n            return () => {\n                const index = callbacks.indexOf(callback);\n                if (index !== -1)\n                    callbacks.splice(index, 1);\n            };\n        }\n        $set($$props) {\n            if (this.$$set && !is_empty($$props)) {\n                this.$$.skip_bound = true;\n                this.$$set($$props);\n                this.$$.skip_bound = false;\n            }\n        }\n    };\n}\n/**\n * Base class for Svelte components. Used when dev=false.\n */\nclass SvelteComponent {\n    $destroy() {\n        destroy_component(this, 1);\n        this.$destroy = noop;\n    }\n    $on(type, callback) {\n        const callbacks = (this.$$.callbacks[type] || (this.$$.callbacks[type] = []));\n        callbacks.push(callback);\n        return () => {\n            const index = callbacks.indexOf(callback);\n            if (index !== -1)\n                callbacks.splice(index, 1);\n        };\n    }\n    $set($$props) {\n        if (this.$$set && !is_empty($$props)) {\n            this.$$.skip_bound = true;\n            this.$$set($$props);\n            this.$$.skip_bound = false;\n        }\n    }\n}\n\nfunction dispatch_dev(type, detail) {\n    document.dispatchEvent(custom_event(type, Object.assign({ version: '3.38.2' }, detail)));\n}\nfunction append_dev(target, node) {\n    dispatch_dev('SvelteDOMInsert', { target, node });\n    append(target, node);\n}\nfunction insert_dev(target, node, anchor) {\n    dispatch_dev('SvelteDOMInsert', { target, node, anchor });\n    insert(target, node, anchor);\n}\nfunction detach_dev(node) {\n    dispatch_dev('SvelteDOMRemove', { node });\n    detach(node);\n}\nfunction detach_between_dev(before, after) {\n    while (before.nextSibling && before.nextSibling !== after) {\n        detach_dev(before.nextSibling);\n    }\n}\nfunction detach_before_dev(after) {\n    while (after.previousSibling) {\n        detach_dev(after.previousSibling);\n    }\n}\nfunction detach_after_dev(before) {\n    while (before.nextSibling) {\n        detach_dev(before.nextSibling);\n    }\n}\nfunction listen_dev(node, event, handler, options, has_prevent_default, has_stop_propagation) {\n    const modifiers = options === true ? ['capture'] : options ? Array.from(Object.keys(options)) : [];\n    if (has_prevent_default)\n        modifiers.push('preventDefault');\n    if (has_stop_propagation)\n        modifiers.push('stopPropagation');\n    dispatch_dev('SvelteDOMAddEventListener', { node, event, handler, modifiers });\n    const dispose = listen(node, event, handler, options);\n    return () => {\n        dispatch_dev('SvelteDOMRemoveEventListener', { node, event, handler, modifiers });\n        dispose();\n    };\n}\nfunction attr_dev(node, attribute, value) {\n    attr(node, attribute, value);\n    if (value == null)\n        dispatch_dev('SvelteDOMRemoveAttribute', { node, attribute });\n    else\n        dispatch_dev('SvelteDOMSetAttribute', { node, attribute, value });\n}\nfunction prop_dev(node, property, value) {\n    node[property] = value;\n    dispatch_dev('SvelteDOMSetProperty', { node, property, value });\n}\nfunction dataset_dev(node, property, value) {\n    node.dataset[property] = value;\n    dispatch_dev('SvelteDOMSetDataset', { node, property, value });\n}\nfunction set_data_dev(text, data) {\n    data = '' + data;\n    if (text.wholeText === data)\n        return;\n    dispatch_dev('SvelteDOMSetData', { node: text, data });\n    text.data = data;\n}\nfunction validate_each_argument(arg) {\n    if (typeof arg !== 'string' && !(arg && typeof arg === 'object' && 'length' in arg)) {\n        let msg = '{#each} only iterates over array-like objects.';\n        if (typeof Symbol === 'function' && arg && Symbol.iterator in arg) {\n            msg += ' You can use a spread to convert this iterable into an array.';\n        }\n        throw new Error(msg);\n    }\n}\nfunction validate_slots(name, slot, keys) {\n    for (const slot_key of Object.keys(slot)) {\n        if (!~keys.indexOf(slot_key)) {\n            console.warn(`<${name}> received an unexpected slot \"${slot_key}\".`);\n        }\n    }\n}\n/**\n * Base class for Svelte components with some minor dev-enhancements. Used when dev=true.\n */\nclass SvelteComponentDev extends SvelteComponent {\n    constructor(options) {\n        if (!options || (!options.target && !options.$$inline)) {\n            throw new Error(\"'target' is a required option\");\n        }\n        super();\n    }\n    $destroy() {\n        super.$destroy();\n        this.$destroy = () => {\n            console.warn('Component was already destroyed'); // eslint-disable-line no-console\n        };\n    }\n    $capture_state() { }\n    $inject_state() { }\n}\n/**\n * Base class to create strongly typed Svelte components.\n * This only exists for typing purposes and should be used in `.d.ts` files.\n *\n * ### Example:\n *\n * You have component library on npm called `component-library`, from which\n * you export a component called `MyComponent`. For Svelte+TypeScript users,\n * you want to provide typings. Therefore you create a `index.d.ts`:\n * ```ts\n * import { SvelteComponentTyped } from \"svelte\";\n * export class MyComponent extends SvelteComponentTyped<{foo: string}> {}\n * ```\n * Typing this makes it possible for IDEs like VS Code with the Svelte extension\n * to provide intellisense and to use the component like this in a Svelte file\n * with TypeScript:\n * ```svelte\n * <script lang=\"ts\">\n * \timport { MyComponent } from \"component-library\";\n * </script>\n * <MyComponent foo={'bar'} />\n * ```\n *\n * #### Why not make this part of `SvelteComponent(Dev)`?\n * Because\n * ```ts\n * class ASubclassOfSvelteComponent extends SvelteComponent<{foo: string}> {}\n * const component: typeof SvelteComponent = ASubclassOfSvelteComponent;\n * ```\n * will throw a type error, so we need to seperate the more strictly typed class.\n */\nclass SvelteComponentTyped extends SvelteComponentDev {\n    constructor(options) {\n        super(options);\n    }\n}\nfunction loop_guard(timeout) {\n    const start = Date.now();\n    return () => {\n        if (Date.now() - start > timeout) {\n            throw new Error('Infinite loop detected');\n        }\n    };\n}\n\nexport { HtmlTag, SvelteComponent, SvelteComponentDev, SvelteComponentTyped, SvelteElement, action_destroyer, add_attribute, add_classes, add_flush_callback, add_location, add_render_callback, add_resize_listener, add_transform, afterUpdate, append, append_dev, assign, attr, attr_dev, attribute_to_object, beforeUpdate, bind, binding_callbacks, blank_object, bubble, check_outros, children, claim_component, claim_element, claim_space, claim_text, clear_loops, component_subscribe, compute_rest_props, compute_slots, createEventDispatcher, create_animation, create_bidirectional_transition, create_component, create_in_transition, create_out_transition, create_slot, create_ssr_component, current_component, custom_event, dataset_dev, debug, destroy_block, destroy_component, destroy_each, detach, detach_after_dev, detach_before_dev, detach_between_dev, detach_dev, dirty_components, dispatch_dev, each, element, element_is, empty, escape, escaped, exclude_internal_props, fix_and_destroy_block, fix_and_outro_and_destroy_block, fix_position, flush, getContext, get_binding_group_value, get_current_component, get_custom_elements_slots, get_slot_changes, get_slot_context, get_spread_object, get_spread_update, get_store_value, globals, group_outros, handle_promise, hasContext, has_prop, identity, init, insert, insert_dev, intros, invalid_attribute_name_character, is_client, is_crossorigin, is_empty, is_function, is_promise, listen, listen_dev, loop, loop_guard, missing_component, mount_component, noop, not_equal, now, null_to_empty, object_without_properties, onDestroy, onMount, once, outro_and_destroy_block, prevent_default, prop_dev, query_selector_all, raf, run, run_all, safe_not_equal, schedule_update, select_multiple_value, select_option, select_options, select_value, self, setContext, set_attributes, set_current_component, set_custom_element_data, set_data, set_data_dev, set_input_type, set_input_value, set_now, set_raf, set_store_value, set_style, set_svg_attributes, space, spread, stop_propagation, subscribe, svg_element, text, tick, time_ranges_to_array, to_number, toggle_class, transition_in, transition_out, update_await_block_branch, update_keyed_each, update_slot, update_slot_spread, validate_component, validate_each_argument, validate_each_keys, validate_slots, validate_store, xlink_attr };\n","/***************************************************\n * Mathematical functions needed for computations  *\n ***************************************************/\n\n\n/**\n * Error function for normal distribution\n * @param {number} x - a number\n * @returns {number} value for erf\n */\nexport function erf(x) {\n\n  const sign = (x >= 0) ? 1 : -1;\n  x = Math.abs(x);\n\n  // constants\n  const a1 =  0.254829592;\n  const a2 = -0.284496736;\n  const a3 =  1.421413741;\n  const a4 = -1.453152027;\n  const a5 =  1.061405429;\n  const p  =  0.3275911;\n\n  // approximation\n  const t = 1.0 / (1.0 + p * x);\n  const y = 1.0 - (((((a5 * t + a4) * t) + a3) * t + a2) * t + a1) * t * Math.exp(-x * x);\n  return sign * y;\n}\n\n\n/**\n * Gamma function (approximation)\n * @param {number|number[]} z - argument (one value or a vector)\n * @returns {number} value of the Gamma function\n */\nexport function gamma(z) {\n\n   if (Array.isArray(z)) {\n      return z.map(v => gamma(v));\n   }\n\n   if (z <= 0) {\n      throw new Error(\"Gamma function only works with arguments > 0.\");\n   }\n\n   // coefficients\n   const p = [\n        676.5203681218851,\n      -1259.1392167224028,\n        771.32342877765313,\n       -176.61502916214059,\n         12.507343278686905,\n         -0.13857109526572012,\n          9.9843695780195716e-6,\n          1.5056327351493116e-7\n    ];\n\n   if (z < 0.5) {\n      return Math.PI / (Math.sin(Math.PI * z) + gamma(1 - z));\n   }\n\n   z = z - 1;\n   let x = 0.99999999999980993;\n\n   for (let i = 0; i < p.length; i++) {\n      x = x + p[i] / (z + i + 1);\n   }\n\n   const t = z + p.length - 0.5;\n   return Math.sqrt(2 * Math.PI) * Math.pow(t, z + 0.5) * Math.exp(-t) * x;\n}\n\n\n/**\n * Betta function (approximation)\n * @param {number} x - first argument (one value)\n * @param {number} y - second argument (one value)\n * @returns {number} value of the Beta function\n */\nexport function beta(x, y) {\n   return gamma(x) * gamma(y) / gamma(x + y);\n}\n\n\n/**********************************************\n * Functions for computing single statistics  *\n **********************************************/\n\n/**\n * Computes kurtosis of values\n * @param {number[]} x - vector with values\n * @returns {number}\n */\nexport function kurtosis(x) {\n   let n = x.length;\n   let m = mean(x);\n\n   let m4 = 0.0;\n   let m2 = 0.0;\n   for (let i = 0; i < n; i++) {\n      m2 = m2 + Math.pow((x[i] - m), 2);\n      m4 = m4 + Math.pow((x[i] - m), 4);\n   }\n\n   return (m4/n) / Math.pow((m2/n), 2);\n}\n\n\n/**\n * Computes skewness of values\n * @param {number[]} x - vector with values\n * @returns {number}\n */\nexport function skewness(x) {\n   let n = x.length;\n   let m = mean(x);\n\n   let m3 = 0.0;\n   let m2 = 0.0;\n   for (let i = 0; i < n; i++) {\n      m2 = m2 + Math.pow((x[i] - m), 2);\n      m3 = m3 + Math.pow((x[i] - m), 3);\n   }\n\n   return (m3/n) / Math.pow((m2/n), 1.5);\n}\n\n\n/**\n * Finds smallest value in a vector\n * @param {number[]} x - vector with values\n * @returns {number}\n */\nexport function min(x) {\n   let n = x.length;\n   let min = Number.POSITIVE_INFINITY\n\n   while (n--) min = x[n] < min ? x[n] : min;\n   return min;\n}\n\n\n/**\n * Finds largest value in a vector\n * @param {number[]} x - vector with values\n * @returns {number}\n */\nexport function max(x) {\n   let n = x.length;\n   let max = Number.NEGATIVE_INFINITY\n\n   while (n--) max = x[n] > max ? x[n] : max;\n   return max;\n}\n\n\n/**\n * Computes sum of all value in a vector\n * @param {number[]} x - vector with values\n * @returns {number}\n */\nexport function sum(x) {\n   return x.reduce((t, v) => t + v);\n}\n\n\n/**\n * Computes product of all value in a vector\n * @param {number[]} x - vector with values\n * @returns {number}\n */\nexport function prod(x) {\n   return x.reduce((t, v) => t * v);\n}\n\n\n/**\n * Computes mean (average) value for a vector\n * @param {number[]} x - vector with values\n * @returns {number}\n */\nexport function mean(x) {\n   return sum(x) / x.length;\n}\n\n/**\n * Computes standard deviation for a vector\n * @param {number[]} x - vector with values\n * @param {boolean} biased - compute a biased version with n degrees of freedom or not (with n-1).\n * @param {number} m - mean value (e.g. if already computed).\n * @returns {number}\n */\nexport function sd(x, biased = false, m = undefined) {\n   if (m === undefined) m = mean(x)\n   return Math.sqrt(sum(x.map(v => (v - m) ** 2 )) / (x.length - (biased ? 0 : 1)));\n}\n\n\n/***************************************************\n * Functions for computing vectors of statistics   *\n ***************************************************/\n\n/**\n * Computes a p-th quantile/quantiles for a numeric vector\n * @param {number[]} x - vector with values\n * @param {number|number[]} p - probability (one value or a vector)\n * @returns {number}\n */\nexport function quantile(x, p) {\n\n   x = sort(x);\n   const n = x.length;\n\n   if (!Array.isArray(p)) p = [p];\n   if (typeof(p[0]) !== \"number\" || min(p) < 0 || max(p) > 1) {\n      throw new Error(\"Parameter 'p' must be between 0 and 1 (both included).\");\n   }\n\n   function q(x, p) {\n      const h = (n - 1) * p + 1;\n      const n1 = Math.floor(h);\n      const n2 = Math.ceil(h);\n      return x[n1 - 1] + (x[n2 - 1] - x[n1 - 1]) * (h - Math.floor(h));\n   }\n\n   const out =  p.map(v => q(x, v));\n   return p.length == 1 ? out[0] : out;\n}\n\n\n/**\n * Generate a sequence of n numbers between min and max.\n * @param {number} min - first value in the sequence\n * @param {number} max - last value in the sequence\n * @param {number} n - number of values in the sequence\n * @returns {number[]} array with the sequence values\n */\nexport function seq(min, max, n) {\n\n   if (n < 2) {\n      throw new Error(\"Parameter 'n' should be ≥ 2.\");\n   }\n\n   if (n === undefined && Number.isInteger(min) && Number.isInteger(max)) {\n      n = max - min + 1;\n   }\n\n   const step = (max - min + 0.0) / (n - 1 + 0.0)\n   let out = [...Array(n)].map((x, i) => min + i * step);\n\n   // if step is smaller than 1 round values to remove small decimals accidentally added by JS\n   if (Math.abs(step) < 1) {\n      const r = Math.pow(10, Math.round(-Math.log10(step)) + 1);\n      out = out.map(v => Math.round((v + Number.EPSILON) * r) / r)\n   }\n\n   return(out)\n}\n\n\n/**\n * Finds a range of values in a vector (min and max)\n * @param {number[]} x - vector with values\n * @returns {number[]} array with min and max values\n */\nexport function range(x) {\n   return [min(x), max(x)];\n}\n\n\n/**\n * Computes a range of values in a vector with a margin\n * @param {number[]} x - vector with values\n * @param {number} margin - margin in parts of one (e.g. 0.1 for 10% or 2 for 200%)\n * @returns{number[]} array with marginal range boundaries\n */\nexport function mrange(x, margin) {\n   const mn = min(x);\n   const mx = max(x);\n   const d = mx - mn;\n\n   return [mn - d * margin, max(x) + d * margin];\n}\n\n/**\n * Splits range of vector values into equal intervals\n * @param {number[]} x - vector with values\n * @param {number} n - number of intervals\n * @returns {number[]} vector with boundaries of the intervals\n */\nexport function split(x, n) {\n   if (x === undefined || !Array.isArray(x) || x.length < 2) {\n      throw new Error(\"split: 'x' must bet a vector with numbers.\");\n   }\n\n   if (n === undefined || n < 2) {\n      throw new Erro(\"split: 'n' must be a positive integer number.\");\n   }\n\n   const mn = min(x);\n   const mx = max(x);\n\n   if (mn === mx) {\n      throw new Error(\"split: values in a vector 'x' should vary.\");\n   }\n\n   const step = (mx - mn) / n;\n   return Array.from({length: n + 1}, (v, i) => mn + i * step + 0.0);\n}\n\n\n/**\n * Counts how many values from a vector falls into provided intervals (bins)\n * @param {number[]} x - vector with values\n * @param {number[]} bins - vector with bins boundaries\n * @returns {number[]} vector with counts for each bean\n */\nexport function count(x, bins) {\n\n   if (x === undefined || !Array.isArray(x) ||x.length < 2) {\n      throw new Error(\"count: 'x' must be a vector with numbers.\")\n   }\n\n   if (bins === undefined || !Array.isArray(bins) || bins.length < 2) {\n      throw new Error(\"count: 'bins' must be a vector with numbers.\")\n   }\n\n   const n = bins.length;\n\n   // add a bit extra to right side of the last bin\n   bins[n - 1] = bins[n - 1] * 1.0001\n\n   // count\n   let counts = Array(n - 1).fill(0);\n   for (let i = 0; i < x.length; i++) {\n      for (let j = 0; j < n - 1; j++) {\n         if (x[i] >= bins[j] && x[i] < bins[j + 1]) counts[j] = counts[j] + 1;\n      }\n   }\n   return counts;\n}\n\n/**\n * Computes middle points between values of a vector\n * @param {number[]} x - vector with values\n * @returns {number[]} vector with middle points\n */\nexport function mids(x) {\n   return x.slice(1).map((v, i) => (0.5 * (v + x[i])));\n}\n\n\n/**\n * Computes difference between all adjacent values in a vector\n * @param {number[]} x - vector with values\n * @returns {number[]} vector with the differences\n */\nexport function diff(x) {\n   return x.slice(1).map( (y, i) => (y - x[i]));\n}\n\n\n/**\n * Finds outliers in a vector based on inter-quartile range distance\n * @param {Array} x - vector with values\n * @param {number} Q1 - first quartile (optional parameter)\n * @param {Array} Q3 - third quartile (optional parameter)\n * @returns {Array} vector with outliers or empty vector if none were found.\n */\nexport function getOutliers(x, Q1 = undefined, Q3 = undefined) {\n\n   if (Q1 === undefined) Q1 = quantile(x, 0.25);\n   if (Q3 === undefined) Q3 = quantile(x, 0.75);\n\n   const IQR = Q3 - Q1;\n   const bl = Q1 - 1.5 * IQR\n   const bu = Q3 + 1.5 * IQR\n   return(x.filter(v => v < bl || v > bu));\n}\n\n/**\n * Returns ranks of values in a vector (ranks start from 1, not 0)\n * @param {number[]} x - vector with values\n * @returns {number[]} vector with ranks\n */\nexport function rank(x) {\n   const y = [...x].sort((a, b) => a - b);\n   return(x.map(v => y.indexOf(v) + 1));\n}\n\n/*******************************************\n * Functions for theoretical distributions *\n *******************************************/\n\n/**\n * Generates 'n' random numbers from a uniform distribution\n * @param {number} n - amount of numbers to generate\n * @param {number} a - smallest value (min) of the population\n * @param {number} b - largest value (max) of the population\n * @returns {number[]} vector with generated numbers\n */\nexport function runif(n, a = 0, b = 1) {\n   let out = Array(n);\n   for (let i = 0; i < n; i++) out[i] = (a + Math.random() * (b - a));\n   return out;\n}\n\n\n/**\n * Probability density function for uniform distribution\n * @param {Array} x - vector of values\n * @param {number} a - smallest value (min) of the population\n * @param {number} b - largest value (max) of the population\n * @returns {Array} vector with densities\n */\nexport function dunif(x, a = 0, b = 1) {\n\n   if (!Array.isArray(x)) x = [x];\n\n   const n = x.length;\n   const A = 1 / (b - a);\n   let d = Array(n);\n\n   for (let i = 0; i < n; i++) {\n      d[i] = (x[i] < a || x[i] > b ) ? 0 : A;\n   }\n\n   return d;\n}\n\n\n/**\n * Cumulative distribution function for uniform distribution\n * @param {Array} x - vector of values\n * @param {number} a - smallest value (min) of the population\n * @param {number} b - largest value (max) of the population\n * @returns {Array} vector with probabilities\n */\nexport function punif(x, a = 0, b = 1) {\n\n   if (!Array.isArray(x)) x = [x];\n\n   const n = x.length;\n   let p = Array(n);\n   for (let i = 0; i < n; i++) {\n      if (x[i] < a) {\n         p[i] = 0;\n      } else if (x[i] > b) {\n         p[i] = 1;\n      } else {\n         p[i] = (x[i] - a) / (b - a)\n      }\n   }\n\n   return p;\n}\n\n\n /**\n * Generates 'n' random numbers from a normal distribution\n * @param {number} n - amount of numbers to generate\n * @param {number} mu - average value of the population\n * @param {number} sigma - standard deviation of the population\n * @returns {Array} vector with generated numbers\n */\nexport function rnorm(n, mu = 0, sigma = 1) {\n\n   let out = Array(n);\n   for (let i = 0; i < n; i ++) {\n      const a = Math.sqrt(-2 * Math.log(Math.random()));\n      const b = 2 * Math.PI * Math.random();\n      out[i] = (a * Math.sin(b) * sigma + mu);\n   }\n\n   return out;\n}\n\n\n/**\n * Probability density function for normal distribution\n * @param {Array} x - vector of values\n * @param {number} mu - average value of the population\n * @param {number} sigma - standard deviation of the population\n * @returns {Array} vector with densities\n */\nexport function dnorm(x, mu = 0, sigma = 1) {\n\n   if (!Array.isArray(x)) x = [x];\n\n   const n = x.length;\n   const A = 1 / (Math.sqrt(2 * Math.PI) * sigma);\n   const frac = -0.5 / sigma ** 2;\n\n   let d = Array(n);\n   for (let i = 0; i < n; i++) {\n      const df = x[i] - mu;\n      d[i] = A * Math.exp(frac * df * df);\n   }\n\n   return d;\n}\n\n/**\n * Cumulative distribution function for normal distribution\n * @param {Array} x - vector of values\n * @param {number} mu - average value of the population\n * @param {number} sigma - standard deviation of the population\n * @returns {Array} vector with probabilities\n */\nexport function pnorm(x, mu = 0, sigma = 1) {\n\n   if (!Array.isArray(x)) x = [x];\n\n   const n = x.length;\n   const frac = 1 / (Math.sqrt(2) * sigma);\n\n   let p = Array(n);\n   for (let i = 0; i < n; i++) {\n      p[i] = 0.5 * (1 + erf((x[i] - mu) * frac))\n   }\n\n   return p;\n}\n\n\n/**\n * Generate probability points for QQ plot\n * @param {number} n - number of points\n * @returns {Array} a sequence of probabilities between 0 and 1\n */\nexport function ppoints(n) {\n   const a = n < 10 ? 3.0/8.0 : 0.5;\n   return Array.from({length: n}, (v, i) => (i + 1 - a) / (n + (1 - a) - a));\n}\n\n\n/**\n * Probability density function for Student's t-distribution\n * @param {Array} x - vector of values\n * @param {number} dof - degrees of freedom\n */\nexport function dt(x, dof) {\n\n   if (dof < 0) {\n      throw new Error(\"Parameter 'dof' should be a positive number.\");\n   }\n\n   if (!Array.isArray(x)) x = [x];\n\n   const n = x.length;\n   const pow = -0.5 * (dof + 1);\n   const A = 1 / (Math.sqrt(dof) * beta(0.5, dof/2));\n\n   let d = Array(n);\n\n   for (let i = 0; i < n; i++) {\n      d[i] = A * Math.pow((1 + x[i] * x[i] / dof), pow);\n   }\n\n   return d;\n}\n\n/*******************************************\n * Other functions                         *\n *******************************************/\n\n\n/**\n * Sorts values in a vector\n * @param {Array} x - vector with values\n * @returns {Array} vector with sorted values\n */\nexport function sort(x, decreasing = false) {\n   return decreasing ? [...x].sort((a, b) => b - a) : [...x].sort((a, b) => a - b);\n}\n\n\n/**\n * Replicates values in x n times\n * @param {any} x - single value or a vector with values\n * @param {number} n - how many times to replicate\n */\nexport function rep(x, n) {\n\n   if (Array.isArray(n)) {\n      if (x.length != n.length) {\n         throw new Error(\"Parameter 'n' should be a single value or a vector of the same length as x.\");\n      }\n\n      let out = [];\n      for (let i = 0; i < n.length; i++) {\n         out.push(...rep([x[i]], n[i]));\n      }\n\n      return out;\n   }\n\n   if (!Array.isArray(x)) x = [x];\n   if (n <= 1) return x;\n\n   const nx = x.length;\n   x.length = nx * n\n   for (let i = 0; i < n - 1; i ++) {\n      for (let j = 0; j < nx; j++) {\n         x[nx * (i + 1) + j] = x[j];\n      }\n   }\n\n   return x;\n}\n\n\n/**\n * Create a subset of vectors based on a vector of indices\n * @param {number[]} x - a vector with values\n * @param {number[]} indices - a vector with element indices\n */\nexport function subset(x, indices) {\n\n   if (!Array.isArray(x)) x = [x];\n   if (!Array.isArray(indices)) indices = [indices];\n\n   if (max(indices) > x.length || min(indices) < 1) {\n      throw new Error(\"Parameter 'indices' must have values between 1 and 'x.length'.\");\n   }\n\n   const n = indices.length;\n   let out = Array(n);\n   for (let i = 0; i < n; i++) {\n      out[i] = x[indices[i] - 1];\n   }\n\n   return out;\n}\n\n\n/**\n * Generate combination of all levels of vectors\n * @param {...} args - a sequence of vectors\n */\nexport function expandGrid(...args) {\n\n   const nargs = args.length;\n   const d = args.map(v => v.length);\n   let orep = prod(d);\n\n   let grid = Array(nargs);\n   let repFac = 1;\n\n   for (let i = 0; i < nargs; i++) {\n      const x = args[i];\n      const nx = x.length;\n      orep = orep/nx;\n      grid[i] = subset(x, rep(rep(seq(1, nx, nx), rep(repFac, nx)), orep));\n      repFac = repFac * nx;\n   }\n\n   return grid;\n}\n\n\n/**\n * Shuffles values in vector x using Fisher–Yates algorithm\n * @param {Array} x - a vector with values\n */\nexport function shuffle(x) {\n  let y = [...x];\n  let n = y.length;\n  let t, i;\n\n  while (n) {\n    i = Math.floor(Math.random() * n--);\n    t = y[n];\n    y[n] = y[i];\n    y[i] = t;\n  }\n\n  return y;\n}\n\n/**\n * Finds index of value in x which is closest to the value a\n * @param {number[]} x - a vector with values\n * @param {number}  a - a value\n */\nexport function closestIndex(x, a) {\n   const c = x.reduce((prev, curr) => Math.abs(curr - a) < Math.abs(prev - a) ? curr : prev);\n   return x.indexOf(c);\n}\n","<script>\n\timport { onMount } from 'svelte';\n\n   let showHelp = false;\n   let scale = \"medium\";\n   let appContainer;\n\n   const toggleHelp = () => showHelp = !showHelp;\n\n   const getScale = function(width, height) {\n      if (width < 959) return \"small\";\n      if (width < 1279) return \"medium\";\n      return \"large\";\n   };\n\n   /* observer for the plotting area size */\n   var ro = new ResizeObserver(entries => {\n      for (let entry of entries) {\n         const cr = entry.contentRect;\n         scale = getScale(cr.width, cr.height);\n      }\n   });\n\n   const handleKeyPress = e => {\n      if (e.key === 'h') toggleHelp();\n   };\n\n   onMount(() => {\n      ro.observe(appContainer);\n   });\n\n\n   //$: buttonTitle = showHelp ? \"Back to app\" : \"Click for help\";\n   //$: buttonIcon = showHelp ? \"×\" : \"?\";\n</script>\n\n<svelte:window on:keypress={handleKeyPress}/>\n<main class=\"mdatools-app mdatools-app_{scale}\" bind:this={appContainer}>\n\n   {#if !showHelp}\n   <div class=\"content\">\n   <slot></slot>\n   </div>\n\n   {:else}\n   <div class=\"helptext\">\n      <slot name=\"help\"></slot>\n   </div>\n   {/if}\n\n</main>\n\n<style>\n\n/* main styles for mdatools-app and children */\n:global(#mdatools-app-container) {\n   height: 100% !important;\n   width: 100% !important;\n}\n\n.mdatools-app {\n   font-family: Helvetica, Areal, Verdana, sans-serif;\n   display: block;\n   position: relative;\n   font-size: 18px;\n\n   min-width: 800px;\n   max-width: 2560px;\n   max-height: 1800px;\n   min-height: 720px;\n\n   width: 100%;\n   height: 100%;\n\n   box-sizing: border-box;\n   padding: 1em;\n   margin: 0 auto;\n   background: #fdfdfd;\n}\n\n.mdatools-app  * {\n   box-sizing: border-box;\n   margin: 0;\n   padding: 0;\n}\n\n.mdatools-app :glbal(.plot) {\n   box-shadow: 0px 0px 5px  #30303020;\n}\n\n.mdatools-app .content {\n   width: 100%;\n   height: 100%;\n}\n\n/* help text and button */\n\n.helptext {\n   width: 100%;\n   height: 100%;\n   padding: 1em;\n   line-height: 1.35em;\n   font-size: 1em;\n   color: #303030;\n}\n\n.helptext :global(h2) {\n   padding: 0.5em 0 0.5em 0;\n}\n\n.helptext :global(p) {\n   padding: 0 0 0.5em 0;\n   line-height: 1.5em;\n   font-size: 1.2em;\n}\n\n\n/* styles for medium app size - between 900 and 1200 */\n.mdatools-app_medium {\n   font-size: 14px;\n   max-height: 720px;\n   min-height: 540px;\n}\n\n/* styles for small app size */\n.mdatools-app_small {\n   max-height: 540px;\n   min-height: 450px;\n   font-size: 12px;\n}\n\n.mdatools-app_small :global(.axis-label) {\n   text-align: center;\n   font-weight: 500;\n   font-size: 1.25em;\n}\n\n</style>","<script>\n   export let errormsg = undefined;\n</script>\n\n<fieldset>\n   <slot></slot>\n   {#if errormsg}<div class=\"app-control-error\">{errormsg}</div>{/if}\n</fieldset>\n\n<style>\n   .app-control-error {\n      padding: 0.5em 0.5em 0.25em 0.65em;\n      font-size: 0.75em;\n      color: crimson;\n   }\n\n   fieldset {\n      background: #f4f4f4;\n      margin: 0;\n      padding: 0.5em;\n      box-shadow: 0px 0px 2px  #30303020;\n      border: none;\n   }\n</style>","<script>\n   export let id;\n   export let label;\n</script>\n\n<div class=\"app-control\">\n   <label for=\"{id}\">{@html label}</label>\n   <slot></slot>\n</div>\n\n<style>\n   .app-control {\n      font-size: 1em;\n      margin: 0.25em 0 0 0;\n      padding: 0.15em 0.25em;\n      display: flex;\n      align-items: center;\n      justify-content: flex-begin;\n   }\n\n   .app-control > label {\n      height: 1.5em;\n      line-height: 1.5em;\n      flex: 0 0 90px;\n      max-width: 90px;\n   }\n\n   .app-control > slot {\n      width: 100%;\n   }\n\n   @media(min-width: 959px) {\n      .app-control > label {\n         flex: 0 0 120px;\n         max-width: 120px;\n      }\n   }\n\n   @media(min-width: 1279px) {\n      .app-control > label {\n         flex: 0 0 150px;\n         max-width: 150px;\n      }\n   }\n\n</style>","<script>\n   import AppControl from \"./AppControl.svelte\";\n\n   export let id;\n   export let label;\n   export let text;\n</script>\n\n<AppControl id={id} label={label} >\n   <button on:click>{text}</button>\n</AppControl>\n\n<style>\n\n\nbutton {\n   height: 1.5em;\n   font-size: 1em;\n   padding: 0 1em;\n   margin: 0;\n   color: #606060;\n   background: #e0e0e0;\n   box-shadow: none;\n   border: none;\n   border-radius: 3px;\n   white-space: nowrap;\n}\n\nbutton:hover {\n   color: #fafafa;\n   background: #606060;\n}\n\n</style>","<script>\n   import { fade } from 'svelte/transition';\n   import AppControl from \"./AppControl.svelte\";\n\n   export let id;\n   export let label;\n   export let options;\n   export let value = options[0];\n</script>\n\n<AppControl id={id} label={label} >\n\n   <div class=\"selector\">\n      {#each options as option (option)}\n      <div on:click={() => value = option} class=\"option\" class:selected={option==value}>{option}</div>\n      {/each}\n\n   </div>\n   <input name=\"{id}\" bind:value=\"{value}\">\n</AppControl>\n\n<style>\n   input {\n      display: none;\n   }\n\n   .selector {\n      position: relative;\n      box-sizing: border-box;\n      display: inline-block;\n      flex: 0 0 auto;\n      background: #e0e0e0;\n\n      font-size: 1em;\n      height: 1.5em;\n      line-height: 1.5em;\n      margin: 0;\n      padding: 0;\n      width: auto;\n      border-radius: 2px;\n\n      user-select: none;\n      -webkit-user-select: none;\n      -moz-user-select: none;\n\n      display: flex;\n   }\n\n   .option {\n      cursor: default;\n      padding: 0 0.5em;\n      margin: 0 1px;\n      color: #606060;\n      transition: background-color 0.5s ease;\n   }\n\n   .option.selected {\n      border-radius: 3px;\n      background-color: #606060;\n      color: #fefefe;\n   }\n\n</style>","<script>\n   import { createEventDispatcher } from \"svelte\";\n   import AppControl from \"./AppControl.svelte\";\n\n   export let id;\n   export let label;\n   export let value;\n   export let min;\n   export let max;\n   export let decNum = 1;\n   export let step = +((max - min) / 100).toFixed(4);\n\n   if (value < min || value > max) {\n      throw(\"The value is outside of the provided range.\");\n   }\n\n   const dispatch = createEventDispatcher();\n\n   let sliderElement;\n   let sliderContainer;\n   let isDragging = false;\n\n   const computeValue = (p) => {\n      const tmpValue = min + p * (max - min);\n\n      // strange construction below is needed for:\n      // a. make a value fractionated according to step\n      // b. get rid of small decimals added by JS due to loss of precision\n      return(+(Math.round(tmpValue / step) * step).toFixed(4));\n   }\n\n   const getRelativePosition = (e) => {\n      const sliderRect = sliderElement.getBoundingClientRect();\n      const parentRect = sliderContainer.getBoundingClientRect();\n      const minX = sliderRect.x;\n      const maxX = parentRect.x + parentRect.width;\n\n      return (e.clientX - minX) / (maxX - minX);\n   }\n\n   const startChanging = (e) => {\n      const p = getRelativePosition(e);\n      if (p < 0 || p > 1) return;\n      isDragging = p * 100 > width - 5 && p * 100 < width + 5;\n   }\n\n   const stopChanging = (e) => {\n      isDragging = false;\n      const p = getRelativePosition(e);\n      if (p < 0 || p > 1) return;\n\n      value = computeValue(p);\n   }\n\n   const changing = (e) => {\n      if (!isDragging) return;\n      const p = getRelativePosition(e);\n      if (p < 0 || p > 1) return;\n\n      value = computeValue(p);\n   }\n\n   $: width = (value - min) / (max - min) * 100;\n   $: dispatch(\"change\", value);\n</script>\n\n<AppControl id={id} label={label}>\n   <div\n      class=\"rangeSliderContainer\"\n      bind:this={sliderContainer}\n      on:mousewheel={changing}\n      on:mousemove={changing}\n      on:mouseup={stopChanging}\n      on:mousedown={startChanging}>\n\n      <div class=\"rangeSlider\" style=\"width:{width}%\" bind:this={sliderElement}></div>\n      <span>{value.toFixed(decNum)}</span>\n   </div>\n   <input type=\"range\" step={step} bind:value=\"{value}\" min={min} max={max}>\n</AppControl>\n\n<style>\n   .rangeSliderContainer {\n      position: relative;\n      box-sizing: border-box;\n      display: inline-block;\n      flex: 1 1 auto;\n      background: #e0e0e0;\n      height: 1.5em;\n      margin: 0;\n      padding: 0;\n      width: auto;\n      border-radius: 2px;\n\n      user-select: none;\n      -webkit-user-select: none;\n      -moz-user-select: none;\n\n   }\n\n   .rangeSlider {\n      position: relative;\n      display: inline-block;\n      background: #606060;\n      border-radius: 2px;\n\n      margin: 0;\n      padding: 0;\n      height: 100%;\n      cursor:default;\n      user-select: none;\n      -webkit-user-select: none;\n      -moz-user-select: none;\n\n   }\n\n   .rangeSliderContainer span {\n      display: inline-block;\n      position: absolute;\n      right: 0;\n      top: 0;\n      font-size: 0.85em;\n      padding: 1px 5px;\n      color: #606060;\n      mix-blend-mode: difference;\n      line-height: 1.6em;\n      user-select: none;\n      -webkit-user-select: none;\n      -moz-user-select: none;\n   }\n\n   input {\n      display: none;\n      width: 100%;\n   }\n</style>\n\n","import { noop, safe_not_equal, subscribe, run_all, is_function } from '../internal/index.mjs';\nexport { get_store_value as get } from '../internal/index.mjs';\n\nconst subscriber_queue = [];\n/**\n * Creates a `Readable` store that allows reading by subscription.\n * @param value initial value\n * @param {StartStopNotifier}start start and stop notifications for subscriptions\n */\nfunction readable(value, start) {\n    return {\n        subscribe: writable(value, start).subscribe\n    };\n}\n/**\n * Create a `Writable` store that allows both updating and reading by subscription.\n * @param {*=}value initial value\n * @param {StartStopNotifier=}start start and stop notifications for subscriptions\n */\nfunction writable(value, start = noop) {\n    let stop;\n    const subscribers = [];\n    function set(new_value) {\n        if (safe_not_equal(value, new_value)) {\n            value = new_value;\n            if (stop) { // store is ready\n                const run_queue = !subscriber_queue.length;\n                for (let i = 0; i < subscribers.length; i += 1) {\n                    const s = subscribers[i];\n                    s[1]();\n                    subscriber_queue.push(s, value);\n                }\n                if (run_queue) {\n                    for (let i = 0; i < subscriber_queue.length; i += 2) {\n                        subscriber_queue[i][0](subscriber_queue[i + 1]);\n                    }\n                    subscriber_queue.length = 0;\n                }\n            }\n        }\n    }\n    function update(fn) {\n        set(fn(value));\n    }\n    function subscribe(run, invalidate = noop) {\n        const subscriber = [run, invalidate];\n        subscribers.push(subscriber);\n        if (subscribers.length === 1) {\n            stop = start(set) || noop;\n        }\n        run(value);\n        return () => {\n            const index = subscribers.indexOf(subscriber);\n            if (index !== -1) {\n                subscribers.splice(index, 1);\n            }\n            if (subscribers.length === 0) {\n                stop();\n                stop = null;\n            }\n        };\n    }\n    return { set, update, subscribe };\n}\nfunction derived(stores, fn, initial_value) {\n    const single = !Array.isArray(stores);\n    const stores_array = single\n        ? [stores]\n        : stores;\n    const auto = fn.length < 2;\n    return readable(initial_value, (set) => {\n        let inited = false;\n        const values = [];\n        let pending = 0;\n        let cleanup = noop;\n        const sync = () => {\n            if (pending) {\n                return;\n            }\n            cleanup();\n            const result = fn(single ? values[0] : values, set);\n            if (auto) {\n                set(result);\n            }\n            else {\n                cleanup = is_function(result) ? result : noop;\n            }\n        };\n        const unsubscribers = stores_array.map((store, i) => subscribe(store, (value) => {\n            values[i] = value;\n            pending &= ~(1 << i);\n            if (inited) {\n                sync();\n            }\n        }, () => {\n            pending |= (1 << i);\n        }));\n        inited = true;\n        sync();\n        return function stop() {\n            run_all(unsubscribers);\n            cleanup();\n        };\n    });\n}\n\nexport { derived, readable, writable };\n","<script>\n\timport { onMount, setContext } from 'svelte';\n\timport { writable } from 'svelte/store';\n\n   /* input parameters */\n   export let limX = [undefined, undefined];    // limits for x-axis (in plot units) [min, max]\n   export let limY = [undefined, undefined];    // limits for y-axis (in plot units) [min, max]\n   export let title = \"\";                       // title of the plot\n   export let xLabel = \"\";                      // label for x-axis\n   export let yLabel = \"\";                      // label for y-axis\n   export let multiSeries = true;               // is the plot for one series or for many\n\n   /* constants for internal use */\n\n   // how big are margins (number of pixels in unit margin value) between axis and plot area if axis are shown\n   const AXES_MARGIN_FACTORS = {\n      \"small\": 30,\n      \"medium\": 40,\n      \"large\": 50\n   }\n\n   // number of ticks along each axis\n   const TICK_NUM = {\n      \"small\": 5,\n      \"medium\": 8,\n      \"large\": 12\n   };\n\n   // margin between plot series elements and data labels\n   const LABELS_MARGIN = {\n      \"small\": 10,\n      \"medium\": 15,\n      \"large\": 20\n   };\n\n   // line styles for different scales and types\n   const LINE_STYLES = {\n      small: [\"0\", \"3,3\", \"1,1\", \"3,1\"],\n      medium: [\"0\", \"5,5\", \"2,2\", \"5,2\"],\n      large: [\"0\", \"7,7\", \"3,3\", \"7,3\"],\n   }\n\n   // constant to make clip path ID unique\n   const clipPathID = \"plottingArea\" + Math.round(Math.random() * 10000);\n\n   /* parameters for internal use inside the component */\n   let axesWrapper;                                   // pointer to axes wrapper DOM element\n   let axesMargins = [0.034, 0.034, 0.034, 0.034];    // initial margins (will be multiplied to FACTORS)\n\n   /* reactive parameters to be shared with children via context */\n   const width = writable(100);                       // actual width of plotting area in pixels\n   const height = writable(100);                      // actual height of plotting area in pixels\n   const xLim = writable([undefined, undefined]);     // actual limits for x-axis in plot units\n   const yLim = writable([undefined, undefined]);     // actual limits for y-axis in plot units\n   const scale = writable(\"medium\");                  // scale factor (how big the shown plot is)\n   const isOk = writable(false);                      // are axes ready for drawing\n\n   /** Adds margins for x-axis (e.g. when x-axis must be shown) */\n   const addXAxisMargins = function() {\n      axesMargins[0] = 1;\n      axesMargins[2] = 0.5;\n      axesMargins[1] = axesMargins[1] > 0.5 ? axesMargins[1] : 0.5;\n      axesMargins[3] = axesMargins[3] > 0.5 ? axesMargins[3] : 0.5;\n   }\n\n   /** Adds margins for y-axis (e.g. when y-axis must be shown) */\n   const addYAxisMargins = function() {\n      axesMargins[1] = 1;\n      axesMargins[3] = 0.5;\n      axesMargins[0] = axesMargins[0] > 0.5 ? axesMargins[0] : 0.5;\n      axesMargins[2] = axesMargins[2] > 0.5 ? axesMargins[2] : 0.5;\n   }\n\n   /** Adjusts limits for x-axis (e.g. when new series is added)\n    *  @param {Array} newLim - vector with new limits  (two values)\n    */\n   const adjustXAxisLimits = function(newLim) {\n      if (!limX.some(v => v === undefined)) return;\n      xLim.update(lim => adjustAxisLimits(lim, newLim));\n   }\n\n   /** Adjusts limits for y-axis (e.g. when new series is added)\n    *  @param {Array} newLim - vector with new limits  (two values)\n    */\n   const adjustYAxisLimits = function(newLim) {\n      if (!limY.some(v => v === undefined)) return;\n      yLim.update(lim => adjustAxisLimits(lim, newLim));\n   }\n\n   /** Adjusts x- or y- axis limits (e.g. when new elements are added)\n    *  @param {Array} lim - vector with limits for current axis (two values)\n    *  @param {Array} newLim - vector with new limits  (two values)\n    *  @returns {Array} vector with rescaled values\n    *\n    *  The new limits are set separately for min and max. Either if current value is undefined or\n    *  if new value is outside the current limits (smaller than min or larger than max).\n    */\n   const adjustAxisLimits = function(lim, newLim) {\n\n      let adjustedLim = [\n         (lim[0] !== undefined && multiSeries === true && lim[0] < newLim[0]) ? lim[0] : newLim[0],\n         (lim[1] !== undefined && multiSeries === true && lim[1] > newLim[1]) ? lim[1] : newLim[1]\n      ];\n\n      // special case when both limits are zero\n      if (adjustedLim[0] === 0 && adjustedLim[1] === 0) {\n         adjustedLim = [-0.1, 0.1];\n      }\n\n      // special case when limits are equal (add ±5%)\n      if (adjustedLim[0] === adjustedLim[1]) {\n         adjustedLim = [adjustedLim[0] * 0.95, adjustedLim[0] * 1.05];\n      }\n\n      return adjustedLim;\n   }\n\n   /** Rescales x-values from plot coordinates to screen (SVG) coordinates\n    *  @param {Array} x - vector with coordinates (or objects size) in original plot coordinates\n    *  @param {Array} xLim - vector with current limits for x-axis in original plot coordinates\n    *  @param {number} width - width of coordinate system in pixels\n    *  @param {boolean} doSizeScreen - scale size of objects (true) or coordinates\n    *  @returns {Array} vector with rescaled values\n    */\n   const scaleX = function(x, xLim, width, doSizeScale = false) {\n      if (!$isOk  || x === undefined || !Array.isArray(x)) return undefined;\n\n      if (doSizeScale) {\n         // scale size of objects instead of coordinates\n         return x.map(v => v / (xLim[1] - xLim[0]) * (width - margins[1] - margins[3]));\n      }\n\n      return x.map(v => (v - xLim[0]) / (xLim[1] - xLim[0]) * (width - margins[1] - margins[3]) + margins[1]);\n   }\n\n   /** Rescales x-values from plot coordinates to screen (SVG) coordinates\n    *  @param {Array} x - vector with coordinates (or objects size) in original plot coordinates\n    *  @param {Array} xLim - vector with current limits for x-axis in original plot coordinates\n    *  @param {number} width - width of coordinate system in pixels\n    *  @param {boolean} doSizeScreen - scale size of objects (true) or coordinates\n    *  @returns {Array} vector with rescaled values\n    */\n   const scaleY = function(y, yLim, height, doSizeScale = false) {\n      if (!$isOk  || y === undefined || !Array.isArray(y)) return undefined;\n\n      if (doSizeScale) {\n         // scale size of objects instead of coordinates\n         return y.map(v => v / (yLim[1] - yLim[0]) * (height - margins[0] - margins[2]));\n      }\n\n      // for coordinates we also need to invert (flip) the y-axis\n      return y.map(v => (yLim[1] - v) / (yLim[1] - yLim[0]) * (height - margins[0] - margins[2]) + margins[2]);\n   }\n\n   /** Computes nice tick values for axis\n    * @param {Array} ticks - vector with ticks if alredy available (if not, new will be computed)\n    * @param {Array} lim - vector with axis limits tickets must be computed for\n    * @param {number} maxTickNum - maximum number of ticks to compute\n    * @param {boolean} round - round or not the fractions when computing nice numbers for the ticks\n    * @returns {Array} a vector with computed tick positions\n    */\n   const getAxisTicks = function(ticks, lim, maxTickNum, round = true) {\n\n      // if ticks are already provided do not recompute them\n      if (ticks !== undefined) return ticks;\n\n      // check if limits are ok\n      if (!Array.isArray(lim) || lim[0] === undefined || lim[1] === undefined) return undefined;\n\n      // get range as a nice number and compute min, max and steps for the tick sequence\n      const range = niceNum(lim[1] - lim[0], round);\n      const tickSpacing = niceNum(range / (maxTickNum - 1), round);\n      const tickMin = Math.ceil(lim[0] / tickSpacing) * tickSpacing;\n      const tickMax = Math.floor(lim[1] / tickSpacing) * tickSpacing;\n\n      // recompute maxTickNum\n      maxTickNum = Math.round((tickMax - tickMin + 1) / tickSpacing) + 1;\n\n      // create a sequence and return\n      ticks = [...Array(maxTickNum)].map((x, i) => tickMin + i * tickSpacing);\n\n      // if step is smaller than 1 round values to remove small decimals accidentiall added by JS\n      if (Math.abs(tickSpacing) < 1) {\n         const r = Math.pow(10, 1 + Math.round(-Math.log10(tickSpacing)));\n         ticks = ticks.map(v => Math.round((v + Number.EPSILON) * r) / r)\n      }\n\n      // make sure the ticks are not aligned with axes limits\n      return ticks.filter(x => x >= lim[0] & x <= lim[1]);\n   }\n\n   /** Computes a nice spacing value for a given range\n    * @param {numeric} localRange - a range (max - min)\n    * @param {boolean} round - round or not the fractions when computing the number\n    * @returns {numeric} the computed spacing value\n    */\n   function niceNum( localRange,  round) {\n\n      const exponent = Math.floor(Math.log10(localRange));\n      const fraction = localRange / Math.pow(10, exponent);\n      let niceFraction;\n\n      if (round) {\n         if (fraction < 1.5)\n            niceFraction = 1;\n         else if (fraction < 3)\n            niceFraction = 2;\n         else if (fraction < 7)\n            niceFraction = 5;\n         else\n            niceFraction = 10;\n      } else {\n         if (fraction <= 1)\n            niceFraction = 1;\n         else if (fraction <= 2)\n            niceFraction = 2;\n         else if (fraction <= 5)\n            niceFraction = 5;\n         else\n            niceFraction = 10;\n      }\n\n      return niceFraction * Math.pow(10, exponent);\n   }\n\n   /** Computes a scale level\n    * @param {numeric} width - width of plotting area in pixels\n    * @param {numeric} height - height of plotting area in pixels\n    * @returns {text} the scale level (\"small\", \"medium\" or \"large\")\n    */\n   function getScale(width, height) {\n      if (height < 300.2 || width < 300.2) return \"small\";\n      if (height < 600.2 || width < 600.2) return \"medium\";\n      return \"large\";\n   }\n\n   /* context with Axes constants, properties and methods to share with children */\n   let context = {\n\n      // methods\n      addXAxisMargins: addXAxisMargins,\n      addYAxisMargins: addYAxisMargins,\n      adjustXAxisLimits: adjustXAxisLimits,\n      adjustYAxisLimits: adjustYAxisLimits,\n      getAxisTicks: getAxisTicks,\n      scaleX: scaleX,\n      scaleY: scaleY,\n\n      // variables\n      isOk: isOk,\n      scale: scale,\n      width: width,\n      height: height,\n      xLim: xLim,\n      yLim: yLim,\n\n      // constants\n      LINE_STYLES: LINE_STYLES,\n      LABELS_MARGIN: LABELS_MARGIN,\n      TICK_NUM: TICK_NUM,\n   }\n\n\tsetContext('axes', context);\n\n   /* observer for the plotting area size */\n   var ro = new ResizeObserver(entries => {\n      console.log(\"resized\")\n      for (let entry of entries) {\n         const cr = entry.contentRect;\n         width.update(x => cr.width);\n         height.update(x => cr.height);\n         scale.update(x => getScale(cr.width, cr.height));\n      }\n   });\n\n   onMount(() => {\n      ro.observe(axesWrapper);\n   });\n\n\n   // this is reactive in case if limX and limY are interactively changed by parent script\n   $: if (!limX.some(v => v === undefined)) xLim.update(v => limX);\n   $: if (!limY.some(v => v === undefined)) yLim.update(v => limY);\n\n   // computes real margins in pixels based on current scale\n   $: margins = axesMargins.map(v => v * AXES_MARGIN_FACTORS[$scale]);\n\n   // computes status which tells that axes limits look fine and it is safe to draw\n   // the status is based on the axis limits validity\n   $: isOk.update(v =>\n      Array.isArray($yLim) &&\n      Array.isArray($xLim) &&\n      $xLim.length === 2 &&\n      $yLim.length === 2 &&\n      !$yLim.some(v => v === undefined) &&\n      !$xLim.some(v => v === undefined) &&\n      !$yLim.some(v => isNaN(v)) &&\n      !$xLim.some(v => isNaN(v)) &&\n      $xLim[1] !== $xLim[0] &&\n      $yLim[1] !== $yLim[0]\n   )\n\n   // computes coordinates for clip path box\n   $: cpx = $isOk ? scaleX($xLim, $xLim, $width) : [0, 1];\n   $: cpy = $isOk ? scaleY($yLim, $yLim, $height) : [1, 0];\n</script>\n\n\n<div class=\"plot {'plot_' + $scale}\"  class:plot_error=\"{!$isOk}\">\n\n   <!-- plot title and axis labels -->\n   {#if title !== \"\"}<div class=\"axes__title\">{title}</div>{/if}\n   {#if yLabel !== \"\"}<div class=\"axes__ylabel\"><span>{yLabel}</span></div>{/if}\n   {#if xLabel !== \"\"}<div class=\"axes__xlabel\"><span>{xLabel}</span></div>{/if}\n\n   <!-- axes (coordinate system) -->\n   <div class=\"axes-wrapper\" bind:this=\"{axesWrapper}\" >\n      <svg preserveAspectRatio=\"none\" class=\"axes\">\n\n         <!-- define clipping path -->\n         <defs>\n            <clipPath id=\"{clipPathID}\">\n               <rect x=\"{cpx[0]}\" y=\"{cpy[1]}\" width = \"{cpx[1] - cpx[0]}\" height=\"{cpy[0] - cpy[1]}\"></rect>\n            </clipPath>\n         </defs>\n\n         <!-- axis and box -->\n         <slot name=\"xaxis\"></slot>\n         <slot name=\"yaxis\"></slot>\n\n         <!-- main plot content -->\n         <g clip-path=\"url(#{clipPathID})\">\n            <slot></slot>\n         </g>\n\n         <!-- axis and box -->\n         <slot name=\"box\"></slot>\n\n      </svg>\n   </div>\n\n   {#if !$isOk}\n   <p class=\"message_error\">\n      Axes component was not properly initialized. <br />\n      Add plot series (check that coordinates are numeric) or define axes limits manually.\n   </p>\n   {/if}\n\n</div>\n\n<style>\n\n   /* Plot (main container) */\n   :global(.plot) {\n      font-family: Arial, Helvetica, sans-serif;\n\n      display: grid;\n      grid-template-columns: auto 1fr;\n      grid-template-rows: auto 1fr auto;\n      grid-template-areas:\n         \". title\"\n         \"ylab axes\"\n         \". xlab\";\n\n      box-sizing: border-box;\n      background: #fefefe;\n      min-width: 200px;\n      min-height: 200px;\n      width: 100%;\n      height: 100%;\n      padding: 0;\n      margin: 0;\n   }\n\n   :global(.plot_small) {\n      font-size: 11px;\n   }\n\n   :global(.plot_medium) {\n      font-size: 13px;\n   }\n\n   :global(.plot_large) {\n      font-size: 16px;\n   }\n\n   :global(.plot_error) {\n      display: flex;\n   }\n\n   :global(.plot_error > .axes-wrapper) {\n      display: none;\n   }\n\n   :global(.message_error) {\n      font-size: 1.2em;\n      color: crimson;\n      padding: 20px;\n      text-align: center;\n   }\n\n   /* Axes (coordinate system) */\n   :global(.axes-wrapper) {\n      grid-area: axes;\n      display: flex;\n      padding: 0;\n      margin: 0;\n   }\n\n   :global(.axes) {\n      box-sizing: border-box;\n      box-sizing: border-box;\n      padding: 0;\n      margin: 0;\n      max-height: 100%;\n      max-width: 100%;\n      min-height: 100%;\n      min-width: 100%;\n   }\n\n   :global(.axes__xlabel) {\n      grid-area: xlab;\n      font-size: 1.0em;\n      font-weight: 600;\n      padding: 0.25em;\n      text-align: center;\n   }\n\n\n   :global(.axes__ylabel) {\n      grid-area: ylab;\n      font-size: 1.0em;\n      font-weight: 600;\n      padding: 0.25em;\n      text-align: center;\n      vertical-align: middle;\n      display: flex;\n   }\n\n   :global(.axes__ylabel > span) {\n      width: 1.5em;\n      line-height: 1.5em;\n      display: inline-block;\n      writing-mode: vertical-rl;\n      transform: rotate(180deg);\n   }\n\n\n   :global(.axes__title) {\n      background: transparent;\n      grid-area: title;\n\n      font-size: 1.3em;\n      font-weight: bold;\n      line-height: 1.2em;\n      padding: 0.4em;\n      text-align: center;\n   }\n\n   /* Axis */\n   :global(.axis-labels) {\n      fill: #303030;\n      font-size: 0.95em;\n   }\n\n   /* Data labels */\n   :global(.labels) {\n      fill: #606060;\n      font-size: 0.90em;\n   }\n\n   :global(.labels) {\n      visibility: hidden;\n      transition:visibility 0.25s linear, opacity 0.25s linear;\n      opacity: 0;\n   }\n\n</style>","export const Colors = {\n   \"AXIS_LINE\": \"#303030\",\n   \"AXIS_TICK\": \"#606060\",\n   \"WHITE\":     \"#fff\",\n   \"BLACK\":     \"#000\",\n   \"GRAY\":      \"#909090\",\n   \"MIDDLEGRAY\": \"#dadada\",\n   \"LIGHTGRAY\": \"#f0f0f0\",\n   \"DARKGRAY\":  \"#606060\",\n\n   \"PRIMARY\": \"#2266ff\",\n   \"PRIMARY_TEXT\": \"#333\",\n}\n\n\n","<script>\n   import { getContext } from 'svelte';\n   import { Colors } from './Colors';\n\n   // input parameters\n   export let slot = \"xaxis\";          // slot the component must be placed in\n   export let ticks = undefined;       // vector with numeric tick positions in plot units\n   export let tickLabels = ticks;      // vector with labels for each tick\n   export let showGrid = false;        // logical, show or not grid lines\n\n   // set up tick mode\n   const tickMode = ticks === undefined ? \"auto\" : \"manual\";\n\n   /* sanity checks of input parameters */\n   if (slot !== \"xaxis\") {\n      throw(\"Component XAxis must have \\\"slot='xaxis'\\\" attribute.\")\n   }\n\n   if (ticks !== undefined && !Array.isArray(ticks)) {\n      throw(\"XAxis: 'ticks' must be a vector of numbers.\")\n   }\n\n   if (ticks !== undefined && !(Array.isArray(tickLabels) && tickLabels.length == ticks.length)) {\n      throw(\"XAxis: 'tickLabels' must be a vector of the same size as ticks.\")\n   }\n\n   /* styles for axis and grid lines */\n   const axisLineStyleStr = `stroke:${Colors.DARKGRAY};line-width:1px;`;\n   const gridLineStyleStr = `stroke:${Colors.MIDDLEGRAY};stroke-opacity:${showGrid?1:0};stroke-dasharray:2px;`;\n\n\n   // get axes context and adjust x margins\n   const axes = getContext('axes');\n   axes.addXAxisMargins();\n\n   // get reactive variables needed to compute coordinates\n   const xLim = axes.xLim;\n   const yLim = axes.yLim;\n   const axesWidth = axes.width;\n   const axesHeight = axes.height;\n   const scale = axes.scale;\n   const isOk = axes.isOk;\n\n   // reactive variables for coordinates of axis lines\n   $: x = axes.scaleX($xLim, $xLim, $axesWidth);\n   $: y = axes.scaleY($yLim, $yLim, $axesHeight);\n\n   // reactive variables for ticks and their coordinates\n   $: dy = $scale === \"small\" ? 7 : 10;\n   $: tickNum = axes.TICK_NUM[$scale];\n   $: ticks = tickMode === \"auto\" ? axes.getAxisTicks(undefined, $xLim, tickNum, true) : ticks;\n   $: tickLabels = tickMode === \"auto\" ? ticks : tickLabels;\n   $: ticksX = axes.scaleX(ticks, $xLim, $axesWidth);\n   $: ticksY = y === undefined ? undefined : [y[0], y[0] + dy];\n</script>\n\n{#if $isOk && x !== undefined && y !== undefined }\n   <g class=\"mdaplot__axis mdaplot__xaxis\">\n   {#each ticksX as tx, i}\n      <line x1=\"{tx}\" x2=\"{tx}\" y1=\"{y[0]}\" y2=\"{y[1]}\" style=\"{gridLineStyleStr}\"></line>\n      <line x1=\"{tx}\" x2=\"{tx}\" y1=\"{ticksY[0]}\" y2=\"{ticksY[1]}\" style=\"{axisLineStyleStr}\"></line>\n      <text x=\"{tx}\" y=\"{ticksY[1]}\" dx=\"0\" dy=\"{dy}\" class=\"mdaplot__axis-labels\" dominant-baseline=\"middle\" text-anchor=\"middle\">{tickLabels[i]}</text>\n   {/each}\n   <line x1=\"{x[0]}\" x2=\"{x[1]}\" y1=\"{y[0]}\" y2=\"{y[0]}\"  style=\"{axisLineStyleStr}\"></line>\n   </g>\n{/if}\n\n<style>\n</style>\n","<script>\n   import { getContext } from 'svelte';\n   import { Colors } from './Colors';\n\n   // input parameters\n   export let slot = \"yaxis\";          // slot the component must be placed in\n   export let ticks = undefined;       // vector with numeric tick positions in plot units\n   export let tickLabels = ticks;      // vector with labels for each tick\n   export let showGrid = false;        // logical, show or not grid lines\n   export let las = 1;\n\n   // set up tick mode\n   const tickMode = ticks === undefined ? \"auto\" : \"manual\";\n\n   // TODO: set up tick text translation\n   const transform = las > 1 ? \"\" : \"\";\n\n   /* sanity checks of input parameters */\n   if (slot !== \"yaxis\") {\n      throw(\"Component YAxis must have \\\"slot='yaxis'\\\" attribute.\")\n   }\n\n   if (ticks !== undefined && !Array.isArray(ticks)) {\n      throw(\"YAxis: 'ticks' must be a vector of numbers.\")\n   }\n\n   if (ticks !== undefined && !(Array.isArray(tickLabels) && tickLabels.length == ticks.length)) {\n      throw(\"YAxis: 'tickLabels' must be a vector of the same size as ticks.\")\n   }\n\n   /* styles for axis and grid lines */\n   const axisLineStyleStr = `stroke:${Colors.DARKGRAY};line-width:1px;`;\n   const gridLineStyleStr = `stroke:${Colors.MIDDLEGRAY};stroke-opacity:${showGrid?1:0};stroke-dasharray:2px;`;\n\n\n   // get axes context and adjust x margins\n   const axes = getContext('axes');\n   axes.addYAxisMargins();\n\n   // get reactive variables needed to compute coordinates\n   const xLim = axes.xLim;\n   const yLim = axes.yLim;\n   const axesWidth = axes.width;\n   const axesHeight = axes.height;\n   const scale = axes.scale;\n\n   // reactive variables for coordinates of axis lines\n   $: x = axes.scaleX($xLim, $xLim, $axesWidth);\n   $: y = axes.scaleY($yLim, $yLim, $axesHeight);\n\n   // reactive variables for ticks and their coordinates\n   $: dx = $scale === \"small\" ? -4 : -6;\n   $: tickNum = axes.TICK_NUM[$scale];\n   $: ticks = tickMode === \"auto\" ? axes.getAxisTicks(undefined, $yLim, tickNum, true) : ticks;\n   $: tickLabels = tickMode === \"auto\" ? ticks : tickLabels;\n   $: ticksY = axes.scaleY(ticks, $yLim, $axesHeight);\n   $: ticksX = x === undefined ? undefined : [x[0] + dx, x[0]];\n</script>\n\n{#if x !== undefined && y !== undefined }\n   <g class=\"mdaplot__axis mdaplot__yaxis\">\n   {#each ticksY as ty, i}\n      <line x1=\"{x[0]}\" x2=\"{x[1]}\" y1=\"{ty}\" y2=\"{ty}\" style=\"{gridLineStyleStr}\"></line>\n      <line x1=\"{ticksX[0]}\" x2=\"{ticksX[1]}\" y1=\"{ty}\" y2=\"{ty}\" style=\"{axisLineStyleStr}\" ></line>\n      <text x=\"{ticksX[0]}\" y=\"{ty}\" dx=\"{dx}\" dy=\"{0}\" {transform} style=\"background:red\" class=\"mdaplot__axis-labels\" dominant-baseline=\"middle\" text-anchor=\"end\">{tickLabels[i]}</text>\n   {/each}\n   <line x1=\"{x[0]}\" x2=\"{x[0]}\" y1=\"{y[0]}\" y2=\"{y[1]}\" style=\"{axisLineStyleStr}\" ></line>\n   </g>\n{/if}\n\n<style>\n</style>\n","<script>\n   import { getContext } from 'svelte';\n   import { Colors } from './Colors';\n\n   /* input parameters */\n\texport let left;\n   export let top;\n   export let width;\n   export let height;\n   export let labels = undefined;\n   export let faceColor = Colors.PRIMARY;\n   export let borderColor = faceColor;\n\n   // styles for bars and labels\n   const barsStyleStr = `fill:${faceColor};stroke:${borderColor};stroke-width: 1px;`;\n\n   // multiply width and height values if needed\n   if (!Array.isArray(left) || !Array.isArray(top) || left.length < 1 || left.length != top.length) {\n      throw(\"Rectangles: parameters 'left' and 'top' must be vectors of the same size.\")\n   }\n\n   // we make this reactive in case if left and right has been changed but not width\n   const n = left.length;\n   if (!Array.isArray(height)) height = Array(n).fill(height);\n   if (!Array.isArray(width)) width = Array(n).fill(width);\n\n   /* sanity check for input parameters */\n   if (top.length !== n || width.length !== n || height.length !== n) {\n      throw(\"Rectangles: x, y, w and h should have the same length (w and h can be single values).\")\n   }\n\n   if (labels !== undefined && (!Array.isArray(labels) || labels.length !== n)) {\n      throw(\"Rectangles: vector with labels should have the same length as vectors with x and y coordinates.\")\n   }\n\n   // get axes context and reactive variables needed to compute coordinates\n   const axes = getContext('axes');\n   const xLim = axes.xLim;\n   const yLim = axes.yLim;\n   const axesWidth = axes.width;\n   const axesHeight = axes.height;\n\n   // reactive variables for coordinates of data points in pixels\n   $: rx = axes.scaleX(left, $xLim, $axesWidth);\n   $: ry = axes.scaleY(top, $yLim, $axesHeight);\n   $: rw = axes.scaleX(width, $xLim, $axesWidth, true);\n   $: rh = axes.scaleY(height, $yLim, $axesHeight, true);\n</script>\n\n{#if rx !== undefined && ry !== undefined}\n   {#each left as v, i}\n      <rect x=\"{rx[i]}\" y=\"{ry[i]}\" width=\"{rw[i]}\" height=\"{rh[i]}\" style=\"{barsStyleStr}\"></rect>\n   {/each}\n{/if}\n\n<style>\n</style>\n","<script>\n   import { getContext } from 'svelte';\n   import { Colors } from './Colors';\n   import Rectangles from './Rectangles.svelte';\n\n   /* input parameters */\n   export let slot;\n\n   // check that the box is located in a correct slot\n   if (slot !== \"box\") {\n      throw(\"Component Box must have \\\"slot='box'\\\" attribute.\")\n   }\n\n   // get axes context and reactive variables needed to compute coordinates\n   const axes = getContext('axes');\n   const xLim = axes.xLim;\n   const yLim = axes.yLim;\n   const isOk = axes.isOk;\n\n   // reactive variables for coordinates of box points in pixels\n   $: left = [$xLim[0]];\n   $: top = [$yLim[1]];\n   $: width = [$xLim[1] - $xLim[0]];\n   $: height = [$yLim[1] - $yLim[0]];\n\n</script>\n\n{#if $isOk}\n   <g class=\"mdaplot__axes-box\">\n      <Rectangles {left} {top} {width} {height} borderColor=\"{Colors.DARKGRAY}\" faceColor=\"transparent\"></Rectangles>\n   </g>\n{/if}\n\n<style>\n</style>\n","<script>\n   import { getContext } from 'svelte';\n   import { Colors } from './Colors';\n\n   /* input parameters */\n\texport let xStart;\n   export let xEnd;\n   export let yStart;\n   export let yEnd;\n   export let lineColor = Colors.PRIMARY;\n   export let lineType = 1;\n   export let lineWidth = 1;\n\n   /* sanity check for input parameters */\n   if (!Array.isArray(xStart) || !Array.isArray(xEnd) || !Array.isArray(yStart) || !Array.isArray(yEnd)) {\n      throw(\"Segments: parameters 'xStart', 'yStart', 'xEnd' and 'yEnd' must be vectors.\")\n   }\n\n   const n = xStart.length;\n   if (xEnd.length !== n || yStart.length !== n || yEnd.length !== n) {\n      throw(\"Segments: parameters 'xStart', 'yStart', 'xEnd' and 'yEnd' should have the same length.\")\n   }\n\n   // get axes context and reactive variables needed to compute coordinates\n   const axes = getContext('axes');\n   const xLim = axes.xLim;\n   const yLim = axes.yLim;\n   const axesWidth = axes.width;\n   const axesHeight = axes.height;\n   const scale = axes.scale;\n\n   // reactive variables for coordinates of data points in pixels (and line style)\n   $: x1 = axes.scaleX(xStart, $xLim, $axesWidth);\n   $: x2 = axes.scaleX(xEnd, $xLim, $axesWidth);\n   $: y1 = axes.scaleY(yStart, $yLim, $axesHeight);\n   $: y2 = axes.scaleY(yEnd, $yLim, $axesHeight);\n   $: lineStyleStr = `stroke:${lineColor};stroke-width: ${lineWidth}px;stroke-dasharray:${axes.LINE_STYLES[$scale][lineType - 1]}`;\n\n</script>\n\n{#if x1 !== undefined && y1 !== undefined}\n   {#each x1 as v, i}\n      <line x1=\"{x1[i]}\" x2=\"{x2[i]}\" y1=\"{y1[i]}\" y2=\"{y2[i]}\" style=\"{lineStyleStr}\"></line>\n   {/each}\n{/if}\n\n<style>\n</style>\n","<script>\n   import { getContext } from 'svelte';\n   import { Colors } from './Colors';\n\n   /* input parameters */\n\texport let xValues;\n   export let yValues;\n   export let labels;\n   export let pos = 0;\n   export let faceColor = Colors.PRIMARY_TEXT;\n   export let borderColor = \"transparent\";\n   export let borderWidth = 0;\n   export let textSize = 1;\n\n   // text-anchor values depending on position\n   const textAnchors = [\"middle\", \"middle\", \"start\", \"middle\", \"end\"];\n\n   /* sanity check for input parameters */\n   if (!Array.isArray(xValues) || !Array.isArray(yValues) || xValues.length !== yValues.length) {\n      throw(\"TextLabels: parameters 'xValues' and 'yValues' must be vectors of the same length.\")\n   }\n\n   // multiply labels values if needed\n   $: {\n      const n = xValues.length;\n      if (!Array.isArray(labels)) labels = Array(n).fill(labels);\n\n      // workaround for an issue when xValues and yValues are changed in parent app\n      // but array of labels is still the same as in the\n      if (labels.length != n) labels = Array(n).fill(labels[0]);\n\n      // check that the length of labels vector is correct\n      if (labels.length !== n) {\n         throw(\"TextLabels: parameter 'labels' must be a single text value or a vector of the same size as 'x' and 'y'.\")\n      }\n   }\n\n   // get axes context and reactive variables needed to compute coordinates\n   const axes = getContext('axes');\n   const xLim = axes.xLim;\n   const yLim = axes.yLim;\n   const axesWidth = axes.width;\n   const axesHeight = axes.height;\n   const scale = axes.scale;\n\n   // reactive variables for coordinates of data points in pixels\n   $: x = axes.scaleX(xValues, $xLim, $axesWidth);\n   $: y = axes.scaleY(yValues, $yLim, $axesHeight);\n   $: dx = [0, 0, 1, 0, -1][pos] * axes.LABELS_MARGIN[$scale];\n   $: dy = [0, 1, 0, -1, 0][pos] * axes.LABELS_MARGIN[$scale];\n\n   // styles for bars and labels\n   $: textStyleStr = `fill:${faceColor};stroke-width:${borderWidth}px;stroke:${borderColor};font-size:${textSize}em;`;\n</script>\n\n{#if x !== undefined && y !== undefined}\n   {#each x as v, i}\n      <text style=\"{textStyleStr}\" x=\"{x[i]}\" y=\"{y[i]}\" dx=\"{dx}\" dy=\"{dy}\" dominant-baseline=\"middle\" text-anchor={textAnchors[pos]}>{@html labels[i]}</text>\n   {/each}\n{/if}\n\n<style>\n</style>\n","<script>\n   import { getContext } from 'svelte';\n   import { Colors } from './Colors';\n   import { max, mrange, diff } from 'stat-js'\n   import Rectangles from './Rectangles.svelte';\n\n   /* input parameters */\n\texport let xValues;\n   export let yValues;\n   export let barWidth = 0.8;\n   export let title = \"\";\n   export let faceColor = Colors.PRIMARY;\n   export let borderColor = Colors.PRIMARY;\n   export let showLabels = \"no\"; // can be \"no\", \"hover\", \"always\"\n\n   // TODO: implemented later\n   //export let labels = yValues;\n\n   /* internal parameters */\n   let width;\n   let left;\n   let top;\n   let height;\n\n   // to access shared parameters and methods from Axes\n   const axes = getContext('axes');\n\n   /* reactive actions related to x-values, fires when there are changes in:\n    * - xValues\n    * - barWidth\n    */\n   $: {\n\n      if (!Array.isArray(xValues)) {\n         throw(\"BarSeries: parameter 'xValues' must be a numeric vector.\");\n      }\n\n      if (barWidth <= 0 || barWidth > 1) {\n         throw(\"BarSeries: parameters 'barWidth' should be between 0 and 1.\");\n      }\n\n      const xValuesRange = mrange(xValues, 0.1);\n      xValuesRange[0] = xValuesRange[0] - barWidth * diff(xValuesRange) / xValues.length * 0.5\n      xValuesRange[1] = xValuesRange[1] + barWidth * diff(xValuesRange) / xValues.length * 0.5\n      axes.adjustXAxisLimits(xValuesRange);\n\n      width = Array(xValues.length).fill(max(diff(xValues)) * barWidth);\n      left = xValues.map((v, i) => v - width[i]/2);\n   }\n\n   /* reactive actions related to y-values, fires when there are changes in:\n    * - yValues\n    */\n   $: {\n\n      if (!Array.isArray(yValues) || xValues.length != yValues.length) {\n         throw(\"BarSeries: parameter 'yValues' must be a numeric vector of the same length as 'xValues'.\");\n      }\n\n      const yValuesRange = mrange(yValues, showLabels === \"no\" ? 0.05 : 0.20);\n      axes.adjustYAxisLimits(yValuesRange);\n\n      top = yValues.map(v => v > 0 ? v : 0);\n      height = yValues.map(v => Math.abs(v));\n   }\n</script>\n\n<g class=\"series series_bar\" title=\"{title}\">\n   <Rectangles {left} {top} {width} {height} {borderColor} {faceColor} />\n</g>\n\n<style>\n   :global(.series_bar > rect){\n      stroke-width: 1px;\n   }\n\n   :global(.series_bar > rect:hover){\n      opacity: 90%;\n   }\n</style>\n","<script>\n\n   import { getContext } from 'svelte';\n   import { mrange } from 'stat-js'\n   import { Colors } from './Colors';\n   import TextLabels from './TextLabels.svelte';\n\n   // input parameters\n\texport let xValues;\n   export let yValues;\n   export let marker = 1\n   export let title = \"\";\n   export let faceColor = \"transparent\";\n   export let borderColor = Colors.PRIMARY;\n   export let borderWidth = 1;\n   export let markerSize = 1;\n\n   // TODO: implement later\n   //export let labels = yValues;\n   //export let showLabels = \"no\"; // can be \"no\", \"hover\", \"always\"\n\n   const markers = [\"●\", \"◼\", \"▲\", \"▼\", \"⬥\", \"+\", \"*\", \"⨯\"];\n   let markerSymbol;\n\n   /* sanity check of input parameters */\n   if (typeof(marker) !== \"number\" || marker < 1 || marker > markers.length) {\n      throw(`ScatterSeries: parameter 'marker' must be a number from 1 to ${markers.length}.\"`);\n   }\n\n   // to access shared parameters and methods from Axes\n   const axes = getContext('axes');\n\n   /* reactive actions related to x-values, fires when there are changes in:\n    * - xValues\n    * - marker\n    */\n   $: {\n      if (!Array.isArray(xValues)) {\n         throw(\"ScatterSeries: parameter 'xValues' must be a numeric vector.\");\n      }\n\n      const xValuesRange = mrange(xValues, 0.05);\n      axes.adjustXAxisLimits(xValuesRange);\n\n      markerSymbol = \"\";\n      markerSymbol = markers[marker - 1];\n   }\n\n   /* reactive actions related to y-values, fires when there are changes in:\n    * - yValues\n    */\n   $: {\n      if (!Array.isArray(yValues) || xValues.length != yValues.length) {\n         throw(\"BarSeries: parameter 'yValues' must be a numeric vector of the same length as 'xValues'.\");\n      }\n\n      const yValuesRange = mrange(yValues, 0.05);\n      axes.adjustYAxisLimits(yValuesRange);\n   }\n\n</script>\n\n<g class=\"series series_scatter\" title=\"{title}\">\n   <TextLabels {xValues} {yValues} labels=\"{markerSymbol}\" textSize=\"{markerSize}\" {faceColor} {borderColor} {borderWidth} />\n</g>\n\n<style>\n:global(.marker) {\n   font-size: 1em;\n   cursor: default;\n}\n\n:global(.marker:hover) {\n   opacity: 90%;\n}\n\n:global(.series_scatter > *:hover + .labels_hover) {\n   visibility: visible;\n   opacity: 1;\n}\n</style>\n","<script>\n\n   import { getContext } from 'svelte';\n   import { mrange } from 'stat-js'\n   import { Colors } from './Colors';\n\n   // input parameters\n\texport let xValues;\n   export let yValues;\n   export let title = \"\";\n   export let lineWidth = 1;\n   export let lineColor = Colors.PRIMARY;\n   export let lineType = 1;\n\n   /* sanity check of input parameters */\n   if (!Array.isArray(xValues) || !Array.isArray(yValues) || xValues.length != yValues.length) {\n      throw(\"LineSeries: parameters 'xValues' and 'yValues' must be numeric vectors of the same length.\");\n   }\n\n   // compute ranges for x and y values\n   const xValuesRange = mrange(xValues, 0.05);\n   const yValuesRange = mrange(yValues, 0.05);\n\n   // get axes context and adjust axes limits\n   const axes = getContext('axes');\n   axes.adjustXAxisLimits(xValuesRange);\n   axes.adjustYAxisLimits(yValuesRange);\n\n   // get reactive variables needed to compute coordinates\n   const xLim = axes.xLim;\n   const yLim = axes.yLim;\n   const axesWidth = axes.width;\n   const axesHeight = axes.height;\n   const scale = axes.scale;\n\n   // reactive variables for coordinates of data points in pixels\n   $: x = axes.scaleX(xValues, $xLim, $axesWidth);\n   $: y = axes.scaleY(yValues, $yLim, $axesHeight);\n   $: p = x !== undefined && y !== undefined ? x.map((v, i) => `${v},${y[i]}`).join(' ') : undefined;\n   $: lineStyleStr = `fill:transparent;stroke:${lineColor};stroke-width: ${lineWidth}px;stroke-dasharray:${axes.LINE_STYLES[$scale][lineType - 1]}`;\n</script>\n\n{#if p !== undefined}\n   <g class=\"series lineseries\" style=\"{lineStyleStr}\" title=\"{title}\">\n   <polyline class=\"line\" points=\"{p}\"/>\n   </g>\n{/if}\n\n<style>\n</style>\n","<script>\n   import {BarSeries} from 'svelte-plots-basic';\n   import {count, sum, mids, split} from 'stat-js';\n\n   export let values = [];\n   export let nBins = 10;\n   export let faceColor = \"#a0a0a0\";\n   export let borderColor = faceColor;\n   export let barWidth = 1;\n   export let freq = true;\n\n   // these can be provided directly by user instead of x and y values\n   export let bins = undefined;\n   export let counts = undefined;\n\n   let xValues, yValues\n\n   $: {\n      if ((bins === undefined || counts === undefined) && (!Array.isArray(values) || values.length === 0)) {\n         throw(\"Histogram: either vector with values or vectors with bins and counts must be provided.\");\n      }\n\n      if ((counts !== undefined) && bins.length !== (counts.length + 1)) {\n         throw(\"Histogram: number of values in 'counts' should be by one smaller than number of values in 'bins'\");\n      }\n\n      const b = bins === undefined ? split(values, nBins) : bins;\n      xValues = mids(b);\n      yValues = counts === undefined ? count(values, b) : counts;\n\n      // compute densities instead of counts if required\n      if (freq === false) {\n         const n = sum(yValues);\n         const bw = b[1] - b[0];\n         yValues = yValues.map(v => (v / n) / bw);\n      }\n   }\n</script>\n\n<BarSeries\n   {xValues}\n   {yValues}\n   {barWidth}\n   {faceColor}\n   {borderColor}\n/>\n\n","<script>\n   import {Rectangles, Segments, TextLabels} from 'svelte-plots-basic';\n   import {min, max, quantile, getOutliers} from 'stat-js';\nimport { getContext } from 'svelte';\n\n   export let values = [];\n   export let boxPosition;\n   export let boxSize = boxPosition * 0.05;\n   export let horizontal = false;\n   export let faceColor = \"white\";\n   export let borderColor = \"blue\";\n\n   // can be provided by user or computed based on values\n   export let quartiles = [];\n   export let outliers = [];\n   export let range = [];\n\n   // coordinates of box, range segments and outliers\n   let bl, bw, bh, bt;\n   let xs, xe, ys, ye;\n   let px, py;\n\n   // to access shared parameters and methods from Axes\n   const axes = getContext('axes');\n\n   // compute quartiles and IQR\n   $: Q1 = quartiles.length === 3 ? quartiles[0] : quantile(values, 0.25);\n   $: Q2 = quartiles.length === 3 ? quartiles[1] : quantile(values, 0.50);\n   $: Q3 = quartiles.length === 3 ? quartiles[2] : quantile(values, 0.75);\n   $: IQR = Q3 - Q1;\n   $: out = values.length === 0 ? outliers : getOutliers(values, Q1, Q3);\n   $: mn = range.length === 2 ? range[0] : min(out.length > 0 ? values.filter(v => !out.some(o => o == v)) : values);\n   $: mx = range.length === 2 ? range[1] : max(out.length > 0 ? values.filter(v => !out.some(o => o == v)) : values);\n\n   $: {\n      if (horizontal === true) {\n         bl = Q1;\n         bt = boxPosition + boxSize/2;\n         bw = IQR;\n         bh = boxSize;\n         xs = [mn, Q3, Q2];\n         xe = [Q1, mx, Q2];\n         ys = [boxPosition, boxPosition, bt];\n         ye = [boxPosition, boxPosition, bt - bh];\n         px = out;\n         py = Array(out.length).fill(boxPosition);\n\n         // correct axis limits\n         const xLimMin = min(out.concat([mn]));\n         const xLimMax = max(out.concat([mx]));\n         const dXLim = (xLimMax - xLimMin) * 0.05;\n         axes.adjustXAxisLimits([xLimMin - dXLim, xLimMax + dXLim]);\n         axes.adjustYAxisLimits([boxPosition - boxSize/(1.5), boxPosition + boxSize/(1.5)]);\n\n      } else {\n         bl = boxPosition - boxSize/2;\n         bt = Q3;\n         bw = boxSize;\n         bh = IQR;\n         ys = [mn, Q3, Q2];\n         ye = [Q1, mx, Q2];\n         xs = [boxPosition, boxPosition, bl];\n         xe = [boxPosition, boxPosition, bl + bw];\n         py = out;\n         px = Array(out.length).fill(boxPosition);\n\n         // correct axis limits\n         const yLimMin = min(out.concat([mn]));\n         const yLimMax = max(out.concat([mx]));\n         const dYLim = (yLimMax - yLimMin) * 0.05;\n         axes.adjustYAxisLimits([yLimMin - dYLim, yLimMax + dYLim]);\n         axes.adjustXAxisLimits([boxPosition - boxSize/(1.5), boxPosition + boxSize/(1.5)]);\n\n      }\n   }\n</script>\n\n<Rectangles\n   left={[bl]}\n   top={[bt]}\n   width={[bw]}\n   height=\"{[bh]}\"\n   {faceColor}\n   {borderColor}\n/>\n<Segments xStart=\"{xs}\" xEnd=\"{xe}\" yStart=\"{ys}\" yEnd=\"{ye}\" lineColor={borderColor} />\n{#if out.length > 0}\n<TextLabels xValues=\"{px}\" yValues=\"{py}\" labels=\"●\" {faceColor} {borderColor} borderWidth=\"{1}\" />\n{/if}\n","<script>\n   import {Axes, XAxis, ScatterSeries} from 'svelte-plots-basic';\n   import {BoxAndWhiskers, Histogram} from 'svelte-plots-stat';\n\n   export let sample;\n   export let population;\n   export let sampleColor = \"blue\";\n   export let populationColor = \"#a0a0a0\";\n\n</script>\n\n<Axes limX=\"{population.hist.xLim}\" limY=\"{population.hist.yLim}\" xLabel=\"{population.title}\">\n   <Histogram bins={population.hist.bins} counts=\"{population.hist.counts}\" faceColor=\"#f0f0f0\" borderColor=\"#e0e0e0\" />\n   <BoxAndWhiskers quartiles={population.bw.quartiles} range={population.bw.range} outliers={population.bw.outliers} boxPosition=\"{population.bw.positions[0]}\" boxSize={population.bw.size} borderColor=\"{populationColor}\" horizontal=\"{true}\" />\n\n   {#if sample.x.length >= 3 && sample.x.length <= 30}\n   <ScatterSeries xValues={sample.x} yValues={sample.y} faceColor=\"white\" borderColor=\"{sampleColor}\" borderWidth=\"{1.5}\" />\n   <BoxAndWhiskers values={sample.x} boxPosition=\"{population.bw.positions[1]}\" boxSize={population.bw.size} borderColor=\"{sampleColor}\" horizontal=\"{true}\" />\n   {/if}\n   <XAxis slot=\"xaxis\" />\n</Axes>\n","<script>\n   import {Axes, XAxis, YAxis, Box, LineSeries, ScatterSeries} from 'svelte-plots-basic';\n\n   export let sample;\n   export let population;\n   export let sampleColor;\n   export let populationColor;\n</script>\n\n<Axes limY=\"{[-0.05, 1.05]}\" limX=\"{population.hist.xLim}\" xLabel=\"{population.title}\" yLabel=\"Percentiles\">\n   <LineSeries xValues={population.ps.xValues} yValues={population.ps.yValues} lineColor=\"{populationColor}\" />\n\n   {#if sample.x.length >= 3 && sample.x.length <= 30}\n   <LineSeries xValues={sample.x} yValues={sample.p} lineColor=\"{sampleColor}\" />\n   <ScatterSeries xValues={sample.x} yValues={sample.p} faceColor=\"white\" borderColor=\"{sampleColor}\" marker={1} borderWidth=\"{1.5}\" />\n   {/if}\n\n   <XAxis slot=\"xaxis\" showGrid=\"{true}\" />\n   <YAxis slot=\"yaxis\" showGrid=\"{true}\" />\n   <Box slot=\"box\" />\n</Axes>\n\n","<script>\n   import {max, count, rnorm, runif, split, quantile, min, getOutliers} from 'stat-js';\n\n   // common blocks\n   import {default as StatApp} from '../../shared/StatApp.svelte';\n   import AppControlArea from '../../shared/AppControlArea.svelte';\n   import AppControlButton from '../../shared/AppControlButton.svelte';\n   import AppControlSwitch from '../../shared/AppControlSwitch.svelte';\n   import AppControlRange from '../../shared/AppControlRange.svelte';\n\n   // app blocks\n   import HistPlot from \"./AppHistPlot.svelte\";\n   import PercentilePlot from \"./AppPercentilePlot.svelte\";\n\n   let sampleSize = 6;\n   let variableName = \"Height\";\n\n   const nBins = 30;\n   const populationSize = 50000;\n   const sampleColor = \"blue\";\n   const populationColor = \"#a0a0a0\";\n\n   // function for generation of values\n   const getHeightValues = function(n) {\n      const n1 = Math.round(n/2);\n      const n2 = n - n1;\n      return rnorm(n1, 160, 7).concat(rnorm(n2, 178, 6)).sort((a, b) => a - b);\n   }\n\n   const getIQValues = function(n) {\n      return rnorm(n, 110, 5).sort((a, b) => a - b);\n   }\n\n   const getAgeValues = function(n) {\n      return runif(n, 18, 65).map( v => Math.round(v * 10) / 10).sort((a, b) => a - b);\n   }\n\n   const takeNewSample = () => {\n      sample = getSample(population, sampleSize);\n   }\n\n   const createPopulation = function(title, generator, xLim) {\n\n      const values = generator(populationSize);\n\n      const bins = split(values, nBins);\n      const counts = count(values, bins);\n      const countsMode = max(counts);\n\n      const Q1 = quantile(values, 0.25);\n      const Q2 = quantile(values, 0.50);\n      const Q3 = quantile(values, 0.75);\n      const outliers = getOutliers(values, Q1, Q3);\n\n      const mn = min(outliers.length > 0 ? values.filter(v => !outliers.some(o => o == v)) : values);\n      const mx = max(outliers.length > 0 ? values.filter(v => !outliers.some(o => o == v)) : values);\n\n      const gmn = min(values);\n      const gmx = max(values);\n      const dx = (gmx - gmn) * 0.05;\n\n      return {\n         generator: generator,\n         title: title,\n         hist: {\n            xLim: [gmn - dx, gmx + dx],\n            yLim: [0, 1.3],\n            counts: counts.map(v => v / countsMode),\n            bins: bins\n         },\n         bw: {\n            positions: [1.2, 1.1],\n            size: 0.05,\n            quartiles: [Q1, Q2, Q3],\n            range: [mn, mx],\n            outliers: outliers\n         },\n         ps: {\n            position: 0.075,\n            xValues: values.filter((v, i) => i % 10 == 0),\n            yValues: Array.from({length: populationSize}, (v, i) => i / populationSize).filter((v, i) => i % 10 == 0)\n         }\n      };\n   }\n\n   const populations = {\n      Height: createPopulation(\"Height, cm\", getHeightValues),\n      Age: createPopulation(\"Age, years\", getAgeValues),\n      IQ: createPopulation(\"IQ\", getIQValues),\n   };\n\n   const getSample = function(population, size) {\n      size = Math.round(size);\n      return({x: population.generator(size), y: Array.from({length: size}, () => population.ps.position), p: Array.from({length: size}, (v, i) => (i + 0.5) / sampleSize)});\n   }\n\n   $: population = populations[variableName];\n   $: sample = getSample(population, sampleSize);\n   $: errormsg = sampleSize < 3 || sampleSize > 30 ? \"Sample size should be between 3 and 30.\" : \"\";\n\n</script>\n\n<StatApp>\n   <div class=\"app-layout\">\n\n      <!-- plot with histogram -->\n      <div class=\"app-histogram-area\">\n         <HistPlot {sample} {population} {sampleColor} {populationColor} />\n      </div>\n\n      <!-- plot with population and sample percentiles -->\n      <div class=\"app-percentile-area\">\n         <PercentilePlot {sample} {population} {sampleColor} {populationColor} />\n      </div>\n\n      <!-- control elements -->\n      <div class=\"app-controls-area\">\n         <AppControlArea {errormsg}>\n            <AppControlSwitch id=\"variableName\" label=\"Select property\" bind:value={variableName} options={Object.keys(populations)} />\n            <AppControlRange id=\"sampleSize\" label=\"Sample size\" bind:value={sampleSize} min={3} max={30} step={1} decNum={0} />\n            <AppControlButton id=\"newSample\" label=\"Sample\" text=\"Take new\" on:click={takeNewSample} />\n         </AppControlArea>\n      </div>\n\n   </div>\n\n   <div slot=\"help\">\n      <h2>Samples and populations</h2>\n      <p>This app helps you to investigate how different a sample can be when it is being randomly taken from corresponding population.</p>\n      <p>You can investigate this difference for one of the three parameters: Height, Age and IQ of a population of people. Each parameter\n         has own distribution. Thus, <em>Age</em> is distributed\n         uniformly, <em>IQ</em> is distributed normally and <em>Height</em> has distribution with two peaks (modes). You can also see how\n         sample size influences the difference.\n      </p>\n      <p>Plot series made for a population (histogram and boxplot on the left part and percentile plot on the right) are shown using gray colors. The size of the population is <em>N</em> = 50&nbsp;000. The plot series for current sample are shown in blue. A new sample is taken when you change any of the controls — select the population parameter or the sample size as well as when you force to take a new sample by clicking the specific button.\n      </p>\n\n   </div>\n</StatApp>\n\n<style>\n\n.app-layout {\n   width: 100%;\n   height: 100%;\n   position: relative;\n\n   display: grid;\n   grid-template-columns: 3fr 2fr;\n   grid-template-rows: 3fr 1fr;\n   grid-template-areas:\n      \"plot1 plot2\"\n      \"plot1 controls\";\n}\n\n.app-histogram-area {\n   grid-area: plot1;\n   box-sizing: border-box;\n   height: 100%;\n   width: 100%;\n}\n\n.app-percentile-area {\n   grid-area: plot2;\n   box-sizing: border-box;\n   height: 100%;\n   width: 100%;\n}\n\n.app-controls-area {\n   padding-top: 20px;\n   padding-left: 20px;\n   grid-area: controls;\n}\n\n</style>","import App from './App.svelte';\n\nconst app = new App({\n\ttarget: document.getElementById(\"mdatools-app-container\"),\n});\n\nexport default app;"],"names":["noop","run","fn","blank_object","Object","create","run_all","fns","forEach","is_function","thing","safe_not_equal","a","b","component_subscribe","component","store","callback","$$","on_destroy","push","callbacks","unsub","subscribe","unsubscribe","create_slot","definition","ctx","$$scope","slot_ctx","get_slot_context","tar","src","k","assign","slice","update_slot","slot","slot_definition","dirty","get_slot_changes_fn","get_slot_context_fn","slot_changes","lets","undefined","merged","len","Math","max","length","i","get_slot_changes","slot_context","p","append","target","node","appendChild","insert","anchor","insertBefore","detach","parentNode","removeChild","destroy_each","iterations","detaching","d","element","name","document","createElement","svg_element","createElementNS","text","data","createTextNode","space","empty","listen","event","handler","options","addEventListener","removeEventListener","attr","attribute","value","removeAttribute","getAttribute","setAttribute","set_data","wholeText","set_input_value","input","set_style","key","important","style","setProperty","toggle_class","toggle","classList","current_component","set_current_component","get_current_component","Error","onMount","on_mount","createEventDispatcher","type","detail","e","createEvent","initCustomEvent","custom_event","call","getContext","context","get","dirty_components","binding_callbacks","render_callbacks","flush_callbacks","resolved_promise","Promise","resolve","update_scheduled","add_render_callback","add_flush_callback","flushing","seen_callbacks","Set","flush","update","pop","has","add","clear","fragment","before_update","after_update","outroing","outros","group_outros","r","c","check_outros","transition_in","block","local","delete","transition_out","o","destroy_block","lookup","bind","index","props","bound","create_component","mount_component","customElement","m","new_on_destroy","map","filter","destroy_component","make_dirty","then","fill","init","instance","create_fragment","not_equal","parent_component","on_disconnect","Map","skip_bound","ready","ret","rest","hydrate","nodes","Array","from","childNodes","children","l","intro","SvelteComponent","[object Object]","this","$destroy","indexOf","splice","$$props","obj","$$set","keys","min","x","n","Number","POSITIVE_INFINITY","NEGATIVE_INFINITY","quantile","decreasing","sort","isArray","out","v","h","n1","floor","n2","ceil","q","mrange","margin","mn","split","Erro","mx","step","count","bins","counts","j","diff","y","getOutliers","Q1","Q3","IQR","bl","bu","rnorm","mu","sigma","sqrt","log","random","PI","sin","appContainer","showHelp","scale","ro","ResizeObserver","entries","entry","cr","contentRect","width","height","observe","errormsg","id","label","old_blocks","get_key","dynamic","list","destroy","create_each_block","next","get_context","old_indexes","new_blocks","new_lookup","deltas","child_ctx","set","abs","will_move","did_move","first","new_block","old_block","new_key","old_key","option","toFixed","decNum","dispatch","sliderElement","sliderContainer","isDragging","computeValue","tmpValue","round","getRelativePosition","sliderRect","getBoundingClientRect","parentRect","minX","maxX","clientX","subscriber_queue","writable","start","stop","subscribers","new_value","run_queue","s","invalidate","subscriber","niceNum","localRange","exponent","log10","fraction","pow","niceFraction","getScale","limX","limY","title","xLabel","yLabel","multiSeries","AXES_MARGIN_FACTORS","small","medium","large","clipPathID","axesWrapper","axesMargins","xLim","yLim","isOk","adjustAxisLimits","lim","newLim","adjustedLim","scaleX","doSizeScale","$isOk","margins","scaleY","setContext","addXAxisMargins","addYAxisMargins","adjustXAxisLimits","some","adjustYAxisLimits","getAxisTicks","ticks","maxTickNum","range","tickSpacing","tickMin","tickMax","EPSILON","LINE_STYLES","LABELS_MARGIN","TICK_NUM","console","$scale","$yLim","$xLim","isNaN","cpx","$width","cpy","$height","Colors","AXIS_LINE","AXIS_TICK","WHITE","BLACK","GRAY","MIDDLEGRAY","LIGHTGRAY","DARKGRAY","PRIMARY","PRIMARY_TEXT","tickLabels","showGrid","tickMode","axisLineStyleStr","gridLineStyleStr","axes","axesWidth","axesHeight","$axesWidth","$axesHeight","dy","tickNum","ticksX","ticksY","las","dx","left","top","labels","faceColor","borderColor","barsStyleStr","rx","ry","rw","rh","xStart","xEnd","yStart","yEnd","lineColor","lineType","lineWidth","x1","x2","y1","y2","lineStyleStr","xValues","yValues","pos","borderWidth","textSize","textStyleStr","barWidth","showLabels","xValuesRange","yValuesRange","marker","markerSize","markers","markerSymbol","join","values","nBins","freq","reduce","t","sum","bw","bh","bt","xs","xe","ys","ye","px","py","boxPosition","boxSize","horizontal","quartiles","outliers","Q2","xLimMin","concat","xLimMax","dXLim","yLimMin","yLimMax","dYLim","positions","size","hist","sample","population","sampleColor","populationColor","ps","populationSize","sampleSize","variableName","createPopulation","generator","countsMode","gmn","gmx","position","populations","Height","Age","runif","IQ","getSample","getElementById"],"mappings":"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"}