{"version":3,"file":"asta-b309.js","sources":["../../node_modules/svelte/internal/index.mjs","../../../mdatools-js/distributions/index.js","../../../mdatools-js/decomp/index.js","../../../mdatools-js/arrays/index.js","../../../mdatools-js/stat/index.js","../../node_modules/svelte/store/index.mjs","../../../svelte-plots-basic/src/Utils.js","../../../svelte-plots-basic/src/3d/Axes.svelte","../../../svelte-plots-basic/src/Colors.js","../../../svelte-plots-basic/src/3d/AxisLines.svelte","../../../svelte-plots-basic/src/3d/TextLabels.svelte","../../../svelte-plots-basic/src/3d/AxisTickLabels.svelte","../../../svelte-plots-basic/src/3d/Axis.svelte","../../../svelte-plots-basic/src/3d/XAxis.svelte","../../../svelte-plots-basic/src/3d/YAxis.svelte","../../../svelte-plots-basic/src/3d/ZAxis.svelte","../../../svelte-plots-basic/src/3d/Segments.svelte","../../../svelte-plots-basic/src/3d/Points.svelte","../../shared/StatApp.svelte","../../shared/graasta.js","../../shared/plots/3DPlotAxes.svelte","../../shared/plots/MLRModelPlot.svelte","../../shared/controls/AppControlArea.svelte","../../shared/controls/AppControl.svelte","../../shared/controls/AppControlSelect.svelte","../../shared/controls/AppControlButton.svelte","../src/PointLineEquation.svelte","../../../svelte-plots-basic/src/2d/Axes.svelte","../../../svelte-plots-basic/src/2d/AxisLines.svelte","../../../svelte-plots-basic/src/2d/AxisTickLabels.svelte","../../../svelte-plots-basic/src/2d/Axis.svelte","../../../svelte-plots-basic/src/2d/XAxis.svelte","../../../svelte-plots-basic/src/2d/YAxis.svelte","../../../svelte-plots-basic/src/2d/Rectangles.svelte","../../../svelte-plots-basic/src/2d/Bars.svelte","../../../svelte-plots-basic/src/2d/Points.svelte","../src/AppCoeffsPlot.svelte","../src/App.svelte","../src/main.js"],"sourcesContent":["function noop() { }\nconst identity = x => x;\nfunction assign(tar, src) {\n    // @ts-ignore\n    for (const k in src)\n        tar[k] = src[k];\n    return tar;\n}\n// Adapted from https://github.com/then/is-promise/blob/master/index.js\n// Distributed under MIT License https://github.com/then/is-promise/blob/master/LICENSE\nfunction is_promise(value) {\n    return !!value && (typeof value === 'object' || typeof value === 'function') && typeof value.then === 'function';\n}\nfunction add_location(element, file, line, column, char) {\n    element.__svelte_meta = {\n        loc: { file, line, column, char }\n    };\n}\nfunction run(fn) {\n    return fn();\n}\nfunction blank_object() {\n    return Object.create(null);\n}\nfunction run_all(fns) {\n    fns.forEach(run);\n}\nfunction is_function(thing) {\n    return typeof thing === 'function';\n}\nfunction safe_not_equal(a, b) {\n    return a != a ? b == b : a !== b || ((a && typeof a === 'object') || typeof a === 'function');\n}\nlet src_url_equal_anchor;\nfunction src_url_equal(element_src, url) {\n    if (!src_url_equal_anchor) {\n        src_url_equal_anchor = document.createElement('a');\n    }\n    src_url_equal_anchor.href = url;\n    return element_src === src_url_equal_anchor.href;\n}\nfunction not_equal(a, b) {\n    return a != a ? b == b : a !== b;\n}\nfunction is_empty(obj) {\n    return Object.keys(obj).length === 0;\n}\nfunction validate_store(store, name) {\n    if (store != null && typeof store.subscribe !== 'function') {\n        throw new Error(`'${name}' is not a store with a 'subscribe' method`);\n    }\n}\nfunction subscribe(store, ...callbacks) {\n    if (store == null) {\n        return noop;\n    }\n    const unsub = store.subscribe(...callbacks);\n    return unsub.unsubscribe ? () => unsub.unsubscribe() : unsub;\n}\nfunction get_store_value(store) {\n    let value;\n    subscribe(store, _ => value = _)();\n    return value;\n}\nfunction component_subscribe(component, store, callback) {\n    component.$$.on_destroy.push(subscribe(store, callback));\n}\nfunction create_slot(definition, ctx, $$scope, fn) {\n    if (definition) {\n        const slot_ctx = get_slot_context(definition, ctx, $$scope, fn);\n        return definition[0](slot_ctx);\n    }\n}\nfunction get_slot_context(definition, ctx, $$scope, fn) {\n    return definition[1] && fn\n        ? assign($$scope.ctx.slice(), definition[1](fn(ctx)))\n        : $$scope.ctx;\n}\nfunction get_slot_changes(definition, $$scope, dirty, fn) {\n    if (definition[2] && fn) {\n        const lets = definition[2](fn(dirty));\n        if ($$scope.dirty === undefined) {\n            return lets;\n        }\n        if (typeof lets === 'object') {\n            const merged = [];\n            const len = Math.max($$scope.dirty.length, lets.length);\n            for (let i = 0; i < len; i += 1) {\n                merged[i] = $$scope.dirty[i] | lets[i];\n            }\n            return merged;\n        }\n        return $$scope.dirty | lets;\n    }\n    return $$scope.dirty;\n}\nfunction update_slot_base(slot, slot_definition, ctx, $$scope, slot_changes, get_slot_context_fn) {\n    if (slot_changes) {\n        const slot_context = get_slot_context(slot_definition, ctx, $$scope, get_slot_context_fn);\n        slot.p(slot_context, slot_changes);\n    }\n}\nfunction update_slot(slot, slot_definition, ctx, $$scope, dirty, get_slot_changes_fn, get_slot_context_fn) {\n    const slot_changes = get_slot_changes(slot_definition, $$scope, dirty, get_slot_changes_fn);\n    update_slot_base(slot, slot_definition, ctx, $$scope, slot_changes, get_slot_context_fn);\n}\nfunction get_all_dirty_from_scope($$scope) {\n    if ($$scope.ctx.length > 32) {\n        const dirty = [];\n        const length = $$scope.ctx.length / 32;\n        for (let i = 0; i < length; i++) {\n            dirty[i] = -1;\n        }\n        return dirty;\n    }\n    return -1;\n}\nfunction exclude_internal_props(props) {\n    const result = {};\n    for (const k in props)\n        if (k[0] !== '$')\n            result[k] = props[k];\n    return result;\n}\nfunction compute_rest_props(props, keys) {\n    const rest = {};\n    keys = new Set(keys);\n    for (const k in props)\n        if (!keys.has(k) && k[0] !== '$')\n            rest[k] = props[k];\n    return rest;\n}\nfunction compute_slots(slots) {\n    const result = {};\n    for (const key in slots) {\n        result[key] = true;\n    }\n    return result;\n}\nfunction once(fn) {\n    let ran = false;\n    return function (...args) {\n        if (ran)\n            return;\n        ran = true;\n        fn.call(this, ...args);\n    };\n}\nfunction null_to_empty(value) {\n    return value == null ? '' : value;\n}\nfunction set_store_value(store, ret, value) {\n    store.set(value);\n    return ret;\n}\nconst has_prop = (obj, prop) => Object.prototype.hasOwnProperty.call(obj, prop);\nfunction action_destroyer(action_result) {\n    return action_result && is_function(action_result.destroy) ? action_result.destroy : noop;\n}\n\nconst is_client = typeof window !== 'undefined';\nlet now = is_client\n    ? () => window.performance.now()\n    : () => Date.now();\nlet raf = is_client ? cb => requestAnimationFrame(cb) : noop;\n// used internally for testing\nfunction set_now(fn) {\n    now = fn;\n}\nfunction set_raf(fn) {\n    raf = fn;\n}\n\nconst tasks = new Set();\nfunction run_tasks(now) {\n    tasks.forEach(task => {\n        if (!task.c(now)) {\n            tasks.delete(task);\n            task.f();\n        }\n    });\n    if (tasks.size !== 0)\n        raf(run_tasks);\n}\n/**\n * For testing purposes only!\n */\nfunction clear_loops() {\n    tasks.clear();\n}\n/**\n * Creates a new task that runs on each raf frame\n * until it returns a falsy value or is aborted\n */\nfunction loop(callback) {\n    let task;\n    if (tasks.size === 0)\n        raf(run_tasks);\n    return {\n        promise: new Promise(fulfill => {\n            tasks.add(task = { c: callback, f: fulfill });\n        }),\n        abort() {\n            tasks.delete(task);\n        }\n    };\n}\n\n// Track which nodes are claimed during hydration. Unclaimed nodes can then be removed from the DOM\n// at the end of hydration without touching the remaining nodes.\nlet is_hydrating = false;\nfunction start_hydrating() {\n    is_hydrating = true;\n}\nfunction end_hydrating() {\n    is_hydrating = false;\n}\nfunction upper_bound(low, high, key, value) {\n    // Return first index of value larger than input value in the range [low, high)\n    while (low < high) {\n        const mid = low + ((high - low) >> 1);\n        if (key(mid) <= value) {\n            low = mid + 1;\n        }\n        else {\n            high = mid;\n        }\n    }\n    return low;\n}\nfunction init_hydrate(target) {\n    if (target.hydrate_init)\n        return;\n    target.hydrate_init = true;\n    // We know that all children have claim_order values since the unclaimed have been detached if target is not <head>\n    let children = target.childNodes;\n    // If target is <head>, there may be children without claim_order\n    if (target.nodeName === 'HEAD') {\n        const myChildren = [];\n        for (let i = 0; i < children.length; i++) {\n            const node = children[i];\n            if (node.claim_order !== undefined) {\n                myChildren.push(node);\n            }\n        }\n        children = myChildren;\n    }\n    /*\n    * Reorder claimed children optimally.\n    * We can reorder claimed children optimally by finding the longest subsequence of\n    * nodes that are already claimed in order and only moving the rest. The longest\n    * subsequence of nodes that are claimed in order can be found by\n    * computing the longest increasing subsequence of .claim_order values.\n    *\n    * This algorithm is optimal in generating the least amount of reorder operations\n    * possible.\n    *\n    * Proof:\n    * We know that, given a set of reordering operations, the nodes that do not move\n    * always form an increasing subsequence, since they do not move among each other\n    * meaning that they must be already ordered among each other. Thus, the maximal\n    * set of nodes that do not move form a longest increasing subsequence.\n    */\n    // Compute longest increasing subsequence\n    // m: subsequence length j => index k of smallest value that ends an increasing subsequence of length j\n    const m = new Int32Array(children.length + 1);\n    // Predecessor indices + 1\n    const p = new Int32Array(children.length);\n    m[0] = -1;\n    let longest = 0;\n    for (let i = 0; i < children.length; i++) {\n        const current = children[i].claim_order;\n        // Find the largest subsequence length such that it ends in a value less than our current value\n        // upper_bound returns first greater value, so we subtract one\n        // with fast path for when we are on the current longest subsequence\n        const seqLen = ((longest > 0 && children[m[longest]].claim_order <= current) ? longest + 1 : upper_bound(1, longest, idx => children[m[idx]].claim_order, current)) - 1;\n        p[i] = m[seqLen] + 1;\n        const newLen = seqLen + 1;\n        // We can guarantee that current is the smallest value. Otherwise, we would have generated a longer sequence.\n        m[newLen] = i;\n        longest = Math.max(newLen, longest);\n    }\n    // The longest increasing subsequence of nodes (initially reversed)\n    const lis = [];\n    // The rest of the nodes, nodes that will be moved\n    const toMove = [];\n    let last = children.length - 1;\n    for (let cur = m[longest] + 1; cur != 0; cur = p[cur - 1]) {\n        lis.push(children[cur - 1]);\n        for (; last >= cur; last--) {\n            toMove.push(children[last]);\n        }\n        last--;\n    }\n    for (; last >= 0; last--) {\n        toMove.push(children[last]);\n    }\n    lis.reverse();\n    // We sort the nodes being moved to guarantee that their insertion order matches the claim order\n    toMove.sort((a, b) => a.claim_order - b.claim_order);\n    // Finally, we move the nodes\n    for (let i = 0, j = 0; i < toMove.length; i++) {\n        while (j < lis.length && toMove[i].claim_order >= lis[j].claim_order) {\n            j++;\n        }\n        const anchor = j < lis.length ? lis[j] : null;\n        target.insertBefore(toMove[i], anchor);\n    }\n}\nfunction append(target, node) {\n    target.appendChild(node);\n}\nfunction append_styles(target, style_sheet_id, styles) {\n    const append_styles_to = get_root_for_style(target);\n    if (!append_styles_to.getElementById(style_sheet_id)) {\n        const style = element('style');\n        style.id = style_sheet_id;\n        style.textContent = styles;\n        append_stylesheet(append_styles_to, style);\n    }\n}\nfunction get_root_for_style(node) {\n    if (!node)\n        return document;\n    const root = node.getRootNode ? node.getRootNode() : node.ownerDocument;\n    if (root && root.host) {\n        return root;\n    }\n    return node.ownerDocument;\n}\nfunction append_empty_stylesheet(node) {\n    const style_element = element('style');\n    append_stylesheet(get_root_for_style(node), style_element);\n    return style_element.sheet;\n}\nfunction append_stylesheet(node, style) {\n    append(node.head || node, style);\n    return style.sheet;\n}\nfunction append_hydration(target, node) {\n    if (is_hydrating) {\n        init_hydrate(target);\n        if ((target.actual_end_child === undefined) || ((target.actual_end_child !== null) && (target.actual_end_child.parentNode !== target))) {\n            target.actual_end_child = target.firstChild;\n        }\n        // Skip nodes of undefined ordering\n        while ((target.actual_end_child !== null) && (target.actual_end_child.claim_order === undefined)) {\n            target.actual_end_child = target.actual_end_child.nextSibling;\n        }\n        if (node !== target.actual_end_child) {\n            // We only insert if the ordering of this node should be modified or the parent node is not target\n            if (node.claim_order !== undefined || node.parentNode !== target) {\n                target.insertBefore(node, target.actual_end_child);\n            }\n        }\n        else {\n            target.actual_end_child = node.nextSibling;\n        }\n    }\n    else if (node.parentNode !== target || node.nextSibling !== null) {\n        target.appendChild(node);\n    }\n}\nfunction insert(target, node, anchor) {\n    target.insertBefore(node, anchor || null);\n}\nfunction insert_hydration(target, node, anchor) {\n    if (is_hydrating && !anchor) {\n        append_hydration(target, node);\n    }\n    else if (node.parentNode !== target || node.nextSibling != anchor) {\n        target.insertBefore(node, anchor || null);\n    }\n}\nfunction detach(node) {\n    if (node.parentNode) {\n        node.parentNode.removeChild(node);\n    }\n}\nfunction destroy_each(iterations, detaching) {\n    for (let i = 0; i < iterations.length; i += 1) {\n        if (iterations[i])\n            iterations[i].d(detaching);\n    }\n}\nfunction element(name) {\n    return document.createElement(name);\n}\nfunction element_is(name, is) {\n    return document.createElement(name, { is });\n}\nfunction object_without_properties(obj, exclude) {\n    const target = {};\n    for (const k in obj) {\n        if (has_prop(obj, k)\n            // @ts-ignore\n            && exclude.indexOf(k) === -1) {\n            // @ts-ignore\n            target[k] = obj[k];\n        }\n    }\n    return target;\n}\nfunction svg_element(name) {\n    return document.createElementNS('http://www.w3.org/2000/svg', name);\n}\nfunction text(data) {\n    return document.createTextNode(data);\n}\nfunction space() {\n    return text(' ');\n}\nfunction empty() {\n    return text('');\n}\nfunction listen(node, event, handler, options) {\n    node.addEventListener(event, handler, options);\n    return () => node.removeEventListener(event, handler, options);\n}\nfunction prevent_default(fn) {\n    return function (event) {\n        event.preventDefault();\n        // @ts-ignore\n        return fn.call(this, event);\n    };\n}\nfunction stop_propagation(fn) {\n    return function (event) {\n        event.stopPropagation();\n        // @ts-ignore\n        return fn.call(this, event);\n    };\n}\nfunction self(fn) {\n    return function (event) {\n        // @ts-ignore\n        if (event.target === this)\n            fn.call(this, event);\n    };\n}\nfunction trusted(fn) {\n    return function (event) {\n        // @ts-ignore\n        if (event.isTrusted)\n            fn.call(this, event);\n    };\n}\nfunction attr(node, attribute, value) {\n    if (value == null)\n        node.removeAttribute(attribute);\n    else if (node.getAttribute(attribute) !== value)\n        node.setAttribute(attribute, value);\n}\nfunction set_attributes(node, attributes) {\n    // @ts-ignore\n    const descriptors = Object.getOwnPropertyDescriptors(node.__proto__);\n    for (const key in attributes) {\n        if (attributes[key] == null) {\n            node.removeAttribute(key);\n        }\n        else if (key === 'style') {\n            node.style.cssText = attributes[key];\n        }\n        else if (key === '__value') {\n            node.value = node[key] = attributes[key];\n        }\n        else if (descriptors[key] && descriptors[key].set) {\n            node[key] = attributes[key];\n        }\n        else {\n            attr(node, key, attributes[key]);\n        }\n    }\n}\nfunction set_svg_attributes(node, attributes) {\n    for (const key in attributes) {\n        attr(node, key, attributes[key]);\n    }\n}\nfunction set_custom_element_data_map(node, data_map) {\n    Object.keys(data_map).forEach((key) => {\n        set_custom_element_data(node, key, data_map[key]);\n    });\n}\nfunction set_custom_element_data(node, prop, value) {\n    if (prop in node) {\n        node[prop] = typeof node[prop] === 'boolean' && value === '' ? true : value;\n    }\n    else {\n        attr(node, prop, value);\n    }\n}\nfunction xlink_attr(node, attribute, value) {\n    node.setAttributeNS('http://www.w3.org/1999/xlink', attribute, value);\n}\nfunction get_binding_group_value(group, __value, checked) {\n    const value = new Set();\n    for (let i = 0; i < group.length; i += 1) {\n        if (group[i].checked)\n            value.add(group[i].__value);\n    }\n    if (!checked) {\n        value.delete(__value);\n    }\n    return Array.from(value);\n}\nfunction to_number(value) {\n    return value === '' ? null : +value;\n}\nfunction time_ranges_to_array(ranges) {\n    const array = [];\n    for (let i = 0; i < ranges.length; i += 1) {\n        array.push({ start: ranges.start(i), end: ranges.end(i) });\n    }\n    return array;\n}\nfunction children(element) {\n    return Array.from(element.childNodes);\n}\nfunction init_claim_info(nodes) {\n    if (nodes.claim_info === undefined) {\n        nodes.claim_info = { last_index: 0, total_claimed: 0 };\n    }\n}\nfunction claim_node(nodes, predicate, processNode, createNode, dontUpdateLastIndex = false) {\n    // Try to find nodes in an order such that we lengthen the longest increasing subsequence\n    init_claim_info(nodes);\n    const resultNode = (() => {\n        // We first try to find an element after the previous one\n        for (let i = nodes.claim_info.last_index; i < nodes.length; i++) {\n            const node = nodes[i];\n            if (predicate(node)) {\n                const replacement = processNode(node);\n                if (replacement === undefined) {\n                    nodes.splice(i, 1);\n                }\n                else {\n                    nodes[i] = replacement;\n                }\n                if (!dontUpdateLastIndex) {\n                    nodes.claim_info.last_index = i;\n                }\n                return node;\n            }\n        }\n        // Otherwise, we try to find one before\n        // We iterate in reverse so that we don't go too far back\n        for (let i = nodes.claim_info.last_index - 1; i >= 0; i--) {\n            const node = nodes[i];\n            if (predicate(node)) {\n                const replacement = processNode(node);\n                if (replacement === undefined) {\n                    nodes.splice(i, 1);\n                }\n                else {\n                    nodes[i] = replacement;\n                }\n                if (!dontUpdateLastIndex) {\n                    nodes.claim_info.last_index = i;\n                }\n                else if (replacement === undefined) {\n                    // Since we spliced before the last_index, we decrease it\n                    nodes.claim_info.last_index--;\n                }\n                return node;\n            }\n        }\n        // If we can't find any matching node, we create a new one\n        return createNode();\n    })();\n    resultNode.claim_order = nodes.claim_info.total_claimed;\n    nodes.claim_info.total_claimed += 1;\n    return resultNode;\n}\nfunction claim_element_base(nodes, name, attributes, create_element) {\n    return claim_node(nodes, (node) => node.nodeName === name, (node) => {\n        const remove = [];\n        for (let j = 0; j < node.attributes.length; j++) {\n            const attribute = node.attributes[j];\n            if (!attributes[attribute.name]) {\n                remove.push(attribute.name);\n            }\n        }\n        remove.forEach(v => node.removeAttribute(v));\n        return undefined;\n    }, () => create_element(name));\n}\nfunction claim_element(nodes, name, attributes) {\n    return claim_element_base(nodes, name, attributes, element);\n}\nfunction claim_svg_element(nodes, name, attributes) {\n    return claim_element_base(nodes, name, attributes, svg_element);\n}\nfunction claim_text(nodes, data) {\n    return claim_node(nodes, (node) => node.nodeType === 3, (node) => {\n        const dataStr = '' + data;\n        if (node.data.startsWith(dataStr)) {\n            if (node.data.length !== dataStr.length) {\n                return node.splitText(dataStr.length);\n            }\n        }\n        else {\n            node.data = dataStr;\n        }\n    }, () => text(data), true // Text nodes should not update last index since it is likely not worth it to eliminate an increasing subsequence of actual elements\n    );\n}\nfunction claim_space(nodes) {\n    return claim_text(nodes, ' ');\n}\nfunction find_comment(nodes, text, start) {\n    for (let i = start; i < nodes.length; i += 1) {\n        const node = nodes[i];\n        if (node.nodeType === 8 /* comment node */ && node.textContent.trim() === text) {\n            return i;\n        }\n    }\n    return nodes.length;\n}\nfunction claim_html_tag(nodes, is_svg) {\n    // find html opening tag\n    const start_index = find_comment(nodes, 'HTML_TAG_START', 0);\n    const end_index = find_comment(nodes, 'HTML_TAG_END', start_index);\n    if (start_index === end_index) {\n        return new HtmlTagHydration(undefined, is_svg);\n    }\n    init_claim_info(nodes);\n    const html_tag_nodes = nodes.splice(start_index, end_index - start_index + 1);\n    detach(html_tag_nodes[0]);\n    detach(html_tag_nodes[html_tag_nodes.length - 1]);\n    const claimed_nodes = html_tag_nodes.slice(1, html_tag_nodes.length - 1);\n    for (const n of claimed_nodes) {\n        n.claim_order = nodes.claim_info.total_claimed;\n        nodes.claim_info.total_claimed += 1;\n    }\n    return new HtmlTagHydration(claimed_nodes, is_svg);\n}\nfunction set_data(text, data) {\n    data = '' + data;\n    if (text.wholeText !== data)\n        text.data = data;\n}\nfunction set_input_value(input, value) {\n    input.value = value == null ? '' : value;\n}\nfunction set_input_type(input, type) {\n    try {\n        input.type = type;\n    }\n    catch (e) {\n        // do nothing\n    }\n}\nfunction set_style(node, key, value, important) {\n    if (value === null) {\n        node.style.removeProperty(key);\n    }\n    else {\n        node.style.setProperty(key, value, important ? 'important' : '');\n    }\n}\nfunction select_option(select, value) {\n    for (let i = 0; i < select.options.length; i += 1) {\n        const option = select.options[i];\n        if (option.__value === value) {\n            option.selected = true;\n            return;\n        }\n    }\n    select.selectedIndex = -1; // no option should be selected\n}\nfunction select_options(select, value) {\n    for (let i = 0; i < select.options.length; i += 1) {\n        const option = select.options[i];\n        option.selected = ~value.indexOf(option.__value);\n    }\n}\nfunction select_value(select) {\n    const selected_option = select.querySelector(':checked') || select.options[0];\n    return selected_option && selected_option.__value;\n}\nfunction select_multiple_value(select) {\n    return [].map.call(select.querySelectorAll(':checked'), option => option.__value);\n}\n// unfortunately this can't be a constant as that wouldn't be tree-shakeable\n// so we cache the result instead\nlet crossorigin;\nfunction is_crossorigin() {\n    if (crossorigin === undefined) {\n        crossorigin = false;\n        try {\n            if (typeof window !== 'undefined' && window.parent) {\n                void window.parent.document;\n            }\n        }\n        catch (error) {\n            crossorigin = true;\n        }\n    }\n    return crossorigin;\n}\nfunction add_resize_listener(node, fn) {\n    const computed_style = getComputedStyle(node);\n    if (computed_style.position === 'static') {\n        node.style.position = 'relative';\n    }\n    const iframe = element('iframe');\n    iframe.setAttribute('style', 'display: block; position: absolute; top: 0; left: 0; width: 100%; height: 100%; ' +\n        'overflow: hidden; border: 0; opacity: 0; pointer-events: none; z-index: -1;');\n    iframe.setAttribute('aria-hidden', 'true');\n    iframe.tabIndex = -1;\n    const crossorigin = is_crossorigin();\n    let unsubscribe;\n    if (crossorigin) {\n        iframe.src = \"data:text/html,<script>onresize=function(){parent.postMessage(0,'*')}</script>\";\n        unsubscribe = listen(window, 'message', (event) => {\n            if (event.source === iframe.contentWindow)\n                fn();\n        });\n    }\n    else {\n        iframe.src = 'about:blank';\n        iframe.onload = () => {\n            unsubscribe = listen(iframe.contentWindow, 'resize', fn);\n        };\n    }\n    append(node, iframe);\n    return () => {\n        if (crossorigin) {\n            unsubscribe();\n        }\n        else if (unsubscribe && iframe.contentWindow) {\n            unsubscribe();\n        }\n        detach(iframe);\n    };\n}\nfunction toggle_class(element, name, toggle) {\n    element.classList[toggle ? 'add' : 'remove'](name);\n}\nfunction custom_event(type, detail, { bubbles = false, cancelable = false } = {}) {\n    const e = document.createEvent('CustomEvent');\n    e.initCustomEvent(type, bubbles, cancelable, detail);\n    return e;\n}\nfunction query_selector_all(selector, parent = document.body) {\n    return Array.from(parent.querySelectorAll(selector));\n}\nfunction head_selector(nodeId, head) {\n    const result = [];\n    let started = 0;\n    for (const node of head.childNodes) {\n        if (node.nodeType === 8 /* comment node */) {\n            const comment = node.textContent.trim();\n            if (comment === `HEAD_${nodeId}_END`) {\n                started -= 1;\n                result.push(node);\n            }\n            else if (comment === `HEAD_${nodeId}_START`) {\n                started += 1;\n                result.push(node);\n            }\n        }\n        else if (started > 0) {\n            result.push(node);\n        }\n    }\n    return result;\n}\nclass HtmlTag {\n    constructor(is_svg = false) {\n        this.is_svg = false;\n        this.is_svg = is_svg;\n        this.e = this.n = null;\n    }\n    c(html) {\n        this.h(html);\n    }\n    m(html, target, anchor = null) {\n        if (!this.e) {\n            if (this.is_svg)\n                this.e = svg_element(target.nodeName);\n            else\n                this.e = element(target.nodeName);\n            this.t = target;\n            this.c(html);\n        }\n        this.i(anchor);\n    }\n    h(html) {\n        this.e.innerHTML = html;\n        this.n = Array.from(this.e.childNodes);\n    }\n    i(anchor) {\n        for (let i = 0; i < this.n.length; i += 1) {\n            insert(this.t, this.n[i], anchor);\n        }\n    }\n    p(html) {\n        this.d();\n        this.h(html);\n        this.i(this.a);\n    }\n    d() {\n        this.n.forEach(detach);\n    }\n}\nclass HtmlTagHydration extends HtmlTag {\n    constructor(claimed_nodes, is_svg = false) {\n        super(is_svg);\n        this.e = this.n = null;\n        this.l = claimed_nodes;\n    }\n    c(html) {\n        if (this.l) {\n            this.n = this.l;\n        }\n        else {\n            super.c(html);\n        }\n    }\n    i(anchor) {\n        for (let i = 0; i < this.n.length; i += 1) {\n            insert_hydration(this.t, this.n[i], anchor);\n        }\n    }\n}\nfunction attribute_to_object(attributes) {\n    const result = {};\n    for (const attribute of attributes) {\n        result[attribute.name] = attribute.value;\n    }\n    return result;\n}\nfunction get_custom_elements_slots(element) {\n    const result = {};\n    element.childNodes.forEach((node) => {\n        result[node.slot || 'default'] = true;\n    });\n    return result;\n}\nfunction construct_svelte_component(component, props) {\n    return new component(props);\n}\n\n// we need to store the information for multiple documents because a Svelte application could also contain iframes\n// https://github.com/sveltejs/svelte/issues/3624\nconst managed_styles = new Map();\nlet active = 0;\n// https://github.com/darkskyapp/string-hash/blob/master/index.js\nfunction hash(str) {\n    let hash = 5381;\n    let i = str.length;\n    while (i--)\n        hash = ((hash << 5) - hash) ^ str.charCodeAt(i);\n    return hash >>> 0;\n}\nfunction create_style_information(doc, node) {\n    const info = { stylesheet: append_empty_stylesheet(node), rules: {} };\n    managed_styles.set(doc, info);\n    return info;\n}\nfunction create_rule(node, a, b, duration, delay, ease, fn, uid = 0) {\n    const step = 16.666 / duration;\n    let keyframes = '{\\n';\n    for (let p = 0; p <= 1; p += step) {\n        const t = a + (b - a) * ease(p);\n        keyframes += p * 100 + `%{${fn(t, 1 - t)}}\\n`;\n    }\n    const rule = keyframes + `100% {${fn(b, 1 - b)}}\\n}`;\n    const name = `__svelte_${hash(rule)}_${uid}`;\n    const doc = get_root_for_style(node);\n    const { stylesheet, rules } = managed_styles.get(doc) || create_style_information(doc, node);\n    if (!rules[name]) {\n        rules[name] = true;\n        stylesheet.insertRule(`@keyframes ${name} ${rule}`, stylesheet.cssRules.length);\n    }\n    const animation = node.style.animation || '';\n    node.style.animation = `${animation ? `${animation}, ` : ''}${name} ${duration}ms linear ${delay}ms 1 both`;\n    active += 1;\n    return name;\n}\nfunction delete_rule(node, name) {\n    const previous = (node.style.animation || '').split(', ');\n    const next = previous.filter(name\n        ? anim => anim.indexOf(name) < 0 // remove specific animation\n        : anim => anim.indexOf('__svelte') === -1 // remove all Svelte animations\n    );\n    const deleted = previous.length - next.length;\n    if (deleted) {\n        node.style.animation = next.join(', ');\n        active -= deleted;\n        if (!active)\n            clear_rules();\n    }\n}\nfunction clear_rules() {\n    raf(() => {\n        if (active)\n            return;\n        managed_styles.forEach(info => {\n            const { ownerNode } = info.stylesheet;\n            // there is no ownerNode if it runs on jsdom.\n            if (ownerNode)\n                detach(ownerNode);\n        });\n        managed_styles.clear();\n    });\n}\n\nfunction create_animation(node, from, fn, params) {\n    if (!from)\n        return noop;\n    const to = node.getBoundingClientRect();\n    if (from.left === to.left && from.right === to.right && from.top === to.top && from.bottom === to.bottom)\n        return noop;\n    const { delay = 0, duration = 300, easing = identity, \n    // @ts-ignore todo: should this be separated from destructuring? Or start/end added to public api and documentation?\n    start: start_time = now() + delay, \n    // @ts-ignore todo:\n    end = start_time + duration, tick = noop, css } = fn(node, { from, to }, params);\n    let running = true;\n    let started = false;\n    let name;\n    function start() {\n        if (css) {\n            name = create_rule(node, 0, 1, duration, delay, easing, css);\n        }\n        if (!delay) {\n            started = true;\n        }\n    }\n    function stop() {\n        if (css)\n            delete_rule(node, name);\n        running = false;\n    }\n    loop(now => {\n        if (!started && now >= start_time) {\n            started = true;\n        }\n        if (started && now >= end) {\n            tick(1, 0);\n            stop();\n        }\n        if (!running) {\n            return false;\n        }\n        if (started) {\n            const p = now - start_time;\n            const t = 0 + 1 * easing(p / duration);\n            tick(t, 1 - t);\n        }\n        return true;\n    });\n    start();\n    tick(0, 1);\n    return stop;\n}\nfunction fix_position(node) {\n    const style = getComputedStyle(node);\n    if (style.position !== 'absolute' && style.position !== 'fixed') {\n        const { width, height } = style;\n        const a = node.getBoundingClientRect();\n        node.style.position = 'absolute';\n        node.style.width = width;\n        node.style.height = height;\n        add_transform(node, a);\n    }\n}\nfunction add_transform(node, a) {\n    const b = node.getBoundingClientRect();\n    if (a.left !== b.left || a.top !== b.top) {\n        const style = getComputedStyle(node);\n        const transform = style.transform === 'none' ? '' : style.transform;\n        node.style.transform = `${transform} translate(${a.left - b.left}px, ${a.top - b.top}px)`;\n    }\n}\n\nlet current_component;\nfunction set_current_component(component) {\n    current_component = component;\n}\nfunction get_current_component() {\n    if (!current_component)\n        throw new Error('Function called outside component initialization');\n    return current_component;\n}\n/**\n * Schedules a callback to run immediately before the component is updated after any state change.\n *\n * The first time the callback runs will be before the initial `onMount`\n *\n * https://svelte.dev/docs#run-time-svelte-beforeupdate\n */\nfunction beforeUpdate(fn) {\n    get_current_component().$$.before_update.push(fn);\n}\n/**\n * The `onMount` function schedules a callback to run as soon as the component has been mounted to the DOM.\n * It must be called during the component's initialisation (but doesn't need to live *inside* the component;\n * it can be called from an external module).\n *\n * `onMount` does not run inside a [server-side component](/docs#run-time-server-side-component-api).\n *\n * https://svelte.dev/docs#run-time-svelte-onmount\n */\nfunction onMount(fn) {\n    get_current_component().$$.on_mount.push(fn);\n}\n/**\n * Schedules a callback to run immediately after the component has been updated.\n *\n * The first time the callback runs will be after the initial `onMount`\n */\nfunction afterUpdate(fn) {\n    get_current_component().$$.after_update.push(fn);\n}\n/**\n * Schedules a callback to run immediately before the component is unmounted.\n *\n * Out of `onMount`, `beforeUpdate`, `afterUpdate` and `onDestroy`, this is the\n * only one that runs inside a server-side component.\n *\n * https://svelte.dev/docs#run-time-svelte-ondestroy\n */\nfunction onDestroy(fn) {\n    get_current_component().$$.on_destroy.push(fn);\n}\n/**\n * Creates an event dispatcher that can be used to dispatch [component events](/docs#template-syntax-component-directives-on-eventname).\n * Event dispatchers are functions that can take two arguments: `name` and `detail`.\n *\n * Component events created with `createEventDispatcher` create a\n * [CustomEvent](https://developer.mozilla.org/en-US/docs/Web/API/CustomEvent).\n * These events do not [bubble](https://developer.mozilla.org/en-US/docs/Learn/JavaScript/Building_blocks/Events#Event_bubbling_and_capture).\n * The `detail` argument corresponds to the [CustomEvent.detail](https://developer.mozilla.org/en-US/docs/Web/API/CustomEvent/detail)\n * property and can contain any type of data.\n *\n * https://svelte.dev/docs#run-time-svelte-createeventdispatcher\n */\nfunction createEventDispatcher() {\n    const component = get_current_component();\n    return (type, detail, { cancelable = false } = {}) => {\n        const callbacks = component.$$.callbacks[type];\n        if (callbacks) {\n            // TODO are there situations where events could be dispatched\n            // in a server (non-DOM) environment?\n            const event = custom_event(type, detail, { cancelable });\n            callbacks.slice().forEach(fn => {\n                fn.call(component, event);\n            });\n            return !event.defaultPrevented;\n        }\n        return true;\n    };\n}\n/**\n * Associates an arbitrary `context` object with the current component and the specified `key`\n * and returns that object. The context is then available to children of the component\n * (including slotted content) with `getContext`.\n *\n * Like lifecycle functions, this must be called during component initialisation.\n *\n * https://svelte.dev/docs#run-time-svelte-setcontext\n */\nfunction setContext(key, context) {\n    get_current_component().$$.context.set(key, context);\n    return context;\n}\n/**\n * Retrieves the context that belongs to the closest parent component with the specified `key`.\n * Must be called during component initialisation.\n *\n * https://svelte.dev/docs#run-time-svelte-getcontext\n */\nfunction getContext(key) {\n    return get_current_component().$$.context.get(key);\n}\n/**\n * Retrieves the whole context map that belongs to the closest parent component.\n * Must be called during component initialisation. Useful, for example, if you\n * programmatically create a component and want to pass the existing context to it.\n *\n * https://svelte.dev/docs#run-time-svelte-getallcontexts\n */\nfunction getAllContexts() {\n    return get_current_component().$$.context;\n}\n/**\n * Checks whether a given `key` has been set in the context of a parent component.\n * Must be called during component initialisation.\n *\n * https://svelte.dev/docs#run-time-svelte-hascontext\n */\nfunction hasContext(key) {\n    return get_current_component().$$.context.has(key);\n}\n// TODO figure out if we still want to support\n// shorthand events, or if we want to implement\n// a real bubbling mechanism\nfunction bubble(component, event) {\n    const callbacks = component.$$.callbacks[event.type];\n    if (callbacks) {\n        // @ts-ignore\n        callbacks.slice().forEach(fn => fn.call(this, event));\n    }\n}\n\nconst dirty_components = [];\nconst intros = { enabled: false };\nconst binding_callbacks = [];\nconst render_callbacks = [];\nconst flush_callbacks = [];\nconst resolved_promise = Promise.resolve();\nlet update_scheduled = false;\nfunction schedule_update() {\n    if (!update_scheduled) {\n        update_scheduled = true;\n        resolved_promise.then(flush);\n    }\n}\nfunction tick() {\n    schedule_update();\n    return resolved_promise;\n}\nfunction add_render_callback(fn) {\n    render_callbacks.push(fn);\n}\nfunction add_flush_callback(fn) {\n    flush_callbacks.push(fn);\n}\n// flush() calls callbacks in this order:\n// 1. All beforeUpdate callbacks, in order: parents before children\n// 2. All bind:this callbacks, in reverse order: children before parents.\n// 3. All afterUpdate callbacks, in order: parents before children. EXCEPT\n//    for afterUpdates called during the initial onMount, which are called in\n//    reverse order: children before parents.\n// Since callbacks might update component values, which could trigger another\n// call to flush(), the following steps guard against this:\n// 1. During beforeUpdate, any updated components will be added to the\n//    dirty_components array and will cause a reentrant call to flush(). Because\n//    the flush index is kept outside the function, the reentrant call will pick\n//    up where the earlier call left off and go through all dirty components. The\n//    current_component value is saved and restored so that the reentrant call will\n//    not interfere with the \"parent\" flush() call.\n// 2. bind:this callbacks cannot trigger new flush() calls.\n// 3. During afterUpdate, any updated components will NOT have their afterUpdate\n//    callback called a second time; the seen_callbacks set, outside the flush()\n//    function, guarantees this behavior.\nconst seen_callbacks = new Set();\nlet flushidx = 0; // Do *not* move this inside the flush() function\nfunction flush() {\n    // Do not reenter flush while dirty components are updated, as this can\n    // result in an infinite loop. Instead, let the inner flush handle it.\n    // Reentrancy is ok afterwards for bindings etc.\n    if (flushidx !== 0) {\n        return;\n    }\n    const saved_component = current_component;\n    do {\n        // first, call beforeUpdate functions\n        // and update components\n        try {\n            while (flushidx < dirty_components.length) {\n                const component = dirty_components[flushidx];\n                flushidx++;\n                set_current_component(component);\n                update(component.$$);\n            }\n        }\n        catch (e) {\n            // reset dirty state to not end up in a deadlocked state and then rethrow\n            dirty_components.length = 0;\n            flushidx = 0;\n            throw e;\n        }\n        set_current_component(null);\n        dirty_components.length = 0;\n        flushidx = 0;\n        while (binding_callbacks.length)\n            binding_callbacks.pop()();\n        // then, once components are updated, call\n        // afterUpdate functions. This may cause\n        // subsequent updates...\n        for (let i = 0; i < render_callbacks.length; i += 1) {\n            const callback = render_callbacks[i];\n            if (!seen_callbacks.has(callback)) {\n                // ...so guard against infinite loops\n                seen_callbacks.add(callback);\n                callback();\n            }\n        }\n        render_callbacks.length = 0;\n    } while (dirty_components.length);\n    while (flush_callbacks.length) {\n        flush_callbacks.pop()();\n    }\n    update_scheduled = false;\n    seen_callbacks.clear();\n    set_current_component(saved_component);\n}\nfunction update($$) {\n    if ($$.fragment !== null) {\n        $$.update();\n        run_all($$.before_update);\n        const dirty = $$.dirty;\n        $$.dirty = [-1];\n        $$.fragment && $$.fragment.p($$.ctx, dirty);\n        $$.after_update.forEach(add_render_callback);\n    }\n}\n\nlet promise;\nfunction wait() {\n    if (!promise) {\n        promise = Promise.resolve();\n        promise.then(() => {\n            promise = null;\n        });\n    }\n    return promise;\n}\nfunction dispatch(node, direction, kind) {\n    node.dispatchEvent(custom_event(`${direction ? 'intro' : 'outro'}${kind}`));\n}\nconst outroing = new Set();\nlet outros;\nfunction group_outros() {\n    outros = {\n        r: 0,\n        c: [],\n        p: outros // parent group\n    };\n}\nfunction check_outros() {\n    if (!outros.r) {\n        run_all(outros.c);\n    }\n    outros = outros.p;\n}\nfunction transition_in(block, local) {\n    if (block && block.i) {\n        outroing.delete(block);\n        block.i(local);\n    }\n}\nfunction transition_out(block, local, detach, callback) {\n    if (block && block.o) {\n        if (outroing.has(block))\n            return;\n        outroing.add(block);\n        outros.c.push(() => {\n            outroing.delete(block);\n            if (callback) {\n                if (detach)\n                    block.d(1);\n                callback();\n            }\n        });\n        block.o(local);\n    }\n    else if (callback) {\n        callback();\n    }\n}\nconst null_transition = { duration: 0 };\nfunction create_in_transition(node, fn, params) {\n    const options = { direction: 'in' };\n    let config = fn(node, params, options);\n    let running = false;\n    let animation_name;\n    let task;\n    let uid = 0;\n    function cleanup() {\n        if (animation_name)\n            delete_rule(node, animation_name);\n    }\n    function go() {\n        const { delay = 0, duration = 300, easing = identity, tick = noop, css } = config || null_transition;\n        if (css)\n            animation_name = create_rule(node, 0, 1, duration, delay, easing, css, uid++);\n        tick(0, 1);\n        const start_time = now() + delay;\n        const end_time = start_time + duration;\n        if (task)\n            task.abort();\n        running = true;\n        add_render_callback(() => dispatch(node, true, 'start'));\n        task = loop(now => {\n            if (running) {\n                if (now >= end_time) {\n                    tick(1, 0);\n                    dispatch(node, true, 'end');\n                    cleanup();\n                    return running = false;\n                }\n                if (now >= start_time) {\n                    const t = easing((now - start_time) / duration);\n                    tick(t, 1 - t);\n                }\n            }\n            return running;\n        });\n    }\n    let started = false;\n    return {\n        start() {\n            if (started)\n                return;\n            started = true;\n            delete_rule(node);\n            if (is_function(config)) {\n                config = config(options);\n                wait().then(go);\n            }\n            else {\n                go();\n            }\n        },\n        invalidate() {\n            started = false;\n        },\n        end() {\n            if (running) {\n                cleanup();\n                running = false;\n            }\n        }\n    };\n}\nfunction create_out_transition(node, fn, params) {\n    const options = { direction: 'out' };\n    let config = fn(node, params, options);\n    let running = true;\n    let animation_name;\n    const group = outros;\n    group.r += 1;\n    function go() {\n        const { delay = 0, duration = 300, easing = identity, tick = noop, css } = config || null_transition;\n        if (css)\n            animation_name = create_rule(node, 1, 0, duration, delay, easing, css);\n        const start_time = now() + delay;\n        const end_time = start_time + duration;\n        add_render_callback(() => dispatch(node, false, 'start'));\n        loop(now => {\n            if (running) {\n                if (now >= end_time) {\n                    tick(0, 1);\n                    dispatch(node, false, 'end');\n                    if (!--group.r) {\n                        // this will result in `end()` being called,\n                        // so we don't need to clean up here\n                        run_all(group.c);\n                    }\n                    return false;\n                }\n                if (now >= start_time) {\n                    const t = easing((now - start_time) / duration);\n                    tick(1 - t, t);\n                }\n            }\n            return running;\n        });\n    }\n    if (is_function(config)) {\n        wait().then(() => {\n            // @ts-ignore\n            config = config(options);\n            go();\n        });\n    }\n    else {\n        go();\n    }\n    return {\n        end(reset) {\n            if (reset && config.tick) {\n                config.tick(1, 0);\n            }\n            if (running) {\n                if (animation_name)\n                    delete_rule(node, animation_name);\n                running = false;\n            }\n        }\n    };\n}\nfunction create_bidirectional_transition(node, fn, params, intro) {\n    const options = { direction: 'both' };\n    let config = fn(node, params, options);\n    let t = intro ? 0 : 1;\n    let running_program = null;\n    let pending_program = null;\n    let animation_name = null;\n    function clear_animation() {\n        if (animation_name)\n            delete_rule(node, animation_name);\n    }\n    function init(program, duration) {\n        const d = (program.b - t);\n        duration *= Math.abs(d);\n        return {\n            a: t,\n            b: program.b,\n            d,\n            duration,\n            start: program.start,\n            end: program.start + duration,\n            group: program.group\n        };\n    }\n    function go(b) {\n        const { delay = 0, duration = 300, easing = identity, tick = noop, css } = config || null_transition;\n        const program = {\n            start: now() + delay,\n            b\n        };\n        if (!b) {\n            // @ts-ignore todo: improve typings\n            program.group = outros;\n            outros.r += 1;\n        }\n        if (running_program || pending_program) {\n            pending_program = program;\n        }\n        else {\n            // if this is an intro, and there's a delay, we need to do\n            // an initial tick and/or apply CSS animation immediately\n            if (css) {\n                clear_animation();\n                animation_name = create_rule(node, t, b, duration, delay, easing, css);\n            }\n            if (b)\n                tick(0, 1);\n            running_program = init(program, duration);\n            add_render_callback(() => dispatch(node, b, 'start'));\n            loop(now => {\n                if (pending_program && now > pending_program.start) {\n                    running_program = init(pending_program, duration);\n                    pending_program = null;\n                    dispatch(node, running_program.b, 'start');\n                    if (css) {\n                        clear_animation();\n                        animation_name = create_rule(node, t, running_program.b, running_program.duration, 0, easing, config.css);\n                    }\n                }\n                if (running_program) {\n                    if (now >= running_program.end) {\n                        tick(t = running_program.b, 1 - t);\n                        dispatch(node, running_program.b, 'end');\n                        if (!pending_program) {\n                            // we're done\n                            if (running_program.b) {\n                                // intro — we can tidy up immediately\n                                clear_animation();\n                            }\n                            else {\n                                // outro — needs to be coordinated\n                                if (!--running_program.group.r)\n                                    run_all(running_program.group.c);\n                            }\n                        }\n                        running_program = null;\n                    }\n                    else if (now >= running_program.start) {\n                        const p = now - running_program.start;\n                        t = running_program.a + running_program.d * easing(p / running_program.duration);\n                        tick(t, 1 - t);\n                    }\n                }\n                return !!(running_program || pending_program);\n            });\n        }\n    }\n    return {\n        run(b) {\n            if (is_function(config)) {\n                wait().then(() => {\n                    // @ts-ignore\n                    config = config(options);\n                    go(b);\n                });\n            }\n            else {\n                go(b);\n            }\n        },\n        end() {\n            clear_animation();\n            running_program = pending_program = null;\n        }\n    };\n}\n\nfunction handle_promise(promise, info) {\n    const token = info.token = {};\n    function update(type, index, key, value) {\n        if (info.token !== token)\n            return;\n        info.resolved = value;\n        let child_ctx = info.ctx;\n        if (key !== undefined) {\n            child_ctx = child_ctx.slice();\n            child_ctx[key] = value;\n        }\n        const block = type && (info.current = type)(child_ctx);\n        let needs_flush = false;\n        if (info.block) {\n            if (info.blocks) {\n                info.blocks.forEach((block, i) => {\n                    if (i !== index && block) {\n                        group_outros();\n                        transition_out(block, 1, 1, () => {\n                            if (info.blocks[i] === block) {\n                                info.blocks[i] = null;\n                            }\n                        });\n                        check_outros();\n                    }\n                });\n            }\n            else {\n                info.block.d(1);\n            }\n            block.c();\n            transition_in(block, 1);\n            block.m(info.mount(), info.anchor);\n            needs_flush = true;\n        }\n        info.block = block;\n        if (info.blocks)\n            info.blocks[index] = block;\n        if (needs_flush) {\n            flush();\n        }\n    }\n    if (is_promise(promise)) {\n        const current_component = get_current_component();\n        promise.then(value => {\n            set_current_component(current_component);\n            update(info.then, 1, info.value, value);\n            set_current_component(null);\n        }, error => {\n            set_current_component(current_component);\n            update(info.catch, 2, info.error, error);\n            set_current_component(null);\n            if (!info.hasCatch) {\n                throw error;\n            }\n        });\n        // if we previously had a then/catch block, destroy it\n        if (info.current !== info.pending) {\n            update(info.pending, 0);\n            return true;\n        }\n    }\n    else {\n        if (info.current !== info.then) {\n            update(info.then, 1, info.value, promise);\n            return true;\n        }\n        info.resolved = promise;\n    }\n}\nfunction update_await_block_branch(info, ctx, dirty) {\n    const child_ctx = ctx.slice();\n    const { resolved } = info;\n    if (info.current === info.then) {\n        child_ctx[info.value] = resolved;\n    }\n    if (info.current === info.catch) {\n        child_ctx[info.error] = resolved;\n    }\n    info.block.p(child_ctx, dirty);\n}\n\nconst globals = (typeof window !== 'undefined'\n    ? window\n    : typeof globalThis !== 'undefined'\n        ? globalThis\n        : global);\n\nfunction destroy_block(block, lookup) {\n    block.d(1);\n    lookup.delete(block.key);\n}\nfunction outro_and_destroy_block(block, lookup) {\n    transition_out(block, 1, 1, () => {\n        lookup.delete(block.key);\n    });\n}\nfunction fix_and_destroy_block(block, lookup) {\n    block.f();\n    destroy_block(block, lookup);\n}\nfunction fix_and_outro_and_destroy_block(block, lookup) {\n    block.f();\n    outro_and_destroy_block(block, lookup);\n}\nfunction update_keyed_each(old_blocks, dirty, get_key, dynamic, ctx, list, lookup, node, destroy, create_each_block, next, get_context) {\n    let o = old_blocks.length;\n    let n = list.length;\n    let i = o;\n    const old_indexes = {};\n    while (i--)\n        old_indexes[old_blocks[i].key] = i;\n    const new_blocks = [];\n    const new_lookup = new Map();\n    const deltas = new Map();\n    i = n;\n    while (i--) {\n        const child_ctx = get_context(ctx, list, i);\n        const key = get_key(child_ctx);\n        let block = lookup.get(key);\n        if (!block) {\n            block = create_each_block(key, child_ctx);\n            block.c();\n        }\n        else if (dynamic) {\n            block.p(child_ctx, dirty);\n        }\n        new_lookup.set(key, new_blocks[i] = block);\n        if (key in old_indexes)\n            deltas.set(key, Math.abs(i - old_indexes[key]));\n    }\n    const will_move = new Set();\n    const did_move = new Set();\n    function insert(block) {\n        transition_in(block, 1);\n        block.m(node, next);\n        lookup.set(block.key, block);\n        next = block.first;\n        n--;\n    }\n    while (o && n) {\n        const new_block = new_blocks[n - 1];\n        const old_block = old_blocks[o - 1];\n        const new_key = new_block.key;\n        const old_key = old_block.key;\n        if (new_block === old_block) {\n            // do nothing\n            next = new_block.first;\n            o--;\n            n--;\n        }\n        else if (!new_lookup.has(old_key)) {\n            // remove old block\n            destroy(old_block, lookup);\n            o--;\n        }\n        else if (!lookup.has(new_key) || will_move.has(new_key)) {\n            insert(new_block);\n        }\n        else if (did_move.has(old_key)) {\n            o--;\n        }\n        else if (deltas.get(new_key) > deltas.get(old_key)) {\n            did_move.add(new_key);\n            insert(new_block);\n        }\n        else {\n            will_move.add(old_key);\n            o--;\n        }\n    }\n    while (o--) {\n        const old_block = old_blocks[o];\n        if (!new_lookup.has(old_block.key))\n            destroy(old_block, lookup);\n    }\n    while (n)\n        insert(new_blocks[n - 1]);\n    return new_blocks;\n}\nfunction validate_each_keys(ctx, list, get_context, get_key) {\n    const keys = new Set();\n    for (let i = 0; i < list.length; i++) {\n        const key = get_key(get_context(ctx, list, i));\n        if (keys.has(key)) {\n            throw new Error('Cannot have duplicate keys in a keyed each');\n        }\n        keys.add(key);\n    }\n}\n\nfunction get_spread_update(levels, updates) {\n    const update = {};\n    const to_null_out = {};\n    const accounted_for = { $$scope: 1 };\n    let i = levels.length;\n    while (i--) {\n        const o = levels[i];\n        const n = updates[i];\n        if (n) {\n            for (const key in o) {\n                if (!(key in n))\n                    to_null_out[key] = 1;\n            }\n            for (const key in n) {\n                if (!accounted_for[key]) {\n                    update[key] = n[key];\n                    accounted_for[key] = 1;\n                }\n            }\n            levels[i] = n;\n        }\n        else {\n            for (const key in o) {\n                accounted_for[key] = 1;\n            }\n        }\n    }\n    for (const key in to_null_out) {\n        if (!(key in update))\n            update[key] = undefined;\n    }\n    return update;\n}\nfunction get_spread_object(spread_props) {\n    return typeof spread_props === 'object' && spread_props !== null ? spread_props : {};\n}\n\n// source: https://html.spec.whatwg.org/multipage/indices.html\nconst boolean_attributes = new Set([\n    'allowfullscreen',\n    'allowpaymentrequest',\n    'async',\n    'autofocus',\n    'autoplay',\n    'checked',\n    'controls',\n    'default',\n    'defer',\n    'disabled',\n    'formnovalidate',\n    'hidden',\n    'inert',\n    'ismap',\n    'itemscope',\n    'loop',\n    'multiple',\n    'muted',\n    'nomodule',\n    'novalidate',\n    'open',\n    'playsinline',\n    'readonly',\n    'required',\n    'reversed',\n    'selected'\n]);\n\n/** regex of all html void element names */\nconst void_element_names = /^(?:area|base|br|col|command|embed|hr|img|input|keygen|link|meta|param|source|track|wbr)$/;\nfunction is_void(name) {\n    return void_element_names.test(name) || name.toLowerCase() === '!doctype';\n}\n\nconst invalid_attribute_name_character = /[\\s'\">/=\\u{FDD0}-\\u{FDEF}\\u{FFFE}\\u{FFFF}\\u{1FFFE}\\u{1FFFF}\\u{2FFFE}\\u{2FFFF}\\u{3FFFE}\\u{3FFFF}\\u{4FFFE}\\u{4FFFF}\\u{5FFFE}\\u{5FFFF}\\u{6FFFE}\\u{6FFFF}\\u{7FFFE}\\u{7FFFF}\\u{8FFFE}\\u{8FFFF}\\u{9FFFE}\\u{9FFFF}\\u{AFFFE}\\u{AFFFF}\\u{BFFFE}\\u{BFFFF}\\u{CFFFE}\\u{CFFFF}\\u{DFFFE}\\u{DFFFF}\\u{EFFFE}\\u{EFFFF}\\u{FFFFE}\\u{FFFFF}\\u{10FFFE}\\u{10FFFF}]/u;\n// https://html.spec.whatwg.org/multipage/syntax.html#attributes-2\n// https://infra.spec.whatwg.org/#noncharacter\nfunction spread(args, attrs_to_add) {\n    const attributes = Object.assign({}, ...args);\n    if (attrs_to_add) {\n        const classes_to_add = attrs_to_add.classes;\n        const styles_to_add = attrs_to_add.styles;\n        if (classes_to_add) {\n            if (attributes.class == null) {\n                attributes.class = classes_to_add;\n            }\n            else {\n                attributes.class += ' ' + classes_to_add;\n            }\n        }\n        if (styles_to_add) {\n            if (attributes.style == null) {\n                attributes.style = style_object_to_string(styles_to_add);\n            }\n            else {\n                attributes.style = style_object_to_string(merge_ssr_styles(attributes.style, styles_to_add));\n            }\n        }\n    }\n    let str = '';\n    Object.keys(attributes).forEach(name => {\n        if (invalid_attribute_name_character.test(name))\n            return;\n        const value = attributes[name];\n        if (value === true)\n            str += ' ' + name;\n        else if (boolean_attributes.has(name.toLowerCase())) {\n            if (value)\n                str += ' ' + name;\n        }\n        else if (value != null) {\n            str += ` ${name}=\"${value}\"`;\n        }\n    });\n    return str;\n}\nfunction merge_ssr_styles(style_attribute, style_directive) {\n    const style_object = {};\n    for (const individual_style of style_attribute.split(';')) {\n        const colon_index = individual_style.indexOf(':');\n        const name = individual_style.slice(0, colon_index).trim();\n        const value = individual_style.slice(colon_index + 1).trim();\n        if (!name)\n            continue;\n        style_object[name] = value;\n    }\n    for (const name in style_directive) {\n        const value = style_directive[name];\n        if (value) {\n            style_object[name] = value;\n        }\n        else {\n            delete style_object[name];\n        }\n    }\n    return style_object;\n}\nconst ATTR_REGEX = /[&\"]/g;\nconst CONTENT_REGEX = /[&<]/g;\n/**\n * Note: this method is performance sensitive and has been optimized\n * https://github.com/sveltejs/svelte/pull/5701\n */\nfunction escape(value, is_attr = false) {\n    const str = String(value);\n    const pattern = is_attr ? ATTR_REGEX : CONTENT_REGEX;\n    pattern.lastIndex = 0;\n    let escaped = '';\n    let last = 0;\n    while (pattern.test(str)) {\n        const i = pattern.lastIndex - 1;\n        const ch = str[i];\n        escaped += str.substring(last, i) + (ch === '&' ? '&amp;' : (ch === '\"' ? '&quot;' : '&lt;'));\n        last = i + 1;\n    }\n    return escaped + str.substring(last);\n}\nfunction escape_attribute_value(value) {\n    // keep booleans, null, and undefined for the sake of `spread`\n    const should_escape = typeof value === 'string' || (value && typeof value === 'object');\n    return should_escape ? escape(value, true) : value;\n}\nfunction escape_object(obj) {\n    const result = {};\n    for (const key in obj) {\n        result[key] = escape_attribute_value(obj[key]);\n    }\n    return result;\n}\nfunction each(items, fn) {\n    let str = '';\n    for (let i = 0; i < items.length; i += 1) {\n        str += fn(items[i], i);\n    }\n    return str;\n}\nconst missing_component = {\n    $$render: () => ''\n};\nfunction validate_component(component, name) {\n    if (!component || !component.$$render) {\n        if (name === 'svelte:component')\n            name += ' this={...}';\n        throw new Error(`<${name}> is not a valid SSR component. You may need to review your build config to ensure that dependencies are compiled, rather than imported as pre-compiled modules. Otherwise you may need to fix a <${name}>.`);\n    }\n    return component;\n}\nfunction debug(file, line, column, values) {\n    console.log(`{@debug} ${file ? file + ' ' : ''}(${line}:${column})`); // eslint-disable-line no-console\n    console.log(values); // eslint-disable-line no-console\n    return '';\n}\nlet on_destroy;\nfunction create_ssr_component(fn) {\n    function $$render(result, props, bindings, slots, context) {\n        const parent_component = current_component;\n        const $$ = {\n            on_destroy,\n            context: new Map(context || (parent_component ? parent_component.$$.context : [])),\n            // these will be immediately discarded\n            on_mount: [],\n            before_update: [],\n            after_update: [],\n            callbacks: blank_object()\n        };\n        set_current_component({ $$ });\n        const html = fn(result, props, bindings, slots);\n        set_current_component(parent_component);\n        return html;\n    }\n    return {\n        render: (props = {}, { $$slots = {}, context = new Map() } = {}) => {\n            on_destroy = [];\n            const result = { title: '', head: '', css: new Set() };\n            const html = $$render(result, props, {}, $$slots, context);\n            run_all(on_destroy);\n            return {\n                html,\n                css: {\n                    code: Array.from(result.css).map(css => css.code).join('\\n'),\n                    map: null // TODO\n                },\n                head: result.title + result.head\n            };\n        },\n        $$render\n    };\n}\nfunction add_attribute(name, value, boolean) {\n    if (value == null || (boolean && !value))\n        return '';\n    const assignment = (boolean && value === true) ? '' : `=\"${escape(value, true)}\"`;\n    return ` ${name}${assignment}`;\n}\nfunction add_classes(classes) {\n    return classes ? ` class=\"${classes}\"` : '';\n}\nfunction style_object_to_string(style_object) {\n    return Object.keys(style_object)\n        .filter(key => style_object[key])\n        .map(key => `${key}: ${escape_attribute_value(style_object[key])};`)\n        .join(' ');\n}\nfunction add_styles(style_object) {\n    const styles = style_object_to_string(style_object);\n    return styles ? ` style=\"${styles}\"` : '';\n}\n\nfunction bind(component, name, callback) {\n    const index = component.$$.props[name];\n    if (index !== undefined) {\n        component.$$.bound[index] = callback;\n        callback(component.$$.ctx[index]);\n    }\n}\nfunction create_component(block) {\n    block && block.c();\n}\nfunction claim_component(block, parent_nodes) {\n    block && block.l(parent_nodes);\n}\nfunction mount_component(component, target, anchor, customElement) {\n    const { fragment, after_update } = component.$$;\n    fragment && fragment.m(target, anchor);\n    if (!customElement) {\n        // onMount happens before the initial afterUpdate\n        add_render_callback(() => {\n            const new_on_destroy = component.$$.on_mount.map(run).filter(is_function);\n            // if the component was destroyed immediately\n            // it will update the `$$.on_destroy` reference to `null`.\n            // the destructured on_destroy may still reference to the old array\n            if (component.$$.on_destroy) {\n                component.$$.on_destroy.push(...new_on_destroy);\n            }\n            else {\n                // Edge case - component was destroyed immediately,\n                // most likely as a result of a binding initialising\n                run_all(new_on_destroy);\n            }\n            component.$$.on_mount = [];\n        });\n    }\n    after_update.forEach(add_render_callback);\n}\nfunction destroy_component(component, detaching) {\n    const $$ = component.$$;\n    if ($$.fragment !== null) {\n        run_all($$.on_destroy);\n        $$.fragment && $$.fragment.d(detaching);\n        // TODO null out other refs, including component.$$ (but need to\n        // preserve final state?)\n        $$.on_destroy = $$.fragment = null;\n        $$.ctx = [];\n    }\n}\nfunction make_dirty(component, i) {\n    if (component.$$.dirty[0] === -1) {\n        dirty_components.push(component);\n        schedule_update();\n        component.$$.dirty.fill(0);\n    }\n    component.$$.dirty[(i / 31) | 0] |= (1 << (i % 31));\n}\nfunction init(component, options, instance, create_fragment, not_equal, props, append_styles, dirty = [-1]) {\n    const parent_component = current_component;\n    set_current_component(component);\n    const $$ = component.$$ = {\n        fragment: null,\n        ctx: [],\n        // state\n        props,\n        update: noop,\n        not_equal,\n        bound: blank_object(),\n        // lifecycle\n        on_mount: [],\n        on_destroy: [],\n        on_disconnect: [],\n        before_update: [],\n        after_update: [],\n        context: new Map(options.context || (parent_component ? parent_component.$$.context : [])),\n        // everything else\n        callbacks: blank_object(),\n        dirty,\n        skip_bound: false,\n        root: options.target || parent_component.$$.root\n    };\n    append_styles && append_styles($$.root);\n    let ready = false;\n    $$.ctx = instance\n        ? instance(component, options.props || {}, (i, ret, ...rest) => {\n            const value = rest.length ? rest[0] : ret;\n            if ($$.ctx && not_equal($$.ctx[i], $$.ctx[i] = value)) {\n                if (!$$.skip_bound && $$.bound[i])\n                    $$.bound[i](value);\n                if (ready)\n                    make_dirty(component, i);\n            }\n            return ret;\n        })\n        : [];\n    $$.update();\n    ready = true;\n    run_all($$.before_update);\n    // `false` as a special case of no DOM component\n    $$.fragment = create_fragment ? create_fragment($$.ctx) : false;\n    if (options.target) {\n        if (options.hydrate) {\n            start_hydrating();\n            const nodes = children(options.target);\n            // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n            $$.fragment && $$.fragment.l(nodes);\n            nodes.forEach(detach);\n        }\n        else {\n            // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n            $$.fragment && $$.fragment.c();\n        }\n        if (options.intro)\n            transition_in(component.$$.fragment);\n        mount_component(component, options.target, options.anchor, options.customElement);\n        end_hydrating();\n        flush();\n    }\n    set_current_component(parent_component);\n}\nlet SvelteElement;\nif (typeof HTMLElement === 'function') {\n    SvelteElement = class extends HTMLElement {\n        constructor() {\n            super();\n            this.attachShadow({ mode: 'open' });\n        }\n        connectedCallback() {\n            const { on_mount } = this.$$;\n            this.$$.on_disconnect = on_mount.map(run).filter(is_function);\n            // @ts-ignore todo: improve typings\n            for (const key in this.$$.slotted) {\n                // @ts-ignore todo: improve typings\n                this.appendChild(this.$$.slotted[key]);\n            }\n        }\n        attributeChangedCallback(attr, _oldValue, newValue) {\n            this[attr] = newValue;\n        }\n        disconnectedCallback() {\n            run_all(this.$$.on_disconnect);\n        }\n        $destroy() {\n            destroy_component(this, 1);\n            this.$destroy = noop;\n        }\n        $on(type, callback) {\n            // TODO should this delegate to addEventListener?\n            if (!is_function(callback)) {\n                return noop;\n            }\n            const callbacks = (this.$$.callbacks[type] || (this.$$.callbacks[type] = []));\n            callbacks.push(callback);\n            return () => {\n                const index = callbacks.indexOf(callback);\n                if (index !== -1)\n                    callbacks.splice(index, 1);\n            };\n        }\n        $set($$props) {\n            if (this.$$set && !is_empty($$props)) {\n                this.$$.skip_bound = true;\n                this.$$set($$props);\n                this.$$.skip_bound = false;\n            }\n        }\n    };\n}\n/**\n * Base class for Svelte components. Used when dev=false.\n */\nclass SvelteComponent {\n    $destroy() {\n        destroy_component(this, 1);\n        this.$destroy = noop;\n    }\n    $on(type, callback) {\n        if (!is_function(callback)) {\n            return noop;\n        }\n        const callbacks = (this.$$.callbacks[type] || (this.$$.callbacks[type] = []));\n        callbacks.push(callback);\n        return () => {\n            const index = callbacks.indexOf(callback);\n            if (index !== -1)\n                callbacks.splice(index, 1);\n        };\n    }\n    $set($$props) {\n        if (this.$$set && !is_empty($$props)) {\n            this.$$.skip_bound = true;\n            this.$$set($$props);\n            this.$$.skip_bound = false;\n        }\n    }\n}\n\nfunction dispatch_dev(type, detail) {\n    document.dispatchEvent(custom_event(type, Object.assign({ version: '3.55.1' }, detail), { bubbles: true }));\n}\nfunction append_dev(target, node) {\n    dispatch_dev('SvelteDOMInsert', { target, node });\n    append(target, node);\n}\nfunction append_hydration_dev(target, node) {\n    dispatch_dev('SvelteDOMInsert', { target, node });\n    append_hydration(target, node);\n}\nfunction insert_dev(target, node, anchor) {\n    dispatch_dev('SvelteDOMInsert', { target, node, anchor });\n    insert(target, node, anchor);\n}\nfunction insert_hydration_dev(target, node, anchor) {\n    dispatch_dev('SvelteDOMInsert', { target, node, anchor });\n    insert_hydration(target, node, anchor);\n}\nfunction detach_dev(node) {\n    dispatch_dev('SvelteDOMRemove', { node });\n    detach(node);\n}\nfunction detach_between_dev(before, after) {\n    while (before.nextSibling && before.nextSibling !== after) {\n        detach_dev(before.nextSibling);\n    }\n}\nfunction detach_before_dev(after) {\n    while (after.previousSibling) {\n        detach_dev(after.previousSibling);\n    }\n}\nfunction detach_after_dev(before) {\n    while (before.nextSibling) {\n        detach_dev(before.nextSibling);\n    }\n}\nfunction listen_dev(node, event, handler, options, has_prevent_default, has_stop_propagation) {\n    const modifiers = options === true ? ['capture'] : options ? Array.from(Object.keys(options)) : [];\n    if (has_prevent_default)\n        modifiers.push('preventDefault');\n    if (has_stop_propagation)\n        modifiers.push('stopPropagation');\n    dispatch_dev('SvelteDOMAddEventListener', { node, event, handler, modifiers });\n    const dispose = listen(node, event, handler, options);\n    return () => {\n        dispatch_dev('SvelteDOMRemoveEventListener', { node, event, handler, modifiers });\n        dispose();\n    };\n}\nfunction attr_dev(node, attribute, value) {\n    attr(node, attribute, value);\n    if (value == null)\n        dispatch_dev('SvelteDOMRemoveAttribute', { node, attribute });\n    else\n        dispatch_dev('SvelteDOMSetAttribute', { node, attribute, value });\n}\nfunction prop_dev(node, property, value) {\n    node[property] = value;\n    dispatch_dev('SvelteDOMSetProperty', { node, property, value });\n}\nfunction dataset_dev(node, property, value) {\n    node.dataset[property] = value;\n    dispatch_dev('SvelteDOMSetDataset', { node, property, value });\n}\nfunction set_data_dev(text, data) {\n    data = '' + data;\n    if (text.wholeText === data)\n        return;\n    dispatch_dev('SvelteDOMSetData', { node: text, data });\n    text.data = data;\n}\nfunction validate_each_argument(arg) {\n    if (typeof arg !== 'string' && !(arg && typeof arg === 'object' && 'length' in arg)) {\n        let msg = '{#each} only iterates over array-like objects.';\n        if (typeof Symbol === 'function' && arg && Symbol.iterator in arg) {\n            msg += ' You can use a spread to convert this iterable into an array.';\n        }\n        throw new Error(msg);\n    }\n}\nfunction validate_slots(name, slot, keys) {\n    for (const slot_key of Object.keys(slot)) {\n        if (!~keys.indexOf(slot_key)) {\n            console.warn(`<${name}> received an unexpected slot \"${slot_key}\".`);\n        }\n    }\n}\nfunction validate_dynamic_element(tag) {\n    const is_string = typeof tag === 'string';\n    if (tag && !is_string) {\n        throw new Error('<svelte:element> expects \"this\" attribute to be a string.');\n    }\n}\nfunction validate_void_dynamic_element(tag) {\n    if (tag && is_void(tag)) {\n        console.warn(`<svelte:element this=\"${tag}\"> is self-closing and cannot have content.`);\n    }\n}\nfunction construct_svelte_component_dev(component, props) {\n    const error_message = 'this={...} of <svelte:component> should specify a Svelte component.';\n    try {\n        const instance = new component(props);\n        if (!instance.$$ || !instance.$set || !instance.$on || !instance.$destroy) {\n            throw new Error(error_message);\n        }\n        return instance;\n    }\n    catch (err) {\n        const { message } = err;\n        if (typeof message === 'string' && message.indexOf('is not a constructor') !== -1) {\n            throw new Error(error_message);\n        }\n        else {\n            throw err;\n        }\n    }\n}\n/**\n * Base class for Svelte components with some minor dev-enhancements. Used when dev=true.\n */\nclass SvelteComponentDev extends SvelteComponent {\n    constructor(options) {\n        if (!options || (!options.target && !options.$$inline)) {\n            throw new Error(\"'target' is a required option\");\n        }\n        super();\n    }\n    $destroy() {\n        super.$destroy();\n        this.$destroy = () => {\n            console.warn('Component was already destroyed'); // eslint-disable-line no-console\n        };\n    }\n    $capture_state() { }\n    $inject_state() { }\n}\n/**\n * Base class to create strongly typed Svelte components.\n * This only exists for typing purposes and should be used in `.d.ts` files.\n *\n * ### Example:\n *\n * You have component library on npm called `component-library`, from which\n * you export a component called `MyComponent`. For Svelte+TypeScript users,\n * you want to provide typings. Therefore you create a `index.d.ts`:\n * ```ts\n * import { SvelteComponentTyped } from \"svelte\";\n * export class MyComponent extends SvelteComponentTyped<{foo: string}> {}\n * ```\n * Typing this makes it possible for IDEs like VS Code with the Svelte extension\n * to provide intellisense and to use the component like this in a Svelte file\n * with TypeScript:\n * ```svelte\n * <script lang=\"ts\">\n * \timport { MyComponent } from \"component-library\";\n * </script>\n * <MyComponent foo={'bar'} />\n * ```\n *\n * #### Why not make this part of `SvelteComponent(Dev)`?\n * Because\n * ```ts\n * class ASubclassOfSvelteComponent extends SvelteComponent<{foo: string}> {}\n * const component: typeof SvelteComponent = ASubclassOfSvelteComponent;\n * ```\n * will throw a type error, so we need to separate the more strictly typed class.\n */\nclass SvelteComponentTyped extends SvelteComponentDev {\n    constructor(options) {\n        super(options);\n    }\n}\nfunction loop_guard(timeout) {\n    const start = Date.now();\n    return () => {\n        if (Date.now() - start > timeout) {\n            throw new Error('Infinite loop detected');\n        }\n    };\n}\n\nexport { HtmlTag, HtmlTagHydration, SvelteComponent, SvelteComponentDev, SvelteComponentTyped, SvelteElement, action_destroyer, add_attribute, add_classes, add_flush_callback, add_location, add_render_callback, add_resize_listener, add_styles, add_transform, afterUpdate, append, append_dev, append_empty_stylesheet, append_hydration, append_hydration_dev, append_styles, assign, attr, attr_dev, attribute_to_object, beforeUpdate, bind, binding_callbacks, blank_object, bubble, check_outros, children, claim_component, claim_element, claim_html_tag, claim_space, claim_svg_element, claim_text, clear_loops, component_subscribe, compute_rest_props, compute_slots, construct_svelte_component, construct_svelte_component_dev, createEventDispatcher, create_animation, create_bidirectional_transition, create_component, create_in_transition, create_out_transition, create_slot, create_ssr_component, current_component, custom_event, dataset_dev, debug, destroy_block, destroy_component, destroy_each, detach, detach_after_dev, detach_before_dev, detach_between_dev, detach_dev, dirty_components, dispatch_dev, each, element, element_is, empty, end_hydrating, escape, escape_attribute_value, escape_object, exclude_internal_props, fix_and_destroy_block, fix_and_outro_and_destroy_block, fix_position, flush, getAllContexts, getContext, get_all_dirty_from_scope, get_binding_group_value, get_current_component, get_custom_elements_slots, get_root_for_style, get_slot_changes, get_spread_object, get_spread_update, get_store_value, globals, group_outros, handle_promise, hasContext, has_prop, head_selector, identity, init, insert, insert_dev, insert_hydration, insert_hydration_dev, intros, invalid_attribute_name_character, is_client, is_crossorigin, is_empty, is_function, is_promise, is_void, listen, listen_dev, loop, loop_guard, merge_ssr_styles, missing_component, mount_component, noop, not_equal, now, null_to_empty, object_without_properties, onDestroy, onMount, once, outro_and_destroy_block, prevent_default, prop_dev, query_selector_all, raf, run, run_all, safe_not_equal, schedule_update, select_multiple_value, select_option, select_options, select_value, self, setContext, set_attributes, set_current_component, set_custom_element_data, set_custom_element_data_map, set_data, set_data_dev, set_input_type, set_input_value, set_now, set_raf, set_store_value, set_style, set_svg_attributes, space, spread, src_url_equal, start_hydrating, stop_propagation, subscribe, svg_element, text, tick, time_ranges_to_array, to_number, toggle_class, transition_in, transition_out, trusted, update_await_block_branch, update_keyed_each, update_slot, update_slot_base, validate_component, validate_dynamic_element, validate_each_argument, validate_each_keys, validate_slots, validate_store, validate_void_dynamic_element, xlink_attr };\n","/* =================================================================== */\n/*    Methods for statistical distributions                            */\n/* =================================================================== */\n\nimport { isvector, Vector } from '../arrays/index.js';\nimport { integrate } from '../misc/index.js';\n\n\n/**\n * Generates 'n' random numbers from a uniform distribution.\n *\n * @param {number} n - amount of numbers to generate.\n * @param {number} [a=0] - smallest value (min) of the population.\n * @param {number} [b=1] - largest value (max) of the population.\n *\n * @returns {Vector} vector with generated random numbers.\n *\n */\nexport function runif(n, a = 0, b = 1) {\n   let out = Vector.zeros(n);\n   for (let i = 0; i < n; i++) {\n      out.v[i] = (a + Math.random() * (b - a));\n   }\n   return out;\n}\n\n\n/**\n * Cumulative distribution function for uniform distribution.\n *\n * @param {number|Vector} x - vector of values or a single value.\n * @param {number} [a=0] - smallest value (min) of the population.\n * @param {number} [b=1] - largest value (max) of the population.\n *\n * @returns {number|Vector} computed probabilities.\n *\n */\nexport function punif(x, a = 0, b = 1) {\n\n   if (isvector(x)) {\n      return x.apply(v => punif(v, a, b));\n   }\n\n   return x < a ? 0 : (x > b ? 1 : (x - a) / (b - a));\n}\n\n\n/**\n * Probability density function for uniform distribution.\n *\n * @param {number|Vector} x - vector of values or a single value.\n * @param {number} [a=0] - smallest value (min) of the population.\n * @param {number} [b=1] - largest value (max) of the population.\n *\n * @returns {number|Vector} computed densities.\n *\n */\nexport function dunif(x, a = 0, b = 1) {\n\n   if (isvector(x)) {\n      return x.apply(v => dunif(v, a, b));\n   }\n\n   return x < a || x > b ? 0 : 1 / (b - a);\n}\n\n\n /**\n * Generates 'n' random numbers from a normal distribution.\n *\n * @param {number} n - amount of numbers to generate.\n * @param {number} [mu=0] - average value of the population.\n * @param {number} [sigma=1] - standard deviation of the population.\n *\n * @returns {Vector} vector with generated random numbers.\n */\nexport function rnorm(n, mu = 0, sigma = 1) {\n\n   let out = Vector.zeros(n);\n   for (let i = 0; i < n; i ++) {\n      const a = Math.sqrt(-2 * Math.log(Math.random()));\n      const b = 2 * Math.PI * Math.random();\n      out.v[i] = (a * Math.sin(b) * sigma + mu);\n   }\n\n   return out;\n}\n\n\n/**\n * Probability density function for normal distribution.\n *\n * @param {number|Vector} x - vector of values of a single value.\n * @param {number} [mu=0] - average value of the population.\n * @param {number} [sigma=1] - standard deviation of the population.\n *\n * @returns {number|Vector} computed densities.\n *\n */\nexport function dnorm(x, mu = 0, sigma = 1) {\n\n   if (isvector(x)) {\n      return x.apply(v => dnorm(v, mu, sigma));\n   }\n\n   const z = (x - mu) / sigma;\n   return Math.exp(-0.5 * z * z) / (Math.sqrt(2 * Math.PI) * sigma);\n}\n\n\n/**\n * Cumulative distribution function for normal distribution.\n *\n * @param {number|Vector} x - vector of values or a single value.\n * @param {number} [mu=0] - average value of the population.\n * @param {number} [sigma=1] - standard deviation of the population.\n *\n * @returns {number|Vector} computed probabilities.\n *\n */\nexport function pnorm(x, mu = 0, sigma = 1) {\n\n   if (isvector(x)) {\n      return x.apply(v => pnorm(v, mu, sigma));\n   }\n\n   const frac = 1 / (Math.sqrt(2) * sigma);\n   return  0.5 * (1 + erf((x - mu) * frac));\n}\n\n\n/**\n * Inverse cumulative distribution function for normal distribution.\n *\n * @param {number|Vector} p - vector of probabilities or a single probability value.\n * @param {number} [mu=0] - average value of the population.\n * @param {number} [sigma=1] - standard deviation of the population.\n *\n * @returns {number|Vector} computed quantiles.\n *\n */\nexport function qnorm(p, mu = 0, sigma = 1) {\n\n   if (isvector(p)) {\n      return p.apply(v => qnorm(v, mu, sigma));\n   }\n\n   if (mu !== 0 || sigma !== 1) {\n      return qnorm(p) * sigma + mu;\n   }\n\n   if (p < 0 || p > 1) {\n      throw Error('Parameter \"p\" must be between 0 and 1.');\n   }\n\n   if (p < 0.0000000001) return -Infinity;\n   if (p > 0.9999999999) return +Infinity;\n\n   const SP1 = 0.425;\n   const SP2 = 5.0;\n   const C1 = 0.180625;\n   const C2 = 1.6;\n\n   const a0 = 3.3871327179;\n   const a1 = 5.0434271938 * 10;\n   const a2 = 1.5929113202 * 100;\n   const a3 = 5.9109374720 * 10;\n   const b1 = 1.7895169469 * 10;\n   const b2 = 7.8757757664 * 10;\n   const b3 = 6.7187563600 * 10;\n\n   const c0 = 1.4234372777;\n   const c1 = 2.7568153900;\n   const c2 = 1.3067284816;\n   const c3 = 1.7023821103 * 0.1;\n   const d1 = 7.3700164250 * 0.1;\n   const d2 = 1.2021132975 * 0.1;\n\n   const e0 = 6.6579051150;\n   const e1 = 3.0812263860;\n   const e2 = 4.2868294337 * 0.1;\n   const e3 = 1.7337203997 * 0.01;\n   const f1 = 2.4197894225 * 0.1;\n   const f2 = 1.2258202635 * 0.01;\n\n   const q = p - 0.5;\n   let r;\n\n   if (Math.abs(q) <= SP1) {\n      r = C1 - q * q;\n      return q * (((a3 * r + a2) * r + a1) *r + a0) / (((b3 * r + b2) * r + b1) * r + 1.0);\n   }\n\n   r = q < 0 ? p : 1 - p;\n   r = Math.sqrt(-Math.log(r));\n   let res;\n\n   if (r <= SP2) {\n      r = r - C2;\n      res = (((c3 * r + c2) * r + c1) * r + c0) / ((d2 * r + d1) * r + 1.0);\n   } else {\n      r = r - SP2;\n      res = (((e3 * r + e2) * r + e1) + e0) / ((f2 * r + f1) * r + 1.0);\n   }\n\n   return q < 0 ? -res : res;\n}\n\n\n/**\n * Probability density function for Student's t-distribution.\n *\n * @param {number|Vector} t - t-value or a vector of t-values.\n * @param {number} dof - degrees of freedom.\n *\n * @returns {number|Vector} computed densities.\n *\n */\nexport function dt(t, dof) {\n\n   if (dof < 0) {\n      throw new Error('Parameter \"dof\" should be a positive number.');\n   }\n\n   if (isvector(t)) {\n      return t.apply(v => dt(v, dof));\n   }\n\n   const pow = -0.5 * (dof + 1);\n   const A = 1 / (Math.sqrt(dof) * beta(0.5, dof/2));\n\n   return (A * Math.pow((1 + t * t / dof), pow));\n}\n\n\n/**\n * Cumulative distribution function for Student's t-distribution.\n *\n * @param {number|Vector} t - t-value or a vector of t-values.\n * @param {number} dof - degrees of freedom.\n *\n * @returns {number|Vector} computed probabilities.\n *\n */\nexport function pt(t, dof) {\n\n   if (dof === undefined || dof === null || dof < 1) {\n      throw Error('Parameter \"dof\" (degrees of freedom) must be an integer number >= 1.');\n   }\n\n   if (isvector(t)) {\n      return t.apply(v => pt(v, dof));\n   }\n\n   // since distribution in symmetric we can use only left tail\n   if (t === 0) return 0.5;\n   if (t === -Infinity) return 0;\n   if (t === Infinity) return 1;\n   if (t > 0) return (1 - pt(-t, dof));\n\n   return integrate((x) => dt(x, dof), -Infinity, t);\n}\n\n\n/**\n * Inverse cumulative distribution (quantile) function for Student's t-distribution.\n *\n * @param {number|Vector} p - probability or vector with probabilities.\n * @param {number} dof - degrees of freedom.\n *\n * @returns {number|Vector} computed quantiles.\n *\n */\nexport function qt(p, dof) {\n\n   if (dof === undefined || dof === null || dof < 1) {\n      throw Error('Parameter \"dof\" (degrees of freedom) must be an integer number >= 1.');\n   }\n\n   if (p < 0 || p > 1) {\n      throw Error('Parameter \"p\" must be between 0 and 1.');\n   }\n\n   if (isvector(p)) {\n      return p.apply(v => qt(v, dof));\n   }\n\n   if (p < 0.0000000001) return -Infinity;\n   if (p > 0.9999999999) return +Infinity;\n\n\n   // simple cases — exact solutions\n   if (dof === 1) {\n      return Math.tan(Math.PI * (p - 0.5));\n   }\n\n   if (dof === 2) {\n      return 2 * (p - 0.5) * Math.sqrt(2 / (4 * p * (1 - p)));\n   }\n\n   // approximation\n\n   let sign = -1;\n   if (p >= 0.5){\n      sign = +1 ;\n      p = 2 * (1 - p);\n   } else {\n      sign = -1;\n      p = 2 * p;\n   }\n\n   const a = 1.0 / (dof - 0.5);\n   const b = 48.0 / (a ** 2);\n   let c = ((20700 * a / b - 98) * a - 16) * a + 96.36;\n   const d = ((94.5 / (b + c) - 3.0)/b + 1.0) * Math.sqrt(a * Math.PI / 2) * dof;\n\n   let x = d * p;\n   let y = x ** (2.0/dof);\n\n   if (y > 0.05 + a) {\n\n      // asymptotic inverse expansion about normal\n      x = qnorm(p * 0.5);\n      y = x * x;\n\n      if (dof < 5) {\n         c = c + 0.3 * (dof - 4.5) * (x + 0.6);\n      }\n\n      c = (((0.05 * d * x - 5.0) * x - 7.0) * x - 2.0) * x + b + c;\n      y = (((((0.4 * y + 6.3) * y + 36.0) * y + 94.5) / c - y - 3.0)/b + 1.0) * x;\n      y = a * (y ** 2);\n      y = y > 0.002 ? Math.exp(y) - 1.0 : 0.5 * (y ** 2) + y;\n   } else {\n      y = ((1.0 / (((dof + 6.0)/(dof * y) - 0.089 * d - 0.822) * (dof + 2.0) * 3.0) + 0.5/(dof + 4.0)) * y - 1.0) *\n         (dof + 1.0)/(dof + 2.0) + 1.0/y;\n   }\n\n   return sign * Math.sqrt(dof * y);\n}\n\n\n/**\n * Probability density function for F-distribution.\n *\n * @param {number|Vector} F - F-value or a vector of t-values\n * @param {number} d1 - degrees of freedom.\n * @param {number} d2 - degrees of freedom.\n *\n * @returns {number|Vector} computed densities.\n *\n */\nexport function df(F, d1, d2) {\n\n   if (F < 0 || d1 < 0 || d2 < 0) {\n      throw new Error('All 3 parameters must be positive.');\n   }\n\n   if (d2 <= d1) {\n      throw new Error('Parameter \"d1\" must be larger \"d2\".');\n   }\n\n   if (isvector(F)) {\n      return F.apply(v => df(v, d1, d2));\n   }\n\n   return Math.sqrt( ( Math.pow(d1 * F, d1) * Math.pow(d2, d2)) / Math.pow(d1 * F + d2, d1 + d2)) / (F * beta(d1/2, d2/2))\n}\n\n\n/**\n * Cumulative distribution function for F-distribution.\n *\n * @param {number|Vector} F - F-value or a vector of t-values.\n * @param {number} d1 - degrees of freedom.\n * @param {number} d2 - degrees of freedom.\n *\n * @returns {number|Vector} computed probabilities.\n *\n */\nexport function pf(F, d1, d2) {\n\n   if (F < 0 || d1 < 0 || d2 < 0) {\n      throw new Error('All 3 parameters must be positive.');\n   }\n\n   if (isvector(F)) {\n      return F.apply(v => pf(v, d1, d2));\n   }\n\n   return ibeta(d1 * F / (d1 * F + d2), d1/2, d2/2)\n}\n\n\n/**\n * Incomplete Betta function (approximation via numeric integration).\n *\n * @param {number} x - first argument.\n * @param {number} a - second argument.\n * @param {number} b - third argument.\n *\n * @returns {number} value of the function.\n *\n */\nexport function ibeta(x, a, b) {\n\n   if (x === 0) return 0;\n   if (x === 1) return 1;\n   if (b === 1) return x ** a;\n   if (a === 1) return (1 - (1 - x)**b);\n\n   return integrate((t) => t ** (a - 1) * (1 - t) ** (b - 1), 0, x) / beta(a, b);\n}\n\n\n/**\n * Gamma function (approximation).\n *\n * @param {number|Vector} z - argument (one value or a vector).\n *\n * @returns {number} value of the Gamma function.\n *\n */\nexport function gamma(z) {\n\n   if (isvector(z)) {\n      return z.apply(gamma);\n   }\n\n   if (z <= 0) {\n      throw new Error('gamma: the function only works with arguments > 0.');\n   }\n\n   // coefficients\n   const p = [\n        676.5203681218851,\n      -1259.1392167224028,\n        771.32342877765313,\n       -176.61502916214059,\n         12.507343278686905,\n         -0.13857109526572012,\n          9.9843695780195716e-6,\n          1.5056327351493116e-7\n    ];\n\n   if (z < 0.5) {\n      return Math.PI / (Math.sin(Math.PI * z) + gamma(1 - z));\n   }\n\n   z = z - 1;\n   let x = 0.99999999999980993;\n\n   for (let i = 0; i < p.length; i++) {\n      x = x + p[i] / (z + i + 1);\n   }\n\n   const t = z + p.length - 0.5;\n   return Math.sqrt(2 * Math.PI) * Math.pow(t, z + 0.5) * Math.exp(-t) * x;\n}\n\n\n/**\n * Beta function (approximation).\n *\n * @param {number} x - first argument (one value).\n * @param {number} y - second argument (one value).\n *\n * @returns {number} value of the Beta function.\n *\n */\nexport function beta(x, y) {\n\n   if (y > 100) {\n      // for large y we use slower integrate version\n      return integrate((u) => Math.pow(u, x - 1) / Math.pow(1 + u, x + y), 0, Infinity)\n   }\n\n   return gamma(x) * gamma(y) / gamma(x + y);\n}\n\n\n/**\n * Error function for normal distribution.\n *\n * @param {number} x - a number.\n *\n * @returns {number} value for erf.\n *\n */\nexport function erf(x) {\n\n  const sign = (x >= 0) ? 1 : -1;\n  x = Math.abs(x);\n\n  // constants\n  const a1 =  0.254829592;\n  const a2 = -0.284496736;\n  const a3 =  1.421413741;\n  const a4 = -1.453152027;\n  const a5 =  1.061405429;\n  const p  =  0.3275911;\n\n  // approximation\n  const t = 1.0 / (1.0 + p * x);\n  const y = 1.0 - (((((a5 * t + a4) * t) + a3) * t + a2) * t + a1) * t * Math.exp(-x * x);\n\n  return sign * y;\n}\n\n\n","/************************************************************/\n/*    Methods for computing matrix decompositions           */\n/************************************************************/\n\n\nimport { ssq } from '../stat/index.js';\nimport { crossprod, Vector, Matrix, Index } from '../arrays/index.js';\n\n\n/**\n * Randomized SVD decomposition.\n *\n * @param {Matrix} X - matrix to decompose.\n * @param {number} [ncomp] - number of components.\n *\n * @returns {JSON} JSON with three fields, 's' - vector with singular values,\n * 'U', 'V' - matrices with left and right singular vectors.\n *\n */\nexport function rsvd(X, ncomp) {\n\n   const m = X.nrows;\n   const n = X.ncols;\n\n   if (ncomp === undefined) {\n      ncomp = Math.round(Math.min(m - 1, n) / 1.5);\n   }\n\n   if (m < n) {\n      const res = rsvd(X.t(), ncomp);\n      return {s: res.s, V: res.U, U: res.V}\n   }\n\n   // the more the better but slower\n   const its = 3;\n   const l = ncomp + 5;\n\n   let Q = qr(X.dot(Matrix.rand(n, l, -1, 1))).Q;\n\n   for (let it = 1; it <= its; it++) {\n      // Q = qr(crossprod(X, Q)).Q;\n      // Q = qr(dot(X, Q)).Q;\n      Q = lu(crossprod(X, Q)).L;\n      Q = it < its ? lu(X.dot(Q)).L : qr(X.dot(Q)).Q;\n   }\n\n   const res = svd(crossprod(Q, X), ncomp);\n   return {s: res.s, V: res.V, U: Q.dot(res.U)};\n}\n\n/**\n * QR decomposition\n *\n * @param {Matrix} X - matrix to decompose.\n *\n * @returns {JSON} JSON with two matrices, Q and R, so X = QR.\n *\n */\nexport function qr(X) {\n\n   const m = X.nrows;\n   const n = X.ncols;\n\n   if (m < n) {\n      const res = qr(X.subset([], Index.seq(1, m)));\n      return {Q:res.Q, R:crossprod(res.Q, X)}\n   }\n\n   let Q = Matrix.eye(m);\n   let Rt = X.t();\n\n   for (let j = 1; j <= n; j++) {\n      for (let i = m; i >= (j + 1); i--) {\n\n         const r = Rt.v.subarray((i - 2) * n, i * n);\n         const q =  Q.v.subarray((i - 2) * m, i * m);\n         const rc = r.slice();\n         const qc = q.slice();\n\n         const [c, s, temp] = rot(rc[j - 1], rc[j - 1 + n]);\n\n         // apply transformation to columns i and i - 1 of matrix Rt\n         for (let k = 0; k < n; k++) {\n\n            r[k]     = rc[k] *  c + rc[k + n] * s;\n            r[k + n] = rc[k] * -s + rc[k + n] * c;\n\n            q[k]     = qc[k] *  c + qc[k + m] * s;\n            q[k + m] = qc[k] * -s + qc[k + m] * c;\n         }\n\n         for (let k = n; k < m; k++) {\n            q[k]     = qc[k] *  c + qc[k + m] * s;\n            q[k + m] = qc[k] * -s + qc[k + m] * c;\n         }\n      }\n   }\n\n   const ind = Index.seq(1, n);\n   return {\n      Q: m === n ? Q : Q.subset([], ind),\n      R: m === n ? Rt.t() : Rt.subset([], ind).t()\n   }\n}\n\n/**\n * LU decomposition.\n *\n * @param {Matrix} X - matrix to decompose.\n *\n * @returns {JSON} JSON with two matrices, L and U, so X = LU.\n *\n */\nexport function lu(X) {\n\n   const nr = X.nrows;\n   const nc = X.ncols\n   const n = Math.min(nr, nc)\n\n   const Lv = new Float64Array(nr * nc);\n   const Uv = new Float64Array(nc * nc);\n   const Xv = X.v.slice();\n\n   const s = Math.round(Math.pow(n, 0.5285425));\n   let z = 1;\n\n   for (let c = 1; c <= n; c++) {\n\n      if (c == z + s) {\n         const nro = nr - c + 1;\n         const nco = nc - c + 1;\n         const ni = c - z;\n         const Sv = new Float64Array(nro * nco);\n\n         for (let i = 0; i < nro; i++) {\n            for (let j = 0; j < nco; j++) {\n               let s = 0;\n               for (let k = 0; k < ni; k++) {\n                  s += Lv[(z - 1 + k) * nr + (c - 1) + i] * Uv[(c - 1 + j) * nc + (z - 1 + k)];\n               }\n               Sv[j * nro + i] = s;\n            }\n         }\n\n         for (let i = c; i <= nr; i++) {\n            for (let j = c; j <= nc; j++) {\n               Xv[(j - 1) * nr + (i - 1)] = Xv[(j - 1) * nr + (i - 1)] - Sv[(j - c) * nro + (i - c)];\n            }\n         }\n\n         z = c;\n      }\n\n      for (let i = c; i <= nr; i++) {\n         let acc = Xv[(c - 1) * nr + (i - 1)];\n         for (let k = z; k <= c - 1; k++) {\n            acc = acc - Lv[(k - 1) * nr + (i - 1)] * Uv[(c - 1) * nc + (k - 1)];\n         }\n         Lv[(c - 1) * nr + (i - 1)] = acc;\n      }\n\n      for (let i = c; i <= nc; i++) {\n         let acc = Xv[(i - 1) * nr + (c - 1)];\n         for (let k = z; k <= c - 1; k++) {\n            acc = acc - Lv[(k - 1) * nr + (c - 1)] * Uv[(i - 1) * nc + (k - 1)];\n         }\n         const l = Lv[(c - 1) * nr + (c - 1)];\n         Uv[(i - 1) * nc + (c - 1)] = (l == 0 ? acc : acc / l);\n      }\n   }\n\n   return {L: new Matrix(Lv, nr, nc), U: new Matrix(Uv, nc, nc)}\n}\n\n\n/**\n * Singular value decomposition\n *\n * @param {Matrix} X - matrix to decompose.\n * @param {number} [ncomp] - number of components.\n *\n * @returns {JSON} JSON with three fields, 's' - vector with singular values,\n * 'U', 'V' - matrices with left and right singular vectors.\n *\n */\nexport function svd(X, ncomp) {\n\n   if (X.nrows < X.ncols) {\n      const res = svd(X.t(), ncomp);\n      return {s: res.s, V: res.U, U: res.V}\n   }\n\n   const m = X.nrows;\n   const n = X.ncols;\n\n   if (!ncomp) {\n      ncomp = Math.min(m, n);\n   }\n\n   let [B, V, U] = bidiag(X);\n\n   // get diagonal elements of B\n   let d = new Float64Array(n);\n   let e = new Float64Array(n - 1);\n   for (let i = 0; i < n - 1; i++) {\n      d[i] = B.v[i * n + i];\n      e[i] = B.v[(i + 1) * n + i];\n   }\n   d[n - 1] = B.v[(n - 1) * n + n - 1];\n\n   const maxit = 500 * n * n;\n   const thresh = Math.pow(10, -16);\n   let Gt = Matrix.eye(n);\n   let P = Matrix.eye(n);\n\n   for (let it = 0; it < maxit; it++) {\n\n      // find first nonzero element in e from bottom\n      let iU = 0;\n      for (let i = n - 1; i >= 1; i--) {\n         if (Math.abs(e[i - 1]) > thresh) {\n            iU = i\n            break;\n         }\n      }\n\n      // find first nonzero element in e from top\n      let iL = iU + 1;\n      for (let i = 1; i <= n - 1; i++) {\n         if (Math.abs(e[i - 1]) > thresh) {\n            iL = i;\n            break;\n         }\n      }\n\n      // check the convergence and return result\n      if ((iU == iL && Math.abs(e[iU - 1]) <= thresh) || (iU < iL)) {\n\n         const s = d.slice(0, ncomp);\n         const Uout = Matrix.zeros(m, ncomp);\n         const Vout = Matrix.zeros(n, ncomp);\n\n         for (let k = 1; k <= ncomp; k++) {\n\n            const pk = P.getcolref(k);\n            const gtk = Gt.getcolref(k);\n\n            const uk = Uout.getcolref(k);\n            const vk = Vout.getcolref(k);\n\n            const sign = Math.sign(s[k - 1]);\n\n            for (let i = 0; i < n; i++) {\n\n               const ui = U.getcolref(i + 1);\n               const vi = V.getcolref(i + 1);\n\n               const pki = pk[i] * sign;\n               const gtki = gtk[i];\n\n               for (let r = 0; r < n; r++) {\n                  uk[r] += ui[r] * pki;\n                  vk[r] += vi[r] * gtki;\n               }\n\n               for (let r = n; r < m; r++) {\n                  uk[r] += ui[r] * pki;\n               }\n            }\n\n            s[k - 1] = Math.abs(s[k - 1]);\n         }\n\n         return {s: new Vector(s), U: Uout, V: Vout};\n      }\n\n      // re-sweep\n      const [rd, re, rG, rPt] = vsweep(d.subarray(iL - 1, iU + 1), e.subarray(iL - 1, iU));\n\n      // replace elements of d and e\n      d.set(rd, iL - 1);\n      e.set(re, iL - 1);\n\n      // now we need to compute:\n      // G = rG' * G = (G' * rG)' -> this should be done only fo selected columns in G\n      // P =            P  * rP'  -> only for selected columns in P\n\n      // get local copy of selected columns from G' and P\n      const l = iU - iL + 2;\n      const lGt = Matrix.zeros(n, l);\n      const lP = Matrix.zeros(n, l)\n      for (let c = iL; c <= iU + 1; c++) {\n         lGt.v.set(Gt.v.subarray((c - 1) * n, c * n), (c - iL) * n);\n         lP.v.set(P.v.subarray((c - 1) * n, c * n), (c - iL) * n);\n      }\n\n      // compute dot(lG', rG) and save back to G\n      // compute dot(P, rP') and save back to P\n      for (let c = 1; c <= l; c++) {\n         const newgc = lGt.dot(new Vector(rG.getcolref(c)));\n         const newpc = lP.dot(new Vector(rPt.getcolref(c)));\n         Gt.v.set(newgc.v, (c - 1 + iL - 1) * n);\n         P.v.set(newpc.v, (c - 1 + iL - 1) * n);\n      }\n   }\n\n   throw Error(\"svd: can not converge.\")\n}\n\n\n/**\n * Applies givens rotations to diagonal elements of bidiagonalized matrix.\n *\n * @param {Float64Array} d - vector with main diagonal elements.\n * @param {Float64Array} e - vector with diagonal elements on top of main diagonal.\n *\n * @returns {Array} array with vectors 'd' and 'e' after rotation as well as right\n * transformation matrices G and P'.\n *\n */\nexport function vsweep(d, e) {\n\n   const n = d.length;\n\n   let cold = 1;\n   let sold = 1;\n\n   let c = 1;\n   let s = 0;\n   let r = 0;\n\n   let G = Matrix.eye(n);\n   let Pt = Matrix.eye(n);\n\n   for (let k = 1; k <= (n - 1); k++) {\n\n      [c, s, r] = rot(c * d[k - 1], e[k - 1]);\n\n      // get two columns from G and rotate their values\n      const gk = G.v.subarray((k - 1) * n, (k + 1) * n);\n      const gkc = gk.slice();\n\n      for (let i = 0; i < n; i++) {\n         gk[i]     =  gkc[i] * c + gkc[i + n] * s;\n         gk[i + n] = -gkc[i] * s + gkc[i + n] * c;\n      }\n\n      if (k != 1) {\n         e[k - 2] = r * sold;\n      }\n\n      [cold, sold, r] = rot(cold * r, d[k] * s);\n      d[k - 1] = r;\n\n      // get two columns from Pt and rotate their values\n      const ptk = Pt.v.subarray((k - 1) * n, (k + 1) * n);\n      const ptkc = ptk.slice();\n\n      for (let i = 0; i < n; i++) {\n         ptk[i]     =  ptkc[i] * cold + ptkc[i + n] * sold;\n         ptk[i + n] = -ptkc[i] * sold + ptkc[i + n] * cold;\n      }\n\n   }\n\n   const h = c * d[n - 1];\n   e[n - 2] = h * sold;\n   d[n - 1] = h * cold;\n\n   return [d, e, G, Pt];\n}\n\n\n/**\n * Generate c, s, r values for Givens rotations, so [c s; -s c][f; g] = [r; 0].\n *\n * @param {number} f - first element of vector.\n * @param {number} g - second element of vector.\n *\n * @return array with values [c, s, r].\n *\n */\nexport function rot(f, g) {\n\n   if (f == 0) {\n      return [0, 1, g];\n   }\n\n   if (Math.abs(f) > Math.abs(g)) {\n      const t = g / f;\n      const t1 = Math.sqrt(1 + t * t);\n      const c = 1 / t1\n      return [c, t * c, f * t1];\n   }\n\n   const t = f / g;\n   const t1 = Math.sqrt(1 + t * t)\n   const s = 1 / t1\n   return [t * s, s, g * t1];\n}\n\n\n/**\n * Golub-Reinsch bidiagonalization of matrix A\n *\n * @param {Matrix} A - matrix with values.\n *\n * @returns {Array} array with three matrices [B, V, U].\n *\n */\nexport function bidiag(A) {\n\n   const m = A.nrows;\n   const n = A.ncols;\n\n   if (m < n) {\n      throw Error(\"bidiag: number of rows in A must not be smaller number of columns.\");\n   }\n\n   let Ut = Matrix.eye(m);\n   let V = Matrix.eye(n);\n   let B = A.copy();\n\n   for (let k = 1; k <= (m > n ? n : n - 1); k++) {\n\n      const mk = m - k + 1;\n\n      // compute:\n      // B  = H * B\n      // U' = H' * U';\n      const H1 = householder(B.getcolref(k), k);\n\n      for (let c = 1; c <= n; c++) {\n\n         // get c-th column of B (starting from (k-1) row) and make a copy\n         const bc = B.v.subarray((c - 1) * m + k - 1, c * m)\n         const bcc = bc.slice();\n\n         // get c-th column of U' (starting from (k-1) row) and make a copy\n         const utc = Ut.v.subarray((c - 1) * m + k - 1, c * m)\n         const utcc = utc.slice();\n\n         for (let r = k; r <= m; r++) {\n            // because H is symmetric we take column instead of row\n            const hr = H1.getcolref(r - k + 1);\n            let sb = 0;\n            let sut = 0;\n            for (let i = 0; i < mk; i++) {\n               sb += hr[i] * bcc[i];\n               sut += hr[i] * utcc[i]\n            }\n            bc[r - k] = sb;\n            utc[r - k] = sut;\n         }\n      }\n\n\n      for (let c = n + 1; c <= m; c++) {\n\n         // get c-th column of U' and make a copy\n         const utc = Ut.v.subarray((c - 1) * m + k - 1, c * m)\n         const utcc = utc.slice();\n\n         for (let r = k; r <= m; r++) {\n            const hr = H1.getcolref(r - k + 1);\n            let sut = 0;\n            for (let i = 0; i < mk; i++) {\n               sut += hr[i] * utcc[i];\n            }\n            utc[r - k] = sut;\n         }\n      }\n\n      if (k < n - 1) {\n\n         // compute:\n         // B = B * H'\n         // V = V * H\n         const H2 = householder(B.getrow(k).v, k + 1);\n\n         // we need to process columns from k + 1, so make a subset from the start\n         const Bvk = B.v.subarray(k * m);\n         const Vvk = V.v.subarray(k * n);\n\n         let br = new Float64Array(n - k)\n         let vr = new Float64Array(n - k)\n\n         // process first n rows for both B and V\n         for (let r = 1; r <= n; r++) {\n\n            // get elements from r-th row\n            for (let i = 0; i < n - k; i++) {\n               br[i] = Bvk[i * m + r - 1];\n               vr[i] = Vvk[i * n + r - 1];\n            }\n\n            for (let c = k + 1; c <= n; c++) {\n               const hc = H2.getcolref(c - k);\n               let sb = 0;\n               let sv = 0;\n               for (let i = 0; i < H2.nrows; i++) {\n                  sb += br[i] * hc[i];\n                  sv += vr[i] * hc[i];\n               }\n               Bvk[(c - k - 1) * m + (r - 1)] = sb;\n               Vvk[(c - k - 1) * n + (r - 1)] = sv\n            }\n         }\n\n         // process rows from (n+1) to m for B only\n         for (let r = n + 1; r <= m; r++) {\n\n            // get elements from r-th row\n            for (let i = 0; i < n - k; i++) {\n               br[i] = Bvk[i * m + r - 1];\n            }\n\n            for (let c = k + 1; c <= n; c++) {\n               const hc = H2.getcolref(c - k);\n               let sb = 0;\n               for (let i = 0; i < H2.nrows; i++) {\n                  sb += br[i] * hc[i];\n               }\n               Bvk[(c - k - 1) * m + (r - 1)] = sb;\n            }\n         }\n      }\n   }\n\n   const ind = Index.seq(1, n);\n   return [B.subset(ind, []), V, Ut.t().subset([], ind)];\n}\n\n\n/**\n * Compute elements of Householder transformation as a matrix.\n *\n * @param {Float64Array} b - array with diagonal values.\n * @param {number} k - position to start with.\n *\n * @returns {Matrix} matrix with transformation values.\n *\n */\nexport function householder(b, k) {\n\n   // get vector with values\n   const h = householderv(b, k);\n   const n = h.length;\n\n   // compute matrix as outer product of the vector\n   const H = Matrix.zeros(n);\n   for (let c = 0; c < n; c++) {\n      const hc = H.getcolref(c + 1);\n      for (let r = 0; r < n; r++) {\n         hc[r] = 1 * (r == c) - 2 * h[r] * h[c];\n      }\n   }\n\n   return H;\n}\n\n\n/**\n * Compute elements of Householder transformation as a vector.\n *\n * @param {Float64Array} b - array with diagonal values.\n * @param {number} k - position to start with.\n *\n * @returns {Float64Array} vector with transformation values.\n *\n */\nexport function householderv(b, k) {\n\n   const n = b.length;\n\n   if (k >= n) {\n      throw Error(\"householder: parameter 'k' must be smaller than length of vector 'b'.\")\n   }\n\n   const hlen = n - k + 1;\n   const h = b.slice(k - 1);\n\n   // to avoid computing norm2 twice we will\n   // compute it based on the first norm\n   const hssq = ssq(h);\n   const hn2 = Math.sqrt(hssq);\n   const s = Math.sign(h[0]);\n   const a = h[0];\n\n   // change first value in the vector\n   h[0] = a - s * hn2;\n\n   // recompute the norm\n   const hn2a = Math.sqrt(2 * hssq - 2 * s * a * hn2);\n\n   // if norm is zero return vector as is\n   if (hn2a < Number.EPSILON) return h\n\n   // normalize vector and return\n   for (let i = 0; i < hlen; i++) {\n      h[i] /=  hn2a;\n   }\n\n   return h;\n}\n\n\n\n\n\n","/* =================================================================== */\n/*    Methods for Arrays (vectors, matrices, indices and factors, )    */\n/* =================================================================== */\n\nimport { min, max, prod } from '../stat/index.js';\nimport { rnorm, runif } from '../distributions/index.js';\nimport { qr } from '../decomp/index.js';\n\nexport function isnumber(x) {\n   return typeof(x) === 'number';\n}\n\n\n/**************************************************/\n/*    Non-class methods for Vectors and Matrix    */\n/**************************************************/\n\n/**\n * Compute XY' product of two matrices.\n *\n * @param {Matrix} X - a matrix.\n * @param {Matrix} Y - a matrix.\n *\n * @returns {Matrix} result of the product.\n *\n */\nexport function tcrossprod(X, Y) {\n\n   if (Y === undefined) {\n      Y = X;\n   }\n\n   const nrx = X.nrows;\n   const ncx = X.ncols;\n\n   const nry = Y.nrows;\n   const ncy = Y.ncols;\n\n   // create vector for the product\n   const nrows = nrx;\n   const ncols = nry;\n   const ninner = ncx;\n   const out = new Float64Array(nrows * ncols);\n\n   for (let i = 0; i < ninner; i++) {\n      const xr = X.v.subarray(i * nrx, (i + 1) * nrx);\n      const yc = Y.v.subarray(i * nry, (i + 1) * nry);\n\n      for (let c = 0; c < ncols; c++) {\n         const outc = out.subarray(c * nrows, (c + 1) * nrows);\n         for (let r = 0; r < nrows; r++) {\n            outc[r] += xr[r] * yc[c];\n         }\n      }\n   }\n\n   return new Matrix(out, nrows, ncols);\n\n}\n\n\n/**\n * Compute X'Y product of two matrices or a vector and a matrix.\n *\n * @param {Matrix|Vector} X - a matrix or a vector.\n * @param {Matrix} Y - a matrix.\n *\n * @returns {Matrix} result of the product.\n *\n */\nexport function crossprod(X, Y) {\n\n   if (Y === undefined) {\n      Y = X;\n   }\n\n   const nrx = X.nrows;\n   const ncx = X.ncols;\n\n   const nry = Y.nrows;\n   const ncy = Y.ncols;\n\n   // create vector for the product\n   const nrows = ncx;\n   const ncols = ncy;\n   const ninner = nrx;\n   const out = new Float64Array(nrows * ncols);\n\n   for (let c = 0; c < ncols; c++) {\n      // column c of Y\n      const yc = Y.v.subarray(c * nry, (c + 1) * nry);\n\n      // column c of out\n      const outc = out.subarray(c * nrows, (c + 1) * nrows);\n\n      for (let r = 0; r < nrows; r++) {\n\n         // column r of X (row r of X')\n         const xr = X.v.subarray(r * nrx, (r + 1) * nrx);\n\n         let s = 0;\n         for (let i = 0; i < ninner; i++) {\n            s += xr[i] * yc[i];\n         }\n         outc[r] = s;\n      }\n   }\n\n   return new Matrix(out, nrows, ncols);\n}\n\n\n/**\n * Bind several matrices or vectors into a single matrix row wise.\n *\n * @param  {...any} args - matrices or vectors separated by comma.\n *\n * @returns {Matrix} concatenated matrix.\n *\n */\nexport function rbind(...args) {\n\n   if (args.length === 1) return args[0];\n\n   // check that all matrices have the same number of rows\n   const ncols = ismatrix(args[0]) ? args[0].ncols : args[0].length;\n   const check = args.reduce( (acc, cur) => acc & ismatrix(cur) ? cur.ncols === ncols : cur.length === ncols, true);\n\n   if (!check) {\n      throw Error('rbind: all matrices must the same number of columns.');\n   }\n\n   // compute number of columns in outside matrix\n   const nrows = args.reduce( (acc, cur) => acc + (ismatrix(cur) ? cur.nrows : 1), 0);\n   const l = nrows * ncols;\n   const out = new Matrix.valuesConstructor(l);\n\n   let start = 0;\n   for (const a of args) {\n      out.set((ismatrix(a) ? a.t().v : a.v), start);\n      start += a.v.length;\n   }\n\n   return new Matrix(out, ncols, nrows).t();\n\n}\n\n\n/**\n * Bind several matrices or vectors into a single matrix column wise.\n *\n * @param  {...any} args - matrices or vectors separated by comma.\n *\n * @returns {Matrix} concatenated matrix.\n *\n */\nexport function cbind(...args) {\n\n   if (args.length === 1) return args[0];\n\n   // check that all matrices have the same number of rows\n   const nrows = ismatrix(args[0]) ? args[0].nrows : args[0].length;\n   const check = args.reduce( (acc, cur) => acc & (ismatrix(cur) ? cur.nrows === nrows : cur.length === nrows), true);\n\n   if (!check) {\n      throw Error('cbind: all matrices must the same number of rows.');\n   }\n\n   // compute number of columns in outside matrix\n   const ncols = args.reduce( (acc, cur) => acc + (ismatrix(cur) ? cur.ncols : 1), 0);\n   const l = nrows * ncols;\n   const out = new Matrix.valuesConstructor(l);\n\n   let start = 0;\n   for (const a of args) {\n      out.set(a.v, start);\n      start += a.v.length;\n   }\n\n   return new Matrix(out, nrows, ncols);\n\n}\n\n\n/**\n * Concatenate several vectors into one vector.\n *\n * @param {...Vector | ...Index} args - vectors separated by comma.\n *\n * @returns {Vector|Index} vector with concatenated values.\n *\n */\nexport function c(...args) {\n\n   if (args.length === 1) return args[0];\n\n   const l = args.reduce( (acc, cur) => acc + cur.length, 0);\n   const out = new args[0].constructor.valuesConstructor(l);\n\n   let start = 0;\n   for (const a of args) {\n      out.set(a.v, start);\n      start += a.length;\n   }\n\n   return new args[0].constructor(out);\n}\n\n\n/**\n * Change dimension of matrices and vectors.\n * @param {Matrix|Vector} obj - a matrix or a vector.\n * @param {number} nrow - number of rows in the reshaped object.\n * @param {number} ncol - number of columns in the reshaped object, if undefined, a vector will be returned.\n *\n * @returns {Matrix|Vector} the reshaped object.\n *\n */\nexport function reshape(obj, nrow, ncol) {\n\n   if (ncol === undefined) {\n      if (nrow !== obj.v.length) {\n         throw Error(\"reshape: provided dimension does not match number of values in the object.\");\n      }\n      return new Vector(obj.v);\n   }\n\n   if (obj.v.length !== nrow * ncol) {\n      throw Error(\"reshape: provided dimension does not match number of values in the object.\");\n   }\n\n   return new Matrix(obj.v, nrow, ncol);\n}\n\n\n\n/*************************************************/\n/*         Classes and type checkers             */\n/*************************************************/\n\n\n/**\n * Return 'true' of 'X' is a Matrix object, 'false' otherwise.\n *\n * @param {any} X - any object or variable.\n *\n * @returns {boolean}\n *\n */\nexport function ismatrix(X) {\n   return X.constructor === Matrix;\n}\n\n\n/**\n * Create a Matrix object from array of values.\n *\n * @param {number[]} values - array with values.\n * @param {number} nrows - number of rows in matrix.\n * @param {number} ncols - number of columns in matrix.\n *\n * @returns {Matrix} the matrix.\n *\n */\nexport function matrix(values, nrows, ncols) {\n   return new Matrix(new Float64Array(values), nrows, ncols);\n}\n\n\n/** Class representing a matrix */\nexport class Matrix {\n\n   static valuesConstructor = Float64Array;\n   static TOLERANCE = Math.pow(10, -9);\n\n   /**\n    * Constructor for a Matrix object.\n    *\n    * @param {Float64Array} values - typed array with values.\n    * @param {number} nrows - number of rows in the matrix.\n    * @param {number} ncols - number of columns in the matrix.\n    *\n    * @returns {Matrix} a Matrix object (see description).\n    *\n    * @description  Create a matrix from vector of values. Matrix is represented by an object with two\n    * fields. Field 'v' is a typed Float64Array with all values, unfolded column by column. The second\n    * field, 'dim', is an array with 2 values: number of rows and number of columns.\n    *\n    */\n   constructor (values, nrows, ncols) {\n      if (!ArrayBuffer.isView(values) || values.constructor !== Matrix.valuesConstructor) {\n         throw Error('Matrix: parameter \"values\" must be Float64Array.')\n      }\n\n      if (values.length != nrows * ncols) {\n         throw Error('Matrix: number elements in \"values\" is not equal to \"nrows\" x \"ncols\".')\n      }\n\n      this.v = values;\n      this.nrows = nrows\n      this.ncols = ncols;\n   }\n\n   /**\n    * Compute inverse of the matrix.\n    *\n    * @returns inverse matrix.\n    *\n    */\n   inv() {\n\n      if (this.nrows !== this.ncols) {\n         throw Error('inv: only squared matrices can be inverted.');\n      }\n\n      const n = this.ncols;\n\n      if (this.isuppertriangular()) {\n\n         if (this.islowertriangular()) {\n            // it means diagonal\n            return Matrix.diagm(this.diag().apply(v => Math.abs(v) > Number.EPSILON ? 1 / v : x));\n         }\n\n         // prepare matrices - we will transpose X to work with columns instead of rows\n         const I = Matrix.eye(n);\n         const Yt = Matrix.eye(n);\n         const Xt = this.t();\n\n         // solve for the last column\n         const s = Xt.v[(n - 1) * n + (n - 1)];\n         const c = n - 1;\n         for (let r = 0; r < n; r++) {\n            Yt.v[c * n + r] = I.v[c * n + r] / s;\n         }\n\n         // do backward substitution\n         for (let c = n - 2; c >= 0; c--) {\n            let s = I.getcolumn(c + 1);\n            const xc = Xt.getcolref(c + 1);\n            for (let r = c + 1; r < n; r++ ) {\n               const yc = Yt.getcolumn(r + 1);\n               s = s.subtract(yc.mult(xc[r]));\n            }\n            Yt.v.set(s.divide(xc[c]).v, c * n);\n         }\n\n         return Yt.t()\n      }\n\n\n      if (this.islowertriangular()) {\n\n         // check if diagonal elements are not zeros\n         const d = this.diag();\n         if (prod(d) < Number.EPSILON) {\n            throw Error('inv: the matrix is not invertible.');\n         }\n\n         // prepare matrices - we will transpose X to work with columns instead of rows\n         const I = Matrix.eye(n);\n         const Yt = Matrix.eye(n);\n         const Xt = this.t();\n\n         // solve for the first column\n         const c = 0;\n         const s = Xt.v[0];\n         for (let r = 0; r < n; r++) {\n            Yt.v[c * n + r] = I.v[c * n + r] / s;\n         }\n\n         // do forward substitution\n         for (let c = 1; c < n; c++) {\n            let s = I.getcolumn(c + 1);\n            const xc = Xt.getcolref(c + 1);\n            for (let r = 0; r < c; r++ ) {\n               const yc = Yt.getcolumn(r + 1);\n               s = s.subtract(yc.mult(xc[r]));\n            }\n            Yt.v.set(s.divide(xc[c]).v, c * n);\n         }\n\n         return Yt.t()\n      }\n\n      // invert matrix using QR transformation\n      const r = qr(this);\n      if (!r.R.isuppertriangular()) {\n         throw Error('inv: QR decomposition of the matrix returned incorrect result.');\n      }\n\n      return r.R.inv().dot(r.Q.t());\n   }\n\n\n   /**\n    * Check if matrix is lower triangular.\n    *\n    * @returns {boolean} true if matrix is lower triangular, false otherwise.\n    */\n   islowertriangular() {\n\n      if (this.nrows !== this.ncols) return false;\n      for (let j = 1; j < this.ncols; j++) {\n         for (let i = 0; i < j; i++) {\n            if (Math.abs(this.v[j * this.nrows + i]) > Matrix.TOLERANCE) return false;\n         }\n      }\n\n      return true;\n   }\n\n\n   /**\n    * Check if matrix is upper triangular.\n    *\n    * @returns {boolean} true if matrix is upper triangular, false otherwise.\n    */\n   isuppertriangular() {\n\n      if (this.nrows !== this.ncols) return false;\n\n      for (let j = 0; j < this.ncols; j++) {\n         for (let i = j + 1; i < this.nrows; i++) {\n            if (Math.abs(this.v[j * this.nrows + i]) > Matrix.TOLERANCE) return false;\n         }\n      }\n\n      return true;\n   }\n\n\n   /**\n    * Return vector with diagonal elements of matrix.\n    *\n    * @returns {Vector} vector with diagonal elements.\n    *\n    */\n   diag() {\n\n      const n = Math.min(this.nrows, this.ncols);\n      const out = new Float64Array(n);\n      for (let rc = 0; rc < n; rc++) {\n         out[rc] = this.getcolref(rc + 1)[rc];\n      }\n\n      return new Vector(out);\n   }\n\n\n   /**\n    * Transpose the matrix.\n    *\n    * @returns {Matrix} transposed matrix.\n    *\n    */\n   t() {\n\n      const ncols_out = this.nrows;\n      const nrows_out = this.ncols;\n      const out = new Matrix.valuesConstructor(this.v.length);\n\n      if (this.ncols < this.nrows) {\n         for(let i = 0; i < this.ncols; i++) {\n            const x = this.v.subarray(i * this.nrows, (i + 1) * this.nrows)\n            for(let j = 0; j < this.nrows; j++) {\n               out[j * nrows_out + i] = x[j];\n            }\n         }\n\n         return new Matrix(out, nrows_out, ncols_out);\n      }\n\n      for(let j = 0; j < this.nrows; j++) {\n         const outx = out.subarray(j * nrows_out, (j + 1) * nrows_out)\n         for(let i = 0; i < this.ncols; i++) {\n            outx[i] = this.v[i * this.nrows + j];\n         }\n      }\n\n      return new Matrix(out, nrows_out, ncols_out);\n   }\n\n\n   /**\n    * Compute a dot product of the matrix with vector or another matrix.\n    *\n    * @param {Vector|Matrix} X - a vector or a matrix to compute a dot product with.\n    *\n    * @returns {Matrix} result of the dot product.\n    *\n    */\n   dot(X) {\n\n      if (isvector(X)) {\n         return new Matrix(_dot(this.v, X.v, this.nrows, this.ncols, X.length, 1), this.nrows, 1);\n      }\n\n      if (ismatrix(X)) {\n         return new Matrix(_dot(this.v, X.v, this.nrows, this.ncols, X.nrows, X.ncols), this.nrows, X.ncols);\n      }\n\n      throw Error(\"dot: argument 'X' must be a matrix or a vector.\");\n   }\n\n   /**\n    * Does mathematical operation between the matrix and another matrix, a vector or a number.\n    *\n    * @param {number|Vector|Matrix} x - a vector or a number to operate with.\n    * @param {function} fun - function to apply.\n    * @param {number} dims - if 'x' is a vector which dimension applies it to.\n    *\n    * @returns {Matrix} result of operation.\n    *\n    */\n   op(X, fun, dims) {\n\n      if (ismatrix(X)) {\n         return new Matrix(_opvv(this.v, X.v, fun), this.nrows, this.ncols);\n      }\n\n      if (isnumber(X)) {\n         return new Matrix(_opvn(this.v, X, fun), this.nrows, this.ncols);\n      }\n\n      if (!isvector(X)) {\n         throw new Error('op: argument \"x\" must be a matrix, a vector or a number.');\n      }\n\n      if (dims === undefined) {\n         dims = X.length === this.ncols ? 2 : 1;\n      }\n\n      if (dims === 2 && X.length === this.ncols) {\n\n         const out = new Matrix.valuesConstructor(this.v.length);\n         for (let c = 0; c < this.ncols; c++) {\n            out.set(_opvn(this.getcolref(c + 1), X.v[c], fun), c * this.nrows);\n         }\n\n         return new Matrix(out, this.nrows, this.ncols);\n      }\n\n      if (dims === 1 && X.length === this.nrows) {\n\n         const out = new Matrix.valuesConstructor(this.v.length);\n         for (let c = 0; c < this.ncols; c++) {\n            out.set(_opvv(this.getcolref(c + 1), X.v, fun), c * this.nrows);\n         }\n\n         return new Matrix(out, this.nrows, this.ncols);\n      }\n\n      throw new Error('op: length of vector \"X\" does not match number of rows nor number of columns of the maytrix.');\n\n   }\n\n\n   /**\n    * Add a number or values from another matrix or vector.\n    *\n    * @param {number|Vector|Matrix} X - a matrix, a vector or a number to sum the values with.\n    *\n    * @returns {Matrix} result of operation.\n    *\n    */\n   add(X) {\n      return this.op(X, (a, b) => a + b);\n   }\n\n\n   /**\n    * Subtract a number or values from another matrix or vector.\n    *\n    * @param {number|Vector|Matrix} X - a matrix, a vector or a number to subtract the values of.\n    *\n    * @returns {Matrix} result of operation.\n    *\n    */\n   subtract(X) {\n      return this.op(X, (a, b) => a - b);\n   }\n\n\n   /**\n    * Multiply to a number or to values from another matrix or vector.\n    *\n    * @param {number|Vector|Matrix} X - a matrix, a vector or a number to multiply the values to.\n    *\n    * @returns {Matrix} result of operation.\n    *\n    */\n   mult(X) {\n      return this.op(X, (a, b) => a * b);\n   }\n\n\n   /**\n    * Divide to a number or to values from another matrix or vector.\n    *\n    * @param {number|Vector|Matrix} X - a matrix, a vector or a number to divide the values to.\n    *\n    * @returns {Matrix} result of operation.\n    *\n    */\n   divide(X) {\n      return this.op(X, (a, b) => a / b);\n   }\n\n\n   /**\n    * Applies a function to elements of the matrix.\n    * @param {function} fun - function to apply (should return single value).\n    * @param {number} dims - which elements to apply the function to (0 - every, 1 - rows, 2 - columns).\n    *\n    * @returns {Vector|Matrix} - result of applying the function (either array with one value for each\n    * row/column or another Matrix with transformed values).\n    */\n   apply(fun, dims) {\n\n      // by default function is applied to columns\n      if (dims === undefined) {\n         dims = 2;\n      }\n\n      // columns\n      if (dims == 2) {\n         const n = this.ncols;\n         const out = new Matrix.valuesConstructor(n);\n         for (let i = 0; i < n; i++) {\n            out[i] = fun(this.getcolref(i + 1));\n         }\n         return new Vector(out);\n      }\n\n      // rows\n      if (dims == 1) {\n         return this.t().apply(fun, 2);\n      }\n\n      // individual values\n      if (dims == 0) {\n         const n = this.v.length;\n         const out = new Matrix.valuesConstructor(n);\n         for (let i = 0; i < n; i++) {\n            out[i] = fun(this.v[i]);\n         }\n         return new Matrix(out, this.nrows, this.ncols);\n      }\n   }\n\n\n   /**\n    * Replace values of matrix specified by 'rind' and 'cind' with values from another matrix.\n    *\n    * @param {Matrix} - matrix with values to use as replacement.\n    * @param {number | Array | Index} rind - row indices (as number or vector of indices).\n    * @param {number | Array | Index} cind - column indices (as number or vector of indices).\n    *\n    * @description Row and column indices must start from 1. Empty array ([]) tells function to use\n    * all elements (e.g. all rows or all columns). Size of matrix 'X' should correspond to the\n    * number of indices.\n    *\n    * Function does not create a new matrix but changes the current one.\n    *\n    * @returns {Matrix} the matrix with replaced values.\n    *\n    */\n   replace (X, rind, cind) {\n\n      if (typeof(rind) === 'number') {\n         rind = [rind];\n      }\n\n      if (rind.length === 0) {\n         rind = Index.seq(1, this.nrows);\n      }\n\n      if (!isindex(rind)) {\n         rind = index(rind);\n      }\n\n      if (typeof(cind) === 'number') {\n         cind = [cind];\n      }\n\n      if (cind.length === 0) {\n         cind = Index.seq(1, this.ncols);\n      }\n\n      if (!isindex(cind)) {\n         cind = index(cind);\n      }\n\n      const nrows = rind.length;\n      const ncols = cind.length;\n\n      if (min(rind) < 1 || max(rind) > this.nrows) {\n         throw Error('Matrix.replace: row indices do not match the dimension of matrix.');\n      }\n\n      if (min(cind) < 1 || max(cind) > this.ncols) {\n         throw Error('Matrix.replace: column indices do not match the dimension of matrix.');\n      }\n\n      if (X.nrows !== nrows || X.ncols !== ncols) {\n         throw Error('Matrix.replace: dimension of \"X\" does not match the indices.');\n      }\n\n      for (let ic = 0; ic < cind.length; ic++) {\n         const xc = X.getcolref(ic + 1);\n         const cv = (cind.v[ic] - 1) * this.nrows;\n         for (let ir = 0; ir < rind.length; ir++) {\n            const r = rind.v[ir];\n            this.v[cv + r - 1] = xc[ir];\n         }\n      }\n\n      return this;\n   }\n\n\n   /**\n    * Create a deep copy of the matrix.\n    *\n    * @returns {Matrix}\n    *\n    */\n   copy() {\n      return new Matrix(this.v.slice(), this.nrows, this.ncols);\n   }\n\n   /**\n    * Return values from a particular matrix row as vector.\n    *\n    * @param {number} ir - row index (starting from 1).\n    *\n    * @returns {Vector} vector with column values.\n    *\n    */\n   getrow(ir) {\n\n      if (ir < 1 || ir > this.nrows) {\n         throw Error('getrow: wrong row index.');\n      }\n\n      const v = new Vector.valuesConstructor(this.ncols);\n      for (let c = 0; c < this.ncols; c++) {\n         v[c] = this.getcolref(c + 1)[ir - 1];\n      }\n      return new Vector(v);\n   }\n\n\n   /**\n    * Return values from a particular matrix column as vector.\n    *\n    * @param {number} ic - column index (starting from 1).\n    *\n    * @returns {Vector} vector with column values.\n    *\n    */\n   getcolumn(ic) {\n\n      if (ic < 1 || ic > this.ncols) {\n         throw Error('getcolumn: wrong column index.');\n      }\n\n      return new Vector(this.v.slice((ic - 1) * this.nrows, ic * this.nrows));\n   }\n\n\n   /**\n    * Return a reference (not copy) to values of a particular matrix column.\n    *\n    * @param {number} ic - index of column (starting from 1).\n    *\n    * @returns {Float64Array} - reference to the column values as typed array.\n    *\n    */\n   getcolref(ic) {\n      return this.v.subarray((ic - 1) * this.nrows, ic * this.nrows);\n   }\n\n\n   /**\n    * Create a subset of a matrix using row and column indices.\n    *\n    * @param {number|Index} rind - row indices to select (as Index or a single number).\n    * @param {number|Index} cind - column indices to select (as Index or a single number).\n    *\n    * @description Row and column indices must start from 1. If 'rind' or 'cind' are null,\n    * all items from this direction will be taken.\n    *\n    * @returns {Matrix} the subset of the matrix.\n    *\n    */\n   subset(rind, cind) {\n\n      if (typeof(rind) === 'number') {\n         rind = index([rind]);\n      }\n\n      if (typeof(cind) === 'number') {\n         cind = index([cind]);\n      }\n\n      if (Array.isArray(rind)) {\n         rind = rind.length === 0 ? null : index(rind);\n      }\n\n      if (Array.isArray(cind)) {\n         cind = cind.length === 0 ? null : index(cind);\n      }\n\n      if (rind !== null && !isindex(rind)) {\n         throw Error('subset: parameter \"rind\" can be a number, null or instance of Index.');\n      }\n\n      if (cind !== null && !isindex(cind)) {\n         throw Error('subset: parameter \"cind\" can be a number, null or instance of Index.');\n      }\n\n\n      // select all rows and a subset of columns\n      if (rind === null) {\n\n         const ncols_out = cind.length;\n         const nrows_out = this.nrows;\n         const out = new Matrix.valuesConstructor(nrows_out * ncols_out);\n         for (let ic = 0; ic < cind.length; ic++) {\n            out.set(this.v.slice((cind.v[ic] - 1) * this.nrows, cind.v[ic] * this.nrows), ic * this.nrows);\n         }\n\n         return new Matrix(out, nrows_out, ncols_out);\n      }\n\n      // select all columns and a subset of rows\n      if (cind === null || cind === undefined) {\n         return this.t().subset(cind, rind).t();\n      }\n\n      // select specific columns and rows\n      const nrows_out = rind.length;\n      const ncols_out = cind.length;\n      const out = new Matrix.valuesConstructor(nrows_out * ncols_out);\n      let xc_out = new Matrix.valuesConstructor(nrows_out)\n      for (let ic = 0; ic < ncols_out; ic++) {\n\n         // take the a whole column from matrix and pick row values from it\n         const xc = this.v.subarray((cind.v[ic] - 1) * this.nrows, (cind.v[ic]) * this.nrows);\n         for (let ir = 0; ir < nrows_out; ir++) {\n            xc_out[ir] = xc[rind.v[ir] - 1];\n         }\n         out.set(xc_out, ic * nrows_out);\n      }\n\n      return new Matrix(out, nrows_out, ncols_out);\n   }\n\n\n   /**\n    * Convert matrix to a text representation for showing the values in nice way.\n    *\n    * @param {number} ndec - number of decimals to round the values to.\n    *\n    * @returns {string} the string with matrix representation.\n    *\n    * TODO: 1) add workaround for large matrices (...)\n    *\n    */\n   toString (ndec) {\n\n      function leftpad(x, n) {\n         return  \" \".repeat(n - x.length) + x;\n      }\n\n      if (ndec === undefined) {\n         ndec = 2;\n      }\n\n      const nvar = this.ncols;\n      const ndigits = Math.round(Math.abs(Math.log10(max(this.v)))) + ndec + 3;\n\n      let str = \"\";\n      const Xt = this.t();\n      for (let c = 1; c <= Xt.ncols; c++) {\n         str += Array.from(Xt.getcolref(c)).map(v => leftpad(v.toFixed(ndec), ndigits)).join(\" \") + \"\\n\"\n      }\n\n      return str;\n   }\n\n   /**\n    * Convert matrix values to a string which can be downloaded as CSV file.\n    *\n    * @param {string} sep - symbol to use for separation of values (by default \",\").\n    * @param {string} dec - symbold to use for separation of decimals (by default \".\").\n    * @param {Array} header - optional array of header elements (column names).\n    * @param {Array} labels - optional array of labels (row names).\n    *\n    * @returns {string} - string with CSV data.\n    */\n   toCSV(sep, dec, header, labels) {\n\n      // set default separator symbol\n      if (sep === undefined) {\n         sep = \",\";\n      }\n\n      // set default decimals separator symbol\n      if (dec === undefined) {\n         dec = sep === \";\" ? \",\" : \".\"\n      }\n\n      const hasLabels = labels !== undefined && labels !== null && labels.length > 0;\n      const hasHeader = header !== undefined && header !== null && header.length > 0;\n\n      if (hasLabels && labels.length !== this.nrows) {\n         throw Error (\"Matrix.toCSV: number of elements in labels array must match number of rows in the matrix.\");\n      }\n\n      if (hasHeader && header.length !== this.ncols + (hasLabels ? 1 : 0)) {\n         throw Error (\"Matrix.toCSV: number of elements in header must match number of columns in the matrix.\");\n      }\n\n      // transpose to make it faster\n      const m = this.t();\n      let rows = hasHeader ? header.join(sep) + \"\\n\" : \"\";\n      for (let c = 1; c <= m.ncols; c++) {\n         rows = rows + (hasLabels ? labels[c - 1] + sep : \"\") + m.getcolref(c).join(sep) + \"\\n\";\n      }\n\n      // change decimal separator if it is not a dot\n      rows = rows.replace(/\\./g, dec);\n\n      return rows;\n   }\n\n   // Static methods //\n\n   /**\n    * Create a matrix with random values from normal distribution.\n    *\n    * @param {number} nrows - number of rows.\n    * @param {number} ncols - number of columns.\n    * @param {number} [mu=0] - mean (expected) value.\n    * @param {number} [sigma=1] - standard deviation.\n    *\n    * @returns {Vector} matrix with values.\n    *\n    */\n   static randn(nrows, ncols, mu, sigma) {\n      return reshape(rnorm(nrows * ncols, mu, sigma), nrows, ncols);\n   }\n\n\n   /**\n    * Create a matrix with random values from uniform distribution [a, b].\n    *\n    * @param {number} nrows - number of rows.\n    * @param {number} ncols - number of columns.\n    * @param {number} [a=0] - smallest possible value.\n    * @param {number} [b=1] - largest possible value.\n    *\n    * @returns {Vector} matrix with values.\n    *\n    */\n   static rand(nrows, ncols, a, b) {\n      return reshape(runif(nrows * ncols, a, b), nrows, ncols);\n   }\n\n\n   /**\n    * Create an identity matrix.\n    *\n    * @param {number} nrows - number of rows.\n    * @param {number} ncols - number of columns (if undefined, will be same as 'nrows').\n    *\n    * @returns {Matrix} the matrix.\n    *\n    */\n   static eye(nrows, ncols) {\n\n      if (ncols === undefined) {\n         ncols = nrows;\n      }\n\n      const out = new Float64Array(nrows * ncols);\n      for (let rc = 0; rc < Math.min(nrows, ncols); rc++) {\n         out[rc * nrows + rc] = 1;\n      }\n\n      return new Matrix(out, nrows, ncols);\n   }\n\n\n   /**\n    * Create a diagonal matrix based on vector with values.\n    *\n    * @param {Vector} x - vector with values.\n    *\n    * @returns {Matrix} the matrix.\n    *\n    */\n   static diagm(x) {\n\n      if (!isvector(x)) {\n         throw Error('diagm: the argument \"x\" must be a Vector.');\n      }\n\n      const n = x.length;\n      const out = new Float64Array(n * n);\n      for (let rc = 0; rc < n; rc++) {\n         out[rc * n + rc] = x.v[rc];\n      }\n\n      return new Matrix(out, n, n);\n   }\n\n\n   /**\n    * Create a Matrix object filled with zeros.\n    *\n    * @param {number} nrows - number of rows.\n    * @param {number} ncols - number of columns.\n    *\n    * @returns {Matrix} the generated matrix.\n    *\n    */\n   static zeros(nrows, ncols) {\n\n      if (ncols === undefined) {\n         ncols = nrows;\n      }\n\n      return new Matrix(new Float64Array(nrows * ncols), nrows, ncols);\n   }\n\n\n   /**\n    * Create a Matrix object filled with ones.\n    *\n    * @param {number} nrows - number of rows.\n    * @param {number} ncols - number of columns.\n    *\n    * @returns {Matrix} the generated matrix.\n    *\n    */\n   static ones(nrows, ncols) {\n      return Matrix.fill(1, nrows, ncols);\n   }\n\n   /**\n    * Create a Matrix object filled with a manual value.\n    *\n    * @param {number} v - value to fill the matrix with.\n    * @param {number} nrows - number of rows.\n    * @param {number} ncols - number of columns.\n    *\n    * @returns {Matrix} the generated matrix.\n    *\n    */\n   static fill(v, nrows, ncols) {\n\n      if (ncols === undefined) {\n         ncols = nrows;\n      }\n\n      const out = new Float64Array(nrows * ncols);\n      for (let i = 0; i < out.length; i++) {\n         out[i] = v;\n      }\n\n      return new Matrix(out, nrows, ncols);\n   }\n\n\n   /**\n    * Create a matrix by applying function to all possible pairs of values from two vectors.\n    *\n    * @param {Array|Vector} x - vector with values.\n    * @param {Array|Vector} y - vector with values.\n    * @param {function} fun - function of two arguments which returns a single value.\n    *\n    * @returns {Matrix}\n    */\n   static outer(x, y, fun) {\n\n      if (Array.isArray(x)) {\n         x = vector(x);\n      }\n\n      if (Array.isArray(y)) {\n         y = vector(y);\n      }\n\n      if (!isvector(x)) {\n         throw Error('Matrix.outer: parameter \"x\" must be a vector or an array with numbers.');\n      }\n\n      if (!isvector(y)) {\n         throw Error('Matrix.outer: parameter \"y\" must be a vector or an array with numbers.');\n      }\n\n      const out = Matrix.zeros(x.length, y.length);\n      for (let c = 0; c < y.length; c++) {\n         const yv = y.v[c]\n         const outc = out.getcolref(c + 1);\n         for (let r = 0; r < x.length; r++) {\n            outc[r] = fun(x.v[r], yv);\n         }\n      }\n\n      return out;\n   }\n\n\n   /**\n    * Parse string with data from a CSV file and create a matrix with values.\n    *\n    * @param {string} strData - string with all data from the CSV file.\n    * @param {string} sep - symbols used for separation of values (by default \",\").\n    * @param {boolean} hasHeader - logical, if first row must be treated as header or not.\n    * @param {boolean} hasLabels - logical, if first column must be treated as object labels or not.\n    *\n    *\n    * @returns {Object} JSON containing matrix with parsed values, header, values and decimal separators.\n    */\n   static parseCSV(strData, sep, hasHeader, hasLabels) {\n\n\n      // function which returns true if at least one value in array can not be parsed to float\n      function hasNaN(vec) {\n         return vec.some(v => Number.isNaN(Number.parseFloat(v.trim())));\n      }\n\n      // set default separator symbol\n      if (sep === undefined) {\n         sep = \",\";\n      }\n\n      // setup decimal separator\n      const dec = sep === \";\" ? \",\" : \".\";\n\n      // remove BOM symbol if any\n      strData = strData.replace(/^\\uFEFF/gm, \"\").replace(/^\\u00EF?\\u00BB\\u00BF/gm,\"\");\n\n      // remove \\r symbols\n      strData = strData.replace(/\\r/gm, \"\");\n\n      // split string with data values into array of rows\n      let rows = strData.split(/\\n/);\n\n      // check if the first row contains header\n      let header = [];\n      let startRow = 0;\n      const firstRow = rows[0].split(sep);\n      if (hasHeader || (hasHeader === undefined && hasNaN(firstRow))) {\n         header = firstRow;\n         startRow = 1;\n      }\n\n      // filter empty rows out\n      rows = rows.filter(v => v.trim().length > 1);\n\n      // check if first column contains labels\n      let labels = [];\n      let startColumn = 0;\n      if (hasLabels) {\n         startColumn = 1;\n      }\n\n      // number of rows and columns in future matrix\n      const nrows = rows.length - startRow;\n      const ncols = firstRow.length - startColumn;\n\n\n      if (nrows < 1) {\n         throw Error(\"Data file should contain at least 1 row with values.\");\n      }\n\n      if (ncols < 1) {\n         throw Error(\"Data file should contain at least 1 column with values.\");\n      }\n\n      // set rows of data as columns of matrix - it is faster\n      const data = Matrix.zeros(ncols, nrows);\n\n      // find symbol used for decimals separator\n      for (let r = startRow; r < nrows + startRow; r++) {\n\n         // parsing: trim spaces and replace non-numbers with dot (.)\n         const rowValuesAll = rows[r].split(sep)\n\n         let rowValues;\n         if (hasLabels) {\n            labels[r - startRow] = rowValuesAll[0];\n            rowValues = rowValuesAll.slice(1).map(v => Number.parseFloat(v.trim().replace(dec, \".\")));\n         } else {\n            rowValues = rowValuesAll.map(v => Number.parseFloat(v.trim().replace(dec, \".\")));\n         }\n\n         if (rowValues.some(v => Number.isNaN(v))) {\n            throw Error(\"Some of the values can not be converted to numbers, check your CSV file and try again.\");\n         }\n\n         if (rowValues.length != ncols) {\n            throw Error(\"Wrong number of values in row #\" + r);\n         }\n\n         data.v.set(new Float64Array(rowValues), (r - startRow) * ncols);\n      }\n\n      return {values: data.t(), header: header, labels: labels, sep:sep, dec:dec};\n   }\n\n}\n\n\n/**\n * Return 'true' of 'x' is a Vector object, 'false' otherwise.\n *\n * @param {any} x - any object or variable.\n *\n * @returns {boolean}\n *\n */\nexport function isvector(x) {\n   return x.constructor === Vector;\n}\n\n\n/**\n * Create a Vector object from array of values.\n *\n * @param {number[]} values - array with values.\n *\n * @returns {Vector} the vector.\n *\n */\nexport function vector(values) {\n   return new Vector(new Float64Array(values));\n}\n\n\n/** Class representing a vector */\nexport class Vector {\n\n   static valuesConstructor = Float64Array;\n\n   /**\n    * Constructor for a Vector object.\n    *\n    * @param {Float64Array} values - typed array with values.\n    *\n    * @returns {Vector} a Vector object (see description).\n    * @constructor\n    *\n    * @description  Create a vector of values. Vector is represented by an object with two\n    * fields. Field 'v' is a typed Float64Array with values. The second field, 'length', is\n    * the length of the vector.\n    *\n    */\n   constructor(values) {\n\n      if (!ArrayBuffer.isView(values) || values.constructor !== Float64Array) {\n         throw Error('Vector: parameter \"values\" must be Float64Array.')\n      }\n\n      this.v = values;\n      this.length = values.length;\n   }\n\n   /**\n    * Returns a vector of indices for values for which function ´fun´ returns true.\n    *\n    * @param {function} fun - function with two arguments (value and its index).\n    *\n    * @returns {Index} a vector of indices.\n    */\n   which(fun) {\n      const out = new Index.valuesConstructor(this.length);\n      let n = 0;\n      for (let i = 0; i < this.length; i++) {\n         if (fun(this.v[i], i)) {\n            out[n] = i + 1;\n            n = n + 1;\n         }\n      }\n\n      return new Index(out.subarray(0, n));\n   }\n\n\n   /**\n    * Returns a subset of values for which function ´fun´ returns true.\n    *\n    * @param {function} fun - function with two arguments (value and its index).\n    *\n    * @returns {Vector} a subset.\n    */\n   filter(fun) {\n      const out = new Vector.valuesConstructor(this.length);\n      let n = 0;\n      for (let i = 0; i < this.length; i++) {\n         if (fun(this.v[i], i)) {\n            out[n] = this.v[i];\n            n = n + 1;\n         }\n      }\n\n      return new Vector(out.subarray(0, n));\n   }\n\n\n   /**\n    * Shuffles values in vector using Fisher–Yates algorithm.\n    *\n    * @returns {Vector} vector with shuffled values.\n    */\n   shuffle() {\n      return new Vector(_shuffle(this.v));\n   }\n\n\n   /**\n    * Sorts values in a vector.\n    *\n    * @param {boolean} decreasing - if true, values will be sorted in decreasing order, otherwise in increasing.\n    *\n    * @returns {Vector} vector with sorted values\n    *\n    */\n   sort(decreasing) {\n      return new Vector(_sort(this.v, decreasing));\n   }\n\n\n   /**\n    * Replicate a vector 'n' times.\n    *\n    * @param {number} n - how many times the vector must be replicated.\n    *\n    * @returns {Vector} a vector with replicated values.\n    *\n    */\n   rep(n) {\n      return _rep(this, n);\n   }\n\n\n   /**\n    * Replicate each value in the vector 'n' times.\n    *\n    * @param {number} n - how many times every value must be replicated.\n    *\n    * @returns {Vector} a vector with replicated values.\n    *\n    */\n   repeach(n) {\n      return _repeach(this, n);\n   }\n\n\n   /**\n    * Replace values of vectors specified by 'ind' with values from another vector.\n    *\n    * @param {Vector} - vector with values to use as replacement.\n    * @param {number | Array | Index} ind - indices (as number or vector of indices).\n    *\n    * @description Indices must start from 1. Empty array ([]) tells function to use\n    * all elements. Length of vector 'x' should correspond to the\n    * number of indices.\n    *\n    * Function does not create a new vector but changes the current one.\n    *\n    * @returns {Vector} the vector with replaced values.\n    *\n    */\n   replace (x, ind) {\n\n      if (typeof(ind) === 'number') {\n         ind = [ind];\n      }\n\n      if (ind.length === 0) {\n         ind = Index.seq(1, this.length);\n      }\n\n      if (!isindex(ind)) {\n         ind = index(ind);\n      }\n\n      const n = ind.length;\n\n      if (min(ind) < 1 || max(ind) > this.length) {\n         throw Error('Vector.replace: indices do not match the lenght of the vector.');\n      }\n\n      if (x.length !== n) {\n         throw Error('Vector.replace: length of \"x\" does not match the indices.');\n      }\n\n      for (let i = 0; i < ind.length; i++) {\n         const r = ind.v[i];\n         this.v[r - 1] = x.v[i];\n      }\n\n      return this;\n   }\n\n\n   /**\n    * Create a subset of a vector using vector with indices.\n    *\n    * @param {number|Array|Index} ind - single index or vector with indices (must start from 1, not 0).\n    *\n    * @returns {Vector} a subset.\n    */\n   subset(ind) {\n\n      if (typeof(ind) === 'number') {\n         ind = index([ind]);\n      }\n\n      if (Array.isArray(ind)) {\n         ind = typeof(ind[0]) === 'boolean' ? Index.bool2ind(ind) : index(ind);\n      }\n\n      if (!isindex(ind)) {\n         throw Error('subset: parameter \"ind\" must be number, array of instance of class Index.');\n      }\n\n      const n = ind.length;\n      const out = Vector.zeros(n);\n\n      for (let i = 0; i < n; i++) {\n\n         if (ind.v[i] < 1) {\n            throw Error('subset: indices must start with 1 (not 0).');\n         }\n\n         if (ind.v[i] > this.length) {\n            throw Error('subset: index exceeds the length of the vector.');\n         }\n\n         out.v[i] = this.v[ind.v[i] - 1];\n      }\n\n      return out;\n   }\n\n\n   /**\n    * Create a subset of a vector values which are located between positions 'start' and 'end' (both included).\n    *\n    * @param {number} start - index of value to start (must start from 1, not 0).\n    * @param {number} end - index of value to end.\n    *\n    * @returns {Vector} a subset.\n    */\n   slice(start, end) {\n\n      if (start === null) {\n         start = 1;\n      }\n\n      if (end === null || end === undefined) {\n         end = this.length;\n      }\n\n      if (start < 1) {\n         throw Error('slice: indices must start with 1 (not 0).');\n      }\n\n      if (end > this.length) {\n         throw Error('slice: index exceeds the length of the vector.');\n      }\n\n      if (end < start) {\n         throw Error('slice: \"end\" must not be smaller than \"start\".');\n      }\n\n      return new Vector(this.v.slice(start - 1, end));\n   }\n\n\n   /**\n    * Make a deep copy of the vector.\n    */\n   copy() {\n      return new Vector(this.v.slice());\n   }\n\n\n   /**\n    * Compute a dot product with another vector.\n    *\n    * @param {Vector} x - a vector.\n    *\n    * @returns {number} result of the product.\n    *\n    */\n   dot(x) {\n\n      if (x === undefined) {\n         x = this;\n      }\n\n      return _dot(this.v, x.v, 1, this.length, x.length, 1)[0];\n   }\n\n\n   /**\n    * Does mathematical operation between vector values and either values from another vector or a number.\n    *\n    * @param {number|Vector} x - a vector or a number to operate with.\n    * @param {function} fun - function to apply.\n    *\n    * @returns {Vector} result of operation.\n    *\n    */\n   op(x, fun) {\n      if (isvector(x)) {\n         return new Vector(_opvv(this.v, x.v, fun));\n      }\n\n      if (isnumber(x)) {\n         return new Vector(_opvn(this.v, x, fun));\n      }\n\n      throw new Error('op: argument \"x\" must be a vector or a number.');\n   }\n\n\n   /**\n    * Add a number or values from another vector.\n    *\n    * @param {number|Vector} x - a vector or a number to sum the values with.\n    *\n    * @returns {Vector} result of operation.\n    *\n    */\n   add(x) {\n      return this.op(x, (a, b) => a + b);\n   }\n\n\n   /**\n    * Subtract a number or values from another vector.\n    *\n    * @param {number|Vector} x - a vector or a number to subtract the values of.\n    *\n    * @returns {Vector} result of operation.\n    *\n    */\n   subtract(x) {\n      return this.op(x, (a, b) => a - b);\n   }\n\n\n   /**\n    * Multiply to a number or to values from another vector.\n    *\n    * @param {number|Vector} x - a vector or a number to multiply the values to.\n    *\n    * @returns {Vector} result of operation.\n    *\n    */\n   mult(x) {\n      return this.op(x, (a, b) => a * b);\n   }\n\n\n   /**\n    * Divide to a number or to values from another vector.\n    *\n    * @param {number|Vector} x - a vector or a number to divide the values to.\n    *\n    * @returns {Vector} result of operation.\n    *\n    */\n   divide(x) {\n      return this.op(x, (a, b) => a / b);\n   }\n\n\n   /**\n    * Apply a function to each value of the vector.\n    *\n    * @param {function} fun - function to apply (should take one value and return one value).\n    *\n    * @returns {Vector} the transformed vector.\n    */\n   apply(fun) {\n\n      const n = this.v.length;\n      const out = Vector.zeros(n);\n      for (let i = 0; i < n; i++) {\n         out.v[i] = fun(this.v[i]);\n      }\n\n      return out;\n   }\n\n\n   // Static methods //\n\n\n   /**\n    * Concatenates numbers, arrays and vectors into a single vector.\n    *\n    * @param  {...any} args - numbers, arrays or/and vectors.\n    *\n    * @returns {Vector}\n    *\n    */\n   static c(...args) {\n\n      if (args.length === 1) return args[0];\n\n      const l = args.reduce( (acc, cur) => acc + (typeof(cur) === 'number' ? 1 : cur.length), 0);\n      const out = new Vector.valuesConstructor(l);\n\n      let start = 0;\n      for (const a of args) {\n\n         if (typeof(a) === 'number') {\n            out[start] = a;\n            start += 1;\n         } else {\n            out.set(isvector(a) ? a.v : new Vector.valuesConstructor(a), start);\n            start += typeof(a) === 'number' ? 1 : a.length;\n         }\n      }\n\n      return new Vector(out);\n   }\n\n\n   /**\n    * Generate sequence of values.\n    *\n    * @param {number} start - first value.\n    * @param {number} end - last value.\n    * @param {number} [by=1] - increment between values.\n    *\n    * @returns {Vector} vector with sequence values.\n    *\n    */\n   static seq(start, end, by) {\n      return _seq(start, end, by, Vector)\n   }\n\n\n   /**\n    * Create a vector with random values from normal distribution.\n    *\n    * @param {number} length - number of values.\n    * @param {number} [mu=0] - mean (expected) value.\n    * @param {number} [sigma=1] - standard deviation.\n    *\n    * @returns {Vector} vector with values.\n    *\n    */\n   static randn(length, mu, sigma) {\n      return rnorm(length, mu, sigma);\n   }\n\n\n   /**\n    * Create a vector with random values from uniform distribution [a, b].\n    *\n    * @param {number} length - number of values.\n    * @param {number} [a=0] - smallest possible value.\n    * @param {number} [b=1] - largest possible value.\n    *\n    * @returns {Vector} vector with values.\n    *\n    */\n   static rand(length, a, b) {\n      return runif(length, a, b);\n   }\n\n\n   /**\n    * Create a Vector object filled with zeros.\n    *\n    * @param {number} n - length of the vector\n    *\n    * @returns {Vector} the generated vector.\n    *\n    */\n   static zeros(n) {\n      return new Vector(new Vector.valuesConstructor(n));\n   }\n\n\n   /**\n    * Create a Vector object filled with ones.\n    *\n    * @param {number} n - length of the vector.\n    *\n    * @returns {Vector} the generated vector.\n    *\n    */\n   static ones(n) {\n      return Vector.fill(1, n);\n   }\n\n\n  /**\n    * Create a Vector object filled with a repeated value.\n    *\n    * @param {number} v - value to fill the vector with.\n    * @param {number} n - length of the vector.\n    *\n    * @returns {Vector} the generated vector.\n    *\n    */\n   static fill(v, n) {\n\n      const out = new Vector.valuesConstructor(n);\n      for (let i = 0; i < out.length; i++) {\n         out[i] = v;\n      }\n\n      return new Vector(out);\n   }\n\n}\n\n\n/**\n * Return 'true' of 'x' is an Index object, 'false' otherwise.\n *\n * @param {any} x - any object or variable.\n *\n * @returns {boolean}\n *\n */\nexport function isindex(x) {\n   return x.constructor === Index;\n}\n\n\n/**\n * Create an Index object from array of values.\n *\n * @param {number[]} values - array with values.\n *\n * @returns {Index} the vector.\n *\n */\nexport function index(values) {\n   return new Index(new Int32Array(values));\n}\n\n\n/** Class representing a vector with indices */\nexport class Index {\n\n   static valuesConstructor = Int32Array;\n\n   /**\n    * Constructor for an Index object.\n    *\n    * @param {Int32Array} values - typed array with index values.\n    *\n    * @returns {Index} an Index object (see description).\n    * @constructor\n    *\n    * @description  Create a vector of values to be used as indices (e.g. for subsetting,\n    * counting, etc.). Index is represented by an object with two fields. Field 'v' is a typed\n    * Int32Array with index values. The second field, 'length', is the length of the vector.\n    *\n    */\n   constructor(values) {\n\n      if (!ArrayBuffer.isView(values) || values.constructor !== Int32Array) {\n         throw Error('Index: parameter \"values\" must be Int32Array.')\n      }\n\n      this.v = values;\n      this.length = values.length;\n   }\n\n\n   /**\n    * Returns a vector of indices for values for which function ´fun´ returns true.\n    *\n    * @param {function} fun - function with two arguments (value and its index).\n    *\n    * @returns {Index} a vector of indices.\n    */\n   which(fun) {\n      const out = new Index.valuesConstructor(this.length);\n      let n = 0;\n      for (let i = 0; i < this.length; i++) {\n         if (fun(this.v[i], i)) {\n            out[n] = i + 1;\n            n = n + 1;\n         }\n      }\n\n      return new Index(out.subarray(0, n));\n   }\n\n\n   /**\n    * Returns a subset of indices for which function ´fun´ returns true.\n    *\n    * @param {function} fun - function with two arguments (value and its index).\n    *\n    * @returns {Index} a subset.\n    */\n   filter(fun) {\n      const out = new Index.valuesConstructor(this.length);\n      let n = 0;\n      for (let i = 0; i < this.length; i++) {\n         if (fun(this.v[i], i)) {\n            out[n] = this.v[i];\n            n = n + 1;\n         }\n      }\n\n      return new Index(out.subarray(0, n));\n   }\n\n\n\n   /**\n    * Shuffle indices.\n    *\n    * @returns {Index} vector with shuffled indices.\n    */\n   shuffle() {\n      return new Index(_shuffle(this.v));\n   }\n\n\n   /**\n    * Sorts indices.\n    *\n    * @param {boolean} decreasing - if true, values will be sorted in decreasing order, otherwise in increasing.\n    *\n    * @returns {Index} vector with sorted indices.\n    *\n    */\n   sort(decreasing) {\n      return new Index(_sort(this.v, decreasing));\n   }\n\n\n   /**\n    * Replicate the index object 'n' times.\n    *\n    * @param {number} n - how many times the index must be replicated.\n    *\n    * @returns {Index} index with replicated values.\n    *\n    */\n   rep(n) {\n      return _rep(this, n);\n   }\n\n\n   /**\n    * Replicate each index in the index 'n' times.\n    *\n    * @param {number} n - how many times every value must be replicated.\n    *\n    * @returns {Index} an index object with replicated values.\n    *\n    */\n   repeach(n) {\n      return _repeach(this, n);\n   }\n\n   /**\n    * Create a subset of a index using another vector with indices.\n    *\n    * @param {number|Array|Index} ind - single index or vector with indices (must start from 1, not 0).\n    *\n    * @returns {Index} a subset.\n    */\n   subset(ind) {\n\n     if (typeof(ind) === 'number') {\n         ind = index([ind]);\n      }\n\n      if (Array.isArray(ind)) {\n         ind = index(ind);\n      }\n\n      if (!isindex(ind)) {\n         throw Error('subset: parameter \"ind\" must be number, array of instance of class Index.');\n      }\n\n      const n = ind.length;\n      const out = new Index.valuesConstructor(n);\n\n      for (let i = 0; i < n; i++) {\n\n         if (ind.v[i] < 1) {\n            throw Error('subset: indices must start with 1 (not 0).');\n         }\n\n         if (ind.v[i] > this.length) {\n            throw Error('subset: index exceeds the length of the vector.');\n         }\n\n         out[i] = this.v[ind.v[i] - 1];\n      }\n\n      return new Index(out);\n   }\n\n\n   /**\n    * Create a subset of a vector of indices which are located between positions 'start' and 'end' (both included).\n    *\n    * @param {number} start - index of value to start (must start from 1, not 0).\n    * @param {number} end - index of value to end.\n    *\n    * @returns {Index} a subset.\n    */\n   slice(start, end) {\n\n      if (start === null) {\n         start = 1;\n      }\n\n      if (end === null || end === undefined) {\n         end = this.length;\n      }\n\n      if (start < 1) {\n         throw Error('slice: indices must start with 1 (not 0).');\n      }\n\n      if (end > this.length) {\n         throw Error('slice: index exceeds the length of the vector.');\n      }\n\n      if (end < start) {\n         throw Error('slice: \"end\" must not be smaller than \"start\".');\n      }\n\n      return new Index(this.v.slice(start - 1, end));\n   }\n\n\n   // Static methods //\n\n   /**\n    * Generate sequence of indices.\n    *\n    * @param {number} start - first value.\n    * @param {number} end - last value.\n    * @param {number} [by=1] - increment between values.\n    *\n    * @returns {Index} object with sequence values.\n    *\n    */\n   static seq(start, end, by) {\n      return _seq(start, end, by, Index);\n   }\n\n\n   /**\n    * Create an Index object filled with ones.\n    *\n    * @param {number} n - length of the vector.\n    *\n    * @returns {Index} the generated vector of indices.\n    *\n    */\n   static ones(n) {\n      return Index.fill(1, n);\n   }\n\n\n  /**\n    * Create an Index object filled with a repeated value.\n    *\n    * @param {number} v - value to fill the index vector with (must be integer).\n    * @param {number} n - length of the vector.\n    *\n    * @returns {Vector} the generated vector of indices.\n    *\n    */\n   static fill(v, n) {\n\n      const out = new Index.valuesConstructor(n);\n      for (let i = 0; i < out.length; i++) {\n         out[i] = v;\n      }\n\n      return new Index(out);\n   }\n\n\n   /**\n    * Convert array of logical values to vector of indices.\n    *\n    * @param {Array} x - array of logical values.\n    *\n    * @returns {Index} vector of indices where x is true.\n    *\n    */\n   static bool2ind(x) {\n\n      let n = 0;\n      const out = new Index.valuesConstructor(x.length);\n\n      for (let i = 0; i < x.length; i++) {\n         if (x[i]) {\n            out[n] = i + 1;\n            n = n + 1;\n         }\n      }\n\n      return new Index(out.subarray(0, n));\n   }\n}\n\n\n/***********************************************/\n/*    Generic methods                          */\n/***********************************************/\n\n/**\n * Generate sequence of values for vector or index.\n *\n * @param {number} start - first value.\n * @param {number} end - last value.\n * @param {number} [by=1] - increment between values.\n * @param {class} classRef - class reference\n *\n * @returns {Object} object with sequence values.\n *\n */\nfunction _seq(start, end, by, classRef) {\n\n   // by default increment is unit\n   if (by === undefined) by = (start <= end) ? 1 : -1;\n\n   // compute length of sequence\n   const length = Math.floor((end - start) / by) + 1;\n\n   if (length < 1) {\n      throw Error('seq: wrong combination of parameters.');\n   }\n\n   const x = new classRef.valuesConstructor(length);\n   for (let i = 0; i < length; i++) {\n      x[i] = start + i * by;\n   }\n\n   return new classRef(x);\n}\n\n\n/**\n * Replicate object 'n' times.\n *\n * @param {Object} obj - object to replicate (Vector or Index).\n * @param {number} n - how many times the vector must be replicated.\n *\n * @returns {Object} an object with replicated values.\n *\n */\nfunction _rep(obj, n) {\n\n   const l = obj.length * n;\n   const out = new obj.constructor.valuesConstructor(l);\n   for (let i = 1; i <= n; i++) {\n      for (let j = 0; j < obj.length; j++) {\n         out[(i - 1) * obj.length + j] = obj.v[j];\n      }\n   }\n\n   return new obj.constructor(out);\n}\n\n\n/**\n * Replicate each value in the object 'n' times.\n *\n * @param {Object} obj - object to replicate (Vector or Index).\n * @param {number} n - how many times every value must be replicated.\n *\n * @returns {Object} an object with replicated values.\n *\n */\nfunction _repeach(obj, n) {\n\n   if (n < 1 || Math.round(n) !== n) {\n      throw Error('rep: parameter \"n\" must be an integer number > 1.');\n   }\n\n   const l = obj.length * n;\n   const out = new obj.constructor.valuesConstructor(l);\n   for (let j = 0; j < obj.length; j++) {\n      for (let i = 0; i < n; i++) {\n         out[j * n + i] = obj.v[j];\n      }\n   }\n\n   return new obj.constructor(out);\n}\n\n\n/**\n * Does an arithmetic operation for individual values from two arrays.\n *\n * @param {Array|Float64Array} v1 - the first array.\n * @param {Array|Float64Array} v2 - the second array.\n * @param {function} fun - function to use.\n *\n * @description the function must take two numbers and return one.\n *\n * @returns array of the same type as v1 and v2.\n */\nfunction _opvv(v1, v2, fun) {\n\n   if (v1.length !== v2.length) {\n      throw error(\"_opvv: arrays sizes do not match.\");\n   }\n\n   if (v1.constructor !== v2.constructor) {\n      throw error(\"_opvv: array types do not match.\");\n   }\n\n   const out = new v1.constructor(v1.length);\n   for (let i = 0; i < v1.length; i++) {\n      out[i] = fun(v1[i], v2[i]);\n   }\n\n   return out;\n}\n\n\n/**\n * Does an arithmetic operation for individual value from an array and a number.\n *\n * @param {Array|Float64Array} v1 - an array.\n * @param {number} v2 - a number.\n * @param {function} fun - function to use.\n *\n * @description the function must take two numbers and return one.\n *\n * @returns array of the same type as v1.\n */\nfunction _opvn(v1, v2, fun) {\n\n   const out = new v1.constructor(v1.length);\n   for (let i = 0; i < v1.length; i++) {\n      out[i] = fun(v1[i], v2);\n   }\n\n   return out;\n}\n\n\n/**\n * Generic function for taking a dot product of two matrices, X and Y, represented as vectors\n * @param {TypedArray} xv - vector with values from X\n * @param {TypedArray} yv - vector with values from Y\n * @param {number} nrx - number of rows in X\n * @param {number} ncx - number of columns in X\n * @param {number} nry - number of rows in Y\n * @param {number} ncy - number of columns in Y\n *\n * @returns {TypedArray} - vector with result of the product\n */\nexport function _dot(xv, yv, nrx, ncx, nry, ncy) {\n\n   if (ncx !== nry) {\n      throw Error('_dot: matrix dimensions do not much.');\n   }\n\n   // create vector for the product\n   const nrows = nrx;\n   const ncols = ncy;\n   const ninner = ncx;\n   const out = new xv.constructor(nrows * ncols);\n\n   for (let c = 0; c < ncols; c++) {\n      const yc = yv.subarray(c * nry, (c + 1) * nry)\n      const outc = out.subarray(c * nrows, (c + 1) * nrows);\n\n      for (let i = 0; i < ninner; i++) {\n         const yci = yc[i];\n         const xr = xv.subarray(i * nrx, (i + 1) * nrx)\n         for (let r = 0; r < nrows; r++) {\n            outc[r] += xr[r] * yci;\n         }\n      }\n   }\n\n   return out;\n}\n\n\n/**\n * Shuffles values in vector x using Fisher–Yates algorithm.\n *\n * @param {Arrat|TypedArray} x - a vector with values.\n *\n * @returns {Array|TypedArray} ector with shuffled values.\n *\n */\nexport function _shuffle(x) {\n\n  let y = x.slice();\n  let n = y.length;\n  let t, i;\n\n  while (n) {\n    i = Math.floor(Math.random() * n--);\n    t = y[n];\n    y[n] = y[i];\n    y[i] = t;\n  }\n\n  return y;\n}\n\n\n/**\n * Sorts values in a vector.\n *\n * @param {Array|TypedArray} x - vector with values.\n *\n * @returns {Array|TypedArray} vector with sorted values.\n *\n */\nexport function _sort(x, decreasing = false) {\n   return decreasing ? x.slice().sort((a, b) => b - a) : x.slice().sort((a, b) => a - b);\n}\n","/*************************************************/\n/*    Methods for computing statistics           */\n/*************************************************/\n\nimport { isnumber, isindex, isvector, vector, Vector } from '../arrays/index.js';\n\n\n\n/**\n * Computes a p-th quantile/quantiles for a numeric vector.\n *\n * @param {Vector} x - vector with values.\n * @param {number|Array|Vector} p - probability (one value or a vector).\n *\n * @returns {number|Vector} quantile value or a vector with quantiles.\n */\nexport function quantile(x, p) {\n\n   if (!isvector(x)) {\n      throw Error(\"quantile: parameter 'x' must be an instance of Vector class.\");\n   }\n\n   x = x.sort();\n   const n = x.length;\n\n   if (isvector(p)) {\n      p = p.v;\n   }\n\n   if (!Array.isArray(p)) p = [p];\n\n   if (!isnumber(p[0]) || min(p) < 0 || max(p) > 1) {\n      throw new Error(\"Parameter 'p' must be between 0 and 1 (both included).\");\n   }\n\n   function q(x, p) {\n      const h = (n - 1) * p + 1;\n      const n1 = Math.floor(h);\n      const n2 = Math.ceil(h);\n      return x[n1 - 1] + (x[n2 - 1] - x[n1 - 1]) * (h - Math.floor(h));\n   }\n\n   const out =  p.map(v => q(x.v, v));\n   return p.length == 1 ? out[0] : vector(out);\n}\n\n\n/**\n * Counts how many values from a vector falls into provided intervals (bins).\n *\n * @param {Array|Vector} x - vector with values.\n * @param {Array|Vector} bins - vector with bins boundaries.\n *\n * @returns {Vector} vector with counts for each bean.\n *\n */\nexport function count(x, bins) {\n\n   if (isvector(x)) {\n      return count(x.v, isvector(bins) ? bins.v : bins);\n   }\n\n   const n = bins.length;\n\n   // add a bit extra to right side of the last bin\n   bins[n - 1] = bins[n - 1] * 1.0001\n\n   // count\n   let counts = new Vector.valuesConstructor(n - 1);\n   for (let i = 0; i < x.length; i++) {\n      for (let j = 0; j < n - 1; j++) {\n         if (x[i] >= bins[j] && x[i] < bins[j + 1]) counts[j] += 1;\n      }\n   }\n\n   return new Vector(counts);\n}\n\n\n/**\n * Computes middle points between values of a vector.\n *\n * @param {Array|Vector} x - vector with values.\n *\n * @returns {Vector} vector with middle points.\n *\n */\nexport function mids(x) {\n\n   if (isvector(x)) {\n      return mids(x.v);\n   }\n\n   const out = new Vector.valuesConstructor(x.length - 1);\n   for (let i = 0; i < out.length; i++) {\n      out[i] = 0.5 * (x[i] + x[i + 1]);\n   }\n\n   return new Vector(out);\n}\n\n\n/**\n * Splits range of vector values into equal intervals.\n *\n * @param {Array|Vector} x - vector with values.\n * @param {number} n - number of intervals.\n *\n * @returns {Vector} vector with boundaries of the intervals.\n *\n */\nexport function split(x, n) {\n\n   if (isvector(x)) {\n      split(x.v, n);\n   }\n\n   const rn = range(x);\n\n   if (rn[0] === rn[1]) {\n      throw new Error('split: values in a vector \"x\" should vary.');\n   }\n\n   const by = (rn[1] - rn[0]) / n;\n   return Vector.seq(rn[0], rn[1], by);\n}\n\n\n/**\n * Computes difference between all adjacent values in a vector.\n *\n * @param {Array|Vector} x - vector with values.\n *\n * @returns {Vector} vector with the differences.\n *\n */\nexport function diff(x) {\n\n   if (isvector(x)) {\n      return diff(x.v);\n   }\n\n   const out = new Vector.valuesConstructor(x.length - 1);\n   for (let i = 0; i < x.length - 1; i++) {\n      out[i] = x[i + 1] - x[i];\n   }\n\n   return new Vector(out);\n}\n\n\n/**\n * Generate probability points for QQ plot.\n *\n * @param {number} n - number of points.\n *\n * @returns {Vector} a sequence of probabilities between 0 and 1.\n *\n */\nexport function ppoints(n) {\n\n   const a = n < 10 ? 3.0/8.0 : 0.5;\n   const out = new Vector.valuesConstructor(n);\n\n   for (let i = 0; i < n; i++) {\n      out[i] = (i + 1 - a) / (n + (1 - a) - a);\n   }\n\n   return new Vector(out);\n}\n\n\n/**\n * Computes cumulative sums for the vector values.\n *\n * @param {Array|Vector} x - vector with values.\n *\n * @returns {Vectors} vector with cumulative sums.\n *\n */\nexport function cumsum(x) {\n\n   if (isvector(x)) {\n      return cumsum(x.v);\n   }\n\n   let s = 0;\n   let out = new Vector.valuesConstructor(x.length);\n   for (let i = 0; i < x.length; i++) {\n      s += x[i];\n      out[i] = s\n   }\n\n   return new Vector(out);\n}\n\n\n/**\n * Computes kurtosis of values.\n *\n * @param {Array|Vector} x - vector with values.\n *\n * @returns {number} kurtosis of x.\n *\n */\nexport function kurtosis(x) {\n\n   if (isvector(x)) {\n      return kurtosis(x.v);\n   }\n\n   let n = x.length;\n   let m = mean(x);\n\n   let m4 = 0.0;\n   let m2 = 0.0;\n   for (let i = 0; i < n; i++) {\n      m2 = m2 + Math.pow((x[i] - m), 2);\n      m4 = m4 + Math.pow((x[i] - m), 4);\n   }\n\n   return (m4/n) / Math.pow((m2/n), 2);\n}\n\n\n/**\n * Computes skewness of values.\n *\n * @param {Array|Vector} x - vector with values.\n *\n * @returns {number} skewness of x.\n *\n */\nexport function skewness(x) {\n\n   if (isvector(x)) {\n      return skewness(x.v);\n   }\n\n   let n = x.length;\n   let m = mean(x);\n\n   let m3 = 0.0;\n   let m2 = 0.0;\n   for (let i = 0; i < n; i++) {\n      m2 = m2 + Math.pow((x[i] - m), 2);\n      m3 = m3 + Math.pow((x[i] - m), 3);\n   }\n\n   return (m3/n) / Math.pow((m2/n), 1.5);\n}\n\n\n/**\n * Computes correlation between two vectors.\n *\n * @param {Array|Vector} x - vector with values.\n * @param {Array|Vector} y - vector with values.\n * @param {string} method - which method to use (\"pearson\" or \"spearman\").\n *\n * @returns {number} correlation between x and y.\n *\n */\nexport function cor(x, y, method = \"pearson\") {\n\n   if (isvector(x)) {\n      return cor(x.v, y.v, method);\n   }\n\n   if (method === \"spearman\") {\n      return cor(rank(x), rank(y));\n   }\n\n   return cov(x, y) / (sd(x) * sd(y));\n}\n\n\n/**\n * Computes covariance between two vectors.\n *\n * @param {Array|Vector} x - vector with values.\n * @param {Array|Vector} y - vector with values.\n * @param {boolean} [biased=false] - compute a biased version with n degrees of freedom or not (with n - 1).\n * @param {number} [mx=undefined] - mean of x values (if already known).\n * @param {number} [my=undefined] - mean of y values (if already known).\n *\n * @returns {number} covariance between x and y.\n *\n */\nexport function cov(x, y, biased = false, mx = undefined, my = undefined) {\n\n   if (isvector(x)) {\n      return cov(x.v, y.v, biased, mx, my);\n   }\n\n   const n = x.length;\n\n   if (y.length !== n) {\n      throw Error(\"Vectors 'x' and 'y' must have the same length.\");\n   }\n\n   if (n < 2) {\n      throw Error(\"Vectors 'x' and 'y' must have at least two values.\");\n   }\n\n   if (mx === undefined) mx = mean(x);\n   if (my === undefined) my = mean(y);\n\n   let s = 0;\n   for (let i = 0; i < n; i++) {\n      s = s + (x[i] - mx) * (y[i] - my);\n   }\n\n   return s / (biased ? n : n - 1);\n}\n\n\n/**\n * Returns ranks of values in a vector (ranks start from 1, not 0).\n *\n * @param {Array|Vector} x - vector with values.\n *\n * @returns {Vector} vector with ranks.\n *\n */\nexport function rank(x) {\n\n   if (isvector(x)) {\n      return rank(x.v);\n   }\n\n   const y = [...x].sort((a, b) => a - b);\n\n   return new Vector(x.map(v => y.indexOf(v) + 1));\n}\n\n\n/**\n * Compute marginal range of values as [min, max]\n *\n * @param {Array|Vector} x - vector with values.\n * @param {number} m - margin as per cent of range (value between 0 and 1).\n *\n * @return {Array} array with two values, min and max.\n *\n */\nexport function mrange(x, m) {\n\n   if (isvector(x)) {\n      return mrange(x.v, m);\n   }\n\n   if (m === undefined) m = 0.10;\n   const r = range(x);\n   const d = (r[1] - r[0]) * m;\n\n   return [r[0] - d, r[1] + d];\n}\n\n\n/**\n * Compute range of values as [min, max].\n *\n * @param {Array|Vector} x - vector with values.\n *\n * @return {Array} array with two values, min and max.\n *\n */\nexport function range(x) {\n\n   if (isvector(x)) {\n      return range(x.v);\n   }\n\n   let min = x[0];\n   let max = x[0];\n\n   for (let i = 1; i < x.length; i++) {\n      if (x[i] < min) min = x[i];\n      if (x[i] > max) max = x[i];\n   }\n\n   return [min, max];\n}\n\n\n/**\n * Compute norm2 of a vector (Euclidean distance).\n *\n * @param {Array|Vector} x - vector with values.\n *\n * @returns {number} norm value.\n *\n */\nexport function norm2(x) {\n\n   if (isvector(x)) {\n      return norm2(x.v);\n   }\n\n   return Math.sqrt(ssq(x));\n}\n\n\n/**\n * Compute sum of squared vector values\n *\n * @param {Array|Vector} x - vector with values.\n *\n * @returns {number} sum of squared values of x.\n *\n */\nexport function ssq(x) {\n\n   if (isvector(x)) {\n      return ssq(x.v);\n   }\n\n   let ssqv = 0;\n   const n = x.length;\n   for (let i = 0; i < n; i++) {\n      const v = x[i]\n      ssqv += v * v;\n   }\n\n   return ssqv;\n}\n\n\n/**\n * Compute standard deviation of vector values.\n *\n * @param {Array|Vector} x - vector with values.\n * @param {boolean} [biased=false] - compute a biased value (n degrees of freedom) or unbiased (n - 1 degrees of freedom)\n *\n * @returns {number} standard deviation of x.\n *\n */\nexport function sd(x, biased) {\n\n   if (isvector(x)) {\n      return sd(x.v, biased);\n   }\n\n   return Math.sqrt(variance(x, biased));\n}\n\n\n/**\n * Compute variance of vector values.\n *\n * @param {Array|Vector} x - vector with values.\n * @param {boolean} [biased=false] - compute a biased variance (n degrees of freedom) or unbiased (n - 1 degrees of freedom)\n *\n * @returns {number} variance of x.\n *\n */\nexport function variance(x, biased) {\n\n   if (biased === undefined) {\n      biased = false;\n   }\n\n   if (isvector(x)) {\n      return variance(x.v);\n   }\n\n   const m = mean(x);\n   let s = 0;\n   for (let i = 0; i < x.length; i++) {\n      const d = (x[i] - m);\n      s = s + d * d ;\n   }\n\n   return s / (biased ? x.length : (x.length - 1));\n}\n\n\n/**\n * Compute average of vector values.\n *\n * @param {Array|Vector} x - vector with values.\n *\n * @returns {number} mean of x.\n *\n */\nexport function mean(x) {\n\n   if (isvector(x)) {\n      return mean(x.v);\n   }\n\n   return sum(x) / x.length;\n}\n\n\n/**\n * Compute sum of all values in a vector.\n *\n * @param {Array|Vector} x - vector with values.\n *\n * @returns {number} sum of x.\n *\n */\nexport function sum(x) {\n\n   if (isvector(x)) {\n      return sum(x.v);\n   }\n\n   let s = 0;\n   for (let i = 0; i < x.length; i++) {\n      s = s + x[i];\n   }\n\n   return s;\n}\n\n\n/**\n * Compute product of all values in a vector.\n *\n * @param {Array|Vector} x - vector with values.\n *\n * @returns {number} product of x.\n *\n */\nexport function prod(x) {\n\n   if (isvector(x)) {\n      return prod(x.v);\n   }\n\n   let p = 1;\n   for (let i = 0; i < x.length; i++) {\n      p = p * x[i];\n   }\n\n   return p;\n}\n\n\n/**\n * Find the smallest element in a vector.\n *\n * @param {Array|Vector|Index} x - vector or index with values.\n *\n * @returns {number} the smallest value.\n *\n */\nexport function min(x) {\n\n   if (isvector(x) || isindex(x)) {\n      return x.v[minind(x.v) - 1];\n   }\n\n   return x[minind(x) - 1];\n}\n\n\n/**\n * Find index of the smallest element in a vector.\n *\n * @param {Array|Vector|Index} x - vector or index with values.\n *\n * @returns {number} index of the smallest value (starting from 1).\n *\n */\nexport function minind(x) {\n\n   if (isvector(x) || isindex(x)) {\n      return minind(x.v);\n   }\n\n   let outind = 1;\n   let out = x[0]\n   for (let i = 2; i <= x.length; i++) {\n      if (x[i - 1] < out) {\n         outind = i;\n         out = x[i - 1];\n      }\n   }\n\n   return outind;\n}\n\n\n/**\n * Find the largest element in a vector.\n *\n * @param {Array|Vector|Index} x - vector or index with values.\n *\n * @returns {number} the largest value.\n *\n */\nexport function max(x) {\n\n   if (isvector(x) || isindex(x)) {\n      return x.v[maxind(x.v) - 1];\n   }\n\n   return x[maxind(x) - 1];\n}\n\n\n/**\n * Find index of the largest element in a vector.\n *\n * @param {Array|Vector|Index} x - vector or index with values.\n *\n * @returns {number} index of the largest value (starting from 1).\n *\n */\nexport function maxind(x) {\n\n   if (isvector(x) || isindex(x)) {\n      return maxind(x.v);\n   }\n\n   let outind = 1;\n   let out = x[0]\n   for (let i = 2; i <= x.length; i++) {\n      if (x[i - 1] > out) {\n         outind = i;\n         out = x[i - 1];\n      }\n   }\n\n   return outind;\n}\n\n\n","import { noop, safe_not_equal, subscribe, run_all, is_function } from '../internal/index.mjs';\nexport { get_store_value as get } from '../internal/index.mjs';\n\nconst subscriber_queue = [];\n/**\n * Creates a `Readable` store that allows reading by subscription.\n * @param value initial value\n * @param {StartStopNotifier}start start and stop notifications for subscriptions\n */\nfunction readable(value, start) {\n    return {\n        subscribe: writable(value, start).subscribe\n    };\n}\n/**\n * Create a `Writable` store that allows both updating and reading by subscription.\n * @param {*=}value initial value\n * @param {StartStopNotifier=}start start and stop notifications for subscriptions\n */\nfunction writable(value, start = noop) {\n    let stop;\n    const subscribers = new Set();\n    function set(new_value) {\n        if (safe_not_equal(value, new_value)) {\n            value = new_value;\n            if (stop) { // store is ready\n                const run_queue = !subscriber_queue.length;\n                for (const subscriber of subscribers) {\n                    subscriber[1]();\n                    subscriber_queue.push(subscriber, value);\n                }\n                if (run_queue) {\n                    for (let i = 0; i < subscriber_queue.length; i += 2) {\n                        subscriber_queue[i][0](subscriber_queue[i + 1]);\n                    }\n                    subscriber_queue.length = 0;\n                }\n            }\n        }\n    }\n    function update(fn) {\n        set(fn(value));\n    }\n    function subscribe(run, invalidate = noop) {\n        const subscriber = [run, invalidate];\n        subscribers.add(subscriber);\n        if (subscribers.size === 1) {\n            stop = start(set) || noop;\n        }\n        run(value);\n        return () => {\n            subscribers.delete(subscriber);\n            if (subscribers.size === 0) {\n                stop();\n                stop = null;\n            }\n        };\n    }\n    return { set, update, subscribe };\n}\nfunction derived(stores, fn, initial_value) {\n    const single = !Array.isArray(stores);\n    const stores_array = single\n        ? [stores]\n        : stores;\n    const auto = fn.length < 2;\n    return readable(initial_value, (set) => {\n        let inited = false;\n        const values = [];\n        let pending = 0;\n        let cleanup = noop;\n        const sync = () => {\n            if (pending) {\n                return;\n            }\n            cleanup();\n            const result = fn(single ? values[0] : values, set);\n            if (auto) {\n                set(result);\n            }\n            else {\n                cleanup = is_function(result) ? result : noop;\n            }\n        };\n        const unsubscribers = stores_array.map((store, i) => subscribe(store, (value) => {\n            values[i] = value;\n            pending &= ~(1 << i);\n            if (inited) {\n                sync();\n            }\n        }, () => {\n            pending |= (1 << i);\n        }));\n        inited = true;\n        sync();\n        return function stop() {\n            run_all(unsubscribers);\n            cleanup();\n        };\n    });\n}\n\nexport { derived, readable, writable };\n","import { cbind, vector, isvector, Vector } from 'mdatools/arrays';\n\n/**\n * Check coordinates and convert them to vector if necessary.\n *\n * @param {Array|Vector} x - vector or array with coordinates.\n * @param {string} source - name of component which called the method (needed for error message).\n *\n * @returns {Vector}\n *\n */\nexport function checkCoords(x, source) {\n\n   if (Array.isArray(x)) {\n      x = vector(x);\n   }\n\n   if (!isvector(x)) {\n      throw Error(source + \": coordinates must be provided as array or instance of Vector class.\");\n   }\n\n   if (x.length < 1) {\n      throw Error(source + \": vector with coordinates is empty.\");\n   }\n\n   return x;\n}\n\n/**\n * Create string with coordinates of SVG polygon in 3D.\n *\n * @param {Array|Vector} x - vector with x-coordinates of polygon points.\n * @param {Array|Vector} y - vector with y-coordinates of polygon points.\n * @param {Array|Vector} z - vector with y-coordinates of polygon points.\n * @param {Array} tM - transformation matrix for 3D->2D (from 'Axes').\n * @param {Object} axes - JSON with Axes context.\n *\n * @returns {string} string with coordinates.\n *\n */\nexport function val2p3d(x, y, z, tM, axes) {\n\n   if (x === undefined || y === undefined) return undefined;\n\n   const [px, py] = axes.transform(cbind(checkCoords(x), checkCoords(y), checkCoords(z)), tM);\n\n   if (px.length !== py.length) {\n      throw Error('PlotSeries: parameters \"xValues\", \"yValues\" and \"zValues\" must be numeric vectors of the same length.');\n   }\n\n   let p = \"\";\n   for (let i = 0; i < px.length; i++) {\n      p += px[i] + \",\" + py[i] + \" \";\n   }\n\n   return p;\n}\n\n\n/**\n * Create string with coordinates of SVG polygon.\n *\n * @param {Array|Vector} x - vector with x-coordinates of polygon points.\n * @param {Array|Vector} y - vector with y-coordinates of polygon points.\n * @param {Array} tX - transformation parameters for x-coordinates (from 'Axes').\n * @param {Array} tY - transformation parameters for y-coordinates (from 'Axes').\n * @param {Object} axes - JSON with Axes context.\n *\n * @returns {string} string with coordinates.\n *\n */\nexport function val2p(x, y, tX, tY, axes) {\n\n   if (x === undefined || y === undefined) return undefined;\n\n   const px = axes.transform(checkCoords(x), tX.coords);\n   const py = axes.transform(checkCoords(y), tY.coords);\n\n   if (px.length != py.length) {\n      throw Error('PlotSeries: parameters \"xValues\" and \"yValues\" must be numeric vectors of the same length.');\n   }\n\n   let p = \"\";\n   for (let i = 0; i < px.length; i++) {\n      p += px[i] + \",\" + py[i] + \" \";\n   }\n\n   return p;\n}\n\n/**\n * Computes nice tick values for axis.\n *\n * @param {Array} ticks - vector with ticks if alredy available (if not, new will be computed).\n * @param {Array} lim - vector with axis limits tickets must be computed for.\n * @param {number} maxTickNum - maximum number of ticks to compute.\n * @param {boolean} round - round or not the fractions when computing nice numbers for the ticks.\n *\n * @returns {Array} an array with computed tick positions.\n *\n */\nexport function getAxisTicks(ticks, lim, maxTickNum, round = true) {\n\n   // if ticks are already provided do not recompute them\n   if (ticks !== undefined) {\n      if (Array.isArray(ticks)) {\n         ticks = vector(ticks);\n      }\n\n      if (!isvector(ticks)) {\n         throw Error('getAxisTicks: axis ticks must be provided as an array or as a vector.');\n      }\n\n      return ticks.filter(x => x >= lim[0] & x <= lim[1]);\n   }\n\n   // check if limits are ok\n   if (typeof(lim) !== \"object\" || lim[0] === undefined || lim[1] === undefined) return undefined;\n\n   // get range as a nice number and compute min, max and steps for the tick sequence\n   const delta = (lim[1] - lim[0]) / 50;\n   const range = niceNum(lim[1] - lim[0] - 1 * delta, round);\n   const tickSpacing = niceNum(range / (maxTickNum - 1), round);\n   const tickMin = Math.ceil((lim[0] + delta) / tickSpacing) * tickSpacing;\n   const tickMax = Math.floor((lim[1] - delta) / tickSpacing) * tickSpacing;\n\n   // recompute maxTickNum\n   maxTickNum = Math.round((tickMax - tickMin + 1) / tickSpacing) + 1;\n\n   // create a sequence of ticks\n   ticks = Vector.seq(tickMin, tickMax, tickSpacing);\n\n   // if step is smaller than 1 round values to remove small decimals accidentiall added by JS\n   if (Math.abs(tickSpacing) < 1) {\n      const r = Math.pow(10, 1 + Math.round(-Math.log10(tickSpacing)));\n      ticks = ticks.apply(v => Math.round((v + Number.EPSILON) * r) / r)\n   }\n\n   // make sure the ticks are not aligned with axes limits\n   return ticks.filter(x => x >= lim[0] & x <= lim[1]);\n}\n\n\n/**\n * Computes a nice spacing value for a given range.\n *\n * @param {Number} localRange - a range (max - min).\n * @param {boolean} round - round or not the fractions when computing the number.\n *\n * @returns {Number} the computed spacing value.\n *\n */\nexport function niceNum( localRange,  round) {\n\n   const exponent = Math.floor(Math.log10(localRange));\n   const fraction = localRange / Math.pow(10, exponent);\n   let niceFraction;\n\n   if (round) {\n      if (fraction < 1.5)\n         niceFraction = 1;\n      else if (fraction < 3)\n         niceFraction = 2;\n      else if (fraction < 7)\n         niceFraction = 5;\n      else\n         niceFraction = 10;\n   } else {\n      if (fraction <= 1)\n         niceFraction = 1;\n      else if (fraction <= 2)\n         niceFraction = 2;\n      else if (fraction <= 5)\n         niceFraction = 5;\n      else\n         niceFraction = 10;\n   }\n\n   return niceFraction * Math.pow(10, exponent);\n}\n\n\n/**\n * Rounds coordinate values to single decimal\n */\nexport function roundCoords(x) {\n   return Math.round(x * 10) / 10\n}\n\n\n/**\n * Computes a scale level.\n *\n * @param {numeric} width - width of plotting area in pixels.\n * @param {numeric} height - height of plotting area in pixels.\n *\n * @returns {text} the scale level (\"small\", \"medium\" or \"large\").\n *\n */\nexport function getScale(width, height) {\n   if (height < 300.2 || width < 300.2) return \"small\";\n   if (height < 600.2 || width < 600.2) return \"medium\";\n   return \"large\";\n}","<script>\n   /****************************************************\n   * Axes for 3D plots                                 *\n   * --------------------                              *\n   * root item for any plot                            *\n   *****************************************************/\n\n\timport { setContext, onMount, onDestroy } from 'svelte';\n\timport { writable } from 'svelte/store';\n   import { cbind, matrix, Matrix, Vector } from 'mdatools/arrays';\n   import { getScale, roundCoords } from '../Utils.js';\n\n\n   /*****************************************/\n   /* Input parameters                      */\n   /*****************************************/\n\n   export let limX;        // limits for x-axis (in plot units) [min, max]\n   export let limY;        // limits for y-axis (in plot units) [min, max]\n   export let limZ;        // limits for z-axis (in plot units) [min, max]\n   export let theta = -10;\n   export let phi = -10;\n   export let zoom = 0.5;\n\n\n   /*****************************************/\n   /* Constants                             */\n   /*****************************************/\n\n   // number of ticks along each axis\n   const TICK_NUM = {\n      \"small\": 5,\n      \"medium\": 8,\n      \"large\": 12\n   };\n\n   // margin between plot series elements and data labels\n   const LABELS_MARGIN = {\n      \"small\": 5,\n      \"medium\": 10,\n      \"large\": 15\n   };\n\n   // line styles for different scales and types\n   const LINE_STYLES = {\n      small:  [\"0\", \"3,3\", \"1,1\", \"3,1\"],\n      medium: [\"0\", \"5,5\", \"2,2\", \"5,2\"],\n      large:  [\"0\", \"7,7\", \"3,3\", \"7,3\"],\n   }\n\n   // translation matrix to move points to center of a unit cube\n   const T1 = matrix([\n      1, 0, 0, 0,\n      0, 1, 0, 0,\n      0, 0, 1, 0,\n      0.5, 0.5, 0.5, 1\n   ], 4, 4);\n\n   // inverse translation matrix for T1\n   const T2 = matrix([\n      1, 0, 0, 0,\n      0, 1, 0, 0,\n      0, 0, 1, 0,\n      -0.5, -0.5, -0.5, 1\n   ], 4, 4);\n\n   // constant to make clip path ID unique\n   const clipPathID = \"plottingArea\" + Math.round(Math.random() * 10000);\n\n\n   /*****************************************/\n   /* Variable parameters for internal use  */\n   /*****************************************/\n\n   // bindings to plot DOM elements\n   let plotElement;\n   let axesElement;\n   let width, height = 100;\n\n\n   /*****************************************/\n   /* Helper functions                      */\n   /*****************************************/\n\n   /**\n    * Transforms world coordinates to 2D scene pixels by applying the transformation matrix 'tM'.\n    *\n    * @param {Matrix} coords - matrix with coordinates [X, Y, Z]\n    * @param {Matrix} tM - transformation matrix\n    *\n    * @returns {Array} array with transformed coordinates as two vectors [x, y].\n    *\n    */\n   const transform = function(coords, tM) {\n//      const coords2D = cbind(coords, Vector.ones(coords.nrows)).dot(tM);\n//      const coords2D = tcrossprod(tM, cbind(coords, Vector.ones(coords.nrows))).t();\n      const coords2D = cbind(coords, Vector.ones(coords.nrows)).dot(tM);\n      return [coords2D.getcolref(1).map(v => roundCoords(v)), coords2D.getcolref(2).map(v => roundCoords(v))];\n   }\n\n\n   /*****************************************/\n   /* Storage to share with children        */\n   /*****************************************/\n\n   const tM = writable(Matrix.eye(4));    // transformation matrix\n   const scale = writable('medium');      // plot scale (small/medium/large)\n   const xLim = writable(limX);           // x-axis limits in 3D (before projection)\n   const yLim = writable(limY);           // y-axis limits in 3D (before projection)\n   const zLim = writable(limZ);           // z-axis limits in 3D (before projection)\n   const isOk = writable(false);          // indicator that axes works fine\n\n\n   /*****************************************/\n   /* Axes context                          */\n   /*****************************************/\n\n   let context = {\n\n      // methods\n      transform: transform,\n\n      // state proporties\n      scale: scale,\n      isOk: isOk,\n      xLim: xLim,\n      yLim: yLim,\n      zLim: zLim,\n      tM: tM,\n\n      // constants\n      LINE_STYLES: LINE_STYLES,\n      LABELS_MARGIN: LABELS_MARGIN,\n      TICK_NUM: TICK_NUM\n   }\n\n\tsetContext('axes', context);\n\n\n   /*****************************************/\n   /* Reactive updates of the parameters    */\n   /*****************************************/\n\n   // update limits if necessary\n   $: xLim.update(v => limX);\n   $: yLim.update(v => limY);\n   $: zLim.update(v => limZ);\n\n   // projection matrix (step 1)\n   $: P2 = matrix([\n         1, 0, 0, 0,\n         0, Math.cos(theta), Math.sin(theta), 0,\n         0, -Math.sin(theta),  Math.cos(theta), 0,\n         0, 0, 0, 1,\n   ], 4, 4);\n\n   // projection matrix (step 2)\n   $: P1 = matrix([\n         Math.cos(phi), 0, -Math.sin(phi), 0,\n         0, 1, 0, 0,\n         Math.sin(phi), 0, Math.cos(phi), 0,\n         0, 0, 0, 1\n      ], 4, 4);\n\n   // zoom matrix\n   $: Z = matrix([\n      zoom, 0, 0, 0,\n      0, zoom, 0, 0,\n      0, 0, zoom, 0,\n      0, 0, 0, 1\n   ], 4, 4);\n\n   // matrix for projection and zooming\n   // we shift [0, 1] cube to center, project, zoom, and then shift back\n   $: P = T1.dot(Z.dot(P2.dot(P1.dot(T2))))\n\n   // update transformation matrix if angles of the norm vectors are changed\n   $: {\n      if ($isOk) {\n         // translate\n         const TT1 = matrix([\n            1, 0, 0, 0,\n            0, 1, 0, 0,\n            0, 0, 1, 0,\n            -$xLim[0], -$yLim[0], -$zLim[0], 1\n         ], 4, 4);\n\n         // scale the whole cube to [0, 1] limits\n         const SS1 = matrix([\n            1 / ($xLim[1] - $xLim[0]) ,  0, 0, 0,\n            0, 1 / ($yLim[1] - $yLim[0]), 0, 0,\n            0, 0, 1 / ($zLim[1] - $zLim[0]), 0,\n            0, 0, 0, 1\n         ], 4, 4);\n\n         // scale to screen coordinates\n         const SS2 = matrix([\n            width,  0, 0, 0,\n            0, height, 0, 0,\n            0, 0, 1, 0,\n            0, 0, 0, 1\n         ], 4, 4);\n\n         tM.update(x => SS2.dot(P.dot(SS1.dot(TT1))).t());\n      } else {\n         tM.update(x => Matrix.eye(4));\n      }\n   }\n\n\n   /*****************************************/\n   /* Events observers                      */\n   /*****************************************/\n\n   // observer for the plot area size — to update scale\n   const ro1 = new ResizeObserver(entries => {\n      for (let entry of entries) {\n         const pcr = plotElement.getBoundingClientRect();\n         scale.update(x => getScale(pcr.width, pcr.height));\n      }\n   });\n\n   // observer for the axes area size - to update size of axes\n   const ro2 = new ResizeObserver(entries => {\n      for (let entry of entries) {\n         const acr = axesElement.getBoundingClientRect();\n         width = acr.width;\n         height = acr.height;\n      }\n   });\n\n   onMount(() => {\n      ro1.observe(plotElement);\n      ro2.observe(plotElement);\n   });\n\n   onDestroy(() => {\n      ro1.unobserve(plotElement);\n      ro2.unobserve(plotElement);\n   })\n\n   // check if everything is ok regarding the axis limits\n   $: isOk.update(v =>\n      !$yLim.some(v => v === undefined) &&\n      !$xLim.some(v => v === undefined) &&\n      !$zLim.some(v => v === undefined) &&\n      !$yLim.some(v => isNaN(v)) &&\n      !$xLim.some(v => isNaN(v)) &&\n      !$zLim.some(v => isNaN(v))\n   )\n</script>\n\n\n<div class=\"plot {'plot_' + $scale}\"  bind:this={plotElement} class:plot_error={!$isOk}>\n\n   <!-- axes (coordinate system) -->\n   <div class=\"axes-wrapper\" bind:this={axesElement} >\n      <slot name=\"title\"></slot>\n\n      <svg vector-effect=\"non-scaling-stroke\" preserveAspectRatio=\"none\" class=\"axes\">\n\n         <!-- axis and box -->\n         <slot name=\"xaxis\"></slot>\n         <slot name=\"yaxis\"></slot>\n         <slot name=\"zaxis\"></slot>\n\n         <!-- main plot content -->\n         <g class=\"axes-content\" >\n            <slot></slot>\n         </g>\n\n         <!-- axis and box -->\n         <slot name=\"box\"></slot>\n      </svg>\n\n      {#if !$isOk}\n      <p class=\"message_error\">\n         Axes component was not properly initialized. <br />\n         Add plot series (check that coordinates are numeric) or define axes limits manually.\n      </p>\n      {/if}\n   </div>\n\n\n</div>\n\n<style>\n\n   /* Plot (main container) */\n   .plot {\n      font-family: Arial, Helvetica, sans-serif;\n\n      display: grid;\n      grid-template-columns: min-content auto;\n      grid-template-rows: min-content auto min-content;\n      grid-template-areas:\n         \". title\"\n         \"ylab axes\"\n         \". xlab\";\n\n      box-sizing: border-box;\n      min-width: 100px;\n      min-height: 50px;\n      width: 100%;\n      height: 100%;\n      padding: 0;\n      margin: 0;\n      background-color: white;\n   }\n\n   :global(.plot_small) {\n      font-size: 11px;\n   }\n\n   :global(.plot_medium) {\n      font-size: 13px;\n   }\n\n   :global(.plot_large) {\n      font-size: 16px;\n   }\n\n   :global(.plot_error) {\n      display: flex;\n   }\n\n   :global(.plot_error > .axes-wrapper) {\n      display: none;\n   }\n\n   .message_error {\n      font-size: 1.2em;\n      color: crimson;\n      padding: 20px;\n      text-align: center;\n      width: 100%;\n   }\n\n   /* Axes (coordinate system) */\n   .axes-wrapper {\n      grid-area: axes;\n      position:relative;\n      box-sizing: border-box;\n      display: flex;\n      width: 100%;\n      height: 100%;\n      padding: 0;\n      margin: 0;\n   }\n\n   .axes {\n      display: block;\n      box-sizing: border-box;\n      position:absolute;\n      user-select: none;\n      cursor: default;\n      padding: 0;\n      margin: 0;\n      height: 100%;\n      width: 100%;\n      max-height: 100%;\n      max-width: 100%;\n      min-height: 100%;\n      min-width: 100%;\n   }\n\n   .axes :global(text) {\n       -webkit-user-select: none;\n      user-select: none;\n      cursor: default;\n   }\n\n   :global(.axes-content) {\n      padding: 0;\n      margin: 0;\n      height: 100%;\n      width: 100%;\n      max-height: 100%;\n      max-width: 100%;\n      min-height: 100%;\n      min-width: 100%;\n\n   }\n\n   :global(.axes__xlabel) {\n      grid-area: xlab;\n      font-size: 1.0em;\n      font-weight: 600;\n      padding: 0.25em;\n      text-align: center;\n   }\n\n\n   :global(.axes__ylabel) {\n      grid-area: ylab;\n      font-size: 1.0em;\n      font-weight: 600;\n      padding: 0.25em;\n      text-align: center;\n      vertical-align: middle;\n      display: flex;\n   }\n\n   :global(.axes__ylabel > span) {\n      width: 1.5em;\n      line-height: 1.5em;\n      display: inline-block;\n      writing-mode: vertical-rl;\n      transform: rotate(180deg);\n   }\n\n\n   :global(.axes__title) {\n      background: transparent;\n      grid-area: title;\n\n      font-size: 1.3em;\n      font-weight: bold;\n      line-height: 1.2em;\n      padding: 0.5em 0;\n      text-align: center;\n   }\n\n   /* Axis */\n   :global(.axis-labels) {\n      fill: #303030;\n      font-size: 0.95em;\n   }\n\n   /* Data labels */\n   :global(.labels) {\n      fill: #606060;\n      font-size: 0.90em;\n   }\n\n   :global(.labels) {\n      visibility: hidden;\n      transition:visibility 0.25s linear, opacity 0.25s linear;\n      opacity: 0;\n   }\n\n</style>","export const Colors = {\n   \"AXIS_LINE\": \"#303030\",\n   \"AXIS_TICK\": \"#606060\",\n   \"WHITE\":     \"#fff\",\n   \"BLACK\":     \"#000\",\n   \"GRAY\":      \"#909090\",\n   \"MIDDLEGRAY\": \"#dadada\",\n   \"LIGHTGRAY\": \"#f0f0f0\",\n   \"DARKGRAY\":  \"#606060\",\n   \"LEGEND\": \"#303030\",\n\n   \"PRIMARY\": \"#2679B2\",\n   \"PRIMARY_TEXT\": \"#333\",\n}\n\n\n/**\n * Returns an array with 'n' colors.\n *\n * @param {number} n - number of colors to return.\n *\n * @returns {Array} array with colors as strings (hexadecimal).\n *\n */\nexport function getcolmap(n) {\n   if (n ==  1) return [\"#2679B2\"];\n   if (n ==  2) return [\"#2679B2\", \"#D22C2F\"];\n   if (n ==  3) return [\"#2679B2\", \"#92B42A\", \"#D22C2F\"];\n   if (n ==  4) return [\"#2679B2\", \"#2E9658\", \"#F2B825\", \"#D22C2F\"];\n   if (n ==  5) return [\"#2679B2\", \"#22988A\", \"#92B42A\", \"#F79426\", \"#D22C2F\"];\n   if (n ==  6) return [\"#2679B2\", \"#1C9AA8\", \"#379531\", \"#EED524\", \"#FB7F28\", \"#D22C2F\"];\n   if (n ==  7) return [\"#2679B2\", \"#1D94A9\", \"#2E9658\", \"#92B42A\", \"#F2B825\", \"#F47129\", \"#D22C2F\"];\n   if (n ==  8) return [\"#2679B2\", \"#1E90AA\", \"#279775\", \"#519E2F\", \"#D3CB25\", \"#F5A326\", \"#EF672A\", \"#D22C2F\"];\n   if (n ==  9) return [\"#2679B2\", \"#1F8DAB\", \"#22988A\", \"#33953F\", \"#92B42A\", \"#EFCA24\", \"#F79426\", \"#EB5F2A\", \"#D22C2F\"];\n   if (n == 10) return [\"#2679B2\", \"#208BAC\", \"#1E999A\", \"#2E9658\", \"#5FA32E\", \"#C5C626\", \"#F2B825\", \"#F98827\", \"#E85A2B\", \"#D22C2F\"];\n   if (n == 11) return [\"#2679B2\", \"#2089AD\", \"#1C9AA8\", \"#29976C\", \"#379531\", \"#92B42A\", \"#EED524\", \"#F4AA26\", \"#FB7F28\",\n      \"#E6552B\", \"#D22C2F\"];\n   if (n == 12) return [\"#2679B2\", \"#2188AD\", \"#1C97A8\", \"#25987C\", \"#329546\", \"#68A62D\", \"#BCC327\", \"#F0C524\", \"#F69E26\",\n      \"#F77728\", \"#E4512B\", \"#D22C2F\"];\n   if (n == 13) return [\"#2679B2\", \"#2186AD\", \"#1D94A9\", \"#22988A\", \"#2E9658\", \"#469A2F\", \"#92B42A\", \"#DECF25\", \"#F2B825\",\n      \"#F79426\", \"#F47129\", \"#E34E2C\", \"#D22C2F\"];\n   if (n == 14) return [\"#2679B2\", \"#2285AE\", \"#1E92AA\", \"#209995\", \"#2A9767\", \"#34953A\", \"#6FA82D\", \"#B5C128\", \"#EFCE24\", \"#F3AD25\",\n      \"#F98C27\", \"#F16B29\", \"#E14B2C\", \"#D22C2F\"];\n   if (n == 15) return [\"#2679B2\", \"#2284AE\", \"#1E90AA\", \"#1D999F\", \"#279775\", \"#31964A\", \"#519E2F\", \"#92B42A\", \"#D3CB25\", \"#F0C224\",\n      \"#F5A326\", \"#FA8527\", \"#EF672A\", \"#E0492C\", \"#D22C2F\"];\n\n   // if n > 15 return 16 colors\n   return [\"#2679B2\", \"#2283AE\", \"#1F8FAB\", \"#1C9AA8\", \"#249880\", \"#2E9658\", \"#379531\", \"#73AA2C\", \"#B0BF28\", \"#EDD424\", \"#F2B825\",\n      \"#F69B26\", \"#FB7F28\", \"#ED632A\", \"#DF472C\", \"#D22C2F\"];\n}\n","<script>\n   /****************************************************\n   * Axis lines for 3D plot                            *\n   * ----------------------                            *\n   * shows lines for axis (main, grid, etc)            *\n   *****************************************************/\n\n   import { getContext } from 'svelte';\n   import { Colors } from '../Colors';\n\n\n   /*****************************************/\n   /* Input parameters                      */\n   /*****************************************/\n\n   export let lineCoords = [];\n   export let lineColor = Colors.DARKGRAY;\n   export let lineType = 1;\n   export let lineWidth = 1;\n\n\n   /*****************************************/\n   /* Component code                        */\n   /*****************************************/\n\n   // get axes context and reactive variables needed to compute coordinates\n   const axes = getContext('axes');\n   const scale = axes.scale;\n   const tM = axes.tM;\n   const isOk = axes.isOk;\n\n   // compute coordinates of start and end points for each line\n   let x1, x2, y1, y2, lineStyleStr = undefined;\n   $: if (lineCoords.length == 2) {\n      [x1, y1] = axes.transform(lineCoords[0], $tM);\n      [x2, y2] = axes.transform(lineCoords[1], $tM);\n   }\n\n   // line style\n   $: lineStyleStr = `stroke:${lineColor};stroke-width: ${lineWidth}px;stroke-dasharray:${axes.LINE_STYLES[$scale][lineType-1]}`;\n</script>\n\n{#if $isOk && x1 !== undefined && y1 !== undefined && x2 !== undefined && y2 !== undefined}\n<g class=\"axis__grid\">\n   {#each x1 as v, i}\n   <line vector-effect=\"non-scaling-stroke\" x1={x1[i]} x2={x2[i]} y1={y1[i]} y2={y2[i]} style={lineStyleStr} />\n   {/each}\n</g>\n{/if}\n\n","<script>\n   /****************************************************\n   * TextLabels for 3D plots                           *\n   * -----------------------                           *\n   * shows a series of text labels on the plot         *\n   *****************************************************/\n\n   import { cbind } from 'mdatools/arrays';\n   import { getContext } from 'svelte';\n   import { Colors } from '../Colors';\n   import { checkCoords } from '../Utils';\n\n\n   /*****************************************/\n   /* Input parameters                      */\n   /*****************************************/\n\n   export let title = '';\n\texport let xValues;\n   export let yValues;\n   export let zValues;\n   export let labels;\n\n   export let faceColor = Colors.PRIMARY_TEXT;\n   export let borderColor = 'transparent';\n   export let borderWidth = 0;\n   export let textSize = 1;\n   export let className = 'series_textlabel';\n\n\n   // get axes context and reactive variables needed to compute coordinates\n   const axes = getContext('axes');\n   const tM = axes.tM;\n   const isOk = axes.isOk;\n\n   // compute screen coordinates\n   let x, y = undefined;\n   $: {\n      if ($isOk) {\n\n         [x, y] = axes.transform(\n            cbind(\n               checkCoords(xValues, 'TextValues'),\n               checkCoords(yValues, 'TextValues'),\n               checkCoords(zValues, 'TextValues')\n            ), $tM\n         );\n\n         if (Array.isArray(labels) && labels.length !== x.length ) {\n            throw('TextLabels: number of elements in \"labels\" does not match number of coordinates.')\n         }\n      }\n   }\n\n   // styles for the elements\n   $: textStyleStr = `dominant-baseline:middle;fill:${faceColor};stroke-width:${borderWidth}px;stroke:${borderColor};\n      font-size:${textSize}em; text-anchor:middle;`;\n</script>\n\n{#if $isOk && x !== undefined && y !== undefined}\n<g class=\"series {className}\" title={title} style={textStyleStr} >\n\n   {#if typeof labels === 'string'}\n   {#each x as v, i}\n      <text data-id={i} x={x[i]} y={y[i]} dx={0} dy={0}>{@html labels}</text>\n   {/each}\n   {:else}\n   {#each x as v, i}\n      <text data-id={i} x={x[i]} y={y[i]} dx={0} dy={0}>{@html labels[i]}</text>\n   {/each}\n   {/if}\n</g>\n{/if}\n\n<style>\n   text, text > :global(tspan) {\n      dominant-baseline: middle;\n   }\n</style>","<script>\n   /****************************************************\n   * AxisTickLabels for 3D plots                       *\n   * ----------------------------                      *\n   * shows a series of tick labels along an axis       *\n   *****************************************************/\n\n   import { getContext } from 'svelte';\n\n\n   /*****************************************/\n   /* Input parameters                      */\n   /*****************************************/\n\n\texport let tickCoords;\n   export let textColor;\n   export let tickLabels;\n\n\n   /*****************************************/\n   /* Component code                        */\n   /*****************************************/\n\n   // get axes context and reactive variables needed to compute coordinates\n   const axes = getContext('axes');\n   const isOk = axes.isOk;\n   const tM = axes.tM;\n\n   let x, y = undefined;\n\n   // reactive calculations triggered by changes in coordinates and plot parameters\n   $: if ($isOk) {\n      [x, y] = axes.transform(tickCoords, $tM);\n   }\n\n   // styles for the elements\n   $: textStyleStr = `dominant-baseline:middle;fill:${textColor};font-size:0.85em; text-anchor:middle;`;\n</script>\n\n{#if x !== undefined && y !== undefined}\n<g class=\"tick_labels\" style={textStyleStr} >\n   {#each x as v, i}\n      <text data-id={i} x={x[i]} y={y[i]} dx={0} dy={0}>{@html tickLabels[i]}</text>\n   {/each}\n</g>\n{/if}\n\n<style>\n   text, text > :global(tspan) {\n      cursor: default;\n      user-select: none;\n      dominant-baseline: middle;\n   }\n</style>","<script>\n   /****************************************************\n   * Axis for 3D plots                                 *\n   * --------------------                              *\n   * shows main elements for axis (ticks, grid, etc.)  *\n   *****************************************************/\n\n   import { Colors } from '../Colors';\n   import AxisLines from './AxisLines.svelte';\n   import TextLabels from './TextLabels.svelte';\n   import AxisTickLabels from './AxisTickLabels.svelte';\n\n\n   /*****************************************/\n   /* Input parameters                      */\n   /*****************************************/\n\n   export let tickLabels = [];     // vector with labels for each tick\n   export let showGrid = false;    // logical, show or not grid lines\n   export let title = '';          // axis title\n\n   export let className = '';\n   export let grid1 = [];\n   export let grid2 = [];\n   export let axisLine = [];\n   export let tickCoords = [];\n   export let titleCoords = [];\n\n   export let lineColor = Colors.DARKGRAY;\n   export let gridColor = Colors.MIDDLEGRAY;\n   export let textColor = Colors.DARKGRAY;\n</script>\n\n<g class=\"mdaplot__axis {className}\">\n\n   <!-- grid -->\n   {#if showGrid }\n      <AxisLines lineCoords={grid1} lineColor={gridColor} lineType={3} />\n      <AxisLines lineCoords={grid2} lineColor={gridColor} lineType={3} />\n   {/if}\n\n   <!-- main axis line -->\n   <AxisLines lineCoords={axisLine} lineColor={lineColor} lineType={1} />\n\n   <!-- ticks-->\n   <AxisLines lineCoords={[tickCoords[0], tickCoords[1]]} lineColor={lineColor} lineType={1} />\n   <AxisLines lineCoords={[tickCoords[0], tickCoords[2]]} lineColor={lineColor} lineType={1} />\n   <!-- <AxisLines lineCoords={[tickCoords[0], tickCoords[3]]} lineColor={lineColor} lineType={1} /> -->\n\n   <!-- labels -->\n   {#if tickCoords !== undefined }\n   <AxisTickLabels tickCoords={tickCoords[4]} {textColor} {tickLabels}  />\n   {/if}\n\n   <!-- title -->\n   {#if titleCoords !== undefined && title !== ''}\n   <TextLabels\n      xValues={titleCoords[0]} yValues={titleCoords[1]} zValues={titleCoords[2]}\n      faceColor={textColor}\n      labels={title}\n   />\n   {/if}\n</g>\n\n","<script>\n   /****************************************************\n   * X-Axis for 3D plots                               *\n   * --------------------                              *\n   * shows x-axis and its elements (ticks, grid, etc.) *\n   *****************************************************/\n\n   import { cbind, matrix, Vector } from 'mdatools/arrays';\n   import { getContext } from 'svelte';\n   import { Colors } from '../Colors';\n   import { getAxisTicks } from '../Utils.js';\n   import Axis from './Axis.svelte';\n\n\n   /*****************************************/\n   /* Input parameters                      */\n   /*****************************************/\n\n   export let slot = 'xaxis';         // slot the component must be placed in\n   export let ticks = undefined;      // vector with numeric tick positions in plot units\n   export let tickLabels = ticks;     // vector with labels for each tick\n   export let showGrid = false;       // logical, show or not grid lines\n   export let title = '';             // axis title\n\n   export let lineColor = Colors.DARKGRAY;\n   export let gridColor = Colors.MIDDLEGRAY;\n   export let textColor = Colors.DARKGRAY;\n\n\n   /*****************************************/\n   /* Component code                        */\n   /*****************************************/\n\n   if (slot !== 'xaxis') {\n      throw('Component XAxis must have \"slot=\\'xaxis\\'\" attribute.');\n   }\n\n   // get axes context and adjust x margins\n   const axes = getContext('axes');\n\n   // get reactive variables needed to compute coordinates\n   const xLim = axes.xLim;\n   const yLim = axes.yLim;\n   const zLim = axes.zLim;\n   const scale = axes.scale;\n   const isOk = axes.isOk;\n\n   // prepare variables for coordinates\n   let titleCoords = [];\n   let grid1 = [];\n   let grid2 = [];\n   let axisLine = [];\n   let tickCoords = [];\n\n   // compute tick x-coordinates\n   $: if ($isOk) {\n      const dX = ($xLim[1] - $xLim[0]) / 100; // 1% of axis size\n      const ticksX = getAxisTicks(ticks, $xLim, axes.TICK_NUM[$scale], true);\n      const tickNum = ticksX.length;\n\n      // compute tick y-coordinates (middle, up and bottom)\n      const dY = ($yLim[1] - $yLim[0]) / 100; // 1% of axis size\n      const ticksY  = Vector.fill($yLim[0], tickNum);\n      const ticksY1 = ticksY.subtract(dY * 1.5);\n      const ticksY2 = ticksY.add(dY * 1.5);\n      const ticksY3 = ticksY.subtract(dY * 5);\n\n      // tick z-coordinates (middle, up and bottom)\n      const dZ = ($zLim[1] - $zLim[0]) / 100; // 1% of axis size\n      const ticksZ  = Vector.fill($zLim[0], tickNum);\n      const ticksZ1 = ticksZ.subtract(dZ * 1.5);\n      const ticksZ2 = ticksZ.add(dZ * 1.5);\n      const ticksZ3 = ticksZ.subtract(dZ * 2);\n\n      // coordinates for the ends of grid\n      const gridYEnd = Vector.fill($yLim[1], tickNum);\n      const gridZEnd = Vector.fill($zLim[1], tickNum);\n\n      // tick labels\n      tickLabels = (ticks === undefined || tickLabels === undefined) ? ticksX.v : tickLabels;\n      if (tickLabels.length !== ticksX.length) {\n         throw Error('XAxis: \"tickLabels\" must be a array of the same size as ticks.');\n      }\n\n      // combine all coordinates together\n      grid1 = [\n         cbind(ticksX, ticksY, ticksZ),\n         cbind(ticksX, gridYEnd, ticksZ)\n      ];\n\n      grid2 = [\n         cbind(ticksX, ticksY, ticksZ),\n         cbind(ticksX, ticksY2, gridZEnd)\n      ];\n\n      axisLine = [\n         matrix([$xLim[0], $yLim[0], $zLim[0]], 1, 3),\n         matrix([$xLim[1], $yLim[0], $zLim[0]], 1, 3)\n      ]\n\n      tickCoords = [\n         cbind(ticksX, ticksY, ticksZ),   // middle point\n         cbind(ticksX, ticksY2, ticksZ),  // middle point with positive shift along Y\n         cbind(ticksX, ticksY, ticksZ2),  // middle point with positive shift along Z\n         cbind(ticksX, ticksY1, ticksZ1),  // middle point with negative shift along Y and Z\n         cbind(ticksX, ticksY3, ticksZ3)  // middle point with negative shift along Y and Z for ticks\n      ];\n\n      // here we do not need to make a matrix as the three values will be used as vectors\n      titleCoords = [\n         [$xLim[1] + 3 * dX], [$yLim[0] - 2 * dY], [$zLim[0] - 2 * dZ]\n      ];\n   }\n</script>\n\n{#if $isOk && axisLine.length > 0}\n<Axis\n   className=\"mdaplot__xaxis\"\n   {title} {lineColor} {gridColor} {textColor} {titleCoords}\n   {showGrid} {grid1} {grid2} {axisLine} {tickCoords} {tickLabels}\n/>\n{/if}\n\n","<script>\n   /****************************************************\n   * Y-Axis for 3D plots                               *\n   * --------------------                              *\n   * shows y-axis and its elements (ticks, grid, etc.) *\n   *****************************************************/\n\n   import { cbind, matrix, Vector } from 'mdatools/arrays';\n   import { getContext } from 'svelte';\n   import { Colors } from '../Colors';\n   import { getAxisTicks } from '../Utils.js';\n   import Axis from './Axis.svelte';\n\n\n   /*****************************************/\n   /* Input parameters                      */\n   /*****************************************/\n\n   export let slot = 'yaxis';         // slot the component must be placed in\n   export let ticks = undefined;      // vector with numeric tick positions in plot units\n   export let tickLabels = ticks;     // vector with labels for each tick\n   export let showGrid = false;       // logical, show or not grid lines\n   export let title = '';             // axis title\n\n   export let lineColor = Colors.DARKGRAY;\n   export let gridColor = Colors.MIDDLEGRAY;\n   export let textColor = Colors.DARKGRAY;\n\n\n   /*****************************************/\n   /* Component code                        */\n   /*****************************************/\n\n   if (slot !== 'yaxis') {\n      throw('Component YAxis must have \"slot=\\'yaxis\\'\" attribute.');\n   }\n\n   // get axes context and adjust x margins\n   const axes = getContext('axes');\n\n   // get reactive variables needed to compute coordinates\n   const xLim = axes.xLim;\n   const yLim = axes.yLim;\n   const zLim = axes.zLim;\n   const scale = axes.scale;\n   const isOk = axes.isOk;\n\n   // prepare variables for coordinates\n   let titleCoords = [];\n   let grid1 = [];\n   let grid2 = [];\n   let axisLine = [];\n   let tickCoords = [];\n\n   // compute tick x-coordinates\n   $: if ($isOk) {\n      const dY = ($yLim[1] - $yLim[0]) / 100; // 1% of axis size\n      const ticksY = getAxisTicks(ticks, $yLim, axes.TICK_NUM[$scale], true);\n      const tickNum = ticksY.length;\n\n      // compute tick y-coordinates (middle, up and bottom)\n      const dX = ($xLim[1] - $xLim[0]) / 100; // 1% of axis size\n      const ticksX  = Vector.fill($xLim[0], tickNum);\n      const ticksX1 = ticksX.subtract(dX * 1.5);\n      const ticksX2 = ticksX.add(dX * 1.5);\n      const ticksX3 = ticksX.subtract(dX * 3);\n\n      // tick z-coordinates (middle, up and bottom)\n      const dZ = ($zLim[1] - $zLim[0]) / 100; // 1% of axis size\n      const ticksZ  = Vector.fill($zLim[0], tickNum);\n      const ticksZ1 = ticksZ.subtract(dZ * 1.5);\n      const ticksZ2 = ticksZ.add(dZ * 1.5);\n      const ticksZ3 = ticksZ.subtract(dZ * 2);\n\n      // coordinates for the ends of grid\n      const gridXEnd = Vector.fill($xLim[1], tickNum);\n      const gridZEnd = Vector.fill($zLim[1], tickNum);\n\n      // tick labels\n      tickLabels = (ticks === undefined || tickLabels === undefined) ? ticksY.v : tickLabels;\n      if (tickLabels.length !== ticksY.length) {\n         throw Error('YAxis: \"tickLabels\" must be a array of the same size as ticks.');\n      }\n\n      // combine all coordinates together\n      grid1 = [\n         cbind(ticksX, ticksY, ticksZ),\n         cbind(gridXEnd, ticksY, ticksZ)\n      ];\n\n      grid2 = [\n         cbind(ticksX, ticksY, ticksZ),\n         cbind(ticksX, ticksY, gridZEnd)\n      ];\n\n      axisLine = [\n         matrix([$xLim[0], $yLim[0], $zLim[0]], 1, 3),\n         matrix([$xLim[0], $yLim[1], $zLim[0]], 1, 3)\n      ]\n\n      tickCoords = [\n         cbind(ticksX, ticksY, ticksZ),   // middle point\n         cbind(ticksX2, ticksY, ticksZ),  // middle point with positive shift along X\n         cbind(ticksX, ticksY, ticksZ2),  // middle point with positive shift along Z\n         cbind(ticksX1, ticksY, ticksZ1),  // middle point with negative shift along X and Z\n         cbind(ticksX3, ticksY, ticksZ3)  // middle point with negative shift along X and Z for ticks\n      ];\n\n      // here we do not need to make a matrix as the three values will be used as vectors\n      titleCoords = [\n         [$xLim[0] - 2 * dX], [$yLim[1] + 3 * dY], [$zLim[0] - 2 * dZ]\n      ];\n   }\n</script>\n\n{#if $isOk && axisLine.length > 0}\n<Axis\n   className=\"mdaplot__yaxis\"\n   {title} {lineColor} {gridColor} {textColor} {titleCoords}\n   {showGrid} {grid1} {grid2} {axisLine} {tickCoords} {tickLabels}\n/>\n{/if}\n\n","<script>\n   /****************************************************\n   * Z-Axis for 3D plots                               *\n   * --------------------                              *\n   * shows z-axis and its elements (ticks, grid, etc.) *\n   *****************************************************/\n\n   import { cbind, matrix, Vector } from 'mdatools/arrays';\n   import { getContext } from 'svelte';\n   import { Colors } from '../Colors';\n   import { getAxisTicks } from '../Utils.js';\n   import Axis from './Axis.svelte';\n\n\n   /*****************************************/\n   /* Input parameters                      */\n   /*****************************************/\n\n   export let slot = 'zaxis';         // slot the component must be placed in\n   export let ticks = undefined;      // vector with numeric tick positions in plot units\n   export let tickLabels = ticks;     // vector with labels for each tick\n   export let showGrid = false;       // logical, show or not grid lines\n   export let title = '';             // axis title\n\n   export let lineColor = Colors.DARKGRAY;\n   export let gridColor = Colors.MIDDLEGRAY;\n   export let textColor = Colors.DARKGRAY;\n\n\n   /*****************************************/\n   /* Component code                        */\n   /*****************************************/\n\n   if (slot !== 'zaxis') {\n      throw('Component ZAxis must have \"slot=\\'zaxis\\'\" attribute.');\n   }\n\n   // get axes context\n   const axes = getContext('axes');\n\n   // get reactive variables needed to compute coordinates\n   const xLim = axes.xLim;\n   const yLim = axes.yLim;\n   const zLim = axes.zLim;\n   const scale = axes.scale;\n   const isOk = axes.isOk;\n\n   // prepare variables for coordinates\n   let titleCoords = [];\n   let grid1 = [];\n   let grid2 = [];\n   let axisLine = [];\n   let tickCoords = [];\n\n   // compute tick x-coordinates\n   if ($isOk) {\n      const dZ = ($zLim[1] - $zLim[0]) / 100; // 1% of axis size\n      const ticksZ = getAxisTicks(ticks, $zLim, axes.TICK_NUM[$scale], true);\n      const tickNum = ticksZ.length;\n\n      // compute tick x-coordinates (middle, up and bottom)\n      const dX = ($xLim[1] - $xLim[0]) / 100; // 1% of axis size\n      const ticksX  = Vector.fill($xLim[0], tickNum);\n      const ticksX1 = ticksX.subtract(dX * 1.5);\n      const ticksX2 = ticksX.add(dX * 1.5);\n      const ticksX3 = ticksX.subtract(dX * 1);\n\n      // tick y-coordinates\n      const dY = ($yLim[1] - $yLim[0]) / 100; // 1% of axis size\n      const ticksY  = Vector.fill($yLim[0], tickNum);\n      const ticksY1 = ticksY.subtract(dY * 1.5);\n      const ticksY2 = ticksY.add(dY * 1.5);\n      const ticksY3 = ticksY.subtract(dY * 5);\n\n      // coordinates for the ends of grid\n      const gridXEnd = Vector.fill($xLim[1], tickNum);\n      const gridYEnd = Vector.fill($yLim[1], tickNum);\n\n      // tick labels\n      tickLabels = (ticks === undefined || tickLabels === undefined) ? ticksZ.v : tickLabels;\n      if (tickLabels.length !== ticksZ.length) {\n         throw Error('ZAxis: \"tickLabels\" must be a array of the same size as ticks.');\n      }\n\n      // combine all coordinates together\n      grid1 = [\n         cbind(ticksX, ticksY, ticksZ),\n         cbind(gridXEnd, ticksY, ticksZ)\n      ];\n\n      grid2 = [\n         cbind(ticksX, ticksY, ticksZ),\n         cbind(ticksX, gridYEnd, ticksZ)\n      ];\n\n      axisLine = [\n         matrix([$xLim[0], $yLim[0], $zLim[0]], 1, 3),\n         matrix([$xLim[0], $yLim[0], $zLim[1]], 1, 3)\n      ]\n\n      tickCoords = [\n         cbind(ticksX, ticksY, ticksZ),   // middle point\n         cbind(ticksX2, ticksY, ticksZ),  // middle point with positive shift along X\n         cbind(ticksX, ticksY2, ticksZ),  // middle point with positive shift along Y\n         cbind(ticksX1, ticksY1, ticksZ), // middle point with negative shift along X and Y\n         cbind(ticksX3, ticksY3, ticksZ)  // middle point with negative shift along X and Y for ticks\n      ];\n\n      // here we do not need to make a matrix as the three values will be used as vectors\n      titleCoords = [\n         [$xLim[0] - 2 * dX], [$yLim[0] - 2 * dY], [$zLim[1] + 3 * dZ]\n      ];\n   }\n</script>\n\n{#if $isOk && axisLine.length > 0}\n<Axis\n   className=\"mdaplot__zaxis\"\n   {title} {lineColor} {gridColor} {textColor} {titleCoords}\n   {showGrid} {grid1} {grid2} {axisLine} {tickCoords} {tickLabels}\n/>\n{/if}\n\n","<script>\n   /****************************************************\n   * Segments for 3D plot                              *\n   * --------------------                              *\n   * shows a series of line segments on the plot       *\n   *****************************************************/\n\n   import { cbind } from 'mdatools/arrays';\n   import { getContext } from 'svelte';\n   import { Colors } from '../Colors';\n   import { checkCoords } from '../Utils';\n\n\n   /*****************************************/\n   /* Input parameters                      */\n   /*****************************************/\n\n   export let title = '';\n\texport let xStart;\n   export let xEnd;\n   export let yStart;\n   export let yEnd;\n   export let zStart;\n   export let zEnd;\n\n   export let lineColor = Colors.PRIMARY;\n   export let lineType = 1;\n   export let lineWidth = 1;\n\n   // get axes context and reactive variables needed to compute coordinates\n   const axes = getContext('axes');\n   const scale = axes.scale;\n   const tM = axes.tM;\n   const isOk = axes.isOk;\n\n   let x1, y1, x2, y2 = undefined;\n   $: {\n      if ($isOk) {\n\n         [x1, y1] = axes.transform(\n            cbind(\n               checkCoords(xStart, 'Segments'),\n               checkCoords(yStart, 'Segments'),\n               checkCoords(zStart, 'Segments')\n            ), $tM\n         );\n\n         [x2, y2] = axes.transform(\n            cbind(\n               checkCoords(xEnd, 'Segments'),\n               checkCoords(yEnd, 'Segments'),\n               checkCoords(zEnd, 'Segments')\n            ), $tM\n         );\n\n      }\n   }\n\n   $: lineStyleStr = `stroke:${lineColor};stroke-width: ${lineWidth}px;stroke-dasharray:${axes.LINE_STYLES[$scale][lineType-1]}`;\n</script>\n\n<g class=\"series series_segment\" data-title=\"{title}\" style={lineStyleStr}>\n{#if $isOk && x1 !== undefined && y1 !== undefined && x2 !== undefined && y2 !== undefined}\n   {#each x1 as v, i}\n      <line vector-effect=\"non-scaling-stroke\" x1={x1[i]} x2={x2[i]} y1={y1[i]} y2={y2[i]} />\n   {/each}\n{/if}\n</g>\n\n","<script>\n   /****************************************************\n   * ScatterSeries component                           *\n   * --------------------                              *\n   * shows a series of points on the plot              *\n   *                                                   *\n   *****************************************************/\n\n   import { Colors } from '../Colors';\n   import TextLabels from './TextLabels.svelte';\n\n   /*****************************************/\n   /* Input parameters                      */\n   /*****************************************/\n\n   // input parameters\n\texport let xValues;\n   export let yValues;\n   export let zValues = undefined\n   export let marker = 1\n   export let title = \"\";\n   export let faceColor = \"transparent\";\n   export let borderColor = Colors.PRIMARY;\n   export let borderWidth = 1;\n   export let markerSize = 1;\n\n   /* constants for internal use */\n   const markers = [\"●\", \"◼\", \"▲\", \"▼\", \"⬥\", \"+\", \"*\", \"⨯\"];\n   let markerSymbol;\n\n   /* sanity check of input parameters */\n   if (typeof(marker) !== \"number\" || marker < 1 || marker > markers.length) {\n      throw(`ScatterSeries: parameter 'marker' must be a number from 1 to ${markers.length}.\"`);\n   }\n\n   // reactive variables for coordinates of data points in pixels (and line style)\n   $: markerSymbol = markers[marker - 1];\n</script>\n\n<TextLabels\n   {xValues} {yValues} {zValues} {faceColor} {borderColor} {borderWidth} {title}\n   className=\"series_scatter\"\n   labels={markerSymbol}\n   textSize={markerSize}\n/>\n\n<style>\n   :global(.series_scatter > text) {\n      font-size: 1em;\n      cursor: default;\n   }\n\n   :global(.series_scatter > text:hover) {\n      opacity: 90%;\n   }\n\n   :global(.series_scatter > *:hover + .labels_hover) {\n      visibility: visible;\n      opacity: 1;\n   }\n</style>\n","<script>\n   let showHelp = false;\n\n   const toggleHelp = () => showHelp = !showHelp;\n\n   const handleKeyPress = e => {\n      if (e.key === 'h') toggleHelp();\n   };\n\n   // $: showHelp = window.location.hash === \"#help\";\n</script>\n\n<svelte:window on:keypress={handleKeyPress}/>\n<main class=\"graasta-app\">\n\n   <div class=\"content\">\n      <slot></slot>\n   </div>\n\n   {#if showHelp}\n   <div class=\"helptext\">\n      <slot name=\"help\"></slot>\n   </div>\n   {/if}\n\n</main>\n\n<style>\n\n/* main styles for graasta-app and children */\n:global(#graasta-app-container) {\n   height: 100% !important;\n   width: 100% !important;\n}\n\n.graasta-app {\n   font-family: Helvetica, Areal, Verdana, sans-serif;\n   display: block;\n   position: relative;\n   font-size: max(14px, 1vw);\n\n   width: auto;\n   min-width: 800px;\n   min-height: 450px;\n   height: auto;\n   width: auto;\n   aspect-ratio: 16/9;\n\n   box-sizing: border-box;\n   padding: 0;\n   margin: 0 auto;\n}\n\n.graasta-app  * {\n   box-sizing: border-box;\n   margin: 0;\n   padding: 0;\n}\n\n.graasta-app :glbal(.plot) {\n   box-shadow: 0px 0px 5px  #30303020;\n}\n\n.graasta-app .content {\n   width: 100%;\n   height: 100%;\n}\n\n/* help text and button */\n\n.helptext {\n   font-family: 'Open Sans', sans-serif;\n\n   position: absolute;\n   top: 0;\n   width: 0;\n   left: 0;\n   bottom: 0;\n\n   z-index: 999;\n   background: white;\n   box-sizing: border-box;\n\n   width: 100%;\n   height: 100%;\n   padding: 1em;\n   margin: 0;\n   line-height: 1.35em;\n   font-size: 1em;\n   color: #303030;\n}\n\n.helptext :global(h2) {\n   padding: 1.25em 0 0.5em 0;\n   font-size: 1.2em;\n}\n\n.helptext :global(p) {\n   padding: 0 0 0.5em 0;\n   line-height: 1.5em;\n   font-size: 1em;\n}\n\n</style>","import { index, Index } from 'mdatools/arrays';\n\nexport let colors = {\n   plots: {\n      // population colors\n      POPULATIONS_PALE: ['#33668820', '#ff990020'],\n      POPULATIONS: ['#33668850', '#ff990050'],\n      SAMPLES: ['#336688', '#ff9900'],\n\n      // statistics on plot legend\n      STAT_NAME: '#808080',\n      STAT_VALUE: '#202020'\n   }\n};\n\n\nexport function formatLabels(labels) {\n\n   if (!Array.isArray(labels)) labels = [labels];\n   let labelsStr = Array(length = labels.length);\n\n\n   for (let i = 0; i < labels.length; i++) {\n      labelsStr[i] = `<tspan fill=${colors.plots.STAT_NAME}>${labels[i].name}:</tspan>&nbsp;<tspan>${labels[i].value}</tspan>`;\n   }\n\n   return labelsStr;\n}\n\n\n/**\n * Find indices of points which contribute negatively, positively and neutrally to the covariance.\n *\n * @param {Vector} x - vector with x-values.\n * @param {number} mx - mean of the x-values.\n * @param {Vector} y - vector with y-values.\n * @param {number} my - mean of the y-values.\n *\n * @returns {Array} array with three index vectors (for positive, negative and neutral contributors).\n */\nexport function getIndices(x, mx, y, my) {\n   const n = x.length;\n   const indPos = Index.ones(n);\n   const indNeg = Index.ones(n);\n   const indNeu = Index.ones(n);\n\n   let nips = 0, ning = 0, nint = 0;\n   for (let i = 0; i < n; i++) {\n      const p = (x.v[i] - mx) * (y.v[i] - my);\n      if (p > 0) {\n         indPos.v[nips] = i + 1;\n         nips = nips + 1;\n      } else if (p < 0) {\n         indNeg.v[ning] = i + 1;\n         ning = ning + 1;\n      } else {\n         indNeu.v[nint] = i + 1;\n         nint = nint + 1;\n      }\n   }\n\n   return [\n      nips > 0 ? indPos.slice(1, nips) : index([]),\n      ning > 0 ? indNeg.slice(1, ning) : index([]),\n      nint > 0 ? indNeu.slice(1, nint) : index([])\n   ];\n}\n\n   // function to show model info\n   export function getModelString(m, name, color) {\n      let str = '<tspan>y = </tspan>';\n      for (let i = 0; i < m.coeffs.estimate.length; i++) {\n         const b = m.coeffs.estimate.v[i];\n         str +=\n            (i > 0 ? b < 0 ? '<tspan> – </tspan>' : '<tspan> ＋ </tspan>' : '') +\n            `<tspan fill=\"${color}\" font-weight=bold>${Math.abs(b).toFixed(2)}</tspan>` +\n            (i > 0 ? '<tspan font-weight=bold>x</tspan>' : '') +\n            (i > 1 ? '<tspan font-size=\"70%\" baseline-shift = \"super\">' + i + '</tspan>' : '')\n      }\n      return [`<tspan font-weight=bold>${name}</tspan>`, str];\n   }\n","<script>\n   // shared components - 3d plot elements\n   import {Axes, XAxis, YAxis, ZAxis } from 'svelte-plots-basic/3d';\n\n   export let limX;\n   export let limY;\n   export let limZ;\n\n   // initial orientation\n   let phi = -25.264 / 180 * Math.PI\n   let theta = 215 / 180 * Math.PI;\n   let zoom = 0.55;\n\n   // drugging settings\n   let isDragging = false;\n   let draggingStartPosition = [];\n   let plotPane;\n\n   const zoomScene = (e) => {\n      zoom = zoom + e.deltaY / 100\n      if (zoom < 0.1) zoom = 0.1;\n      if (zoom > 2.0) zoom = 2.0;\n   }\n\n   const startRotation = (e) => {\n      draggingStartPosition = [e.clientX, e.clientY];\n      isDragging = true;\n   }\n\n   const stopRotation = (e) => {\n      isDragging = false;\n   }\n\n   const rotate = (e) => {\n      if (!isDragging || !plotPane) return;\n\n      // get size of plot pane and coordinates of current mouse position\n      const width = plotPane.getBoundingClientRect().width;\n      const height = plotPane.getBoundingClientRect().height;\n      const currentPosition = [e.clientX, e.clientY];\n      if (width < 100) return;\n\n      // compute angle for horizontal rotation\n      const dx = currentPosition[0] - draggingStartPosition[0];\n      phi = phi + (dx / width * Math.PI)\n\n      // compute angle for vertical rotation\n      const dy = currentPosition[1] - draggingStartPosition[1];\n      theta = theta + (dy / height * Math.PI)\n\n      // update start moust position\n      draggingStartPosition = currentPosition;\n   }\n\n   /* rotate and move plot by keyboard */\n   document.onkeydown = function (event) {\n      if (event.key == 'ArrowRight') phi = phi + 0.05;\n      if (event.key == 'ArrowLeft') phi = phi - 0.05;\n      if (event.key == 'ArrowUp') theta = theta - 0.01;\n      if (event.key == 'ArrowDown') theta = theta + 0.01;\n      if (event.key == '+') zoom = zoom * 1.1;\n      if (event.key == '-') zoom = zoom * 0.9;\n   }\n</script>\n\n<div  bind:this={plotPane}\n      on:mousewheel={zoomScene}\n\n      on:pointermove={rotate}\n      on:pointerdown={startRotation}\n      on:pointerleave={stopRotation}\n      on:pointerup={stopRotation}\n>\n   <Axes {limX} {limY} {limZ} {zoom} {phi} {theta}>\n   <slot></slot>\n      <XAxis showGrid={true} title=\"X1\" slot=\"xaxis\" />\n      <YAxis showGrid={true} title=\"Y\" slot=\"yaxis\" />\n      <ZAxis showGrid={true} title=\"X2\" slot=\"zaxis\" />\n   </Axes>\n</div>\n\n<style>\n   div {\n      display: block;\n      width: 100%;\n      height: 100%;\n   }\n</style>","<script>\n   import { Vector, cbind } from 'mdatools/arrays';\n   import { Segments } from 'svelte-plots-basic/3d';\n\n   export let coeffs;\n   export let X1Range;\n   export let X2Range;\n   export let showLines = \"Both\";\n   export let color;\n\n   const n = 20;\n   const x0 = Vector.ones(n);\n\n   let X1Start, X1End = [];\n   let X2Start, X2End = [];\n\n   // generated points at fixed X2Range values\n   $: {\n      const x1 = Vector.seq(X1Range[0], X1Range[1], (X1Range[1] - X1Range[0]) / (n - 1));\n      const x21 = Vector.fill(X2Range[0], n);\n      const x22 = Vector.fill(X2Range[1], n);\n\n      X2Start = [\n         x1,\n         x21,\n         cbind(x0, x1, x21, x1.mult(x21)).dot(coeffs).getcolumn(1)\n      ];\n\n      X2End = [\n         x1,\n         x22,\n         cbind(x0, x1, x22, x1.mult(x22)).dot(coeffs).getcolumn(1)\n      ];\n\n\n   }\n\n   $: {\n      const x11 = Vector.fill(X1Range[0], n);\n      const x12 = Vector.fill(X1Range[1], n);\n      const x2 = Vector.seq(X2Range[0], X2Range[1], (X2Range[1] - X2Range[0]) / (n - 1));\n\n      X1Start = [\n         x11,\n         x2,\n         cbind(x0, x11, x2, x11.mult(x2)).dot(coeffs).getcolumn(1)\n      ];\n\n      X1End = [\n         x12,\n         x2,\n         cbind(x0, x12, x2, x12.mult(x2)).dot(coeffs).getcolumn(1)\n      ];\n   }\n</script>\n\n<!-- lines for X1 is constant -->\n{#if showLines == \"X1\" || showLines == \"Both\"}\n<Segments\n   xStart={X1Start[0]} zStart={X1Start[1]} yStart={X1Start[2]}\n   xEnd={X1End[0]} zEnd={X1End[1]} yEnd={X1End[2]}\n   lineColor={color}\n/>\n{/if}\n\n{#if showLines == \"X2\" || showLines == \"Both\"}\n<Segments\n   xStart={X2Start[0]} zStart={X2Start[1]} yStart={X2Start[2]}\n   xEnd={X2End[0]} zEnd={X2End[1]} yEnd={X2End[2]}\n   lineColor={color}\n/>\n{/if}\n","<script>\n   export let errormsg = undefined;\n   export let legend = \"\";\n</script>\n\n<fieldset class=\"app-control-area\">\n   {#if legend !== \"\"}\n   <legend>{legend}</legend>\n   {/if}\n   <slot></slot>\n   {#if errormsg}<div class=\"app-control-error\">{errormsg}</div>{/if}\n</fieldset>\n\n<style>\n   .app-control-error {\n      padding: 0.5em 0.5em 0.25em 0.65em;\n      font-size: 0.75em;\n      color: crimson;\n   }\n\n   fieldset {\n      background: #f4f4f4;\n      margin: 0;\n      box-shadow: 0px 0px 2px  #30303020;\n      border: none;\n      padding: 0.5em;\n   }\n\n   legend {\n      color: #606060;\n      float: left;\n      width: 100%;\n      display: block;\n      margin: 0;\n      padding: 0.25em 0em;\n      font-size: 1.1em;\n      font-weight: bold;\n   }\n</style>","<script>\n   export let id;\n   export let label;\n   export let disable = false;\n   export let hidden = false;\n</script>\n\n<div class=\"app-control\" class:hidden class:disable>\n   <div class=\"shield\"></div>\n   <label for={id}>{@html label}</label>\n   <slot></slot>\n</div>\n\n<style>\n   .app-control {\n      font-size: 1em;\n      margin: 0.25em 0 0 0;\n      padding: 0.15em 0.25em;\n      display: flex;\n      align-items: center;\n      justify-content: flex-begin;\n      position: relative;\n   }\n\n\n   .app-control > label {\n      height: 1.5em;\n      line-height: 1.5em;\n      flex: 0 0 90px;\n      max-width: 90px;\n      user-select: none;\n      -webkit-user-select: none;\n      cursor: default\n   }\n\n   .app-control > slot {\n      width: 100%;\n   }\n\n   .shield {\n      display: none;\n   }\n\n   @media(min-width: 959px) {\n      .app-control > label {\n         flex: 0 0 120px;\n         max-width: 120px;\n      }\n   }\n\n   @media(min-width: 1279px) {\n      .app-control > label {\n         flex: 0 0 150px;\n         max-width: 150px;\n      }\n   }\n\n   /* disabled styles */\n   .app-control.disable > label{\n      color: #b0b0b0;\n   }\n\n   .app-control.hidden {\n      visibility: hidden;\n   }\n\n   .app-control.disable > .shield {\n      display: block;\n      background: #ffffff50;\n      position: absolute;\n      top: 0;\n      left: 0;\n      width: 100%;\n      height: 100%;\n      z-index: 999;\n   }\n</style>","<script>\n   import { fade } from 'svelte/transition';\n   import AppControl from \"./AppControl.svelte\";\n\n   export let id;\n   export let label;\n   export let options;\n   export let value = options[0];\n   export let disable = false;\n   export let hidden = false;\n\n</script>\n\n<AppControl {id} {label} {disable} {hidden} >\n\n   <div class=\"selector\">\n      {#each options as option (option)}\n      <div on:click={() => value = option} on:keydown={() => value = option} class=\"option\" class:selected={option==value}>{@html option}</div>\n      {/each}\n   </div>\n   <input name={id} bind:value={value}>\n</AppControl>\n\n<style>\n   input {\n      display: none;\n   }\n\n   .selector {\n      position: relative;\n      box-sizing: border-box;\n      display: inline-block;\n      flex: 0 0 auto;\n      background: #e0e0e0;\n\n      font-size: 1em;\n      height: 1.5em;\n      line-height: 1.5em;\n      margin: 0;\n      padding: 0;\n      width: auto;\n      border-radius: 2px;\n\n      user-select: none;\n      -webkit-user-select: none;\n      -moz-user-select: none;\n\n      display: flex;\n   }\n\n   .option {\n      cursor: default;\n      padding: 0 0.75em;\n      margin: 0 1px;\n      color: #606060;\n      transition: background-color 0.5s ease;\n   }\n\n   .option.selected {\n      border-radius: 3px;\n      background-color: #606060;\n      color: #fefefe;\n   }\n\n</style>","<script>\n   import AppControl from \"./AppControl.svelte\";\n\n   export let id;\n   export let label;\n   export let text;\n   export let disable = false;\n   export let hidden = false;\n\n</script>\n\n<AppControl id={id} label={label} {disable} {hidden}>\n   <button on:click>{text}</button>\n</AppControl>\n\n<style>\n\n\nbutton {\n   height: 1.5em;\n   font-size: 1em;\n   padding: 0 1em;\n   margin: 0;\n   color: #606060;\n   background: #e0e0e0;\n   box-shadow: none;\n   border: none;\n   border-radius: 3px;\n   white-space: nowrap;\n   user-select: none;\n}\n\nbutton:hover {\n   color: #fafafa;\n   background: #606060;\n}\n\n</style>","<script>\n   export let popCoeffs;\n   export let sampCoeffs;\n</script>\n\n<div class=\"eq\">\n\n   <!-- y -->\n   <div class=\"eq_term eq_term__var\"><span>y</span><span>y</span></div>\n   <div class=\"eq_term eq_term__op\"><span>=</span><span>=</span></div>\n\n   <!-- b0 -->\n   <div class=\"eq_term eq_term__op\">\n      <span></span><span></span>\n   </div>\n   <div class=\"eq_term eq_term__coeff\">\n      <span>{Math.abs(popCoeffs.v[0]).toFixed(2)}</span><span>{Math.abs(sampCoeffs.v[0]).toFixed(2)}</span>\n   </div>\n   <div class=\"eq_term eq_term__op\">\n   </div>\n   <div class=\"eq_term eq_term__coeff'}\">\n   </div>\n\n   <!-- b1 -->\n   <div class=\"eq_term eq_term__op\">\n      <span>{@html popCoeffs.v[1] < 0 ? '&minus;' : '+'}</span><span>{@html sampCoeffs.v[1] < 0 ? '&minus;' : '+'}</span>\n   </div>\n   <div class=\"eq_term eq_term__coeff\">\n      <span>{Math.abs(popCoeffs.v[1]).toFixed(2)}</span><span>{Math.abs(sampCoeffs.v[1]).toFixed(2)}</span>\n   </div>\n   <div class=\"eq_term eq_term__op\">\n      <span>&times;</span><span>&times;</span>\n   </div>\n   <div class=\"eq_term eq_term__var\">\n      <span>x<sub>2</sub></span><span>x<sub>1</sub></span>\n   </div>\n\n\n   <!-- b2 -->\n   <div class=\"eq_term eq_term__op\">\n      <span>{@html popCoeffs.v[2] < 0 ? '&minus;' : '+'}</span><span>{@html sampCoeffs.v[2] < 0 ? '&minus;' : '+'}</span>\n   </div>\n   <div class=\"eq_term eq_term__coeff\">\n      <span>{Math.abs(popCoeffs.v[2]).toFixed(2)}</span><span>{Math.abs(sampCoeffs.v[2]).toFixed(2)}</span>\n   </div>\n   <div class=\"eq_term eq_term__op\">\n      <span>&times;</span><span>&times;</span>\n   </div>\n   <div class=\"eq_term eq_term__var\">\n      <span>x<sub>2</sub></span><span>x<sub>2</sub></span>\n   </div>\n\n</div>\n\n<style>\n   .eq {\n      display: flex;\n      flex-direction: row;\n      font-size: 1.35em;\n      align-items: stretch;\n      justify-content: center;\n      margin: 0.5em;\n   }\n\n   .eq_term{\n      display: flex;\n      flex-direction: column;\n      text-align: right;\n      margin: 1px;\n   }\n\n   .eq_term__op{\n      color: #a0a0a0;\n   }\n\n   .eq_term__var{\n      color: #404040;\n   }\n\n   .eq_term__coeff{\n      color: #a0a0ef;\n   }\n\n   .eq_term__coeff > span:first-of-type{\n      color: #808080;\n   }\n\n   .eq_term > :global(span){\n      text-align: center;\n      padding: 0;\n      margin: 1px;\n      line-break: none;\n      line-height: 1.5em;\n   }\n\n   sub {\n      position: relative;\n      line-height:0;\n      top: 0.05em;\n      font-size: 0.6em;\n   }\n\n\n</style>","<script>\n   /****************************************************\n   * Axes                                              *\n   * --------------------                              *\n   * root item for any plot                            *\n   *****************************************************/\n\n\timport { setContext, createEventDispatcher, onMount, onDestroy } from 'svelte';\n\timport { writable } from 'svelte/store';\n   import { isvector, vector, Vector } from 'mdatools/arrays';\n   import { roundCoords, getScale } from '../Utils.js';\n\n\n   /*****************************************/\n   /* Input parameters                      */\n   /*****************************************/\n\n   export let limX;                                   // array with limits for x-axis (in plot units) [min, max]\n   export let limY         ;                          // array with limits for y-axis (in plot units) [min, max]\n   export let title = '';                             // title of the plot\n   export let xLabel = '';                            // label for x-axis\n   export let yLabel = '';                            // label for y-axis\n   export let margins = [0.034, 0.034, 0.034, 0.034]; // margins [bottom, left, top, right] )\n\n\n   /*****************************************/\n   /* Constants                             */\n   /*****************************************/\n\n   // event dispatcher\n   const dispatch = createEventDispatcher();\n\n   // how big are margins (number of pixels in unit margin value) between axis and plot area if axis are shown\n   const AXES_MARGIN_FACTORS = {\n      'small': 30,\n      'medium': 40,\n      'large': 50\n   }\n\n   // number of ticks along each axis\n   const TICK_NUM = {\n      'small': 5,\n      'medium': 8,\n      'large': 12\n   };\n\n   // size of ticks\n   const TICK_SIZE = {\n      'small': 4,\n      'medium': 6,\n      'large': 8\n   };\n\n   // font size for legend items in pixels\n   const LEGEND_FONT_SIZE = {\n      \"small\": 10,\n      \"medium\": 12,\n      \"large\": 14\n   };\n\n   // margin between plot series elements and data labels\n   const LABELS_MARGIN = {\n      'small': 10,\n      'medium': 15,\n      'large': 20\n   };\n\n   // line styles for different scales and types\n   const LINE_STYLES = {\n      small: ['0', '3,3', '1,1', '3,1'],\n      medium: ['0', '5,5', '2,2', '5,2'],\n      large: ['0', '7,7', '3,3', '7,3'],\n   }\n\n   // marker symbols\n   const MARKER_SYMBOLS = [\"●\", \"◼\", \"▲\", \"▼\", \"⬥\", \"＋\", \"*\", \"×\"];\n\n   // constant to make clip path ID unique\n   const clipPathID = 'plottingArea' + Math.round(Math.random() * 10000);\n\n\n   /*****************************************/\n   /* Variable parameters for internal use  */\n   /*****************************************/\n\n   /* parameters for internal use inside the component */\n   let plotElement;\n   let axesElement;\n   let width, height = 100;\n\n\n   /*****************************************/\n   /* Helper functions                      */\n   /*****************************************/\n\n   /**\n    * Dispatcher for click events.\n    * @param {string} eventName - name of the event.\n    * @param {HTMLDOMElement} el - DOM element the click was registered for.\n    *\n    */\n   function dispatchClickEvent(eventName, el) {\n      const id = Array.prototype.indexOf.call(el.parentNode.children, el)\n      dispatch(eventName, {seriesTitle: el.parentNode.getAttribute('title'), elementID: id});\n   }\n\n   /**\n    * Handler (router) for click events.\n    *\n    * @param {event} e - event object.\n    *\n    * @description\n    * Checks which element the click was made on and dispatch a corresponding event.\n    *\n    */\n   function handleClick(e) {\n\n      // click on scatter plot markers\n      if (e.target.tagName === 'text' && e.target.parentNode.classList.contains('series_points')) {\n         dispatchClickEvent('markerclick', e.target);\n         return;\n      }\n\n      // click on bar plot bars\n      if (e.target.tagName === 'rect' && e.target.parentNode.classList.contains('series_bar')) {\n         dispatchClickEvent('barclick', e.target);\n         return;\n      }\n\n      // click outside any plot element\n      dispatch('axesclick');\n   }\n\n   /**\n    * Generic function to transform x or y-values from plot coordinates to screen (SVG) coordinates.\n    *\n    * @param {Array|Vector} v - vector with coordinates (or objects size) in original plot coordinates.\n    * @param {Object} tA - array with scaling and translation factors.\n    *\n    * @returns {Vector} vector with rescaled values\n    *\n    */\n   const transform = function(v, tA) {\n\n      if (!$isOk || v === undefined || v === null) return undefined;\n      if (Array.isArray(v)) v = vector(v);\n      if (!isvector(v) || v.length < 1) return undefined;\n\n      return v.apply(a => roundCoords((a - tA[1]) * tA[0] + tA[2])).v;\n   }\n\n\n   /**\n    * Generic function to transform x or y-values from screen (SVG) coordinates to plot coordinates.\n    *\n    * @param {Array|Vector} v - vector with coordinates (or objects size) in screen (SVG) coordinates.\n    * @param {Object} tA - array with scaling and translation factors.\n    *\n    * @returns {Vector} vector plot coordinates.\n    *\n    */\n   const invTransform = function(v, tA) {\n\n      if (!$isOk || v === undefined || v === null) return undefined;\n      if (Array.isArray(v)) v = vector(v);\n      if (!isvector(v) || v.length < 1) return undefined;\n\n      return v.apply(a => (a - tA[2]) / tA[0] + tA[1]).v;\n   }\n\n   /*****************************************/\n   /* Storage to share with children        */\n   /*****************************************/\n\n   const scale = writable('medium');                                  // scale factor (how big the shown plot is)\n   const tX = writable({'coords': [1, 0, 0], 'objects': [1, 0, 0]});  // scaling and translation factors for x-dimension\n   const tY = writable({'coords': [1, 0, 0], 'objects': [1, 0, 0]});  // scaling and translation factors for y-dimension\n   const isOk = writable(false);                                      // are axes ready for drawing\n   const xLim = writable(limX);\n   const yLim = writable(limY);\n\n\n   /*****************************************/\n   /* Axes context                          */\n   /*****************************************/\n\n   let context = {\n\n      // methods\n      transform: transform,\n      invTransform: invTransform,\n\n      // variables\n      scale: scale,\n      isOk: isOk,\n      xLim: xLim,\n      yLim: yLim,\n      tX: tX,\n      tY: tY,\n\n      // constants\n      LINE_STYLES: LINE_STYLES,\n      LABELS_MARGIN: LABELS_MARGIN,\n      TICK_NUM: TICK_NUM,\n      TICK_SIZE: TICK_SIZE,\n      MARKER_SYMBOLS: MARKER_SYMBOLS,\n      LEGEND_FONT_SIZE: LEGEND_FONT_SIZE\n   }\n\n\tsetContext('axes', context);\n\n   /*****************************************/\n   /* Reactive updates of the parameters    */\n   /*****************************************/\n\n   // computes real margins in pixels based on current scale\n   $: pxMargins = margins.map(v => v * AXES_MARGIN_FACTORS[$scale]);\n\n   // update limits if necessary\n   $: xLim.update(v => limX);\n   $: yLim.update(v => limY);\n\n   // computes status which tells that axes limits look fine and it is safe to draw\n   // the status is based on the axis limits validity\n   $: isOk.update(v =>\n      Array.isArray($yLim) &&\n      Array.isArray($xLim) &&\n      $xLim.length === 2 &&\n      $yLim.length === 2 &&\n      !$yLim.some(v => v === undefined) &&\n      !$xLim.some(v => v === undefined) &&\n      !$yLim.some(v => isNaN(v)) &&\n      !$xLim.some(v => isNaN(v)) &&\n      $xLim[1] !== $xLim[0] &&\n      $yLim[1] !== $yLim[0] &&\n      width > (pxMargins[1] + pxMargins[3]) &&\n      height > (pxMargins[0] + pxMargins[2])\n   )\n\n   // update transformation array for x-coordinates\n   $: {\n      if ($isOk) {\n         tX.update(v => ({\n            'coords':  [ (width - pxMargins[1] - pxMargins[3]) / ($xLim[1] - $xLim[0]), $xLim[0], pxMargins[1]],\n            'objects': [ (width - pxMargins[1] - pxMargins[3]) / ($xLim[1] - $xLim[0]),       0,             0]\n         }));\n      }\n   };\n\n   // update transformation array for y-coordinates\n   $: {\n      if ($isOk) {\n         tY.update(v => ({\n            'coords':  [-(height - pxMargins[0] - pxMargins[2]) / ($yLim[1] - $yLim[0]), $yLim[1], pxMargins[2]],\n            'objects': [ (height - pxMargins[0] - pxMargins[2]) / ($yLim[1] - $yLim[0]),        0,            0]\n         }));\n      }\n   };\n\n   // computes coordinates for clip path box\n   $: cpx = $isOk ? transform($xLim, $tX.coords) : [0, 1];\n   $: cpy = $isOk ? transform($yLim, $tY.coords) : [1, 0];\n\n\n   /*****************************************/\n   /* Events observers                      */\n   /*****************************************/\n\n   // observer for the plot area size — to update the scale\n   const ro1 = new ResizeObserver(entries => {\n      for (let entry of entries) {\n         const pcr = plotElement.getBoundingClientRect();\n         scale.update(x => getScale(pcr.width, pcr.height));\n      }\n   });\n\n   // observer for the axes area size - to update size of axes\n   const ro2 = new ResizeObserver(entries => {\n      for (let entry of entries) {\n         const acr = axesElement.getBoundingClientRect();\n         width = acr.width;\n         height = acr.height;\n      }\n   });\n\n   onMount(() => {\n      ro1.observe(plotElement);\n      ro2.observe(axesElement);\n   });\n\n   onDestroy(() => {\n      ro1.unobserve(plotElement);\n      ro2.unobserve(axesElement);\n   })\n\n</script>\n\n<div class=\"plot {'plot_' + $scale}\"  bind:this={plotElement} class:plot_error={!$isOk}>\n   <!-- plot title and axis labels -->\n   {#if title !== ''}<div class=\"axes__title\">{@html title}</div>{/if}\n   {#if yLabel !== ''}<div class=\"axes__ylabel\"><span>{@html yLabel}</span></div>{/if}\n   {#if xLabel !== ''}<div class=\"axes__xlabel\"><span>{@html xLabel}</span></div>{/if}\n\n   <!-- axes (coordinate system) -->\n   <div class=\"axes-wrapper\" bind:this={axesElement} >\n      <svg on:click={handleClick} on:keydown={handleClick} preserveAspectRatio=\"none\" class=\"axes\">\n\n         <!-- define clipping path -->\n         <defs>\n            <clipPath id={clipPathID}>\n               <rect style=\"pointer-events:none;fill:red\" fill=\"red\" x={cpx[0]} y={cpy[1]} width={cpx[1]-cpx[0]} height={cpy[0]-cpy[1]} />\n            </clipPath>\n         </defs>\n\n         <!-- axis and box -->\n         <slot name=\"xaxis\"></slot>\n         <slot name=\"yaxis\"></slot>\n\n         <!-- main plot content -->\n         <g class=\"axes-content\" clip-path=\"url(#{clipPathID})\">\n            <slot></slot>\n         </g>\n\n         <!-- axis and box -->\n         <slot name=\"box\"></slot>\n\n      </svg>\n\n   {#if !$isOk}\n   <p class=\"message_error\">\n      Axes component was not properly initialized. <br />\n      Check that you defined axes limits and margins correctly.\n   </p>\n   {/if}\n   </div>\n\n\n</div>\n\n<style>\n\n   /* Plot (main container) */\n   .plot {\n      font-family: Arial, Helvetica, sans-serif;\n\n      display: grid;\n      grid-template-columns: min-content auto;\n      grid-template-rows: min-content auto min-content;\n      grid-template-areas:\n         \". title\"\n         \"ylab axes\"\n         \". xlab\";\n\n      box-sizing: border-box;\n      /* background: #fefefe; */\n      min-width: 100px;\n      min-height: 50px;\n      width: 100%;\n      height: 100%;\n      padding: 0;\n      margin: 0;\n   }\n\n   .plot_small {\n      font-size: 11px;\n   }\n\n   .plot_medium {\n      font-size: 13px;\n   }\n\n   .plot_large {\n      font-size: 16px;\n   }\n\n   .plot_error {\n      display: flex;\n   }\n\n   .plot_error > .axes-wrapper > svg {\n      display: none;\n   }\n\n   .message_error {\n      font-size: 1.2em;\n      color: crimson;\n      padding: 1em;\n      box-sizing: border-box;\n      text-align: center;\n   }\n\n   /* Axes (coordinate system) */\n   .axes-wrapper {\n      grid-area: axes;\n      position:relative;\n      box-sizing: border-box;\n      display: flex;\n      width: 100%;\n      height: 100%;\n      padding: 0;\n      margin: 0;\n   }\n\n   .axes {\n      display: block;\n      box-sizing: border-box;\n      position:absolute;\n\n      padding: 0;\n      margin: 0;\n      height: 100%;\n      width: 100%;\n      max-height: 100%;\n      max-width: 100%;\n      min-height: 100%;\n      min-width: 100%;\n   }\n\n   .axes-content {\n      padding: 0;\n      margin: 0;\n      height: 100%;\n      width: 100%;\n      max-height: 100%;\n      max-width: 100%;\n      min-height: 100%;\n      min-width: 100%;\n\n   }\n\n   .axes__xlabel {\n      grid-area: xlab;\n      font-size: 1.0em;\n      font-weight: 600;\n      padding: 0.25em;\n      text-align: center;\n   }\n\n\n   .axes__ylabel {\n      grid-area: ylab;\n      font-size: 1.0em;\n      font-weight: 600;\n      padding: 0.25em;\n      text-align: center;\n      vertical-align: middle;\n      display: flex;\n   }\n\n   .axes__ylabel > span {\n      width: 1.5em;\n      line-height: 1.5em;\n      display: inline-block;\n      writing-mode: vertical-rl;\n      transform: rotate(180deg);\n   }\n\n\n   .axes__title {\n      background: transparent;\n      grid-area: title;\n\n      font-size: 1.3em;\n      font-weight: bold;\n      line-height: 1.2em;\n      padding: 0.5em 0;\n      text-align: center;\n   }\n\n   /* Axis */\n   :global(.axis-labels) {\n      fill: #303030;\n      font-size: 0.95em;\n   }\n\n   /* Data labels */\n   :global(.labels) {\n      fill: #606060;\n      font-size: 0.90em;\n   }\n\n   :global(.labels) {\n      visibility: hidden;\n      transition:visibility 0.25s linear, opacity 0.25s linear;\n      opacity: 0;\n   }\n\n</style>","<script>\n   /****************************************************\n   * Axis lines                                        *\n   * --------------------                              *\n   * generic component for axis lines (main, grid, ...)*\n   * !!! not for users !!!                             *\n   *****************************************************/\n\n   import { getContext } from 'svelte';\n   import { Colors } from '../Colors.js';\n\n\n   /*****************************************/\n   /* Input parameters                      */\n   /*****************************************/\n\n   export let lineCoords = [];               // coordinates of start and end points of the lines\n   export let lineColor = Colors.DARKGRAY;   // line color\n   export let lineType = 1;                  // line type\n   export let lineWidth = 1;                 // lined width (thickness)\n   export let className = '';                // CSS class name for the component\n\n\n   /*****************************************/\n   /* Component code                        */\n   /*****************************************/\n\n   // get axes context and adjust x margins\n   const axes = getContext('axes');\n   const scale = axes.scale;\n   const tX = axes.tX;\n   const tY = axes.tY;\n\n   // reactive variables for coordinates of axis lines\n   let x1, x2, y1, y2 = undefined;\n   $: if (lineCoords.length == 2) {\n      x1 = axes.transform(lineCoords[0][0], $tX.coords);\n      y1 = axes.transform(lineCoords[0][1], $tY.coords);\n      x2 = axes.transform(lineCoords[1][0], $tX.coords);\n      y2 = axes.transform(lineCoords[1][1], $tY.coords);\n   }\n\n   /* styles for axis and grid lines */\n   $: lineStyleStr = `stroke:${lineColor};stroke-width: ${lineWidth}px;stroke-dasharray:${axes.LINE_STYLES[$scale][lineType-1]}`;\n\n</script>\n\n{#if x1 !== undefined && y1 !== undefined && x2 !== undefined && y2 !== undefined}\n<g class={className}>\n   {#each x1 as v, i}\n   <line vector-effect=\"non-scaling-stroke\" x1={x1[i]} x2={x2[i]} y1={y1[i]} y2={y2[i]} style={lineStyleStr} />\n   {/each}\n</g>\n{/if}\n","<script>\n   /****************************************************\n   * AxisTickLabels                                    *\n   * --------------------                              *\n   * shows a series of tick labels along an axis       *\n   * !!! not for users !!!                             *\n   *****************************************************/\n\n   import { getContext } from 'svelte';\n\n\n   /*****************************************/\n   /* Input parameters                      */\n   /*****************************************/\n\n\texport let tickCoords;  // array with tick coordinates\n   export let textColor;   // color of tick labels\n   export let tickLabels;  // array with tick labels\n   export let pos = 1;     // position of tick labels\n   export let las = 1;     // rotation of tick labels (1 - horizontal, 2 - vertical)\n\n\n   /*****************************************/\n   /* Component code                        */\n   /*****************************************/\n\n   // get axes context and reactive variables needed to compute coordinates\n   const axes = getContext('axes');\n   const scale = axes.scale;\n   const tX = axes.tX;\n   const tY = axes.tY;\n   const isOk = axes.isOk;\n\n\n   let x, y = undefined;\n   let dx = 0, dy = 0, textAnchor;\n\n   // reactive calculations triggered by changes in coordinates and plot parameters\n   $: if ($isOk) {\n      x = axes.transform(tickCoords[1][0], $tX.coords);\n      y = axes.transform(tickCoords[1][1], $tY.coords);\n   }\n\n   // reactive calculations triggered by changes in scale\n   $: m = axes.LABELS_MARGIN[$scale];\n\n   // reactive calculations triggered by changes in pos\n   $: {\n      textAnchor = (['middle', 'middle', 'start', 'middle', 'end'])[pos];\n      dx = ([0, 0, m,  0, -m])[pos];\n      dy = ([0, m, 0, -m, 0])[pos];\n   }\n\n   // styles for the elements\n   $: textStyleStr = `dominant-baseline:middle;fill:${textColor};font-size:1em; text-anchor:middle;`;\n</script>\n\n{#if x !== undefined && y !== undefined}\n<g class=\"tick_labels\" style={textStyleStr} >\n   {#if las === 2 && pos === 4}\n   {#each x as v, i}\n      <text data-id={i} x={x[i]} y={y[i]} dx={0} dy={dx*1.25} transform={`rotate(-90, ${x[i]}, ${y[i]})`} text-anchor={\"middle\"}>{@html tickLabels[i]}</text>\n   {/each}\n   {:else if las === 2 && pos === 1}\n   {#each x as v, i}\n      <text data-id={i} x={x[i]} y={y[i]} dx={-dy/2} dy={0} transform={`rotate(-90, ${x[i]}, ${y[i]})`} text-anchor={\"end\"}>{@html tickLabels[i]}</text>\n   {/each}\n   {:else}\n   {#each x as v, i}\n      <text data-id={i} x={x[i]} y={y[i]} dx={dx} dy={dy} text-anchor={textAnchor}>{@html tickLabels[i]}</text>\n   {/each}\n   {/if}\n</g>\n{/if}\n\n<style>\n   text, text > :global(tspan) {\n      cursor: default;\n      user-select: none;\n      dominant-baseline: middle;\n   }\n</style>","<script>\n   /****************************************************\n   * Axis                                              *\n   * ---------------------------------                 *\n   * generic element for X- or Y-axis                  *\n   * !!! not for users !!!                             *\n   *****************************************************/\n\n   import { Colors } from '../Colors.js';\n   import AxisLines from './AxisLines.svelte';\n   import AxisTickLabels from './AxisTickLabels.svelte';\n\n\n   /*****************************************/\n   /* Input parameters                      */\n   /*****************************************/\n\n   export let tickLabels = [];               // vector with labels for each tick\n   export let showGrid = false;              // logical, show or not grid lines\n   export let las = 1;                       // rotation of tick labels\n\n   export let pos = 1;                       // position of tick labels\n   export let className = \"\";                // name of CSS class for the axis\n   export let grid = [];                     // array with grid coordinates\n   export let axisLine = [];                 // array with coordinates of main axis line\n   export let tickCoords = [];               // array with axis tick coordinates\n\n   export let lineColor = Colors.DARKGRAY;   // color of main axis line\n   export let gridColor = Colors.MIDDLEGRAY; // color of grid lines\n   export let textColor = Colors.DARKGRAY;   // color of tick labels\n</script>\n\n<g class=\"mdaplot__axis {className}\">\n   <!-- grid -->\n   {#if showGrid }\n      <AxisLines lineCoords={grid} lineColor={gridColor} lineType={3} />\n   {/if}\n\n   <!-- main axis line -->\n   <AxisLines lineCoords={axisLine} lineColor={lineColor} lineType={1} />\n\n   <!-- ticks-->\n   <AxisLines lineCoords={tickCoords} lineColor={lineColor} lineType={1} />\n\n   <!-- labels -->\n   {#if tickCoords.length === 2 && tickLabels.length === tickCoords[1][0].length}\n   <AxisTickLabels {las} {pos} {tickCoords} {tickLabels} {textColor}/>\n   {/if}\n</g>\n\n","<script>\n   /****************************************************\n   * X-Axis                                            *\n   * --------------------                              *\n   * shows x-axis and its elements (ticks, grid, etc.) *\n   *****************************************************/\n\n   import { getContext } from 'svelte';\n   import { Vector, vector } from 'mdatools/arrays';\n   import { Colors } from '../Colors.js';\n   import { getAxisTicks } from '../Utils.js';\n   import Axis from './Axis.svelte';\n\n\n   /*****************************************/\n   /* Input parameters                      */\n   /*****************************************/\n\n   export let slot = 'xaxis';                // slot the component must be placed in (must be \"xaxis\")\n   export let ticks = undefined;             // vector with numeric tick positions (by default is computed automatically)\n   export let tickLabels = undefined;        // vector with labels for each tick (by default tick values will be used)\n   export let showGrid = false;              // logical, show or not grid lines\n   export let las = 1;                       // orientation of tick labels (1 - horizontal, 2 - vertical)\n\n   export let lineColor = Colors.DARKGRAY;   // color of axis and tick lines\n   export let gridColor = Colors.MIDDLEGRAY; // color og grid lines\n   export let textColor = Colors.DARKGRAY;   // color of text tick labels\n\n\n   /*****************************************/\n   /* Component code                        */\n   /*****************************************/\n\n   // sanity checks of input parameters\n   if (slot !== 'xaxis') {\n      throw('Component XAxis must have \"slot=\\'xaxis\\'\" attribute.');\n   }\n\n   // get axes context and adjust x margins\n   const axes = getContext('axes');\n\n   // get reactive variables needed to compute coordinates\n   const xLim = axes.xLim;\n   const yLim = axes.yLim;\n   const scale = axes.scale;\n   const isOk = axes.isOk;\n   const tY = axes.tY;\n\n   // prepare variables for coordinates\n   let grid = [];\n   let axisLine = [];\n   let tickCoords = [];\n\n   // compute coordinates for ticks, grid and axis line\n   $: if ($isOk) {\n\n      // compute x-coordinates of the ticks or take the ones manually specified by user\n      const ticksX = getAxisTicks(ticks, $xLim, axes.TICK_NUM[$scale], true);\n      const tickNum = ticksX.length;\n\n      // compute tick y-coordinates (up and bottom)\n      const dY = axes.invTransform([axes.TICK_SIZE[$scale]], $tY.objects)[0];\n      const ticksY1 = Vector.fill($yLim[0], tickNum);\n      const ticksY2 = ticksY1.add(dY);\n\n      // compute coordinates for the ends of grid\n      const gridYEnd = Vector.fill($yLim[1], tickNum);\n\n      // tick labels\n      tickLabels = (ticks === undefined || tickLabels === undefined) ? ticksX.v : tickLabels;\n      if (tickLabels.length !== ticksX.length) {\n         throw('XAxis: \"tickLabels\" must be a array of the same size as ticks.')\n      }\n\n      // combine all coordinates together\n      grid = [\n         [ticksX, ticksY1],\n         [ticksX, gridYEnd]\n      ];\n\n      axisLine = [\n         [vector([$xLim[0]]), vector([$yLim[0]])],\n         [vector([$xLim[1]]), vector([$yLim[0]])]\n      ]\n\n      tickCoords = [\n         [ticksX, ticksY2],\n         [ticksX, ticksY1]\n      ];\n   }\n</script>\n\n{#if $isOk && axisLine.length > 0}\n<Axis\n   className=\"mdaplot__xaxis\" pos={1}\n   {lineColor} {gridColor} {textColor}\n   {showGrid} {grid} {axisLine} {tickCoords} {tickLabels} {las}\n/>\n{/if}","<script>\n   /****************************************************\n   * Y-Axis                                            *\n   * --------------------                              *\n   * shows y-axis and its elements (ticks, grid, etc.) *\n   *****************************************************/\n\n   import { getContext } from 'svelte';\n   import { Vector, vector } from 'mdatools/arrays';\n   import { Colors } from '../Colors.js';\n   import { getAxisTicks } from '../Utils.js';\n   import Axis from './Axis.svelte';\n\n\n   /*****************************************/\n   /* Input parameters                      */\n   /*****************************************/\n\n   export let slot = 'yaxis';                // slot the component must be placed in (must be \"yaxis\")\n   export let ticks = undefined;             // vector with numeric tick positions (by default is computed automatically)\n   export let tickLabels = undefined;        // vector with labels for each tick (by default tick values will be used)\n   export let showGrid = false;              // logical, show or not grid lines\n   export let las = 1;                       // orientation of tick labels (1 - horizontal, 2 - vertical)\n\n   export let lineColor = Colors.DARKGRAY;   // color of axis and tick lines\n   export let gridColor = Colors.MIDDLEGRAY; // color og grid lines\n   export let textColor = Colors.DARKGRAY;   // color of text tick labels\n\n\n   /*****************************************/\n   /* Component code                        */\n   /*****************************************/\n\n   // sanity checks of input parameters\n   if (slot !== 'yaxis') {\n      throw('Component YAxis must have \"slot=\\'yaxis\\'\" attribute.');\n   }\n\n   // get axes context and adjust x margins\n   const axes = getContext('axes');\n\n   // get reactive variables needed to compute coordinates\n   const xLim = axes.xLim;\n   const yLim = axes.yLim;\n   const scale = axes.scale;\n   const isOk = axes.isOk;\n   const tX = axes.tX;\n\n   // prepare variables for coordinates\n   let grid = [];\n   let axisLine = [];\n   let tickCoords = [];\n\n   // compute tick x-coordinates\n   $: if ($isOk) {\n\n      // compute x-coordinates of the ticks or take the ones manually specified by user\n      const ticksY = getAxisTicks(ticks, $yLim, axes.TICK_NUM[$scale], true);\n      const tickNum = ticksY.length;\n\n      // compute tick y-coordinates (up and bottom)\n      const dX = axes.invTransform([axes.TICK_SIZE[$scale]], $tX.objects)[0];\n      const ticksX1 = Vector.fill($xLim[0], tickNum)\n      const ticksX2 = ticksX1.add(dX)\n\n      // coordinates for the ends of grid\n      const gridXEnd = Vector.fill($xLim[1], tickNum);\n\n      // tick labels\n      tickLabels = (ticks === undefined || tickLabels === undefined) ? ticksY.v : tickLabels;\n      if (tickLabels.length !== ticksY.length) {\n         throw('YAxis: \"tickLabels\" must be a array of the same size as ticks.')\n      }\n\n      // combine all coordinates together\n      grid = [\n         [ticksX1, ticksY],\n         [gridXEnd, ticksY]\n      ];\n\n      axisLine = [\n         [vector([$xLim[0]]), vector([$yLim[0]])],\n         [vector([$xLim[0]]), vector([$yLim[1]])]\n      ]\n\n      tickCoords = [\n         [ticksX1, ticksY],\n         [ticksX2, ticksY]\n      ];\n   }\n</script>\n\n{#if $isOk && axisLine.length > 0}\n<Axis\n   className=\"mdaplot__yaxis\" pos={4}\n   {lineColor} {gridColor} {textColor}\n   {showGrid} {grid} {axisLine} {tickCoords} {tickLabels} {las}\n/>\n{/if}","<script>\n   /****************************************************\n   * Rectangles                                        *\n   * --------------------                              *\n   * shows series of rectangles                        *\n   *****************************************************/\n\n   import { getContext } from 'svelte';\n   import { Vector } from 'mdatools/arrays';\n   import { Colors } from '../Colors';\n   import { checkCoords } from '../Utils';\n\n\n   /*****************************************/\n   /* Input parameters                      */\n   /*****************************************/\n\n\texport let left;                          // array of vector with coordinates of left sides of the bars\n   export let top;                           // array of vector with coordinates of top sides of the bars\n   export let width;                         // single value (same for all) or vector/array with bar width\n   export let height;                        // single value (same for all) or vector/array with bar height\n   export let faceColor = Colors.PRIMARY;    // color of bar faces (fill)\n   export let borderColor = faceColor;       // color of bar borders\n   export let lineWidth = 1;                 // width (thickness) of bar border lines\n   export let className = 'series_rect';     // CSS class name of the SVG group\n   export let title = '';                    // title of the rectangle series (reserved for future use)\n\n\n   /*****************************************/\n   /* Component code                        */\n   /*****************************************/\n\n   // get axes context and reactive variables needed to compute coordinates\n   const axes = getContext('axes');\n   const tX = axes.tX;\n   const tY = axes.tY;\n   const isOk = axes.isOk;\n\n   let rx, ry, rw, rh = undefined;\n   $: {\n      if ($isOk) {\n\n         rx = axes.transform(checkCoords(left, 'Rectangles'), $tX.coords);\n         ry = axes.transform(checkCoords(top, 'Rectangles'), $tY.coords);\n\n         if (rx.length !== ry.length) {\n            throw Error('Rectangles: parameters \"left\" and \"top\" must be vectors of the same length.');\n         }\n\n         if (typeof width !== 'object') {\n            width = Vector.fill(width, left.length);\n         }\n\n         if (typeof height !== 'object') {\n            height = Vector.fill(height, left.length);\n         }\n\n         rw = axes.transform(width, $tX.objects);\n         rh = axes.transform(height, $tY.objects);\n      }\n   }\n\n   // styles for bars and labels\n   $: barsStyleStr = `fill:${faceColor};stroke:${borderColor};stroke-width:${lineWidth}px;`;\n</script>\n\n{#if $isOk}\n   <g class=\"series {className}\" title={title} style={barsStyleStr}>\n   {#each left as v, i}\n      <rect x={rx[i]} y={ry[i]} width={rw[i]} height={rh[i]} />\n   {/each}\n   </g>\n{/if}\n\n\n","<script>\n   /****************************************************\n   * Bars                                              *\n   * --------------------                              *\n   * shows series of bars on a plot                    *\n   *****************************************************/\n\n   import { max, diff } from 'mdatools/stat';\n   import { Vector } from 'mdatools/arrays';\n   import { Colors } from '../Colors';\n   import { checkCoords } from '../Utils';\n\n   import Rectangles from './Rectangles.svelte';\n\n\n   /*****************************************/\n   /* Input parameters                      */\n   /*****************************************/\n\n\texport let xValues;                       // vector with x-coordinates of middle points of the bars\n   export let yValues;                       // vector with y-coordinates of top points of the bars\n   export let barWidth = 0.8;                // width of bars as per cent of maximum width\n   export let faceColor = Colors.PRIMARY;    // face color of the bars\n   export let borderColor = Colors.PRIMARY;  // border color of the bars\n   export let title = '';                    // title of the bar series (reserved for future use)\n\n\n   /*****************************************/\n   /* Component code                        */\n   /*****************************************/\n\n   let width, left, top, height;\n\n   // reactive code for computing position of left sides and bar width\n   $: {\n\n      if (barWidth <= 0 || barWidth > 1) {\n         throw Error('BarSeries: parameters \"barWidth\" should be between 0 and 1.');\n      }\n\n      // compute maximum bar width and position of left side\n      const xv = checkCoords(xValues, 'BarSeries');\n      const w = max(diff(xv)) * barWidth;\n\n      left = xv.subtract(w/2);\n      width = Vector.fill(w, xv.length);\n   }\n\n   // reactive code for computing position of top sides and bar height\n   $: {\n\n      const yv = checkCoords(yValues, 'BarSeries');\n      if (yv.length !== left.length) {\n         throw Error('BarSeries: parameters \"yValues\" must be vector of the same length as \"xValues\".');\n      }\n\n      top = yv.apply(v => v > 0 ? v : 0);\n      height = yv.apply(v => Math.abs(v));\n   }\n</script>\n\n<Rectangles className=\"series_bar\" {left} {top} {width} {height} {borderColor} {faceColor} {title} />\n","<script>\n   /****************************************************\n   * Points                                            *\n   * --------------------                              *\n   * shows series of points/markers on a plot          *\n   *****************************************************/\n\n   import { getContext } from 'svelte';\n   import { Colors } from '../Colors';\n   import { checkCoords } from '../Utils';\n\n\n   /*****************************************/\n   /* Input parameters                      */\n   /*****************************************/\n\n\texport let xValues;                          // array of vector with x-coordinates of points\n   export let yValues;                          // array of vector with y-coordinates of points\n   export let marker = 1                        // index for point symbol (from 1 to 8): \"●\", \"◼\", \"▲\", \"▼\", \"⬥\", \"＋\", \"*\", \"✕\"\n   export let faceColor = 'transparent';        // face (fill) color of the points\n   export let borderColor = Colors.PRIMARY;     // border color of the points\n   export let borderWidth = 1;                  // width (thickness) of the points\n   export let markerSize = 1;                   // size of the marker symbols\n   export let title = '';                       // title of the point series - required for handling mouse click events\n\n\n   /*****************************************/\n   /* Component code                        */\n   /*****************************************/\n\n   // get axes context and adjust x margins\n   const axes = getContext('axes');\n   const tX = axes.tX;\n   const tY = axes.tY;\n   const isOk = axes.isOk;\n\n   let x, y, markerSymbol;\n\n   // reactive calculations triggered by changes in coordinates and plot parameters\n   $: if ($isOk) {\n\n      if (typeof(marker) !== \"number\" || marker < 1 || marker > axes.MARKER_SYMBOLS.length) {\n         throw Error(`ScatterSeries: parameter \"marker\" must be a number from 1 to ${axes.MARKER_SYMBOLS.length}.`);\n      }\n\n      markerSymbol = axes.MARKER_SYMBOLS[marker - 1];\n\n\n      x = axes.transform(checkCoords(xValues, 'Points'), $tX.coords);\n      y = axes.transform(checkCoords(yValues, 'Points'), $tY.coords);\n\n      // sanity check for input parameters\n      if (x.length !== y.length) {\n         throw Error('Points: parameters \"xValues\" and \"yValues\" must be vectors of the same length.')\n      }\n   }\n\n\n   // styles for the elements\n   $: textStyleStr = `dominant-baseline:middle;fill:${faceColor};stroke-width:${borderWidth}px;stroke:${borderColor};\n      font-size:${markerSize}em; text-anchor:middle;cursor:default;user-select:none;`;\n</script>\n\n{#if $isOk && x !== undefined && y !== undefined}\n<g class=\"series series_points\" title={title} style={textStyleStr} >\n   {#each x as v, i}\n      <text x={x[i]} y={y[i]}>{markerSymbol}</text>\n   {/each}\n</g>\n{/if}\n\n<style>\ntext, text > :global(tspan) {\n   dominant-baseline: middle;\n   text-anchor: middle;\n   cursor: default;\n   user-select: none;\n}\n</style>","<script>\n   import { vector, Vector } from 'mdatools/arrays';\n   import { max } from 'mdatools/stat';\n   import { Axes, YAxis, XAxis, Points, Bars } from 'svelte-plots-basic/2d';\n\n   export let popCoeffs;\n   export let sampCoeffs;\n   export let corr;\n   export let sampSize;\n   export let yErr;\n\n   let oldCorr = corr;\n   let oldSampSize = sampSize;\n   let oldYErr = yErr;\n   let popColor = '#d8d8d8';\n   let sampY = [];\n\n   // population and sample regression lines\n\n   $: xValues = Vector.seq(1, popCoeffs.length);\n   $: popY = popCoeffs;\n   $: if (corr !== oldCorr || yErr !== oldYErr || sampSize !== oldSampSize) {\n      oldCorr = corr;\n      oldYErr = yErr;\n      oldSampSize = sampSize;\n      sampY = [];\n   }\n\n   $: sampY = [...sampY, sampCoeffs] ;\n</script>\n\n<Axes limX={[0, 4]} limY={[-1, max(popY) * 1.2]} yLabel=\"Coefficient\" margins={[0.5, 0.75, 0.25, 0.25]}>\n\n   <Bars title=\"population\" xValues={xValues} borderColor=\"transparent\" faceColor={popColor} yValues={popY} />\n   {#each sampY as sy, i}\n   <Points title=\"sample\" xValues={xValues} yValues={sy}\n         borderWidth={i < (sampY.length - 1) ? 1 : 3}\n         borderColor={i < (sampY.length - 1) ? \"#a0a0a0a0\" : \"#9090ff\"}\n         faceColor={i < (sampY.length - 1) ? \"transparent\" : \"#9090ff\"}\n         />\n   {/each}\n   <YAxis slot=\"yaxis\" />\n   <XAxis slot=\"xaxis\" ticks={vector([1, 2, 3])} tickLabels={[\"b0\", \"b1\", \"b2\"]}/>\n</Axes>\n","<script>\n   import { max, min, sd } from 'mdatools/stat';\n   import { Vector, vector, cbind, crossprod, tcrossprod } from 'mdatools/arrays';\n\n   import { Points } from 'svelte-plots-basic/3d';\n\n   // shared components\n   import {default as StatApp} from \"../../shared/StatApp.svelte\";\n   import { colors } from '../../shared/graasta';\n\n   // shared components - plots\n   import AppPlot from '../../shared/plots/3DPlotAxes.svelte';\n   import ModelPlot from '../../shared/plots/MLRModelPlot.svelte';\n\n   // shared components - controls\n   import AppControlArea from \"../../shared/controls/AppControlArea.svelte\";\n   import AppControlSelect from '../../shared/controls/AppControlSelect.svelte';\n   import AppControlButton from '../../shared/controls/AppControlButton.svelte';\n\n   // local components\n   import PointLineEquation from './PointLineEquation.svelte';\n   import AppCoeffsPlot from './AppCoeffsPlot.svelte';\n\n\n\n   // constant parameters\n   const popCoeffs = vector([10, 1, 1]);\n   const modelColor = '#a0a0ef70';\n   const pointColor = colors.plots.SAMPLES[0];\n   const corrOptions = {'no': 0.0, 'low': 0.3, 'med': 0.7, 'high':0.95};\n   const sampSizeOptions = {'10': 10, '15': 15, '30': 30};\n   const yerrOptions = {'low': 0.1, 'med': 0.25, 'large': 0.5};\n\n   let corrStr = 'low';\n   let sampSizeStr = '30';\n   let yerrStr = 'low';\n\n   // axes limits (a bit wider the X range)\n   const limX = [-3, 3];\n   const limY = [0, 15];\n   const limZ = [-3, 3];\n\n\n   // function for taking a new sample\n   function takeSample() {\n      x1 = Vector.rand(sampSize, -2, 2);\n   }\n\n   // function fo rescaling x values\n   function rescale(x, r1, r2) {\n      const mx = max(x);\n      const mn = min(x);\n      const d1 = mx - mn;\n      const d2 = r2 - r1;\n\n      return x.apply(v => r1 + (v - mn) / d1 * d2);\n   }\n\n   // reactive parameters depend on user input\n   $: corr = corrOptions[corrStr];\n   $: sampSize = sampSizeOptions[sampSizeStr];\n   $: yErr = yerrOptions[yerrStr];\n\n   // create data values\n   let x1, x2, X, y, sampCoeffs;\n   $: {\n      // generate x1 values as random numbers\n      x1 = Vector.rand(sampSize, -2, 2);\n\n      // compute x2 values based on x1 and the correlation degree\n      x2 = rescale(x1.mult(corr / sd(x1)).add(Vector.randn(sampSize, 2, 2 - 2 * Math.abs(corr))), -2, 2);\n\n      // combine x-variables together and add column of ones.\n      X = cbind(Vector.ones(sampSize), x1, x2);\n\n      // compute theoretical y-values and add some noise\n      y = X.dot(popCoeffs).add(Vector.randn(sampSize, 0, yErr)).getcolumn(1);\n\n      // fit MLR model to the sample\n      sampCoeffs = tcrossprod(crossprod(X).inv(), X).dot(y).getcolumn(1);\n   }\n</script>\n\n<StatApp>\n   <div class=\"app-layout\">\n\n      <!-- Line equations -->\n      <div class=\"app-eq-area\">\n         <PointLineEquation {sampCoeffs} {popCoeffs} />\n      </div>\n\n      <!-- 3D plot -->\n      <div class=\"app-plot-area\">\n         <AppPlot {limX} {limY} {limZ}>\n            <Points xValues={x1} zValues={x2} yValues={y} borderWidth={2} borderColor={pointColor} />\n            <Points xValues={x1} zValues={x2} yValues={Vector.zeros(sampSize)} borderWidth={2} borderColor={\"#b0b0b0\"}/>\n            <ModelPlot color={modelColor} coeffs={Vector.c(sampCoeffs, 0)} X1Range={[-3, 3]} X2Range={[-3, 3]} />\n         </AppPlot>\n      </div>\n\n      <!-- Coefficients plot -->\n      <div class=\"app-coeffs-plot\">\n         <AppCoeffsPlot {popCoeffs} {sampCoeffs} {corr} {sampSize} {yErr}/>\n      </div>\n\n      <!-- Controls -->\n      <div class=\"app-controls-area\">\n         <AppControlArea>\n            <AppControlSelect id=\"corr\" label=\"cor(x1,x2)\" bind:value={corrStr} options={Object.keys(corrOptions)} />\n            <AppControlSelect id=\"yerr\" label=\"Fitting error\" bind:value={yerrStr} options={Object.keys(yerrOptions)} />\n            <AppControlSelect id=\"sampSize\" label=\"Sample size\" bind:value={sampSizeStr} options={Object.keys(sampSizeOptions)} />\n            <AppControlButton id=\"newsample\" label=\"Sample\" text=\"Take new\" on:click={takeSample} />\n         </AppControlArea>\n      </div>\n   </div>\n\n   <div slot=\"help\">\n      <h2>Colinearity in MLR</h2>\n      <p>This app demosampSizeStrates how co-linearity can affect an MLR model. <em>Colinearity</em> is a situation when two or several predictors (<em>x</em>-variables) are correlated (have linear relationship). This can cause some problems when fitting an MLR model, as it implies the lack of correlation among the predictors. If correlation is above moderate, this leads to larger uncertainty between the estimated and expected regression coefficients. But If correlation is high/strong, this can lead to a very large uncertainty and makes the model uninterpretable. In some cases it can even make the fitting impossible.\n      </p>\n      <p>\n      The severity of the problem depends on several things. First of all, on how strong the correlation among the predictors is. Usually MLR is stable to weak or moderate correlations. Second factor is the sample size, the smaller number of observations the bigger the uncertainty is. And, finally, it also depends on the fitting error — how well y-values are fitted by the model. In this app you can change all these parameters and then take several samples and see how big will be the uncertainty and how far is the MLR plane from the expected. Start with default settings which gives the best model, take several samples and check how far the regression coefficients of the fitted model are from the expected/theoretical shown with gray bars. Then play with the sample quality parameters and check how do they influence the fitting quality.\n      </p>\n   </div>\n</StatApp>\n\n<style>\n\n.app-layout {\n   width: 100%;\n   height: 100%;\n   position: relative;\n   display: grid;\n   grid-template-areas:\n      \"eq   coeffsplot\"\n      \"plot coeffsplot\"\n      \"plot controls\";\n   grid-template-rows: min-content 1fr 1fr;\n   grid-template-columns: minmax(60%, 80%) minmax(300px, 500px);\n}\n\n.app-eq-area {\n   box-sizing: border-box;\n   grid-area: eq;\n}\n\n.app-plot-area {\n   box-sizing: border-box;\n   grid-area: plot;\n}\n\n.app-coeffs-plot {\n   box-sizing: border-box;\n   grid-area: coeffsplot;\n}\n\n.app-controls-area {\n   box-sizing: border-box;\n   padding-left: 1em;\n   grid-area: controls;\n}\n\n.app-controls-area > :global(*){\n   margin: 1em 0;\n}\n\n</style>","import App from './App.svelte';\n\nconst app = new App({\n\ttarget: document.getElementById(\"graasta-app-container\"),\n});\n\nexport default app;"],"names":["noop","assign","tar","src","k","run","fn","blank_object","run_all","fns","is_function","thing","safe_not_equal","a","b","is_empty","obj","subscribe","store","callbacks","unsub","component_subscribe","component","callback","create_slot","definition","ctx","$$scope","slot_ctx","get_slot_context","get_slot_changes","dirty","lets","merged","len","i","update_slot_base","slot","slot_definition","slot_changes","get_slot_context_fn","slot_context","get_all_dirty_from_scope","length","append","target","node","insert","anchor","detach","destroy_each","iterations","detaching","element","name","svg_element","text","data","space","empty","listen","event","handler","options","attr","attribute","value","children","set_data","set_input_value","input","set_style","key","important","toggle_class","toggle","custom_event","type","detail","bubbles","cancelable","e","current_component","set_current_component","get_current_component","onMount","onDestroy","createEventDispatcher","setContext","context","getContext","bubble","dirty_components","binding_callbacks","render_callbacks","flush_callbacks","resolved_promise","update_scheduled","schedule_update","flush","add_render_callback","add_flush_callback","seen_callbacks","flushidx","saved_component","update","$$","outroing","outros","group_outros","check_outros","transition_in","block","local","transition_out","destroy_block","lookup","update_keyed_each","old_blocks","get_key","dynamic","list","destroy","create_each_block","next","get_context","o","n","old_indexes","new_blocks","new_lookup","deltas","child_ctx","will_move","did_move","new_block","old_block","new_key","old_key","bind","index","create_component","mount_component","customElement","fragment","after_update","new_on_destroy","destroy_component","make_dirty","init","instance","create_fragment","not_equal","props","append_styles","parent_component","ready","ret","rest","nodes","SvelteComponent","$$props","runif","out","Vector","rnorm","mu","sigma","qr","X","m","res","Index","crossprod","Q","Matrix","Rt","j","r","q","rc","qc","s","temp","rot","ind","f","g","t","t1","c","isnumber","x","tcrossprod","Y","nrx","ncx","nry","nrows","ncols","ninner","xr","yc","outc","ncy","cbind","args","ismatrix","acc","cur","l","start","reshape","nrow","ncol","matrix","values","_Matrix","v","I","Yt","Xt","xc","d","prod","ncols_out","nrows_out","outx","isvector","_dot","fun","dims","_opvv","_opvn","rind","cind","isindex","min","max","ic","cv","ir","xc_out","ndec","leftpad","ndigits","str","sep","dec","header","labels","hasLabels","hasHeader","rows","y","vector","yv","strData","hasNaN","vec","startRow","firstRow","startColumn","rowValuesAll","rowValues","__publicField","_Vector","_shuffle","decreasing","_sort","_rep","_repeach","end","by","_seq","_Index","classRef","v1","v2","xv","yci","diff","sd","biased","variance","mean","sum","p","minind","outind","maxind","subscriber_queue","writable","stop","subscribers","set","new_value","run_queue","subscriber","invalidate","checkCoords","source","getAxisTicks","ticks","lim","maxTickNum","round","delta","range","niceNum","tickSpacing","tickMin","tickMax","localRange","exponent","fraction","niceFraction","roundCoords","getScale","width","height","create_if_block","div1","div1_class_value","div0","svg","current","limX","limY","limZ","theta","phi","zoom","TICK_NUM","LABELS_MARGIN","LINE_STYLES","T1","T2","plotElement","axesElement","transform","coords","tM","coords2D","scale","xLim","yLim","zLim","isOk","ro1","entries","entry","pcr","ro2","acr","$$value","$$invalidate","P2","P1","Z","P","$isOk","TT1","$xLim","$yLim","$zLim","SS1","SS2","Colors","line","line_x__value","line_x__value_1","line_y__value","line_y__value_1","if_block","lineCoords","lineColor","lineType","lineWidth","axes","x1","x2","y1","y2","lineStyleStr","$tM","$scale","create_if_block_1","raw_value","text_1","text_1_x_value","text_1_y_value","title","xValues","yValues","zValues","faceColor","borderColor","borderWidth","textSize","className","textStyleStr","tickCoords","textColor","tickLabels","axisticklabels_changes","textlabels_changes","create_if_block_2","if_block1","if_block2","axislines1_changes","axislines2_changes","showGrid","grid1","grid2","axisLine","titleCoords","gridColor","dX","ticksX","tickNum","dY","ticksY","ticksY1","ticksY2","ticksY3","dZ","ticksZ","ticksZ1","ticksZ2","ticksZ3","gridYEnd","gridZEnd","ticksX1","ticksX2","ticksX3","gridXEnd","xStart","xEnd","yStart","yEnd","zStart","zEnd","marker","markerSize","markers","markerSymbol","div","main","showHelp","toggleHelp","handleKeyPress","colors","isDragging","draggingStartPosition","plotPane","zoomScene","startRotation","stopRotation","rotate","currentPosition","dx","dy","segments_changes","if_block0","coeffs","X1Range","X2Range","showLines","color","x0","X1Start","X1End","X2Start","X2End","x21","x22","x11","x12","legend_1","fieldset","errormsg","legend","label_1","id","label","disable","hidden","click_handler","option","keydown_handler","button","div14","div2","div3","span6","span7","div4","div5","div6","span8","span9","div7","span10","span11","div8","div9","div10","span16","span17","div11","span18","span19","div12","div13","t7","t7_value","t8","t8_value","raw0_value","raw1_value","t13","t13_value","t14","t14_value","raw2_value","raw3_value","t25","t25_value","t26","t26_value","popCoeffs","sampCoeffs","span","create_if_block_3","rect","rect_x_value","rect_y_value","rect_width_value","rect_height_value","defs","clipPath","xLabel","yLabel","margins","dispatch","AXES_MARGIN_FACTORS","TICK_SIZE","LEGEND_FONT_SIZE","MARKER_SYMBOLS","clipPathID","dispatchClickEvent","eventName","el","handleClick","tA","invTransform","tX","tY","pxMargins","cpx","$tX","cpy","$tY","text_1_dx_value","text_1_transform_value","text_1_dy_value","pos","las","textAnchor","grid","left","top","rx","ry","rw","rh","barsStyleStr","barWidth","w","points_changes","popColor","each_blocks","axes_changes","corr","sampSize","yErr","oldCorr","oldSampSize","oldYErr","sampY","popY","modelColor","modelplot_changes","pointColor","corrOptions","sampSizeOptions","yerrOptions","corrStr","sampSizeStr","yerrStr","takeSample","rescale","r1","r2","mx","mn","d1","d2","App"],"mappings":"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"}