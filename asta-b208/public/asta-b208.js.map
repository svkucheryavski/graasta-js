{"version":3,"file":"asta-b208.js","sources":["../../node_modules/svelte/internal/index.mjs","../../../mdatools-js/stat/index.js","../../shared/StatApp.svelte","../../shared/graasta.js","../../shared/controls/AppControlArea.svelte","../../shared/controls/AppControl.svelte","../../shared/controls/AppControlButton.svelte","../../shared/controls/AppControlSwitch.svelte","../../shared/controls/AppControlRange.svelte","../../node_modules/svelte/store/index.mjs","../../../svelte-plots-basic/src/Axes.svelte","../../../svelte-plots-basic/src/Colors.js","../../../svelte-plots-basic/src/XAxis.svelte","../../../svelte-plots-basic/src/Segments.svelte","../../../svelte-plots-basic/src/TextLabels.svelte","../../../svelte-plots-basic/src/TextLegend.svelte","../../../svelte-plots-basic/src/ScatterSeries.svelte","../../../svelte-plots-basic/src/LineSeries.svelte","../../../svelte-plots-basic/src/AreaSeries.svelte","../../shared/plots/DistributionPlot.svelte","../../shared/plots/MeanPopulationPlot.svelte","../src/PopulationPlot.svelte","../../shared/plots/TestPlot.svelte","../../shared/plots/TTestPlot.svelte","../src/TestResults.svelte","../src/App.svelte","../src/main.js"],"sourcesContent":["function noop() { }\nconst identity = x => x;\nfunction assign(tar, src) {\n    // @ts-ignore\n    for (const k in src)\n        tar[k] = src[k];\n    return tar;\n}\nfunction is_promise(value) {\n    return value && typeof value === 'object' && typeof value.then === 'function';\n}\nfunction add_location(element, file, line, column, char) {\n    element.__svelte_meta = {\n        loc: { file, line, column, char }\n    };\n}\nfunction run(fn) {\n    return fn();\n}\nfunction blank_object() {\n    return Object.create(null);\n}\nfunction run_all(fns) {\n    fns.forEach(run);\n}\nfunction is_function(thing) {\n    return typeof thing === 'function';\n}\nfunction safe_not_equal(a, b) {\n    return a != a ? b == b : a !== b || ((a && typeof a === 'object') || typeof a === 'function');\n}\nfunction not_equal(a, b) {\n    return a != a ? b == b : a !== b;\n}\nfunction is_empty(obj) {\n    return Object.keys(obj).length === 0;\n}\nfunction validate_store(store, name) {\n    if (store != null && typeof store.subscribe !== 'function') {\n        throw new Error(`'${name}' is not a store with a 'subscribe' method`);\n    }\n}\nfunction subscribe(store, ...callbacks) {\n    if (store == null) {\n        return noop;\n    }\n    const unsub = store.subscribe(...callbacks);\n    return unsub.unsubscribe ? () => unsub.unsubscribe() : unsub;\n}\nfunction get_store_value(store) {\n    let value;\n    subscribe(store, _ => value = _)();\n    return value;\n}\nfunction component_subscribe(component, store, callback) {\n    component.$$.on_destroy.push(subscribe(store, callback));\n}\nfunction create_slot(definition, ctx, $$scope, fn) {\n    if (definition) {\n        const slot_ctx = get_slot_context(definition, ctx, $$scope, fn);\n        return definition[0](slot_ctx);\n    }\n}\nfunction get_slot_context(definition, ctx, $$scope, fn) {\n    return definition[1] && fn\n        ? assign($$scope.ctx.slice(), definition[1](fn(ctx)))\n        : $$scope.ctx;\n}\nfunction get_slot_changes(definition, $$scope, dirty, fn) {\n    if (definition[2] && fn) {\n        const lets = definition[2](fn(dirty));\n        if ($$scope.dirty === undefined) {\n            return lets;\n        }\n        if (typeof lets === 'object') {\n            const merged = [];\n            const len = Math.max($$scope.dirty.length, lets.length);\n            for (let i = 0; i < len; i += 1) {\n                merged[i] = $$scope.dirty[i] | lets[i];\n            }\n            return merged;\n        }\n        return $$scope.dirty | lets;\n    }\n    return $$scope.dirty;\n}\nfunction update_slot(slot, slot_definition, ctx, $$scope, dirty, get_slot_changes_fn, get_slot_context_fn) {\n    const slot_changes = get_slot_changes(slot_definition, $$scope, dirty, get_slot_changes_fn);\n    if (slot_changes) {\n        const slot_context = get_slot_context(slot_definition, ctx, $$scope, get_slot_context_fn);\n        slot.p(slot_context, slot_changes);\n    }\n}\nfunction update_slot_spread(slot, slot_definition, ctx, $$scope, dirty, get_slot_changes_fn, get_slot_spread_changes_fn, get_slot_context_fn) {\n    const slot_changes = get_slot_spread_changes_fn(dirty) | get_slot_changes(slot_definition, $$scope, dirty, get_slot_changes_fn);\n    if (slot_changes) {\n        const slot_context = get_slot_context(slot_definition, ctx, $$scope, get_slot_context_fn);\n        slot.p(slot_context, slot_changes);\n    }\n}\nfunction exclude_internal_props(props) {\n    const result = {};\n    for (const k in props)\n        if (k[0] !== '$')\n            result[k] = props[k];\n    return result;\n}\nfunction compute_rest_props(props, keys) {\n    const rest = {};\n    keys = new Set(keys);\n    for (const k in props)\n        if (!keys.has(k) && k[0] !== '$')\n            rest[k] = props[k];\n    return rest;\n}\nfunction compute_slots(slots) {\n    const result = {};\n    for (const key in slots) {\n        result[key] = true;\n    }\n    return result;\n}\nfunction once(fn) {\n    let ran = false;\n    return function (...args) {\n        if (ran)\n            return;\n        ran = true;\n        fn.call(this, ...args);\n    };\n}\nfunction null_to_empty(value) {\n    return value == null ? '' : value;\n}\nfunction set_store_value(store, ret, value = ret) {\n    store.set(value);\n    return ret;\n}\nconst has_prop = (obj, prop) => Object.prototype.hasOwnProperty.call(obj, prop);\nfunction action_destroyer(action_result) {\n    return action_result && is_function(action_result.destroy) ? action_result.destroy : noop;\n}\n\nconst is_client = typeof window !== 'undefined';\nlet now = is_client\n    ? () => window.performance.now()\n    : () => Date.now();\nlet raf = is_client ? cb => requestAnimationFrame(cb) : noop;\n// used internally for testing\nfunction set_now(fn) {\n    now = fn;\n}\nfunction set_raf(fn) {\n    raf = fn;\n}\n\nconst tasks = new Set();\nfunction run_tasks(now) {\n    tasks.forEach(task => {\n        if (!task.c(now)) {\n            tasks.delete(task);\n            task.f();\n        }\n    });\n    if (tasks.size !== 0)\n        raf(run_tasks);\n}\n/**\n * For testing purposes only!\n */\nfunction clear_loops() {\n    tasks.clear();\n}\n/**\n * Creates a new task that runs on each raf frame\n * until it returns a falsy value or is aborted\n */\nfunction loop(callback) {\n    let task;\n    if (tasks.size === 0)\n        raf(run_tasks);\n    return {\n        promise: new Promise(fulfill => {\n            tasks.add(task = { c: callback, f: fulfill });\n        }),\n        abort() {\n            tasks.delete(task);\n        }\n    };\n}\n\nfunction append(target, node) {\n    target.appendChild(node);\n}\nfunction insert(target, node, anchor) {\n    target.insertBefore(node, anchor || null);\n}\nfunction detach(node) {\n    node.parentNode.removeChild(node);\n}\nfunction destroy_each(iterations, detaching) {\n    for (let i = 0; i < iterations.length; i += 1) {\n        if (iterations[i])\n            iterations[i].d(detaching);\n    }\n}\nfunction element(name) {\n    return document.createElement(name);\n}\nfunction element_is(name, is) {\n    return document.createElement(name, { is });\n}\nfunction object_without_properties(obj, exclude) {\n    const target = {};\n    for (const k in obj) {\n        if (has_prop(obj, k)\n            // @ts-ignore\n            && exclude.indexOf(k) === -1) {\n            // @ts-ignore\n            target[k] = obj[k];\n        }\n    }\n    return target;\n}\nfunction svg_element(name) {\n    return document.createElementNS('http://www.w3.org/2000/svg', name);\n}\nfunction text(data) {\n    return document.createTextNode(data);\n}\nfunction space() {\n    return text(' ');\n}\nfunction empty() {\n    return text('');\n}\nfunction listen(node, event, handler, options) {\n    node.addEventListener(event, handler, options);\n    return () => node.removeEventListener(event, handler, options);\n}\nfunction prevent_default(fn) {\n    return function (event) {\n        event.preventDefault();\n        // @ts-ignore\n        return fn.call(this, event);\n    };\n}\nfunction stop_propagation(fn) {\n    return function (event) {\n        event.stopPropagation();\n        // @ts-ignore\n        return fn.call(this, event);\n    };\n}\nfunction self(fn) {\n    return function (event) {\n        // @ts-ignore\n        if (event.target === this)\n            fn.call(this, event);\n    };\n}\nfunction attr(node, attribute, value) {\n    if (value == null)\n        node.removeAttribute(attribute);\n    else if (node.getAttribute(attribute) !== value)\n        node.setAttribute(attribute, value);\n}\nfunction set_attributes(node, attributes) {\n    // @ts-ignore\n    const descriptors = Object.getOwnPropertyDescriptors(node.__proto__);\n    for (const key in attributes) {\n        if (attributes[key] == null) {\n            node.removeAttribute(key);\n        }\n        else if (key === 'style') {\n            node.style.cssText = attributes[key];\n        }\n        else if (key === '__value') {\n            node.value = node[key] = attributes[key];\n        }\n        else if (descriptors[key] && descriptors[key].set) {\n            node[key] = attributes[key];\n        }\n        else {\n            attr(node, key, attributes[key]);\n        }\n    }\n}\nfunction set_svg_attributes(node, attributes) {\n    for (const key in attributes) {\n        attr(node, key, attributes[key]);\n    }\n}\nfunction set_custom_element_data(node, prop, value) {\n    if (prop in node) {\n        node[prop] = typeof node[prop] === 'boolean' && value === '' ? true : value;\n    }\n    else {\n        attr(node, prop, value);\n    }\n}\nfunction xlink_attr(node, attribute, value) {\n    node.setAttributeNS('http://www.w3.org/1999/xlink', attribute, value);\n}\nfunction get_binding_group_value(group, __value, checked) {\n    const value = new Set();\n    for (let i = 0; i < group.length; i += 1) {\n        if (group[i].checked)\n            value.add(group[i].__value);\n    }\n    if (!checked) {\n        value.delete(__value);\n    }\n    return Array.from(value);\n}\nfunction to_number(value) {\n    return value === '' ? null : +value;\n}\nfunction time_ranges_to_array(ranges) {\n    const array = [];\n    for (let i = 0; i < ranges.length; i += 1) {\n        array.push({ start: ranges.start(i), end: ranges.end(i) });\n    }\n    return array;\n}\nfunction children(element) {\n    return Array.from(element.childNodes);\n}\nfunction claim_element(nodes, name, attributes, svg) {\n    for (let i = 0; i < nodes.length; i += 1) {\n        const node = nodes[i];\n        if (node.nodeName === name) {\n            let j = 0;\n            const remove = [];\n            while (j < node.attributes.length) {\n                const attribute = node.attributes[j++];\n                if (!attributes[attribute.name]) {\n                    remove.push(attribute.name);\n                }\n            }\n            for (let k = 0; k < remove.length; k++) {\n                node.removeAttribute(remove[k]);\n            }\n            return nodes.splice(i, 1)[0];\n        }\n    }\n    return svg ? svg_element(name) : element(name);\n}\nfunction claim_text(nodes, data) {\n    for (let i = 0; i < nodes.length; i += 1) {\n        const node = nodes[i];\n        if (node.nodeType === 3) {\n            node.data = '' + data;\n            return nodes.splice(i, 1)[0];\n        }\n    }\n    return text(data);\n}\nfunction claim_space(nodes) {\n    return claim_text(nodes, ' ');\n}\nfunction set_data(text, data) {\n    data = '' + data;\n    if (text.wholeText !== data)\n        text.data = data;\n}\nfunction set_input_value(input, value) {\n    input.value = value == null ? '' : value;\n}\nfunction set_input_type(input, type) {\n    try {\n        input.type = type;\n    }\n    catch (e) {\n        // do nothing\n    }\n}\nfunction set_style(node, key, value, important) {\n    node.style.setProperty(key, value, important ? 'important' : '');\n}\nfunction select_option(select, value) {\n    for (let i = 0; i < select.options.length; i += 1) {\n        const option = select.options[i];\n        if (option.__value === value) {\n            option.selected = true;\n            return;\n        }\n    }\n}\nfunction select_options(select, value) {\n    for (let i = 0; i < select.options.length; i += 1) {\n        const option = select.options[i];\n        option.selected = ~value.indexOf(option.__value);\n    }\n}\nfunction select_value(select) {\n    const selected_option = select.querySelector(':checked') || select.options[0];\n    return selected_option && selected_option.__value;\n}\nfunction select_multiple_value(select) {\n    return [].map.call(select.querySelectorAll(':checked'), option => option.__value);\n}\n// unfortunately this can't be a constant as that wouldn't be tree-shakeable\n// so we cache the result instead\nlet crossorigin;\nfunction is_crossorigin() {\n    if (crossorigin === undefined) {\n        crossorigin = false;\n        try {\n            if (typeof window !== 'undefined' && window.parent) {\n                void window.parent.document;\n            }\n        }\n        catch (error) {\n            crossorigin = true;\n        }\n    }\n    return crossorigin;\n}\nfunction add_resize_listener(node, fn) {\n    const computed_style = getComputedStyle(node);\n    if (computed_style.position === 'static') {\n        node.style.position = 'relative';\n    }\n    const iframe = element('iframe');\n    iframe.setAttribute('style', 'display: block; position: absolute; top: 0; left: 0; width: 100%; height: 100%; ' +\n        'overflow: hidden; border: 0; opacity: 0; pointer-events: none; z-index: -1;');\n    iframe.setAttribute('aria-hidden', 'true');\n    iframe.tabIndex = -1;\n    const crossorigin = is_crossorigin();\n    let unsubscribe;\n    if (crossorigin) {\n        iframe.src = \"data:text/html,<script>onresize=function(){parent.postMessage(0,'*')}</script>\";\n        unsubscribe = listen(window, 'message', (event) => {\n            if (event.source === iframe.contentWindow)\n                fn();\n        });\n    }\n    else {\n        iframe.src = 'about:blank';\n        iframe.onload = () => {\n            unsubscribe = listen(iframe.contentWindow, 'resize', fn);\n        };\n    }\n    append(node, iframe);\n    return () => {\n        if (crossorigin) {\n            unsubscribe();\n        }\n        else if (unsubscribe && iframe.contentWindow) {\n            unsubscribe();\n        }\n        detach(iframe);\n    };\n}\nfunction toggle_class(element, name, toggle) {\n    element.classList[toggle ? 'add' : 'remove'](name);\n}\nfunction custom_event(type, detail) {\n    const e = document.createEvent('CustomEvent');\n    e.initCustomEvent(type, false, false, detail);\n    return e;\n}\nfunction query_selector_all(selector, parent = document.body) {\n    return Array.from(parent.querySelectorAll(selector));\n}\nclass HtmlTag {\n    constructor(anchor = null) {\n        this.a = anchor;\n        this.e = this.n = null;\n    }\n    m(html, target, anchor = null) {\n        if (!this.e) {\n            this.e = element(target.nodeName);\n            this.t = target;\n            this.h(html);\n        }\n        this.i(anchor);\n    }\n    h(html) {\n        this.e.innerHTML = html;\n        this.n = Array.from(this.e.childNodes);\n    }\n    i(anchor) {\n        for (let i = 0; i < this.n.length; i += 1) {\n            insert(this.t, this.n[i], anchor);\n        }\n    }\n    p(html) {\n        this.d();\n        this.h(html);\n        this.i(this.a);\n    }\n    d() {\n        this.n.forEach(detach);\n    }\n}\nfunction attribute_to_object(attributes) {\n    const result = {};\n    for (const attribute of attributes) {\n        result[attribute.name] = attribute.value;\n    }\n    return result;\n}\nfunction get_custom_elements_slots(element) {\n    const result = {};\n    element.childNodes.forEach((node) => {\n        result[node.slot || 'default'] = true;\n    });\n    return result;\n}\n\nconst active_docs = new Set();\nlet active = 0;\n// https://github.com/darkskyapp/string-hash/blob/master/index.js\nfunction hash(str) {\n    let hash = 5381;\n    let i = str.length;\n    while (i--)\n        hash = ((hash << 5) - hash) ^ str.charCodeAt(i);\n    return hash >>> 0;\n}\nfunction create_rule(node, a, b, duration, delay, ease, fn, uid = 0) {\n    const step = 16.666 / duration;\n    let keyframes = '{\\n';\n    for (let p = 0; p <= 1; p += step) {\n        const t = a + (b - a) * ease(p);\n        keyframes += p * 100 + `%{${fn(t, 1 - t)}}\\n`;\n    }\n    const rule = keyframes + `100% {${fn(b, 1 - b)}}\\n}`;\n    const name = `__svelte_${hash(rule)}_${uid}`;\n    const doc = node.ownerDocument;\n    active_docs.add(doc);\n    const stylesheet = doc.__svelte_stylesheet || (doc.__svelte_stylesheet = doc.head.appendChild(element('style')).sheet);\n    const current_rules = doc.__svelte_rules || (doc.__svelte_rules = {});\n    if (!current_rules[name]) {\n        current_rules[name] = true;\n        stylesheet.insertRule(`@keyframes ${name} ${rule}`, stylesheet.cssRules.length);\n    }\n    const animation = node.style.animation || '';\n    node.style.animation = `${animation ? `${animation}, ` : ''}${name} ${duration}ms linear ${delay}ms 1 both`;\n    active += 1;\n    return name;\n}\nfunction delete_rule(node, name) {\n    const previous = (node.style.animation || '').split(', ');\n    const next = previous.filter(name\n        ? anim => anim.indexOf(name) < 0 // remove specific animation\n        : anim => anim.indexOf('__svelte') === -1 // remove all Svelte animations\n    );\n    const deleted = previous.length - next.length;\n    if (deleted) {\n        node.style.animation = next.join(', ');\n        active -= deleted;\n        if (!active)\n            clear_rules();\n    }\n}\nfunction clear_rules() {\n    raf(() => {\n        if (active)\n            return;\n        active_docs.forEach(doc => {\n            const stylesheet = doc.__svelte_stylesheet;\n            let i = stylesheet.cssRules.length;\n            while (i--)\n                stylesheet.deleteRule(i);\n            doc.__svelte_rules = {};\n        });\n        active_docs.clear();\n    });\n}\n\nfunction create_animation(node, from, fn, params) {\n    if (!from)\n        return noop;\n    const to = node.getBoundingClientRect();\n    if (from.left === to.left && from.right === to.right && from.top === to.top && from.bottom === to.bottom)\n        return noop;\n    const { delay = 0, duration = 300, easing = identity, \n    // @ts-ignore todo: should this be separated from destructuring? Or start/end added to public api and documentation?\n    start: start_time = now() + delay, \n    // @ts-ignore todo:\n    end = start_time + duration, tick = noop, css } = fn(node, { from, to }, params);\n    let running = true;\n    let started = false;\n    let name;\n    function start() {\n        if (css) {\n            name = create_rule(node, 0, 1, duration, delay, easing, css);\n        }\n        if (!delay) {\n            started = true;\n        }\n    }\n    function stop() {\n        if (css)\n            delete_rule(node, name);\n        running = false;\n    }\n    loop(now => {\n        if (!started && now >= start_time) {\n            started = true;\n        }\n        if (started && now >= end) {\n            tick(1, 0);\n            stop();\n        }\n        if (!running) {\n            return false;\n        }\n        if (started) {\n            const p = now - start_time;\n            const t = 0 + 1 * easing(p / duration);\n            tick(t, 1 - t);\n        }\n        return true;\n    });\n    start();\n    tick(0, 1);\n    return stop;\n}\nfunction fix_position(node) {\n    const style = getComputedStyle(node);\n    if (style.position !== 'absolute' && style.position !== 'fixed') {\n        const { width, height } = style;\n        const a = node.getBoundingClientRect();\n        node.style.position = 'absolute';\n        node.style.width = width;\n        node.style.height = height;\n        add_transform(node, a);\n    }\n}\nfunction add_transform(node, a) {\n    const b = node.getBoundingClientRect();\n    if (a.left !== b.left || a.top !== b.top) {\n        const style = getComputedStyle(node);\n        const transform = style.transform === 'none' ? '' : style.transform;\n        node.style.transform = `${transform} translate(${a.left - b.left}px, ${a.top - b.top}px)`;\n    }\n}\n\nlet current_component;\nfunction set_current_component(component) {\n    current_component = component;\n}\nfunction get_current_component() {\n    if (!current_component)\n        throw new Error('Function called outside component initialization');\n    return current_component;\n}\nfunction beforeUpdate(fn) {\n    get_current_component().$$.before_update.push(fn);\n}\nfunction onMount(fn) {\n    get_current_component().$$.on_mount.push(fn);\n}\nfunction afterUpdate(fn) {\n    get_current_component().$$.after_update.push(fn);\n}\nfunction onDestroy(fn) {\n    get_current_component().$$.on_destroy.push(fn);\n}\nfunction createEventDispatcher() {\n    const component = get_current_component();\n    return (type, detail) => {\n        const callbacks = component.$$.callbacks[type];\n        if (callbacks) {\n            // TODO are there situations where events could be dispatched\n            // in a server (non-DOM) environment?\n            const event = custom_event(type, detail);\n            callbacks.slice().forEach(fn => {\n                fn.call(component, event);\n            });\n        }\n    };\n}\nfunction setContext(key, context) {\n    get_current_component().$$.context.set(key, context);\n}\nfunction getContext(key) {\n    return get_current_component().$$.context.get(key);\n}\nfunction hasContext(key) {\n    return get_current_component().$$.context.has(key);\n}\n// TODO figure out if we still want to support\n// shorthand events, or if we want to implement\n// a real bubbling mechanism\nfunction bubble(component, event) {\n    const callbacks = component.$$.callbacks[event.type];\n    if (callbacks) {\n        callbacks.slice().forEach(fn => fn(event));\n    }\n}\n\nconst dirty_components = [];\nconst intros = { enabled: false };\nconst binding_callbacks = [];\nconst render_callbacks = [];\nconst flush_callbacks = [];\nconst resolved_promise = Promise.resolve();\nlet update_scheduled = false;\nfunction schedule_update() {\n    if (!update_scheduled) {\n        update_scheduled = true;\n        resolved_promise.then(flush);\n    }\n}\nfunction tick() {\n    schedule_update();\n    return resolved_promise;\n}\nfunction add_render_callback(fn) {\n    render_callbacks.push(fn);\n}\nfunction add_flush_callback(fn) {\n    flush_callbacks.push(fn);\n}\nlet flushing = false;\nconst seen_callbacks = new Set();\nfunction flush() {\n    if (flushing)\n        return;\n    flushing = true;\n    do {\n        // first, call beforeUpdate functions\n        // and update components\n        for (let i = 0; i < dirty_components.length; i += 1) {\n            const component = dirty_components[i];\n            set_current_component(component);\n            update(component.$$);\n        }\n        set_current_component(null);\n        dirty_components.length = 0;\n        while (binding_callbacks.length)\n            binding_callbacks.pop()();\n        // then, once components are updated, call\n        // afterUpdate functions. This may cause\n        // subsequent updates...\n        for (let i = 0; i < render_callbacks.length; i += 1) {\n            const callback = render_callbacks[i];\n            if (!seen_callbacks.has(callback)) {\n                // ...so guard against infinite loops\n                seen_callbacks.add(callback);\n                callback();\n            }\n        }\n        render_callbacks.length = 0;\n    } while (dirty_components.length);\n    while (flush_callbacks.length) {\n        flush_callbacks.pop()();\n    }\n    update_scheduled = false;\n    flushing = false;\n    seen_callbacks.clear();\n}\nfunction update($$) {\n    if ($$.fragment !== null) {\n        $$.update();\n        run_all($$.before_update);\n        const dirty = $$.dirty;\n        $$.dirty = [-1];\n        $$.fragment && $$.fragment.p($$.ctx, dirty);\n        $$.after_update.forEach(add_render_callback);\n    }\n}\n\nlet promise;\nfunction wait() {\n    if (!promise) {\n        promise = Promise.resolve();\n        promise.then(() => {\n            promise = null;\n        });\n    }\n    return promise;\n}\nfunction dispatch(node, direction, kind) {\n    node.dispatchEvent(custom_event(`${direction ? 'intro' : 'outro'}${kind}`));\n}\nconst outroing = new Set();\nlet outros;\nfunction group_outros() {\n    outros = {\n        r: 0,\n        c: [],\n        p: outros // parent group\n    };\n}\nfunction check_outros() {\n    if (!outros.r) {\n        run_all(outros.c);\n    }\n    outros = outros.p;\n}\nfunction transition_in(block, local) {\n    if (block && block.i) {\n        outroing.delete(block);\n        block.i(local);\n    }\n}\nfunction transition_out(block, local, detach, callback) {\n    if (block && block.o) {\n        if (outroing.has(block))\n            return;\n        outroing.add(block);\n        outros.c.push(() => {\n            outroing.delete(block);\n            if (callback) {\n                if (detach)\n                    block.d(1);\n                callback();\n            }\n        });\n        block.o(local);\n    }\n}\nconst null_transition = { duration: 0 };\nfunction create_in_transition(node, fn, params) {\n    let config = fn(node, params);\n    let running = false;\n    let animation_name;\n    let task;\n    let uid = 0;\n    function cleanup() {\n        if (animation_name)\n            delete_rule(node, animation_name);\n    }\n    function go() {\n        const { delay = 0, duration = 300, easing = identity, tick = noop, css } = config || null_transition;\n        if (css)\n            animation_name = create_rule(node, 0, 1, duration, delay, easing, css, uid++);\n        tick(0, 1);\n        const start_time = now() + delay;\n        const end_time = start_time + duration;\n        if (task)\n            task.abort();\n        running = true;\n        add_render_callback(() => dispatch(node, true, 'start'));\n        task = loop(now => {\n            if (running) {\n                if (now >= end_time) {\n                    tick(1, 0);\n                    dispatch(node, true, 'end');\n                    cleanup();\n                    return running = false;\n                }\n                if (now >= start_time) {\n                    const t = easing((now - start_time) / duration);\n                    tick(t, 1 - t);\n                }\n            }\n            return running;\n        });\n    }\n    let started = false;\n    return {\n        start() {\n            if (started)\n                return;\n            delete_rule(node);\n            if (is_function(config)) {\n                config = config();\n                wait().then(go);\n            }\n            else {\n                go();\n            }\n        },\n        invalidate() {\n            started = false;\n        },\n        end() {\n            if (running) {\n                cleanup();\n                running = false;\n            }\n        }\n    };\n}\nfunction create_out_transition(node, fn, params) {\n    let config = fn(node, params);\n    let running = true;\n    let animation_name;\n    const group = outros;\n    group.r += 1;\n    function go() {\n        const { delay = 0, duration = 300, easing = identity, tick = noop, css } = config || null_transition;\n        if (css)\n            animation_name = create_rule(node, 1, 0, duration, delay, easing, css);\n        const start_time = now() + delay;\n        const end_time = start_time + duration;\n        add_render_callback(() => dispatch(node, false, 'start'));\n        loop(now => {\n            if (running) {\n                if (now >= end_time) {\n                    tick(0, 1);\n                    dispatch(node, false, 'end');\n                    if (!--group.r) {\n                        // this will result in `end()` being called,\n                        // so we don't need to clean up here\n                        run_all(group.c);\n                    }\n                    return false;\n                }\n                if (now >= start_time) {\n                    const t = easing((now - start_time) / duration);\n                    tick(1 - t, t);\n                }\n            }\n            return running;\n        });\n    }\n    if (is_function(config)) {\n        wait().then(() => {\n            // @ts-ignore\n            config = config();\n            go();\n        });\n    }\n    else {\n        go();\n    }\n    return {\n        end(reset) {\n            if (reset && config.tick) {\n                config.tick(1, 0);\n            }\n            if (running) {\n                if (animation_name)\n                    delete_rule(node, animation_name);\n                running = false;\n            }\n        }\n    };\n}\nfunction create_bidirectional_transition(node, fn, params, intro) {\n    let config = fn(node, params);\n    let t = intro ? 0 : 1;\n    let running_program = null;\n    let pending_program = null;\n    let animation_name = null;\n    function clear_animation() {\n        if (animation_name)\n            delete_rule(node, animation_name);\n    }\n    function init(program, duration) {\n        const d = program.b - t;\n        duration *= Math.abs(d);\n        return {\n            a: t,\n            b: program.b,\n            d,\n            duration,\n            start: program.start,\n            end: program.start + duration,\n            group: program.group\n        };\n    }\n    function go(b) {\n        const { delay = 0, duration = 300, easing = identity, tick = noop, css } = config || null_transition;\n        const program = {\n            start: now() + delay,\n            b\n        };\n        if (!b) {\n            // @ts-ignore todo: improve typings\n            program.group = outros;\n            outros.r += 1;\n        }\n        if (running_program || pending_program) {\n            pending_program = program;\n        }\n        else {\n            // if this is an intro, and there's a delay, we need to do\n            // an initial tick and/or apply CSS animation immediately\n            if (css) {\n                clear_animation();\n                animation_name = create_rule(node, t, b, duration, delay, easing, css);\n            }\n            if (b)\n                tick(0, 1);\n            running_program = init(program, duration);\n            add_render_callback(() => dispatch(node, b, 'start'));\n            loop(now => {\n                if (pending_program && now > pending_program.start) {\n                    running_program = init(pending_program, duration);\n                    pending_program = null;\n                    dispatch(node, running_program.b, 'start');\n                    if (css) {\n                        clear_animation();\n                        animation_name = create_rule(node, t, running_program.b, running_program.duration, 0, easing, config.css);\n                    }\n                }\n                if (running_program) {\n                    if (now >= running_program.end) {\n                        tick(t = running_program.b, 1 - t);\n                        dispatch(node, running_program.b, 'end');\n                        if (!pending_program) {\n                            // we're done\n                            if (running_program.b) {\n                                // intro — we can tidy up immediately\n                                clear_animation();\n                            }\n                            else {\n                                // outro — needs to be coordinated\n                                if (!--running_program.group.r)\n                                    run_all(running_program.group.c);\n                            }\n                        }\n                        running_program = null;\n                    }\n                    else if (now >= running_program.start) {\n                        const p = now - running_program.start;\n                        t = running_program.a + running_program.d * easing(p / running_program.duration);\n                        tick(t, 1 - t);\n                    }\n                }\n                return !!(running_program || pending_program);\n            });\n        }\n    }\n    return {\n        run(b) {\n            if (is_function(config)) {\n                wait().then(() => {\n                    // @ts-ignore\n                    config = config();\n                    go(b);\n                });\n            }\n            else {\n                go(b);\n            }\n        },\n        end() {\n            clear_animation();\n            running_program = pending_program = null;\n        }\n    };\n}\n\nfunction handle_promise(promise, info) {\n    const token = info.token = {};\n    function update(type, index, key, value) {\n        if (info.token !== token)\n            return;\n        info.resolved = value;\n        let child_ctx = info.ctx;\n        if (key !== undefined) {\n            child_ctx = child_ctx.slice();\n            child_ctx[key] = value;\n        }\n        const block = type && (info.current = type)(child_ctx);\n        let needs_flush = false;\n        if (info.block) {\n            if (info.blocks) {\n                info.blocks.forEach((block, i) => {\n                    if (i !== index && block) {\n                        group_outros();\n                        transition_out(block, 1, 1, () => {\n                            if (info.blocks[i] === block) {\n                                info.blocks[i] = null;\n                            }\n                        });\n                        check_outros();\n                    }\n                });\n            }\n            else {\n                info.block.d(1);\n            }\n            block.c();\n            transition_in(block, 1);\n            block.m(info.mount(), info.anchor);\n            needs_flush = true;\n        }\n        info.block = block;\n        if (info.blocks)\n            info.blocks[index] = block;\n        if (needs_flush) {\n            flush();\n        }\n    }\n    if (is_promise(promise)) {\n        const current_component = get_current_component();\n        promise.then(value => {\n            set_current_component(current_component);\n            update(info.then, 1, info.value, value);\n            set_current_component(null);\n        }, error => {\n            set_current_component(current_component);\n            update(info.catch, 2, info.error, error);\n            set_current_component(null);\n            if (!info.hasCatch) {\n                throw error;\n            }\n        });\n        // if we previously had a then/catch block, destroy it\n        if (info.current !== info.pending) {\n            update(info.pending, 0);\n            return true;\n        }\n    }\n    else {\n        if (info.current !== info.then) {\n            update(info.then, 1, info.value, promise);\n            return true;\n        }\n        info.resolved = promise;\n    }\n}\nfunction update_await_block_branch(info, ctx, dirty) {\n    const child_ctx = ctx.slice();\n    const { resolved } = info;\n    if (info.current === info.then) {\n        child_ctx[info.value] = resolved;\n    }\n    if (info.current === info.catch) {\n        child_ctx[info.error] = resolved;\n    }\n    info.block.p(child_ctx, dirty);\n}\n\nconst globals = (typeof window !== 'undefined'\n    ? window\n    : typeof globalThis !== 'undefined'\n        ? globalThis\n        : global);\n\nfunction destroy_block(block, lookup) {\n    block.d(1);\n    lookup.delete(block.key);\n}\nfunction outro_and_destroy_block(block, lookup) {\n    transition_out(block, 1, 1, () => {\n        lookup.delete(block.key);\n    });\n}\nfunction fix_and_destroy_block(block, lookup) {\n    block.f();\n    destroy_block(block, lookup);\n}\nfunction fix_and_outro_and_destroy_block(block, lookup) {\n    block.f();\n    outro_and_destroy_block(block, lookup);\n}\nfunction update_keyed_each(old_blocks, dirty, get_key, dynamic, ctx, list, lookup, node, destroy, create_each_block, next, get_context) {\n    let o = old_blocks.length;\n    let n = list.length;\n    let i = o;\n    const old_indexes = {};\n    while (i--)\n        old_indexes[old_blocks[i].key] = i;\n    const new_blocks = [];\n    const new_lookup = new Map();\n    const deltas = new Map();\n    i = n;\n    while (i--) {\n        const child_ctx = get_context(ctx, list, i);\n        const key = get_key(child_ctx);\n        let block = lookup.get(key);\n        if (!block) {\n            block = create_each_block(key, child_ctx);\n            block.c();\n        }\n        else if (dynamic) {\n            block.p(child_ctx, dirty);\n        }\n        new_lookup.set(key, new_blocks[i] = block);\n        if (key in old_indexes)\n            deltas.set(key, Math.abs(i - old_indexes[key]));\n    }\n    const will_move = new Set();\n    const did_move = new Set();\n    function insert(block) {\n        transition_in(block, 1);\n        block.m(node, next);\n        lookup.set(block.key, block);\n        next = block.first;\n        n--;\n    }\n    while (o && n) {\n        const new_block = new_blocks[n - 1];\n        const old_block = old_blocks[o - 1];\n        const new_key = new_block.key;\n        const old_key = old_block.key;\n        if (new_block === old_block) {\n            // do nothing\n            next = new_block.first;\n            o--;\n            n--;\n        }\n        else if (!new_lookup.has(old_key)) {\n            // remove old block\n            destroy(old_block, lookup);\n            o--;\n        }\n        else if (!lookup.has(new_key) || will_move.has(new_key)) {\n            insert(new_block);\n        }\n        else if (did_move.has(old_key)) {\n            o--;\n        }\n        else if (deltas.get(new_key) > deltas.get(old_key)) {\n            did_move.add(new_key);\n            insert(new_block);\n        }\n        else {\n            will_move.add(old_key);\n            o--;\n        }\n    }\n    while (o--) {\n        const old_block = old_blocks[o];\n        if (!new_lookup.has(old_block.key))\n            destroy(old_block, lookup);\n    }\n    while (n)\n        insert(new_blocks[n - 1]);\n    return new_blocks;\n}\nfunction validate_each_keys(ctx, list, get_context, get_key) {\n    const keys = new Set();\n    for (let i = 0; i < list.length; i++) {\n        const key = get_key(get_context(ctx, list, i));\n        if (keys.has(key)) {\n            throw new Error('Cannot have duplicate keys in a keyed each');\n        }\n        keys.add(key);\n    }\n}\n\nfunction get_spread_update(levels, updates) {\n    const update = {};\n    const to_null_out = {};\n    const accounted_for = { $$scope: 1 };\n    let i = levels.length;\n    while (i--) {\n        const o = levels[i];\n        const n = updates[i];\n        if (n) {\n            for (const key in o) {\n                if (!(key in n))\n                    to_null_out[key] = 1;\n            }\n            for (const key in n) {\n                if (!accounted_for[key]) {\n                    update[key] = n[key];\n                    accounted_for[key] = 1;\n                }\n            }\n            levels[i] = n;\n        }\n        else {\n            for (const key in o) {\n                accounted_for[key] = 1;\n            }\n        }\n    }\n    for (const key in to_null_out) {\n        if (!(key in update))\n            update[key] = undefined;\n    }\n    return update;\n}\nfunction get_spread_object(spread_props) {\n    return typeof spread_props === 'object' && spread_props !== null ? spread_props : {};\n}\n\n// source: https://html.spec.whatwg.org/multipage/indices.html\nconst boolean_attributes = new Set([\n    'allowfullscreen',\n    'allowpaymentrequest',\n    'async',\n    'autofocus',\n    'autoplay',\n    'checked',\n    'controls',\n    'default',\n    'defer',\n    'disabled',\n    'formnovalidate',\n    'hidden',\n    'ismap',\n    'loop',\n    'multiple',\n    'muted',\n    'nomodule',\n    'novalidate',\n    'open',\n    'playsinline',\n    'readonly',\n    'required',\n    'reversed',\n    'selected'\n]);\n\nconst invalid_attribute_name_character = /[\\s'\">/=\\u{FDD0}-\\u{FDEF}\\u{FFFE}\\u{FFFF}\\u{1FFFE}\\u{1FFFF}\\u{2FFFE}\\u{2FFFF}\\u{3FFFE}\\u{3FFFF}\\u{4FFFE}\\u{4FFFF}\\u{5FFFE}\\u{5FFFF}\\u{6FFFE}\\u{6FFFF}\\u{7FFFE}\\u{7FFFF}\\u{8FFFE}\\u{8FFFF}\\u{9FFFE}\\u{9FFFF}\\u{AFFFE}\\u{AFFFF}\\u{BFFFE}\\u{BFFFF}\\u{CFFFE}\\u{CFFFF}\\u{DFFFE}\\u{DFFFF}\\u{EFFFE}\\u{EFFFF}\\u{FFFFE}\\u{FFFFF}\\u{10FFFE}\\u{10FFFF}]/u;\n// https://html.spec.whatwg.org/multipage/syntax.html#attributes-2\n// https://infra.spec.whatwg.org/#noncharacter\nfunction spread(args, classes_to_add) {\n    const attributes = Object.assign({}, ...args);\n    if (classes_to_add) {\n        if (attributes.class == null) {\n            attributes.class = classes_to_add;\n        }\n        else {\n            attributes.class += ' ' + classes_to_add;\n        }\n    }\n    let str = '';\n    Object.keys(attributes).forEach(name => {\n        if (invalid_attribute_name_character.test(name))\n            return;\n        const value = attributes[name];\n        if (value === true)\n            str += ' ' + name;\n        else if (boolean_attributes.has(name.toLowerCase())) {\n            if (value)\n                str += ' ' + name;\n        }\n        else if (value != null) {\n            str += ` ${name}=\"${String(value).replace(/\"/g, '&#34;').replace(/'/g, '&#39;')}\"`;\n        }\n    });\n    return str;\n}\nconst escaped = {\n    '\"': '&quot;',\n    \"'\": '&#39;',\n    '&': '&amp;',\n    '<': '&lt;',\n    '>': '&gt;'\n};\nfunction escape(html) {\n    return String(html).replace(/[\"'&<>]/g, match => escaped[match]);\n}\nfunction each(items, fn) {\n    let str = '';\n    for (let i = 0; i < items.length; i += 1) {\n        str += fn(items[i], i);\n    }\n    return str;\n}\nconst missing_component = {\n    $$render: () => ''\n};\nfunction validate_component(component, name) {\n    if (!component || !component.$$render) {\n        if (name === 'svelte:component')\n            name += ' this={...}';\n        throw new Error(`<${name}> is not a valid SSR component. You may need to review your build config to ensure that dependencies are compiled, rather than imported as pre-compiled modules`);\n    }\n    return component;\n}\nfunction debug(file, line, column, values) {\n    console.log(`{@debug} ${file ? file + ' ' : ''}(${line}:${column})`); // eslint-disable-line no-console\n    console.log(values); // eslint-disable-line no-console\n    return '';\n}\nlet on_destroy;\nfunction create_ssr_component(fn) {\n    function $$render(result, props, bindings, slots, context) {\n        const parent_component = current_component;\n        const $$ = {\n            on_destroy,\n            context: new Map(parent_component ? parent_component.$$.context : context || []),\n            // these will be immediately discarded\n            on_mount: [],\n            before_update: [],\n            after_update: [],\n            callbacks: blank_object()\n        };\n        set_current_component({ $$ });\n        const html = fn(result, props, bindings, slots);\n        set_current_component(parent_component);\n        return html;\n    }\n    return {\n        render: (props = {}, { $$slots = {}, context = new Map() } = {}) => {\n            on_destroy = [];\n            const result = { title: '', head: '', css: new Set() };\n            const html = $$render(result, props, {}, $$slots, context);\n            run_all(on_destroy);\n            return {\n                html,\n                css: {\n                    code: Array.from(result.css).map(css => css.code).join('\\n'),\n                    map: null // TODO\n                },\n                head: result.title + result.head\n            };\n        },\n        $$render\n    };\n}\nfunction add_attribute(name, value, boolean) {\n    if (value == null || (boolean && !value))\n        return '';\n    return ` ${name}${value === true ? '' : `=${typeof value === 'string' ? JSON.stringify(escape(value)) : `\"${value}\"`}`}`;\n}\nfunction add_classes(classes) {\n    return classes ? ` class=\"${classes}\"` : '';\n}\n\nfunction bind(component, name, callback) {\n    const index = component.$$.props[name];\n    if (index !== undefined) {\n        component.$$.bound[index] = callback;\n        callback(component.$$.ctx[index]);\n    }\n}\nfunction create_component(block) {\n    block && block.c();\n}\nfunction claim_component(block, parent_nodes) {\n    block && block.l(parent_nodes);\n}\nfunction mount_component(component, target, anchor, customElement) {\n    const { fragment, on_mount, on_destroy, after_update } = component.$$;\n    fragment && fragment.m(target, anchor);\n    if (!customElement) {\n        // onMount happens before the initial afterUpdate\n        add_render_callback(() => {\n            const new_on_destroy = on_mount.map(run).filter(is_function);\n            if (on_destroy) {\n                on_destroy.push(...new_on_destroy);\n            }\n            else {\n                // Edge case - component was destroyed immediately,\n                // most likely as a result of a binding initialising\n                run_all(new_on_destroy);\n            }\n            component.$$.on_mount = [];\n        });\n    }\n    after_update.forEach(add_render_callback);\n}\nfunction destroy_component(component, detaching) {\n    const $$ = component.$$;\n    if ($$.fragment !== null) {\n        run_all($$.on_destroy);\n        $$.fragment && $$.fragment.d(detaching);\n        // TODO null out other refs, including component.$$ (but need to\n        // preserve final state?)\n        $$.on_destroy = $$.fragment = null;\n        $$.ctx = [];\n    }\n}\nfunction make_dirty(component, i) {\n    if (component.$$.dirty[0] === -1) {\n        dirty_components.push(component);\n        schedule_update();\n        component.$$.dirty.fill(0);\n    }\n    component.$$.dirty[(i / 31) | 0] |= (1 << (i % 31));\n}\nfunction init(component, options, instance, create_fragment, not_equal, props, dirty = [-1]) {\n    const parent_component = current_component;\n    set_current_component(component);\n    const $$ = component.$$ = {\n        fragment: null,\n        ctx: null,\n        // state\n        props,\n        update: noop,\n        not_equal,\n        bound: blank_object(),\n        // lifecycle\n        on_mount: [],\n        on_destroy: [],\n        on_disconnect: [],\n        before_update: [],\n        after_update: [],\n        context: new Map(parent_component ? parent_component.$$.context : options.context || []),\n        // everything else\n        callbacks: blank_object(),\n        dirty,\n        skip_bound: false\n    };\n    let ready = false;\n    $$.ctx = instance\n        ? instance(component, options.props || {}, (i, ret, ...rest) => {\n            const value = rest.length ? rest[0] : ret;\n            if ($$.ctx && not_equal($$.ctx[i], $$.ctx[i] = value)) {\n                if (!$$.skip_bound && $$.bound[i])\n                    $$.bound[i](value);\n                if (ready)\n                    make_dirty(component, i);\n            }\n            return ret;\n        })\n        : [];\n    $$.update();\n    ready = true;\n    run_all($$.before_update);\n    // `false` as a special case of no DOM component\n    $$.fragment = create_fragment ? create_fragment($$.ctx) : false;\n    if (options.target) {\n        if (options.hydrate) {\n            const nodes = children(options.target);\n            // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n            $$.fragment && $$.fragment.l(nodes);\n            nodes.forEach(detach);\n        }\n        else {\n            // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n            $$.fragment && $$.fragment.c();\n        }\n        if (options.intro)\n            transition_in(component.$$.fragment);\n        mount_component(component, options.target, options.anchor, options.customElement);\n        flush();\n    }\n    set_current_component(parent_component);\n}\nlet SvelteElement;\nif (typeof HTMLElement === 'function') {\n    SvelteElement = class extends HTMLElement {\n        constructor() {\n            super();\n            this.attachShadow({ mode: 'open' });\n        }\n        connectedCallback() {\n            const { on_mount } = this.$$;\n            this.$$.on_disconnect = on_mount.map(run).filter(is_function);\n            // @ts-ignore todo: improve typings\n            for (const key in this.$$.slotted) {\n                // @ts-ignore todo: improve typings\n                this.appendChild(this.$$.slotted[key]);\n            }\n        }\n        attributeChangedCallback(attr, _oldValue, newValue) {\n            this[attr] = newValue;\n        }\n        disconnectedCallback() {\n            run_all(this.$$.on_disconnect);\n        }\n        $destroy() {\n            destroy_component(this, 1);\n            this.$destroy = noop;\n        }\n        $on(type, callback) {\n            // TODO should this delegate to addEventListener?\n            const callbacks = (this.$$.callbacks[type] || (this.$$.callbacks[type] = []));\n            callbacks.push(callback);\n            return () => {\n                const index = callbacks.indexOf(callback);\n                if (index !== -1)\n                    callbacks.splice(index, 1);\n            };\n        }\n        $set($$props) {\n            if (this.$$set && !is_empty($$props)) {\n                this.$$.skip_bound = true;\n                this.$$set($$props);\n                this.$$.skip_bound = false;\n            }\n        }\n    };\n}\n/**\n * Base class for Svelte components. Used when dev=false.\n */\nclass SvelteComponent {\n    $destroy() {\n        destroy_component(this, 1);\n        this.$destroy = noop;\n    }\n    $on(type, callback) {\n        const callbacks = (this.$$.callbacks[type] || (this.$$.callbacks[type] = []));\n        callbacks.push(callback);\n        return () => {\n            const index = callbacks.indexOf(callback);\n            if (index !== -1)\n                callbacks.splice(index, 1);\n        };\n    }\n    $set($$props) {\n        if (this.$$set && !is_empty($$props)) {\n            this.$$.skip_bound = true;\n            this.$$set($$props);\n            this.$$.skip_bound = false;\n        }\n    }\n}\n\nfunction dispatch_dev(type, detail) {\n    document.dispatchEvent(custom_event(type, Object.assign({ version: '3.38.2' }, detail)));\n}\nfunction append_dev(target, node) {\n    dispatch_dev('SvelteDOMInsert', { target, node });\n    append(target, node);\n}\nfunction insert_dev(target, node, anchor) {\n    dispatch_dev('SvelteDOMInsert', { target, node, anchor });\n    insert(target, node, anchor);\n}\nfunction detach_dev(node) {\n    dispatch_dev('SvelteDOMRemove', { node });\n    detach(node);\n}\nfunction detach_between_dev(before, after) {\n    while (before.nextSibling && before.nextSibling !== after) {\n        detach_dev(before.nextSibling);\n    }\n}\nfunction detach_before_dev(after) {\n    while (after.previousSibling) {\n        detach_dev(after.previousSibling);\n    }\n}\nfunction detach_after_dev(before) {\n    while (before.nextSibling) {\n        detach_dev(before.nextSibling);\n    }\n}\nfunction listen_dev(node, event, handler, options, has_prevent_default, has_stop_propagation) {\n    const modifiers = options === true ? ['capture'] : options ? Array.from(Object.keys(options)) : [];\n    if (has_prevent_default)\n        modifiers.push('preventDefault');\n    if (has_stop_propagation)\n        modifiers.push('stopPropagation');\n    dispatch_dev('SvelteDOMAddEventListener', { node, event, handler, modifiers });\n    const dispose = listen(node, event, handler, options);\n    return () => {\n        dispatch_dev('SvelteDOMRemoveEventListener', { node, event, handler, modifiers });\n        dispose();\n    };\n}\nfunction attr_dev(node, attribute, value) {\n    attr(node, attribute, value);\n    if (value == null)\n        dispatch_dev('SvelteDOMRemoveAttribute', { node, attribute });\n    else\n        dispatch_dev('SvelteDOMSetAttribute', { node, attribute, value });\n}\nfunction prop_dev(node, property, value) {\n    node[property] = value;\n    dispatch_dev('SvelteDOMSetProperty', { node, property, value });\n}\nfunction dataset_dev(node, property, value) {\n    node.dataset[property] = value;\n    dispatch_dev('SvelteDOMSetDataset', { node, property, value });\n}\nfunction set_data_dev(text, data) {\n    data = '' + data;\n    if (text.wholeText === data)\n        return;\n    dispatch_dev('SvelteDOMSetData', { node: text, data });\n    text.data = data;\n}\nfunction validate_each_argument(arg) {\n    if (typeof arg !== 'string' && !(arg && typeof arg === 'object' && 'length' in arg)) {\n        let msg = '{#each} only iterates over array-like objects.';\n        if (typeof Symbol === 'function' && arg && Symbol.iterator in arg) {\n            msg += ' You can use a spread to convert this iterable into an array.';\n        }\n        throw new Error(msg);\n    }\n}\nfunction validate_slots(name, slot, keys) {\n    for (const slot_key of Object.keys(slot)) {\n        if (!~keys.indexOf(slot_key)) {\n            console.warn(`<${name}> received an unexpected slot \"${slot_key}\".`);\n        }\n    }\n}\n/**\n * Base class for Svelte components with some minor dev-enhancements. Used when dev=true.\n */\nclass SvelteComponentDev extends SvelteComponent {\n    constructor(options) {\n        if (!options || (!options.target && !options.$$inline)) {\n            throw new Error(\"'target' is a required option\");\n        }\n        super();\n    }\n    $destroy() {\n        super.$destroy();\n        this.$destroy = () => {\n            console.warn('Component was already destroyed'); // eslint-disable-line no-console\n        };\n    }\n    $capture_state() { }\n    $inject_state() { }\n}\n/**\n * Base class to create strongly typed Svelte components.\n * This only exists for typing purposes and should be used in `.d.ts` files.\n *\n * ### Example:\n *\n * You have component library on npm called `component-library`, from which\n * you export a component called `MyComponent`. For Svelte+TypeScript users,\n * you want to provide typings. Therefore you create a `index.d.ts`:\n * ```ts\n * import { SvelteComponentTyped } from \"svelte\";\n * export class MyComponent extends SvelteComponentTyped<{foo: string}> {}\n * ```\n * Typing this makes it possible for IDEs like VS Code with the Svelte extension\n * to provide intellisense and to use the component like this in a Svelte file\n * with TypeScript:\n * ```svelte\n * <script lang=\"ts\">\n * \timport { MyComponent } from \"component-library\";\n * </script>\n * <MyComponent foo={'bar'} />\n * ```\n *\n * #### Why not make this part of `SvelteComponent(Dev)`?\n * Because\n * ```ts\n * class ASubclassOfSvelteComponent extends SvelteComponent<{foo: string}> {}\n * const component: typeof SvelteComponent = ASubclassOfSvelteComponent;\n * ```\n * will throw a type error, so we need to seperate the more strictly typed class.\n */\nclass SvelteComponentTyped extends SvelteComponentDev {\n    constructor(options) {\n        super(options);\n    }\n}\nfunction loop_guard(timeout) {\n    const start = Date.now();\n    return () => {\n        if (Date.now() - start > timeout) {\n            throw new Error('Infinite loop detected');\n        }\n    };\n}\n\nexport { HtmlTag, SvelteComponent, SvelteComponentDev, SvelteComponentTyped, SvelteElement, action_destroyer, add_attribute, add_classes, add_flush_callback, add_location, add_render_callback, add_resize_listener, add_transform, afterUpdate, append, append_dev, assign, attr, attr_dev, attribute_to_object, beforeUpdate, bind, binding_callbacks, blank_object, bubble, check_outros, children, claim_component, claim_element, claim_space, claim_text, clear_loops, component_subscribe, compute_rest_props, compute_slots, createEventDispatcher, create_animation, create_bidirectional_transition, create_component, create_in_transition, create_out_transition, create_slot, create_ssr_component, current_component, custom_event, dataset_dev, debug, destroy_block, destroy_component, destroy_each, detach, detach_after_dev, detach_before_dev, detach_between_dev, detach_dev, dirty_components, dispatch_dev, each, element, element_is, empty, escape, escaped, exclude_internal_props, fix_and_destroy_block, fix_and_outro_and_destroy_block, fix_position, flush, getContext, get_binding_group_value, get_current_component, get_custom_elements_slots, get_slot_changes, get_slot_context, get_spread_object, get_spread_update, get_store_value, globals, group_outros, handle_promise, hasContext, has_prop, identity, init, insert, insert_dev, intros, invalid_attribute_name_character, is_client, is_crossorigin, is_empty, is_function, is_promise, listen, listen_dev, loop, loop_guard, missing_component, mount_component, noop, not_equal, now, null_to_empty, object_without_properties, onDestroy, onMount, once, outro_and_destroy_block, prevent_default, prop_dev, query_selector_all, raf, run, run_all, safe_not_equal, schedule_update, select_multiple_value, select_option, select_options, select_value, self, setContext, set_attributes, set_current_component, set_custom_element_data, set_data, set_data_dev, set_input_type, set_input_value, set_now, set_raf, set_store_value, set_style, set_svg_attributes, space, spread, stop_propagation, subscribe, svg_element, text, tick, time_ranges_to_array, to_number, toggle_class, transition_in, transition_out, update_await_block_branch, update_keyed_each, update_slot, update_slot_spread, validate_component, validate_each_argument, validate_each_keys, validate_slots, validate_store, xlink_attr };\n","/**********************************************\n * Functions for statistical tests            *\n **********************************************/\n\n/**\n * Returns a p-value for any test\n * @param {function} pfun - reference to a CDF function (e.g. pnorm)\n * @param {number} crit - critical value for the test (e.g. z-score or t-score)\n * @param {string} tail - which tail to use (\"left\", \"right\", or \"both\")\n * @param {Array} params - additional parameters to CDF function\n * @returns {number} - a p-value for the test\n */\nexport function getPValue(pfun, crit, tail, params = []) {\n\n   if (tail === \"left\") {\n      return(pfun(crit, ...params));\n   }\n\n   if (tail === \"right\") {\n      return(1 - pfun(crit, ...params));\n   }\n\n   if (tail === \"both\") {\n      let p = pfun(crit, ...params);\n      return min([p, 1 - p]) * 2;\n   }\n}\n\n\n/**\n * Makes one-sample t-test for a mean\n * @param {number[]} x - vector with sample values\n * @param {number} mu - assumed mean value for population (H0)\n * @param {number} alpha - significance level (used to compute confidence interval)\n * @param {string} tail - which tail to use (\"left\", \"right\", or \"both\")\n * @returns {Object} - a JSON with test results\n */\nexport function tTest1(x, mu = 0, alpha = 0.05, tail = \"both\") {\n\n   if (typeof(mu) !== \"number\") {\n      throw Error(\"Parameter 'mu' should be a number.\");\n   }\n\n   const nx = x.length;\n\n   const effectExpected = mu;\n   const effectObserved = mean(x);\n   const se = sd(x) / Math.sqrt(nx);\n   const tValue = (effectObserved - effectExpected) / se;\n   const DoF = nx - 1\n   const errMargin = qt(1 - alpha/2, DoF) * se;\n\n   return {\n      test: \"One sample t-test\",\n      effectExpected: mu,\n      effectObserved: effectObserved,\n      se: se,\n      tValue: tValue,\n      alpha: alpha,\n      tail: tail,\n      DoF: DoF,\n      pValue: getPValue(pt, tValue, tail, [DoF]),\n      ci: [effectObserved - errMargin, effectObserved + errMargin]\n   };\n}\n\n/**\n * Makes two-sample t-test for a difference of means assuming population variances equal\n * @param {number[]} x - vector with sample 1 values\n * @param {number[]} y - vector with sample 2 values\n * @param {number} alpha - significance level (used to compute confidence interval)\n * @param {string} tail - which tail to use (\"left\", \"right\", or \"both\")\n * @returns {Object} - a JSON with test results\n */\nexport function tTest2(x, y, alpha = 0.05, tail = \"both\") {\n   const nx = x.length;\n   const mx = mean(x);\n   const my = mean(y);\n   const ny = y.length;\n\n   const effectExpected = 0;\n   const effectObserved = mx - my;\n   const se = Math.sqrt( (sd(x)**2 / nx) + (sd(y)**2 / ny));\n   const tValue = (effectObserved - effectExpected) / se;\n   const DoF = (nx - 1) + (ny - 1);\n   const errMargin = qt(1 - alpha/2, DoF) * se;\n\n   return {\n      test: \"Two sample t-test\",\n      effectExpected: effectExpected,\n      effectObserved: effectObserved,\n      se: se,\n      tValue: tValue,\n      alpha: alpha,\n      tail: tail,\n      DoF: DoF,\n      pValue: getPValue(pt, tValue, tail, [DoF]),\n      ci: [effectObserved - errMargin, effectObserved + errMargin]\n   };\n}\n\n/**********************************************\n *\n * Functions for computing single statistics  *\n **********************************************/\n\n/**\n * Computes kurtosis of values\n * @param {number[]} x - vector with values\n * @returns {number}\n */\nexport function kurtosis(x) {\n   let n = x.length;\n   let m = mean(x);\n\n   let m4 = 0.0;\n   let m2 = 0.0;\n   for (let i = 0; i < n; i++) {\n      m2 = m2 + Math.pow((x[i] - m), 2);\n      m4 = m4 + Math.pow((x[i] - m), 4);\n   }\n\n   return (m4/n) / Math.pow((m2/n), 2);\n}\n\n\n/**\n * Computes skewness of values\n * @param {number[]} x - vector with values\n * @returns {number}\n */\nexport function skewness(x) {\n   let n = x.length;\n   let m = mean(x);\n\n   let m3 = 0.0;\n   let m2 = 0.0;\n   for (let i = 0; i < n; i++) {\n      m2 = m2 + Math.pow((x[i] - m), 2);\n      m3 = m3 + Math.pow((x[i] - m), 3);\n   }\n\n   return (m3/n) / Math.pow((m2/n), 1.5);\n}\n\n\n/**\n * Finds smallest value in a vector\n * @param {number[]} x - vector with values\n * @returns {number}\n */\nexport function min(x) {\n   let n = x.length;\n   let min = Number.POSITIVE_INFINITY\n\n   while (n--) min = x[n] < min ? x[n] : min;\n   return min;\n}\n\n\n/**\n * Finds largest value in a vector\n * @param {number[]} x - vector with values\n * @returns {number}\n */\nexport function max(x) {\n   let n = x.length;\n   let max = Number.NEGATIVE_INFINITY\n\n   while (n--) max = x[n] > max ? x[n] : max;\n   return max;\n}\n\n\n/**\n * Computes sum of all values in a vector\n * @param {number[]} x - vector with values\n * @returns {number}\n */\nexport function sum(x) {\n   let s = 0;\n   for (let i = 0; i < x.length; i++) {\n      s = s + x[i];\n   }\n\n   return s;\n}\n\n\n/**\n * Computes product of all value in a vector\n * @param {number[]} x - vector with values\n * @returns {number}\n */\nexport function prod(x) {\n   let p = 1;\n   for (let i = 0; i < x.length; i++) {\n      p = p * x[i];\n   }\n\n   return p;\n}\n\n\n/**\n * Computes mean (average) value for a vector\n * @param {number[]} x - vector with values\n * @returns {number}\n */\nexport function mean(x) {\n   return sum(x) / x.length;\n}\n\n\n/**\n * Computes covariance between two vectors\n * @param {number[]} x - vector with values\n * @param {number[]} y - vector with values\n * @param {boolean} biased - compute a biased version with n degrees of freedom or not (with n-1).\n * @param {number} mx - mean of x values (if already known)\n * @param {number} my - mean of y values (if already known)\n * @returns {number}\n */\nexport function cov(x, y, biased = false, mx = undefined, my = undefined) {\n\n   const n = x.length;\n\n   if (y.length !== n) {\n      throw Error(\"Vectors 'x' and 'y' must have the same length.\");\n   }\n\n   if (n < 2) {\n      throw Error(\"Vectors 'x' and 'y' must have at least two values.\");\n   }\n\n   if (mx === undefined) mx = mean(x);\n   if (my === undefined) my = mean(y);\n\n   let cov = 0;\n   for (let i = 0; i < n; i++) {\n      cov = cov + (x[i] - mx) * (y[i] - my);\n   }\n\n   return cov / (biased ? n : n - 1);\n}\n\n\n/**\n * Computes variance for a vector\n * @param {number[]} x - vector with values\n * @param {boolean} biased - compute a biased version with n degrees of freedom or not (with n-1).\n * @param {number} m - mean value (e.g. if already computed).\n * @returns {number}\n */\nexport function variance(x, biased = false, m = undefined) {\n   return cov(x, x, biased, m, m);\n}\n\n\n/**\n * Computes standard deviation for a vector\n * @param {number[]} x - vector with values\n * @param {boolean} biased - compute a biased version with n degrees of freedom or not (with n-1).\n * @param {number} m - mean value (e.g. if already computed).\n * @returns {number}\n */\nexport function sd(x, biased = false, m = undefined) {\n   return Math.sqrt(variance(x, biased, m));\n}\n\n\n/**\n * Computes correlation between two vectors\n * @param {number[]} x - vector with values\n * @param {number[]} y - vector with values\n * @param {string} method - which method to use (\"pearson\" or \"spearman\")\n * @returns {number}\n */\nexport function cor(x, y, method = \"pearson\") {\n\n   if (method === \"spearman\") {\n      return cor(rank(x), rank(y));\n   }\n\n   return cov(x, y) / (sd(x) * sd(y));\n}\n\n\n\n/***************************************************\n * Functions for computing vectors of statistics   *\n ***************************************************/\n\n\n/**\n * Computes a p-th quantile/quantiles for a numeric vector\n * @param {number[]} x - vector with values\n * @param {number|number[]} p - probability (one value or a vector)\n * @returns {number}\n */\nexport function quantile(x, p) {\n\n   x = sort(x);\n   const n = x.length;\n\n   if (!Array.isArray(p)) p = [p];\n   if (typeof(p[0]) !== \"number\" || min(p) < 0 || max(p) > 1) {\n      throw new Error(\"Parameter 'p' must be between 0 and 1 (both included).\");\n   }\n\n   function q(x, p) {\n      const h = (n - 1) * p + 1;\n      const n1 = Math.floor(h);\n      const n2 = Math.ceil(h);\n      return x[n1 - 1] + (x[n2 - 1] - x[n1 - 1]) * (h - Math.floor(h));\n   }\n\n   const out =  p.map(v => q(x, v));\n   return p.length == 1 ? out[0] : out;\n}\n\n\n/**\n * Generate a sequence of n numbers between min and max.\n * @param {number} min - first value in the sequence\n * @param {number} max - last value in the sequence\n * @param {number} n - number of values in the sequence\n * @returns {number[]} array with the sequence values\n */\nexport function seq(min, max, n) {\n\n   if (n < 2) {\n      throw new Error(\"Parameter 'n' should be ≥ 2.\");\n   }\n\n   if (n === undefined && Number.isInteger(min) && Number.isInteger(max)) {\n      n = max - min + 1;\n   }\n\n   const step = (max - min + 0.0) / (n - 1 + 0.0)\n   let out = [...Array(n)].map((x, i) => min + i * step);\n\n   // if step is smaller than 1 round values to remove small decimals accidentally added by JS\n   if (Math.abs(step) < 1) {\n      const r = Math.pow(10, Math.round(-Math.log10(step)) + 1);\n      out = out.map(v => Math.round((v + Number.EPSILON) * r) / r)\n   }\n\n   return(out)\n}\n\n\n/**\n * Finds a range of values in a vector (min and max)\n * @param {number[]} x - vector with values\n * @returns {number[]} array with min and max values\n */\nexport function range(x) {\n   return [min(x), max(x)];\n}\n\n\n/**\n * Computes a range of values in a vector with a margin\n * @param {number[]} x - vector with values\n * @param {number} margin - margin in parts of one (e.g. 0.1 for 10% or 2 for 200%)\n * @returns{number[]} array with marginal range boundaries\n */\nexport function mrange(x, margin = 0.05) {\n   const mn = min(x);\n   const mx = max(x);\n   const d = mx - mn;\n\n   return [mn - d * margin, max(x) + d * margin];\n}\n\n\n/**\n * Splits range of vector values into equal intervals\n * @param {number[]} x - vector with values\n * @param {number} n - number of intervals\n * @returns {number[]} vector with boundaries of the intervals\n */\nexport function split(x, n) {\n   if (x === undefined || !Array.isArray(x) || x.length < 2) {\n      throw new Error(\"split: 'x' must bet a vector with numbers.\");\n   }\n\n   if (n === undefined || n < 2) {\n      throw new Erro(\"split: 'n' must be a positive integer number.\");\n   }\n\n   const mn = min(x);\n   const mx = max(x);\n\n   if (mn === mx) {\n      throw new Error(\"split: values in a vector 'x' should vary.\");\n   }\n\n   const step = (mx - mn) / n;\n   return Array.from({length: n + 1}, (v, i) => mn + i * step + 0.0);\n}\n\n\n/**\n * Counts how many values from a vector falls into provided intervals (bins)\n * @param {number[]} x - vector with values\n * @param {number[]} bins - vector with bins boundaries\n * @returns {number[]} vector with counts for each bean\n */\nexport function count(x, bins) {\n\n   if (x === undefined || !Array.isArray(x) ||x.length < 2) {\n      throw new Error(\"count: 'x' must be a vector with numbers.\")\n   }\n\n   if (bins === undefined || !Array.isArray(bins) || bins.length < 2) {\n      throw new Error(\"count: 'bins' must be a vector with numbers.\")\n   }\n\n   const n = bins.length;\n\n   // add a bit extra to right side of the last bin\n   bins[n - 1] = bins[n - 1] * 1.0001\n\n   // count\n   let counts = Array(n - 1).fill(0);\n   for (let i = 0; i < x.length; i++) {\n      for (let j = 0; j < n - 1; j++) {\n         if (x[i] >= bins[j] && x[i] < bins[j + 1]) counts[j] = counts[j] + 1;\n      }\n   }\n   return counts;\n}\n\n\n/**\n * Computes middle points between values of a vector\n * @param {number[]} x - vector with values\n * @returns {number[]} vector with middle points\n */\nexport function mids(x) {\n   return x.slice(1).map((v, i) => (0.5 * (v + x[i])));\n}\n\n\n/**\n * Computes difference between all adjacent values in a vector\n * @param {number[]} x - vector with values\n * @returns {number[]} vector with the differences\n */\nexport function diff(x) {\n   return x.slice(1).map( (y, i) => (y - x[i]));\n}\n\n\n/**\n * Finds outliers in a vector based on inter-quartile range distance\n * @param {Array} x - vector with values\n * @param {number} Q1 - first quartile (optional parameter)\n * @param {Array} Q3 - third quartile (optional parameter)\n * @returns {Array} vector with outliers or empty vector if none were found.\n */\nexport function getOutliers(x, Q1 = undefined, Q3 = undefined) {\n\n   if (Q1 === undefined) Q1 = quantile(x, 0.25);\n   if (Q3 === undefined) Q3 = quantile(x, 0.75);\n\n   const IQR = Q3 - Q1;\n   const bl = Q1 - 1.5 * IQR\n   const bu = Q3 + 1.5 * IQR\n   return(x.filter(v => v < bl || v > bu));\n}\n\n\n/**\n * Returns ranks of values in a vector (ranks start from 1, not 0)\n * @param {number[]} x - vector with values\n * @returns {number[]} vector with ranks\n */\nexport function rank(x) {\n   const y = [...x].sort((a, b) => a - b);\n   return(x.map(v => y.indexOf(v) + 1));\n}\n\n\n/**\n * Generate probability points for QQ plot\n * @param {number} n - number of points\n * @returns {Array} a sequence of probabilities between 0 and 1\n */\nexport function ppoints(n) {\n   const a = n < 10 ? 3.0/8.0 : 0.5;\n   return Array.from({length: n}, (v, i) => (i + 1 - a) / (n + (1 - a) - a));\n}\n\n\n/**\n * Computes cumulative sums for the vector values\n * @param {number[]} x - vector with values\n * @returns {number[]}\n */\nexport function cumsum(x) {\n   let s = 0;\n   return x.map(v => s += v);\n}\n\n\n\n/***********************************************\n * Functions for theoretical distribution      *\n ***********************************************/\n\n\n/**\n * Generates 'n' random numbers from a uniform distribution\n * @param {number} n - amount of numbers to generate\n * @param {number} a - smallest value (min) of the population\n * @param {number} b - largest value (max) of the population\n * @returns {number[]} vector with generated numbers\n */\nexport function runif(n, a = 0, b = 1) {\n   let out = Array(n);\n   for (let i = 0; i < n; i++) out[i] = (a + Math.random() * (b - a));\n   return out;\n}\n\n\n/**\n * Probability density function for uniform distribution\n * @param {Array} x - vector of values\n * @param {number} a - smallest value (min) of the population\n * @param {number} b - largest value (max) of the population\n * @returns {Array} vector with densities\n */\nexport function dunif(x, a = 0, b = 1) {\n\n   if (!Array.isArray(x)) x = [x];\n\n   const n = x.length;\n   const A = 1 / (b - a);\n   let d = Array(n);\n\n   for (let i = 0; i < n; i++) {\n      d[i] = (x[i] < a || x[i] > b ) ? 0 : A;\n   }\n\n   return d;\n}\n\n\n/**\n * Cumulative distribution function for uniform distribution\n * @param {Array} x - vector of values\n * @param {number} a - smallest value (min) of the population\n * @param {number} b - largest value (max) of the population\n * @returns {Array} vector with probabilities\n */\nexport function punif(x, a = 0, b = 1) {\n\n   if (!Array.isArray(x)) x = [x];\n\n   const n = x.length;\n   let p = Array(n);\n   for (let i = 0; i < n; i++) {\n      if (x[i] < a) {\n         p[i] = 0;\n      } else if (x[i] > b) {\n         p[i] = 1;\n      } else {\n         p[i] = (x[i] - a) / (b - a)\n      }\n   }\n\n   return p;\n}\n\n\n /**\n * Generates 'n' random numbers from a normal distribution\n * @param {number} n - amount of numbers to generate\n * @param {number} mu - average value of the population\n * @param {number} sigma - standard deviation of the population\n * @returns {Array} vector with generated numbers\n */\nexport function rnorm(n, mu = 0, sigma = 1) {\n\n   let out = Array(n);\n   for (let i = 0; i < n; i ++) {\n      const a = Math.sqrt(-2 * Math.log(Math.random()));\n      const b = 2 * Math.PI * Math.random();\n      out[i] = (a * Math.sin(b) * sigma + mu);\n   }\n\n   return out;\n}\n\n\n/**\n * Probability density function for normal distribution\n * @param {Array} x - vector of values\n * @param {number} mu - average value of the population\n * @param {number} sigma - standard deviation of the population\n * @returns {Array} vector with densities\n */\nexport function dnorm(x, mu = 0, sigma = 1) {\n\n   if (!Array.isArray(x)) x = [x];\n\n   const n = x.length;\n   const A = 1 / (Math.sqrt(2 * Math.PI) * sigma);\n   const frac = -0.5 / sigma ** 2;\n\n   let d = Array(n);\n   for (let i = 0; i < n; i++) {\n      const df = x[i] - mu;\n      d[i] = A * Math.exp(frac * df * df);\n   }\n\n   return x.length === 1 ? d[0] : d;\n}\n\n\n/**\n * Cumulative distribution function for normal distribution\n * @param {Array} x - vector of values\n * @param {number} mu - average value of the population\n * @param {number} sigma - standard deviation of the population\n * @returns {Array} vector with probabilities\n */\nexport function pnorm(x, mu = 0, sigma = 1) {\n\n   if (!Array.isArray(x)) x = [x];\n\n   const n = x.length;\n   const frac = 1 / (Math.sqrt(2) * sigma);\n\n   let p = Array(n);\n   for (let i = 0; i < n; i++) {\n      p[i] = 0.5 * (1 + erf((x[i] - mu) * frac))\n   }\n\n   return p.length === 1 ? p[0] : p;\n}\n\n/**\n * Inverse cumulative distribution function for normal distribution\n * @param {number|number[]} p - vector of probabilities or a single probability value\n * @param {number} mu - average value of the population\n * @param {number} sigma - standard deviation of the population\n * @returns {number|number[]} vector with quantiles or single quantile value\n */\nexport function qnorm(p, mu = 0, sigma = 1) {\n\n   if (Array.isArray(p)) {\n      return p.map(v => qnorm(v, mu, sigma));\n   }\n\n   if (mu !== 0 || sigma !== 1) {\n      return qnorm(p) * sigma + mu;\n   }\n\n   if (p < 0 || p > 1) {\n      throw Error(\"Parameter 'p' must be between 0 and 1.\");\n   }\n\n   if (p < 0.0000000001) return -Infinity;\n   if (p > 0.9999999999) return +Infinity;\n\n   const SP1 = 0.425;\n   const SP2 = 5.0;\n   const C1 = 0.180625;\n   const C2 = 1.6;\n\n   const a0 = 3.3871327179;\n   const a1 = 5.0434271938 * 10;\n   const a2 = 1.5929113202 * 100;\n   const a3 = 5.9109374720 * 10;\n   const b1 = 1.7895169469 * 10;\n   const b2 = 7.8757757664 * 10;\n   const b3 = 6.7187563600 * 10;\n\n   const c0 = 1.4234372777;\n   const c1 = 2.7568153900;\n   const c2 = 1.3067284816;\n   const c3 = 1.7023821103 * 0.1;\n   const d1 = 7.3700164250 * 0.1;\n   const d2 = 1.2021132975 * 0.1;\n\n   const e0 = 6.6579051150;\n   const e1 = 3.0812263860;\n   const e2 = 4.2868294337 * 0.1;\n   const e3 = 1.7337203997 * 0.01;\n   const f1 = 2.4197894225 * 0.1;\n   const f2 = 1.2258202635 * 0.01;\n\n   const q = p - 0.5;\n   let r;\n\n   if (Math.abs(q) <= SP1) {\n      r = C1 - q * q;\n      return q * (((a3 * r + a2) * r + a1) *r + a0) / (((b3 * r + b2) * r + b1) * r + 1.0);\n   }\n\n   r = q < 0 ? p : 1 - p;\n   r = Math.sqrt(-Math.log(r));\n   let res;\n\n   if (r <= SP2) {\n      r = r - C2;\n      res = (((c3 * r + c2) * r + c1) * r + c0) / ((d2 * r + d1) * r + 1.0);\n   } else {\n      r = r - SP2;\n      res = (((e3 * r + e2) * r + e1) + e0) / ((f2 * r + f1) * r + 1.0);\n   }\n\n   return q < 0 ? -res : res;\n}\n\n/**\n * Probability density function for Student's t-distribution\n * @param {number|number[]} t - t-value or a vector of t-values\n * @param {number} dof - degrees of freedom\n */\nexport function dt(t, dof) {\n\n   if (dof < 0) {\n      throw new Error(\"Parameter 'dof' should be a positive number.\");\n   }\n\n   if (Array.isArray(t)) {\n      return t.map(v => dt(v, dof));\n   }\n\n   const pow = -0.5 * (dof + 1);\n   const A = 1 / (Math.sqrt(dof) * beta(0.5, dof/2));\n   return (A * Math.pow((1 + t * t / dof), pow));\n}\n\n\n/**\n * Cumulative distribution function for Student's t-distribution\n * @param {number|number[]} t - t-value or a vector of t-values\n * @param {number} dof - degrees of freedom\n */\nexport function pt(t, dof) {\n\n   if (dof === undefined || dof === null || dof < 1) {\n      throw Error(\"Parameter 'dof' (degrees of freedom) must be an integer number >= 1.\");\n   }\n\n   if (Array.isArray(t)) {\n      return t.map(v => pt(v, dof));\n   }\n\n   // since distribution in symmetric we can use only left tail\n   if (t === 0) return 0.5;\n   if (t === -Infinity) return 0;\n   if (t === Infinity) return 1;\n   if (t > 0) return (1 - pt(-t, dof));\n\n   return integrate((x) => dt(x, dof), -Infinity, t);\n}\n\n\n/**\n * Inverse cumulative distribution function for Student's t-distribution\n * @param {number|number[]} p - probability or vector with probabilities\n * @param {number} dof - degrees of freedom\n */\nexport function qt(p, dof) {\n\n   if (dof === undefined || dof === null || dof < 1) {\n      throw Error(\"Parameter 'dof' (degrees of freedom) must be an integer number >= 1.\");\n   }\n\n   if (p < 0 || p > 1) {\n      throw Error(\"Parameter 'p' must be between 0 and 1.\");\n   }\n\n   if (Array.isArray(p)) {\n      return p.map(v => qt(v, dof));\n   }\n\n   if (p < 0.0000000001) return -Infinity;\n   if (p > 0.9999999999) return +Infinity;\n\n\n   // simple cases — exact solutions\n   if (dof === 1) {\n      return Math.tan(Math.PI * (p - 0.5));\n   }\n\n   if (dof === 2) {\n      return 2 * (p - 0.5) * Math.sqrt(2 / (4 * p * (1 - p)));\n   }\n\n   // approximation\n\n   let sign = -1;\n   if (p >= 0.5){\n      sign = +1 ;\n      p = 2 * (1 - p);\n   } else {\n      sign = -1;\n      p = 2 * p;\n   }\n\n   const a = 1.0 / (dof - 0.5);\n   const b = 48.0 / (a ** 2);\n   let c = ((20700 * a / b - 98) * a - 16) * a + 96.36;\n   const d = ((94.5 / (b + c) - 3.0)/b + 1.0) * Math.sqrt(a * Math.PI / 2) * dof;\n\n   let x = d * p;\n   let y = x ** (2.0/dof);\n\n   if (y > 0.05 + a) {\n\n      // asymptotic inverse expansion about normal\n      x = qnorm(p * 0.5);\n      y = x ** 2;\n\n      if (dof < 5) {\n         c = c + 0.3 * (dof - 4.5) * (x + 0.6);\n      }\n\n      c = (((0.05 * d * x - 5.0) * x - 7.0) * x - 2.0) * x + b + c;\n      y = (((((0.4 * y + 6.3) * y + 36.0) * y + 94.5) / c - y - 3.0)/b + 1.0) * x;\n      y = a * (y ** 2);\n      y = y > 0.002 ? Math.exp(y) - 1.0 : 0.5 * (y ** 2) + y;\n   } else {\n      y = ((1.0 / (((dof + 6.0)/(dof * y) - 0.089 * d - 0.822) * (dof + 2.0) * 3.0) + 0.5/(dof + 4.0)) * y - 1.0) *\n         (dof + 1.0)/(dof + 2.0) + 1.0/y;\n   }\n\n   return sign * Math.sqrt(dof * y);\n}\n\n\n\n/**\n * Probability density function for F-distribution\n * @param {number|number[]} F - F-value or a vector of t-values\n * @param {number} d1 - degrees of freedom\n * @param {number} d2 - degrees of freedom\n */\nexport function df(F, d1, d2) {\n\n   if (F < 0 || d1 < 0 || d2 < 0) {\n      throw new Error(\"All 3 parameters must be positive.\");\n   }\n\n   if (d2 <= d1) {\n      throw new Error(\"Parameter 'd1' must be larger 'd2'.\");\n   }\n\n   if (Array.isArray(F)) {\n      return F.map(v => df(v, d1, d2));\n   }\n\n   return Math.sqrt( ( (d1 * F)**d1 * d2**d2) / ((d1 * F + d2)**(d1 + d2))) / (F * beta(d1/2, d2/2))\n}\n\n\n/**\n * Cumulative distribution function for F-distribution\n * @param {number|number[]} F - F-value or a vector of t-values\n * @param {number} d1 - degrees of freedom\n * @param {number} d2 - degrees of freedom\n */\nexport function pf(F, d1, d2) {\n\n   if (F < 0 || d1 < 0 || d2 < 0) {\n      throw new Error(\"All 3 parameters must be positive.\");\n   }\n\n   if (d2 <= d1) {\n      throw new Error(\"Parameter 'd1' must be larger 'd2'.\");\n   }\n\n   if (Array.isArray(F)) {\n      return F.map(v => pf(v, d1, d2));\n   }\n\n   return ibeta(d1 * F / (d1 * F + d2), d1/2, d2/2)\n}\n\n\n\n/***********************************************\n * Functions for manipulations with values     *\n ***********************************************/\n\n\n/**\n * Sorts values in a vector\n * @param {Array} x - vector with values\n * @returns {Array} vector with sorted values\n */\nexport function sort(x, decreasing = false) {\n   return decreasing ? [...x].sort((a, b) => b - a) : [...x].sort((a, b) => a - b);\n}\n\n\n/**\n * Replicates values in x n times\n * @param {any} x - single value or a vector with values\n * @param {number} n - how many times to replicate\n */\nexport function rep(x, n) {\n\n   if (Array.isArray(n)) {\n      if (x.length != n.length) {\n         throw new Error(\"Parameter 'n' should be a single value or a vector of the same length as x.\");\n      }\n\n      let out = [];\n      for (let i = 0; i < n.length; i++) {\n         out.push(...rep([x[i]], n[i]));\n      }\n\n      return out;\n   }\n\n   if (!Array.isArray(x)) x = [x];\n   if (n <= 1) return x;\n\n   const nx = x.length;\n   x.length = nx * n\n   for (let i = 0; i < n - 1; i ++) {\n      for (let j = 0; j < nx; j++) {\n         x[nx * (i + 1) + j] = x[j];\n      }\n   }\n\n   return x;\n}\n\n\n/**\n * Create a subset of vectors based on a vector of indices\n * @param {number[]} x - a vector with values\n * @param {number[]} indices - a vector with element indices (first index is 1 not 0!)\n */\nexport function subset(x, indices) {\n\n   if (!Array.isArray(x)) x = [x];\n   if (!Array.isArray(indices)) indices = [indices];\n\n   if (max(indices) > x.length || min(indices) < 1) {\n      throw new Error(\"Parameter 'indices' must have values between 1 and 'x.length'.\");\n   }\n\n   const n = indices.length;\n   let out = Array(n);\n   for (let i = 0; i < n; i++) {\n      out[i] = x[indices[i] - 1];\n   }\n\n   return out;\n}\n\n\n/**\n * Generate combination of all levels of vectors\n * @param {...} args - a sequence of vectors\n */\nexport function expandGrid(...args) {\n\n   const nargs = args.length;\n   const d = args.map(v => v.length);\n   let orep = prod(d);\n\n   let grid = Array(nargs);\n   let repFac = 1;\n\n   for (let i = 0; i < nargs; i++) {\n      const x = args[i];\n      const nx = x.length;\n      orep = orep/nx;\n      grid[i] = subset(x, rep(rep(seq(1, nx, nx), rep(repFac, nx)), orep));\n      repFac = repFac * nx;\n   }\n\n   return grid;\n}\n\n\n/**\n * Shuffles values in vector x using Fisher–Yates algorithm\n * @param {Array} x - a vector with values\n */\nexport function shuffle(x) {\n  let y = [...x];\n  let n = y.length;\n  let t, i;\n\n  while (n) {\n    i = Math.floor(Math.random() * n--);\n    t = y[n];\n    y[n] = y[i];\n    y[i] = t;\n  }\n\n  return y;\n}\n\n\n/**\n * Finds index of value in x which is closest to the value a\n * @param {number[]} x - a vector with values\n * @param {number}  a - a value\n */\nexport function closestIndex(x, a) {\n   const c = x.reduce((prev, curr) => Math.abs(curr - a) < Math.abs(prev - a) ? curr : prev);\n   return x.indexOf(c);\n}\n\n\n/**\n * Rounds number (or vector of numbers) to given amount of decimals\n * @param {number | number[]} x - a vector with values\n * @return {number | number[]}\n */\nexport function round(x, n = 0) {\n   if (Array.isArray(x)) {\n      return x.map(v => round(v, n));\n   }\n   return Number.parseFloat(x.toFixed(n));\n}\n\n/**\n * Standardize (mean center and sd scale) values from a vector\n * @param {number | number[]} x - a vector with values\n * @return {number} center - value for centering the values (if undefined, will use mean(x))\n * @return {number} scale - value for scaling the values (if undefined, will use sd(x))\n *\n */\nexport function scale(x, center = undefined, scale = undefined) {\n   if (center === undefined) center = mean(x);\n   if (scale === undefined) scale = sd(x);\n\n   const n = x.length;\n   let y = Array(n);\n\n   for (let i = 0; i < n; i++) {\n      y[i] = (x[i] - center) / scale;\n   }\n\n   return y;\n}\n\n\n\n/***************************************************************\n * Mathematical functions and methods needed for computations  *\n ***************************************************************/\n\n/**\n * Computes numeric integral for function \"f\" with limits (a, b)\n * @param {function} f - a reference to a function\n * @param {number} a - lower limit for integration\n * @param {number} b - upper limit for integration\n * @param {number} acc - absolute accuracy\n * @param {number} eps - relative accuracy\n * @param {number[]} oldfs - vector of values needed for recursion\n * @returns {number} result of integration\n */\nexport function integrate(f, a, b, acc = 0.000001, eps = 0.00001, oldfs = undefined) {\n\n   if (typeof(a) !== \"number\" || typeof(b) !== \"number\") {\n      throw Error(\"Parameters 'a' and 'b' must be numbers.\");\n   }\n\n   if (b < a) {\n      throw Error(\"Parameter 'b' must be larger 'a'.\");\n   }\n\n   // special case when left limit is minus infinity\n   if (a === -Infinity && b !== Infinity) {\n      return integrate((t) => f(b - (1 - t) / t) / (t ** 2), 0, 1);\n   }\n\n   // special case when right limit is plus infinity\n   if (a !== -Infinity && b === Infinity) {\n      return integrate((t) => f(a + (1 - t) / t) / (t ** 2), 0, 1);\n   }\n\n   // special case when both limits are infinite\n   if (a === -Infinity && b === Infinity) {\n      return integrate((t) => (f((1 - t) / t) + f((t - 1) / t)) / t ** 2, 0, 1);\n   }\n\n   // constants for splitting the integration interval\n   const x = [1/6, 2/6, 4/6, 5/6];\n   const w = [2/6, 1/6, 1/6, 2/6];\n   const v = [1/4, 1/4, 1/4, 1/4];\n   const p = [1, 0, 0, 1];\n\n   let n = x.length, h = b - a;\n   let fs;\n\n   if (oldfs === undefined) {\n      fs = x.map(v => f(a + v * h));\n   } else {\n      fs = new Array(n);\n      for (let k = 0, i = 0; i < n; i++) {\n         fs[i] = p[i] === 1 ? f(a + x[i] * h) : oldfs[k++];\n      }\n   }\n\n   let q4 = 0, q2 = 0;\n   for (let i = 0; i < n; i++) {\n      q4 += w[i] * fs[i] * h;\n      q2 += v[i] * fs[i] * h;\n   }\n\n   let tol = acc + eps * Math.abs(q4);\n   let err = Math.abs((q4 - q2)/3);\n\n   if (err < tol) return q4;\n\n   acc = acc / Math.sqrt(2.);\n   let mid = (a + b) / 2;\n   let left = fs.filter((v, i) => i < n/2);\n   let right = fs.filter((v, i) => i >= n/2);\n\n   let ql = integrate(f, a, mid, eps, acc, left);\n   let qr = integrate(f, mid, b, eps, acc, right);\n   return (ql + qr);\n}\n\n\n/**\n * Error function for normal distribution\n * @param {number} x - a number\n * @returns {number} value for erf\n */\nexport function erf(x) {\n\n  const sign = (x >= 0) ? 1 : -1;\n  x = Math.abs(x);\n\n  // constants\n  const a1 =  0.254829592;\n  const a2 = -0.284496736;\n  const a3 =  1.421413741;\n  const a4 = -1.453152027;\n  const a5 =  1.061405429;\n  const p  =  0.3275911;\n\n  // approximation\n  const t = 1.0 / (1.0 + p * x);\n  const y = 1.0 - (((((a5 * t + a4) * t) + a3) * t + a2) * t + a1) * t * Math.exp(-x * x);\n  return sign * y;\n}\n\n\n/**\n * Gamma function (approximation)\n * @param {number|number[]} z - argument (one value or a vector)\n * @returns {number} value of the Gamma function\n */\nexport function gamma(z) {\n\n   if (Array.isArray(z)) {\n      return z.map(v => gamma(v));\n   }\n\n   if (z <= 0) {\n      throw new Error(\"Gamma function only works with arguments > 0.\");\n   }\n\n   // coefficients\n   const p = [\n        676.5203681218851,\n      -1259.1392167224028,\n        771.32342877765313,\n       -176.61502916214059,\n         12.507343278686905,\n         -0.13857109526572012,\n          9.9843695780195716e-6,\n          1.5056327351493116e-7\n    ];\n\n   if (z < 0.5) {\n      return Math.PI / (Math.sin(Math.PI * z) + gamma(1 - z));\n   }\n\n   z = z - 1;\n   let x = 0.99999999999980993;\n\n   for (let i = 0; i < p.length; i++) {\n      x = x + p[i] / (z + i + 1);\n   }\n\n   const t = z + p.length - 0.5;\n   return Math.sqrt(2 * Math.PI) * Math.pow(t, z + 0.5) * Math.exp(-t) * x;\n}\n\n\n/**\n * Betta function (approximation)\n * @param {number} x - first argument (one value)\n * @param {number} y - second argument (one value)\n * @returns {number} value of the Beta function\n */\nexport function beta(x, y) {\n   return gamma(x) * gamma(y) / gamma(x + y);\n}\n\n\n/**\n * Incomplete Betta function (approximation via numeric integration)\n * @param {number} x - first argument (one value)\n * @param {number} a - second argument (one value)\n * @param {number} b - third argument (one value)\n * @returns {number} value of the function\n */\nexport function ibeta(x, a, b) {\n   if (x === 0) return 0;\n   if (x === 1) return 1;\n   if (b === 1) return x ** a;\n   if (a === 1) return (1 - (1 - x)**b);\n   return integrate((t) => t ** (a - 1) * (1 - t) ** (b - 1), 0, x) / beta(a, b);\n}\n","<script>\n   let showHelp = false;\n\n   const toggleHelp = () => showHelp = !showHelp;\n\n   const handleKeyPress = e => {\n      if (e.key === 'h') toggleHelp();\n   };\n\n   $: showHelp = window.location.hash === \"#help\";\n</script>\n\n<svelte:window on:keypress={handleKeyPress}/>\n<main class=\"graasta-app\">\n\n   <div class=\"content\">\n      <slot></slot>\n   </div>\n\n   {#if showHelp}\n   <div class=\"helptext\">\n      <slot name=\"help\"></slot>\n   </div>\n   {/if}\n\n</main>\n\n<style>\n\n/* main styles for graasta-app and children */\n:global(body) {\n   height: max-content;\n}\n\n:global(#graasta-app-container) {\n   height: max-content;\n   width: 100% !important;\n}\n\n.graasta-app {\n   font-family: Helvetica, Areal, Verdana, sans-serif;\n   display: block;\n   position: relative;\n   font-size: max(14px, 1vw);\n\n   aspect-ratio: 16/9;\n   min-width: 800px;\n\n   width: 100%;\n   height: auto;\n\n   box-sizing: border-box;\n   padding: 1em;\n   margin: 0 auto;\n   background: #fdfdfd;\n}\n\n.graasta-app  * {\n   box-sizing: border-box;\n   margin: 0;\n   padding: 0;\n}\n\n.graasta-app :glbal(.plot) {\n   box-shadow: 0px 0px 5px  #30303020;\n}\n\n.graasta-app .content {\n   width: 100%;\n   height: 100%;\n}\n\n/* help text and button */\n\n.helptext {\n   position: absolute;\n   top: 0;\n   width: 0;\n   left: 0;\n   bottom: 0;\n\n   z-index: 999;\n   background: white;\n   box-sizing: border-box;\n\n   width: 100%;\n   height: 100%;\n   padding: 1em;\n   margin: 0;\n   line-height: 1.35em;\n   font-size: 1em;\n   color: #303030;\n}\n\n.helptext :global(h2) {\n   padding: 0.25em 0 0.5em 0;\n}\n\n.helptext :global(p) {\n   padding: 0 0 0.5em 0;\n   line-height: 1.5em;\n   font-size: 1.2em;\n}\n\n</style>","export let colors = {\n   plots: {\n      // population colors\n      POPULATIONS_PALE: [\"#33668820\", \"#ff990020\"],\n      POPULATIONS: [\"#33668850\", \"#ff990050\"],\n      SAMPLES: [\"#336688\", \"#ff9900\"],\n\n      // statistics on plot legend\n      STAT_NAME: \"#808080\",\n      STAT_VALUE: \"#202020\"\n   }\n};\n\n\nexport function formatLabels(labels) {\n\n   if (!Array.isArray(labels)) labels = [labels];\n   let labelsStr = Array(length = labels.length);\n\n\n   for (let i = 0; i < labels.length; i++) {\n      labelsStr[i] =    \"<tspan fill=\" + colors.plots.STAT_NAME + \">\" + labels[i].name + \":</tspan> \" + labels[i].value;\n   }\n\n   return labelsStr;\n}","<script>\n   export let errormsg = undefined;\n</script>\n\n<fieldset class=\"app-control-area\">\n   <slot></slot>\n   {#if errormsg}<div class=\"app-control-error\">{errormsg}</div>{/if}\n</fieldset>\n\n<style>\n   .app-control-error {\n      padding: 0.5em 0.5em 0.25em 0.65em;\n      font-size: 0.75em;\n      color: crimson;\n   }\n\n   fieldset {\n      background: #f4f4f4;\n      margin: 0;\n      padding: 0.5em;\n      box-shadow: 0px 0px 2px  #30303020;\n      border: none;\n   }\n</style>","<script>\n   export let id;\n   export let label;\n</script>\n\n<div class=\"app-control\">\n   <label for=\"{id}\">{@html label}</label>\n   <slot></slot>\n</div>\n\n<style>\n   .app-control {\n      font-size: 1em;\n      margin: 0.25em 0 0 0;\n      padding: 0.15em 0.25em;\n      display: flex;\n      align-items: center;\n      justify-content: flex-begin;\n   }\n\n   .app-control > label {\n      height: 1.5em;\n      line-height: 1.5em;\n      flex: 0 0 90px;\n      max-width: 90px;\n   }\n\n   .app-control > slot {\n      width: 100%;\n   }\n\n   @media(min-width: 959px) {\n      .app-control > label {\n         flex: 0 0 120px;\n         max-width: 120px;\n      }\n   }\n\n   @media(min-width: 1279px) {\n      .app-control > label {\n         flex: 0 0 150px;\n         max-width: 150px;\n      }\n   }\n\n</style>","<script>\n   import AppControl from \"./AppControl.svelte\";\n\n   export let id;\n   export let label;\n   export let text;\n</script>\n\n<AppControl id={id} label={label} >\n   <button on:click>{text}</button>\n</AppControl>\n\n<style>\n\n\nbutton {\n   height: 1.5em;\n   font-size: 1em;\n   padding: 0 1em;\n   margin: 0;\n   color: #606060;\n   background: #e0e0e0;\n   box-shadow: none;\n   border: none;\n   border-radius: 3px;\n   white-space: nowrap;\n}\n\nbutton:hover {\n   color: #fafafa;\n   background: #606060;\n}\n\n</style>","<script>\n   import { fade } from 'svelte/transition';\n   import AppControl from \"./AppControl.svelte\";\n\n   export let id;\n   export let label;\n   export let options;\n   export let value = options[0];\n</script>\n\n<AppControl id={id} label={label} >\n\n   <div class=\"selector\">\n      {#each options as option (option)}\n      <div on:click={() => value = option} class=\"option\" class:selected={option==value}>{option}</div>\n      {/each}\n\n   </div>\n   <input name=\"{id}\" bind:value=\"{value}\">\n</AppControl>\n\n<style>\n   input {\n      display: none;\n   }\n\n   .selector {\n      position: relative;\n      box-sizing: border-box;\n      display: inline-block;\n      flex: 0 0 auto;\n      background: #e0e0e0;\n\n      font-size: 1em;\n      height: 1.5em;\n      line-height: 1.5em;\n      margin: 0;\n      padding: 0;\n      width: auto;\n      border-radius: 2px;\n\n      user-select: none;\n      -webkit-user-select: none;\n      -moz-user-select: none;\n\n      display: flex;\n   }\n\n   .option {\n      cursor: default;\n      padding: 0 0.5em;\n      margin: 0 1px;\n      color: #606060;\n      transition: background-color 0.5s ease;\n   }\n\n   .option.selected {\n      border-radius: 3px;\n      background-color: #606060;\n      color: #fefefe;\n   }\n\n</style>","<script>\n   import { createEventDispatcher } from \"svelte\";\n   import AppControl from \"./AppControl.svelte\";\n\n   export let id;\n   export let label;\n   export let value;\n   export let min;\n   export let max;\n   export let decNum = 1;\n   export let step = +((max - min) / 100).toFixed(4);\n\n   if (value < min || value > max) {\n      throw(\"The value is outside of the provided range.\");\n   }\n\n   const dispatch = createEventDispatcher();\n\n   let sliderElement;\n   let sliderContainer;\n   let isDragging = false;\n\n   const computeValue = (p) => {\n      const tmpValue = min + p * (max - min);\n\n      // strange construction below is needed for:\n      // a. make a value fractionated according to step\n      // b. get rid of small decimals added by JS due to loss of precision\n      return(+(Math.round(tmpValue / step) * step).toFixed(4));\n   }\n\n   const getRelativePosition = (e) => {\n      const sliderRect = sliderElement.getBoundingClientRect();\n      const parentRect = sliderContainer.getBoundingClientRect();\n      const minX = sliderRect.x;\n      const maxX = parentRect.x + parentRect.width;\n\n      return (e.clientX - minX) / (maxX - minX);\n   }\n\n   const startChanging = (e) => {\n      const p = getRelativePosition(e);\n      if (p < 0 || p > 1) return;\n      isDragging = p * 100 > width - 5 && p * 100 < width + 5;\n   }\n\n   const stopChanging = (e) => {\n      isDragging = false;\n      const p = getRelativePosition(e);\n      if (p < 0 || p > 1) return;\n\n      value = computeValue(p);\n   }\n\n   const changing = (e) => {\n      if (!isDragging) return;\n      const p = getRelativePosition(e);\n      if (p < 0 || p > 1) return;\n\n      value = computeValue(p);\n   }\n\n   $: width = (value - min) / (max - min) * 100;\n   $: dispatch(\"change\", value);\n</script>\n\n<AppControl id={id} label={label}>\n   <div\n      class=\"rangeSliderContainer\"\n      bind:this={sliderContainer}\n      on:mousewheel={changing}\n      on:mousemove={changing}\n      on:mouseup={stopChanging}\n      on:mousedown={startChanging}>\n\n      <div class=\"rangeSlider\" style=\"width:{width}%\" bind:this={sliderElement}></div>\n      <span>{value.toFixed(decNum)}</span>\n   </div>\n   <input type=\"range\" step={step} bind:value=\"{value}\" min={min} max={max}>\n</AppControl>\n\n<style>\n   .rangeSliderContainer {\n      position: relative;\n      box-sizing: border-box;\n      display: inline-block;\n      flex: 1 1 auto;\n      background: #e0e0e0;\n      height: 1.5em;\n      margin: 0;\n      padding: 0;\n      width: auto;\n      border-radius: 2px;\n\n      user-select: none;\n      -webkit-user-select: none;\n      -moz-user-select: none;\n\n   }\n\n   .rangeSlider {\n      position: relative;\n      display: inline-block;\n      background: #606060;\n      border-radius: 2px;\n\n      margin: 0;\n      padding: 0;\n      height: 100%;\n      cursor:default;\n      user-select: none;\n      -webkit-user-select: none;\n      -moz-user-select: none;\n\n   }\n\n   .rangeSliderContainer span {\n      display: inline-block;\n      position: absolute;\n      right: 0;\n      top: 0;\n      font-size: 0.85em;\n      padding: 1px 5px;\n      color: #606060;\n      mix-blend-mode: difference;\n      line-height: 1.6em;\n      user-select: none;\n      -webkit-user-select: none;\n      -moz-user-select: none;\n   }\n\n   input {\n      display: none;\n      width: 100%;\n   }\n</style>\n\n","import { noop, safe_not_equal, subscribe, run_all, is_function } from '../internal/index.mjs';\nexport { get_store_value as get } from '../internal/index.mjs';\n\nconst subscriber_queue = [];\n/**\n * Creates a `Readable` store that allows reading by subscription.\n * @param value initial value\n * @param {StartStopNotifier}start start and stop notifications for subscriptions\n */\nfunction readable(value, start) {\n    return {\n        subscribe: writable(value, start).subscribe\n    };\n}\n/**\n * Create a `Writable` store that allows both updating and reading by subscription.\n * @param {*=}value initial value\n * @param {StartStopNotifier=}start start and stop notifications for subscriptions\n */\nfunction writable(value, start = noop) {\n    let stop;\n    const subscribers = [];\n    function set(new_value) {\n        if (safe_not_equal(value, new_value)) {\n            value = new_value;\n            if (stop) { // store is ready\n                const run_queue = !subscriber_queue.length;\n                for (let i = 0; i < subscribers.length; i += 1) {\n                    const s = subscribers[i];\n                    s[1]();\n                    subscriber_queue.push(s, value);\n                }\n                if (run_queue) {\n                    for (let i = 0; i < subscriber_queue.length; i += 2) {\n                        subscriber_queue[i][0](subscriber_queue[i + 1]);\n                    }\n                    subscriber_queue.length = 0;\n                }\n            }\n        }\n    }\n    function update(fn) {\n        set(fn(value));\n    }\n    function subscribe(run, invalidate = noop) {\n        const subscriber = [run, invalidate];\n        subscribers.push(subscriber);\n        if (subscribers.length === 1) {\n            stop = start(set) || noop;\n        }\n        run(value);\n        return () => {\n            const index = subscribers.indexOf(subscriber);\n            if (index !== -1) {\n                subscribers.splice(index, 1);\n            }\n            if (subscribers.length === 0) {\n                stop();\n                stop = null;\n            }\n        };\n    }\n    return { set, update, subscribe };\n}\nfunction derived(stores, fn, initial_value) {\n    const single = !Array.isArray(stores);\n    const stores_array = single\n        ? [stores]\n        : stores;\n    const auto = fn.length < 2;\n    return readable(initial_value, (set) => {\n        let inited = false;\n        const values = [];\n        let pending = 0;\n        let cleanup = noop;\n        const sync = () => {\n            if (pending) {\n                return;\n            }\n            cleanup();\n            const result = fn(single ? values[0] : values, set);\n            if (auto) {\n                set(result);\n            }\n            else {\n                cleanup = is_function(result) ? result : noop;\n            }\n        };\n        const unsubscribers = stores_array.map((store, i) => subscribe(store, (value) => {\n            values[i] = value;\n            pending &= ~(1 << i);\n            if (inited) {\n                sync();\n            }\n        }, () => {\n            pending |= (1 << i);\n        }));\n        inited = true;\n        sync();\n        return function stop() {\n            run_all(unsubscribers);\n            cleanup();\n        };\n    });\n}\n\nexport { derived, readable, writable };\n","<script>\n\timport { onMount, setContext } from 'svelte';\n\timport { writable } from 'svelte/store';\n\n   /* input parameters */\n   export let limX = [undefined, undefined];    // limits for x-axis (in plot units) [min, max]\n   export let limY = [undefined, undefined];    // limits for y-axis (in plot units) [min, max]\n   export let title = \"\";                       // title of the plot\n   export let xLabel = \"\";                      // label for x-axis\n   export let yLabel = \"\";                      // label for y-axis\n   export let multiSeries = true;               // is the plot for one series or for many\n\n   /* constants for internal use */\n\n   // how big are margins (number of pixels in unit margin value) between axis and plot area if axis are shown\n   const AXES_MARGIN_FACTORS = {\n      \"small\": 30,\n      \"medium\": 40,\n      \"large\": 50\n   }\n\n   // number of ticks along each axis\n   const TICK_NUM = {\n      \"small\": 5,\n      \"medium\": 8,\n      \"large\": 12\n   };\n\n   // margin between plot series elements and data labels\n   const LABELS_MARGIN = {\n      \"small\": 10,\n      \"medium\": 15,\n      \"large\": 20\n   };\n\n   // line styles for different scales and types\n   const LINE_STYLES = {\n      small: [\"0\", \"3,3\", \"1,1\", \"3,1\"],\n      medium: [\"0\", \"5,5\", \"2,2\", \"5,2\"],\n      large: [\"0\", \"7,7\", \"3,3\", \"7,3\"],\n   }\n\n   // constant to make clip path ID unique\n   const clipPathID = \"plottingArea\" + Math.round(Math.random() * 10000);\n\n   /* parameters for internal use inside the component */\n   let axesWrapper;                                   // pointer to axes wrapper DOM element\n   let axesMargins = [0.034, 0.034, 0.034, 0.034];    // initial margins (will be multiplied to FACTORS)\n\n   /* reactive parameters to be shared with children via context */\n   const width = writable(100);                       // actual width of plotting area in pixels\n   const height = writable(100);                      // actual height of plotting area in pixels\n   const xLim = writable([undefined, undefined]);     // actual limits for x-axis in plot units\n   const yLim = writable([undefined, undefined]);     // actual limits for y-axis in plot units\n   const scale = writable(\"medium\");                  // scale factor (how big the shown plot is)\n   const isOk = writable(false);                      // are axes ready for drawing\n\n   /** Adds margins for x-axis (e.g. when x-axis must be shown) */\n   const addXAxisMargins = function() {\n      axesMargins[0] = 1;\n      axesMargins[2] = 0.5;\n      axesMargins[1] = axesMargins[1] > 0.5 ? axesMargins[1] : 0.5;\n      axesMargins[3] = axesMargins[3] > 0.5 ? axesMargins[3] : 0.5;\n   }\n\n   /** Adds margins for y-axis (e.g. when y-axis must be shown) */\n   const addYAxisMargins = function() {\n      axesMargins[1] = 1;\n      axesMargins[3] = 0.5;\n      axesMargins[0] = axesMargins[0] > 0.5 ? axesMargins[0] : 0.5;\n      axesMargins[2] = axesMargins[2] > 0.5 ? axesMargins[2] : 0.5;\n   }\n\n   /** Adjusts limits for x-axis (e.g. when new series is added)\n    *  @param {Array} newLim - vector with new limits  (two values)\n    */\n   const adjustXAxisLimits = function(newLim) {\n      if (!limX.some(v => v === undefined)) return;\n      xLim.update(lim => adjustAxisLimits(lim, newLim));\n   }\n\n   /** Adjusts limits for y-axis (e.g. when new series is added)\n    *  @param {Array} newLim - vector with new limits  (two values)\n    */\n   const adjustYAxisLimits = function(newLim) {\n      if (!limY.some(v => v === undefined)) return;\n      yLim.update(lim => adjustAxisLimits(lim, newLim));\n   }\n\n   /** Adjusts x- or y- axis limits (e.g. when new elements are added)\n    *  @param {Array} lim - vector with limits for current axis (two values)\n    *  @param {Array} newLim - vector with new limits  (two values)\n    *  @returns {Array} vector with rescaled values\n    *\n    *  The new limits are set separately for min and max. Either if current value is undefined or\n    *  if new value is outside the current limits (smaller than min or larger than max).\n    */\n   const adjustAxisLimits = function(lim, newLim) {\n\n      let adjustedLim = [\n         (lim[0] !== undefined && multiSeries === true && lim[0] < newLim[0]) ? lim[0] : newLim[0],\n         (lim[1] !== undefined && multiSeries === true && lim[1] > newLim[1]) ? lim[1] : newLim[1]\n      ];\n\n      // special case when both limits are zero\n      if (adjustedLim[0] === 0 && adjustedLim[1] === 0) {\n         adjustedLim = [-0.1, 0.1];\n      }\n\n      // special case when limits are equal (add ±5%)\n      if (adjustedLim[0] === adjustedLim[1]) {\n         adjustedLim = [adjustedLim[0] * 0.95, adjustedLim[0] * 1.05];\n      }\n\n      return adjustedLim;\n   }\n\n   /** Rescales x-values from plot coordinates to screen (SVG) coordinates\n    *  @param {Array} x - vector with coordinates (or objects size) in original plot coordinates\n    *  @param {Array} xLim - vector with current limits for x-axis in original plot coordinates\n    *  @param {number} width - width of coordinate system in pixels\n    *  @param {boolean} doSizeScreen - scale size of objects (true) or coordinates\n    *  @returns {Array} vector with rescaled values\n    */\n   const scaleX = function(x, xLim, width, doSizeScale = false) {\n      if (!$isOk  || x === undefined || !Array.isArray(x)) return undefined;\n\n      if (doSizeScale) {\n         // scale size of objects instead of coordinates\n         return x.map(v => v / (xLim[1] - xLim[0]) * (width - margins[1] - margins[3]));\n      }\n\n      return x.map(v => (v - xLim[0]) / (xLim[1] - xLim[0]) * (width - margins[1] - margins[3]) + margins[1]);\n   }\n\n   /** Rescales x-values from plot coordinates to screen (SVG) coordinates\n    *  @param {Array} x - vector with coordinates (or objects size) in original plot coordinates\n    *  @param {Array} xLim - vector with current limits for x-axis in original plot coordinates\n    *  @param {number} width - width of coordinate system in pixels\n    *  @param {boolean} doSizeScreen - scale size of objects (true) or coordinates\n    *  @returns {Array} vector with rescaled values\n    */\n   const scaleY = function(y, yLim, height, doSizeScale = false) {\n      if (!$isOk  || y === undefined || !Array.isArray(y)) return undefined;\n\n      if (doSizeScale) {\n         // scale size of objects instead of coordinates\n         return y.map(v => v / (yLim[1] - yLim[0]) * (height - margins[0] - margins[2]));\n      }\n\n      // for coordinates we also need to invert (flip) the y-axis\n      return y.map(v => (yLim[1] - v) / (yLim[1] - yLim[0]) * (height - margins[0] - margins[2]) + margins[2]);\n   }\n\n   /** Computes nice tick values for axis\n    * @param {Array} ticks - vector with ticks if alredy available (if not, new will be computed)\n    * @param {Array} lim - vector with axis limits tickets must be computed for\n    * @param {number} maxTickNum - maximum number of ticks to compute\n    * @param {boolean} round - round or not the fractions when computing nice numbers for the ticks\n    * @returns {Array} a vector with computed tick positions\n    */\n   const getAxisTicks = function(ticks, lim, maxTickNum, round = true) {\n\n      // if ticks are already provided do not recompute them\n      if (ticks !== undefined) return ticks;\n\n      // check if limits are ok\n      if (!Array.isArray(lim) || lim[0] === undefined || lim[1] === undefined) return undefined;\n\n      // get range as a nice number and compute min, max and steps for the tick sequence\n      const range = niceNum(lim[1] - lim[0], round);\n      const tickSpacing = niceNum(range / (maxTickNum - 1), round);\n      const tickMin = Math.ceil(lim[0] / tickSpacing) * tickSpacing;\n      const tickMax = Math.floor(lim[1] / tickSpacing) * tickSpacing;\n\n      // recompute maxTickNum\n      maxTickNum = Math.round((tickMax - tickMin + 1) / tickSpacing) + 1;\n\n      // create a sequence and return\n      ticks = [...Array(maxTickNum)].map((x, i) => tickMin + i * tickSpacing);\n\n      // if step is smaller than 1 round values to remove small decimals accidentiall added by JS\n      if (Math.abs(tickSpacing) < 1) {\n         const r = Math.pow(10, 1 + Math.round(-Math.log10(tickSpacing)));\n         ticks = ticks.map(v => Math.round((v + Number.EPSILON) * r) / r)\n      }\n\n      // make sure the ticks are not aligned with axes limits\n      return ticks.filter(x => x >= lim[0] & x <= lim[1]);\n   }\n\n   /** Computes a nice spacing value for a given range\n    * @param {numeric} localRange - a range (max - min)\n    * @param {boolean} round - round or not the fractions when computing the number\n    * @returns {numeric} the computed spacing value\n    */\n   function niceNum( localRange,  round) {\n\n      const exponent = Math.floor(Math.log10(localRange));\n      const fraction = localRange / Math.pow(10, exponent);\n      let niceFraction;\n\n      if (round) {\n         if (fraction < 1.5)\n            niceFraction = 1;\n         else if (fraction < 3)\n            niceFraction = 2;\n         else if (fraction < 7)\n            niceFraction = 5;\n         else\n            niceFraction = 10;\n      } else {\n         if (fraction <= 1)\n            niceFraction = 1;\n         else if (fraction <= 2)\n            niceFraction = 2;\n         else if (fraction <= 5)\n            niceFraction = 5;\n         else\n            niceFraction = 10;\n      }\n\n      return niceFraction * Math.pow(10, exponent);\n   }\n\n   /** Computes a scale level\n    * @param {numeric} width - width of plotting area in pixels\n    * @param {numeric} height - height of plotting area in pixels\n    * @returns {text} the scale level (\"small\", \"medium\" or \"large\")\n    */\n   function getScale(width, height) {\n      if (height < 300.2 || width < 300.2) return \"small\";\n      if (height < 600.2 || width < 600.2) return \"medium\";\n      return \"large\";\n   }\n\n   /* context with Axes constants, properties and methods to share with children */\n   let context = {\n\n      // methods\n      addXAxisMargins: addXAxisMargins,\n      addYAxisMargins: addYAxisMargins,\n      adjustXAxisLimits: adjustXAxisLimits,\n      adjustYAxisLimits: adjustYAxisLimits,\n      getAxisTicks: getAxisTicks,\n      scaleX: scaleX,\n      scaleY: scaleY,\n\n      // variables\n      isOk: isOk,\n      scale: scale,\n      width: width,\n      height: height,\n      xLim: xLim,\n      yLim: yLim,\n\n      // constants\n      LINE_STYLES: LINE_STYLES,\n      LABELS_MARGIN: LABELS_MARGIN,\n      TICK_NUM: TICK_NUM,\n   }\n\n\tsetContext('axes', context);\n\n   /* observer for the plotting area size */\n   var ro = new ResizeObserver(entries => {\n      for (let entry of entries) {\n         const cr = entry.contentRect;\n         width.update(x => cr.width);\n         height.update(x => cr.height);\n         scale.update(x => getScale(cr.width, cr.height));\n      }\n   });\n\n   onMount(() => {\n      ro.observe(axesWrapper);\n   });\n\n\n   // this is reactive in case if limX and limY are interactively changed by parent script\n   $: if (!limX.some(v => v === undefined)) xLim.update(v => limX);\n   $: if (!limY.some(v => v === undefined)) yLim.update(v => limY);\n\n   // computes real margins in pixels based on current scale\n   $: margins = axesMargins.map(v => v * AXES_MARGIN_FACTORS[$scale]);\n\n   // computes status which tells that axes limits look fine and it is safe to draw\n   // the status is based on the axis limits validity\n   $: isOk.update(v =>\n      Array.isArray($yLim) &&\n      Array.isArray($xLim) &&\n      $xLim.length === 2 &&\n      $yLim.length === 2 &&\n      !$yLim.some(v => v === undefined) &&\n      !$xLim.some(v => v === undefined) &&\n      !$yLim.some(v => isNaN(v)) &&\n      !$xLim.some(v => isNaN(v)) &&\n      $xLim[1] !== $xLim[0] &&\n      $yLim[1] !== $yLim[0]\n   )\n\n   // computes coordinates for clip path box\n   $: cpx = $isOk ? scaleX($xLim, $xLim, $width) : [0, 1];\n   $: cpy = $isOk ? scaleY($yLim, $yLim, $height) : [1, 0];\n</script>\n\n\n<div class=\"plot {'plot_' + $scale}\"  class:plot_error=\"{!$isOk}\">\n\n   <!-- plot title and axis labels -->\n   {#if title !== \"\"}<div class=\"axes__title\">{@html title}</div>{/if}\n   {#if yLabel !== \"\"}<div class=\"axes__ylabel\"><span>{@html yLabel}</span></div>{/if}\n   {#if xLabel !== \"\"}<div class=\"axes__xlabel\"><span>{@html xLabel}</span></div>{/if}\n\n   <!-- axes (coordinate system) -->\n   <div class=\"axes-wrapper\" bind:this=\"{axesWrapper}\" >\n      <svg preserveAspectRatio=\"none\" class=\"axes\">\n\n         <!-- define clipping path -->\n         <defs>\n            <clipPath id=\"{clipPathID}\">\n               <rect x=\"{cpx[0]}\" y=\"{cpy[1]}\" width = \"{cpx[1] - cpx[0]}\" height=\"{cpy[0] - cpy[1]}\"></rect>\n            </clipPath>\n         </defs>\n\n         <!-- axis and box -->\n         <slot name=\"xaxis\"></slot>\n         <slot name=\"yaxis\"></slot>\n\n         <!-- main plot content -->\n         <g clip-path=\"url(#{clipPathID})\">\n            <slot></slot>\n         </g>\n\n         <!-- axis and box -->\n         <slot name=\"box\"></slot>\n\n      </svg>\n   </div>\n\n   {#if !$isOk}\n   <p class=\"message_error\">\n      Axes component was not properly initialized. <br />\n      Add plot series (check that coordinates are numeric) or define axes limits manually.\n   </p>\n   {/if}\n\n</div>\n\n<style>\n\n   /* Plot (main container) */\n   :global(.plot) {\n      font-family: Arial, Helvetica, sans-serif;\n\n      display: grid;\n      grid-template-columns: min-content 1fr;\n      grid-template-rows: auto 1fr auto;\n      grid-template-areas:\n         \". title\"\n         \"ylab axes\"\n         \". xlab\";\n\n      box-sizing: border-box;\n      background: #fefefe;\n      min-width: 100px;\n      min-height: 50px;\n      width: 100%;\n      height: 100%;\n      padding: 0;\n      margin: 0;\n   }\n\n   :global(.plot_small) {\n      font-size: 11px;\n   }\n\n   :global(.plot_medium) {\n      font-size: 13px;\n   }\n\n   :global(.plot_large) {\n      font-size: 16px;\n   }\n\n   :global(.plot_error) {\n      display: flex;\n   }\n\n   :global(.plot_error > .axes-wrapper) {\n      display: none;\n   }\n\n   :global(.message_error) {\n      font-size: 1.2em;\n      color: crimson;\n      padding: 20px;\n      text-align: center;\n   }\n\n   /* Axes (coordinate system) */\n   :global(.axes-wrapper) {\n      grid-area: axes;\n      position:relative;\n      box-sizing: border-box;\n      display: flex;\n      padding: 0;\n      margin: 0;\n   }\n\n   :global(.axes) {\n      display: block;\n      box-sizing: border-box;\n      position:absolute;\n\n      padding: 0;\n      margin: 0;\n      height: 100%;\n      width: 100%;\n      max-height: 100%;\n      max-width: 100%;\n      min-height: 100%;\n      min-width: 100%;\n   }\n\n   :global(.axes__xlabel) {\n      grid-area: xlab;\n      font-size: 1.0em;\n      font-weight: 600;\n      padding: 0.25em;\n      text-align: center;\n   }\n\n\n   :global(.axes__ylabel) {\n      grid-area: ylab;\n      font-size: 1.0em;\n      font-weight: 600;\n      padding: 0.25em;\n      text-align: center;\n      vertical-align: middle;\n      display: flex;\n   }\n\n   :global(.axes__ylabel > span) {\n      width: 1.5em;\n      line-height: 1.5em;\n      display: inline-block;\n      writing-mode: vertical-rl;\n      transform: rotate(180deg);\n   }\n\n\n   :global(.axes__title) {\n      background: transparent;\n      grid-area: title;\n\n      font-size: 1.3em;\n      font-weight: bold;\n      line-height: 1.2em;\n      padding: 0.5em 0;\n      text-align: center;\n   }\n\n   /* Axis */\n   :global(.axis-labels) {\n      fill: #303030;\n      font-size: 0.95em;\n   }\n\n   /* Data labels */\n   :global(.labels) {\n      fill: #606060;\n      font-size: 0.90em;\n   }\n\n   :global(.labels) {\n      visibility: hidden;\n      transition:visibility 0.25s linear, opacity 0.25s linear;\n      opacity: 0;\n   }\n\n</style>","export const Colors = {\n   \"AXIS_LINE\": \"#303030\",\n   \"AXIS_TICK\": \"#606060\",\n   \"WHITE\":     \"#fff\",\n   \"BLACK\":     \"#000\",\n   \"GRAY\":      \"#909090\",\n   \"MIDDLEGRAY\": \"#dadada\",\n   \"LIGHTGRAY\": \"#f0f0f0\",\n   \"DARKGRAY\":  \"#606060\",\n\n   \"PRIMARY\": \"#2266ff\",\n   \"PRIMARY_TEXT\": \"#333\",\n}\n\n\n","<script>\n   import { getContext } from 'svelte';\n   import { Colors } from './Colors';\n\n   // input parameters\n   export let slot = \"xaxis\";          // slot the component must be placed in\n   export let ticks = undefined;       // vector with numeric tick positions in plot units\n   export let tickLabels = ticks;      // vector with labels for each tick\n   export let showGrid = false;        // logical, show or not grid lines\n\n   // set up tick mode\n   const tickMode = ticks === undefined ? \"auto\" : \"manual\";\n\n   /* sanity checks of input parameters */\n   if (slot !== \"xaxis\") {\n      throw(\"Component XAxis must have \\\"slot='xaxis'\\\" attribute.\")\n   }\n\n   if (ticks !== undefined && !Array.isArray(ticks)) {\n      throw(\"XAxis: 'ticks' must be a vector of numbers.\")\n   }\n\n   if (ticks !== undefined && !(Array.isArray(tickLabels) && tickLabels.length == ticks.length)) {\n      throw(\"XAxis: 'tickLabels' must be a vector of the same size as ticks.\")\n   }\n\n   /* styles for axis and grid lines */\n   const axisLineStyleStr = `stroke:${Colors.DARKGRAY};line-width:1px;`;\n   const gridLineStyleStr = `stroke:${Colors.MIDDLEGRAY};stroke-opacity:${showGrid?1:0};stroke-dasharray:2px;`;\n\n\n   // get axes context and adjust x margins\n   const axes = getContext('axes');\n   axes.addXAxisMargins();\n\n   // get reactive variables needed to compute coordinates\n   const xLim = axes.xLim;\n   const yLim = axes.yLim;\n   const axesWidth = axes.width;\n   const axesHeight = axes.height;\n   const scale = axes.scale;\n   const isOk = axes.isOk;\n\n   // reactive variables for coordinates of axis lines\n   $: x = axes.scaleX($xLim, $xLim, $axesWidth);\n   $: y = axes.scaleY($yLim, $yLim, $axesHeight);\n\n   // reactive variables for ticks and their coordinates\n   $: dy = $scale === \"small\" ? 7 : 10;\n   $: tickNum = axes.TICK_NUM[$scale];\n   $: ticks = tickMode === \"auto\" ? axes.getAxisTicks(undefined, $xLim, tickNum, true) : ticks;\n   $: tickLabels = tickMode === \"auto\" ? ticks : tickLabels;\n   $: ticksX = axes.scaleX(ticks, $xLim, $axesWidth);\n   $: ticksY = y === undefined ? undefined : [y[0], y[0] + dy];\n</script>\n\n{#if $isOk && x !== undefined && y !== undefined }\n   <g class=\"mdaplot__axis mdaplot__xaxis\">\n   {#each ticksX as tx, i}\n      <line x1=\"{tx}\" x2=\"{tx}\" y1=\"{y[0]}\" y2=\"{y[1]}\" style=\"{gridLineStyleStr}\"></line>\n      <line x1=\"{tx}\" x2=\"{tx}\" y1=\"{ticksY[0]}\" y2=\"{ticksY[1]}\" style=\"{axisLineStyleStr}\"></line>\n      <text x=\"{tx}\" y=\"{ticksY[1]}\" dx=\"0\" dy=\"{dy}\" class=\"mdaplot__axis-labels\" dominant-baseline=\"middle\" text-anchor=\"middle\">{tickLabels[i]}</text>\n   {/each}\n   <line x1=\"{x[0]}\" x2=\"{x[1]}\" y1=\"{y[0]}\" y2=\"{y[0]}\"  style=\"{axisLineStyleStr}\"></line>\n   </g>\n{/if}\n\n<style>\n</style>\n","<script>\n   import { getContext } from 'svelte';\n   import { Colors } from './Colors';\n\n   /* input parameters */\n\texport let xStart;\n   export let xEnd;\n   export let yStart;\n   export let yEnd;\n   export let lineColor = Colors.PRIMARY;\n   export let lineType = 1;\n   export let lineWidth = 1;\n\n   /* sanity check for input parameters */\n   if (!Array.isArray(xStart) || !Array.isArray(xEnd) || !Array.isArray(yStart) || !Array.isArray(yEnd)) {\n      throw(\"Segments: parameters 'xStart', 'yStart', 'xEnd' and 'yEnd' must be vectors.\")\n   }\n\n   const n = xStart.length;\n   if (xEnd.length !== n || yStart.length !== n || yEnd.length !== n) {\n      throw(\"Segments: parameters 'xStart', 'yStart', 'xEnd' and 'yEnd' should have the same length.\")\n   }\n\n   // get axes context and reactive variables needed to compute coordinates\n   const axes = getContext('axes');\n   const xLim = axes.xLim;\n   const yLim = axes.yLim;\n   const axesWidth = axes.width;\n   const axesHeight = axes.height;\n   const scale = axes.scale;\n\n   // reactive variables for coordinates of data points in pixels (and line style)\n   $: x1 = axes.scaleX(xStart, $xLim, $axesWidth);\n   $: x2 = axes.scaleX(xEnd, $xLim, $axesWidth);\n   $: y1 = axes.scaleY(yStart, $yLim, $axesHeight);\n   $: y2 = axes.scaleY(yEnd, $yLim, $axesHeight);\n   $: lineStyleStr = `stroke:${lineColor};stroke-width: ${lineWidth}px;stroke-dasharray:${axes.LINE_STYLES[$scale][lineType - 1]}`;\n\n</script>\n\n{#if x1 !== undefined && y1 !== undefined}\n   {#each x1 as v, i}\n      <line x1=\"{x1[i]}\" x2=\"{x2[i]}\" y1=\"{y1[i]}\" y2=\"{y2[i]}\" style=\"{lineStyleStr}\"></line>\n   {/each}\n{/if}\n\n<style>\n</style>\n","<script>\n   import { getContext } from 'svelte';\n   import { Colors } from './Colors';\n\n   /* input parameters */\n\texport let xValues;\n   export let yValues;\n   export let labels;\n   export let pos = 0;\n   export let faceColor = Colors.PRIMARY_TEXT;\n   export let borderColor = \"transparent\";\n   export let borderWidth = 0;\n   export let textSize = 1;\n\n   // text-anchor values depending on position\n   const textAnchors = [\"middle\", \"middle\", \"start\", \"middle\", \"end\"];\n\n   /* sanity check for input parameters */\n   if (!Array.isArray(xValues) || !Array.isArray(yValues) || xValues.length !== yValues.length) {\n      throw(\"TextLabels: parameters 'xValues' and 'yValues' must be vectors of the same length.\")\n   }\n\n   // multiply labels values if needed\n   $: {\n      const n = xValues.length;\n      if (!Array.isArray(labels)) labels = Array(n).fill(labels);\n\n      // workaround for an issue when xValues and yValues are changed in parent app\n      // but array of labels is still the same as in the\n      if (labels.length != n) labels = Array(n).fill(labels[0]);\n\n      // check that the length of labels vector is correct\n      if (labels.length !== n) {\n         throw(\"TextLabels: parameter 'labels' must be a single text value or a vector of the same size as 'x' and 'y'.\")\n      }\n   }\n\n   // get axes context and reactive variables needed to compute coordinates\n   const axes = getContext('axes');\n   const xLim = axes.xLim;\n   const yLim = axes.yLim;\n   const axesWidth = axes.width;\n   const axesHeight = axes.height;\n   const scale = axes.scale;\n\n   // reactive variables for coordinates of data points in pixels\n   $: x = axes.scaleX(xValues, $xLim, $axesWidth);\n   $: y = axes.scaleY(yValues, $yLim, $axesHeight);\n   $: dx = [0, 0, 1, 0, -1][pos] * axes.LABELS_MARGIN[$scale];\n   $: dy = [0, 1, 0, -1, 0][pos] * axes.LABELS_MARGIN[$scale];\n\n   // styles for bars and labels\n   $: textStyleStr = `fill:${faceColor};stroke-width:${borderWidth}px;stroke:${borderColor};font-size:${textSize}em;`;\n</script>\n\n{#if x !== undefined && y !== undefined}\n   {#each x as v, i}\n      <text style={textStyleStr} x={x[i]} y={y[i]} dx={dx} dy={dy} dominant-baseline=\"middle\" text-anchor={textAnchors[pos]}>{@html labels[i]}</text>\n   {/each}\n{/if}\n\n<style>\n</style>\n","<script>\n   import { getContext } from 'svelte';\n   import { Colors } from './Colors';\n\n   /* input parameters */\n\texport let left;\n   export let top;\n   export let dx = \"0\";\n   export let dy = \"1.25em\";\n   export let elements;\n   export let faceColor = Colors.PRIMARY_TEXT;\n   export let borderColor = \"transparent\";\n   export let borderWidth = 0;\n   export let textSize = 1;\n\n   // get axes context and reactive variables needed to compute coordinates\n   const axes = getContext('axes');\n   const xLim = axes.xLim;\n   const yLim = axes.yLim;\n   const axesWidth = axes.width;\n   const axesHeight = axes.height;\n   const scale = axes.scale;\n\n   // reactive variables for coordinates of data points in pixels\n   $: x = axes.scaleX([left], $xLim, $axesWidth);\n   $: y = axes.scaleY([top], $yLim, $axesHeight);\n\n   // styles for bars and labels\n   $: textStyleStr = `fill:${faceColor};stroke-width:${borderWidth}px;stroke:${borderColor};font-size:${textSize}em;`;\n</script>\n\n{#if x !== undefined && y !== undefined && elements.length > 0}\n   <text style={textStyleStr} x={x} y={y} dx={dx} dy={dy} dominant-baseline=\"middle\" text-anchor=\"start\">\n      {#each elements as el, i}\n         <tspan x={x} dx={dx} dy={i === 0 ? 0 : dy}>{@html el}</tspan>\n      {/each}\n   </text>\n{/if}","<script>\n\n   import { getContext } from 'svelte';\n   import { mrange } from 'mdatools/stat';\n   import { Colors } from './Colors';\n   import TextLabels from './TextLabels.svelte';\n\n   // input parameters\n\texport let xValues;\n   export let yValues;\n   export let marker = 1\n   export let title = \"\";\n   export let faceColor = \"transparent\";\n   export let borderColor = Colors.PRIMARY;\n   export let borderWidth = 1;\n   export let markerSize = 1;\n\n   // TODO: implement later\n   //export let labels = yValues;\n   //export let showLabels = \"no\"; // can be \"no\", \"hover\", \"always\"\n\n   const markers = [\"●\", \"◼\", \"▲\", \"▼\", \"⬥\", \"+\", \"*\", \"⨯\"];\n   let markerSymbol;\n\n   /* sanity check of input parameters */\n   if (typeof(marker) !== \"number\" || marker < 1 || marker > markers.length) {\n      throw(`ScatterSeries: parameter 'marker' must be a number from 1 to ${markers.length}.\"`);\n   }\n\n   // to access shared parameters and methods from Axes\n   const axes = getContext('axes');\n\n   /* reactive actions related to x-values, fires when there are changes in:\n    * - xValues\n    * - marker\n    */\n   $: {\n      if (!Array.isArray(xValues)) {\n         throw(\"ScatterSeries: parameter 'xValues' must be a numeric vector.\");\n      }\n\n      const xValuesRange = mrange(xValues, 0.05);\n      axes.adjustXAxisLimits(xValuesRange);\n\n      markerSymbol = \"\";\n      markerSymbol = markers[marker - 1];\n   }\n\n   /* reactive actions related to y-values, fires when there are changes in:\n    * - yValues\n    */\n   $: {\n      if (!Array.isArray(yValues) || xValues.length != yValues.length) {\n         throw(\"BarSeries: parameter 'yValues' must be a numeric vector of the same length as 'xValues'.\");\n      }\n\n      const yValuesRange = mrange(yValues, 0.05);\n      axes.adjustYAxisLimits(yValuesRange);\n   }\n\n</script>\n\n<g class=\"series series_scatter\" title=\"{title}\">\n   <TextLabels {xValues} {yValues} labels=\"{markerSymbol}\" textSize=\"{markerSize}\" {faceColor} {borderColor} {borderWidth} />\n</g>\n\n<style>\n:global(.marker) {\n   font-size: 1em;\n   cursor: default;\n}\n\n:global(.marker:hover) {\n   opacity: 90%;\n}\n\n:global(.series_scatter > *:hover + .labels_hover) {\n   visibility: visible;\n   opacity: 1;\n}\n</style>\n","<script>\n\n   import { getContext } from 'svelte';\n   import { mrange } from 'mdatools/stat';\n   import { Colors } from './Colors';\n\n   // input parameters\n\texport let xValues;\n   export let yValues;\n   export let title = \"\";\n   export let lineWidth = 1;\n   export let lineColor = Colors.PRIMARY;\n   export let lineType = 1;\n\n   /* sanity check of input parameters */\n   if (!Array.isArray(xValues) || !Array.isArray(yValues) || xValues.length != yValues.length) {\n      throw(\"LineSeries: parameters 'xValues' and 'yValues' must be numeric vectors of the same length.\");\n   }\n\n   // compute ranges for x and y values\n   const xValuesRange = mrange(xValues, 0.05);\n   const yValuesRange = mrange(yValues, 0.05);\n\n   // get axes context and adjust axes limits\n   const axes = getContext('axes');\n   axes.adjustXAxisLimits(xValuesRange);\n   axes.adjustYAxisLimits(yValuesRange);\n\n   // get reactive variables needed to compute coordinates\n   const xLim = axes.xLim;\n   const yLim = axes.yLim;\n   const axesWidth = axes.width;\n   const axesHeight = axes.height;\n   const scale = axes.scale;\n\n   // reactive variables for coordinates of data points in pixels\n   $: x = axes.scaleX(xValues, $xLim, $axesWidth);\n   $: y = axes.scaleY(yValues, $yLim, $axesHeight);\n   $: p = x !== undefined && y !== undefined ? x.map((v, i) => `${v},${y[i]}`).join(' ') : undefined;\n   $: lineStyleStr = `fill:transparent;stroke:${lineColor};stroke-width: ${lineWidth}px;stroke-dasharray:${axes.LINE_STYLES[$scale][lineType - 1]}`;\n</script>\n\n{#if p !== undefined}\n   <g class=\"series lineseries\" style=\"{lineStyleStr}\" title=\"{title}\">\n   <polyline class=\"line\" points=\"{p}\"/>\n   </g>\n{/if}\n\n<style>\n</style>\n","<script>\n\n   import { getContext } from 'svelte';\n   import { mrange } from 'mdatools/stat';\n   import { Colors } from './Colors';\n\n   // input parameters\n\texport let xValues;\n   export let yValues;\n   export let title = \"\";\n   export let lineWidth = 1;\n   export let lineColor = Colors.PRIMARY;\n   export let fillColor = Colors.PRIMARY;\n   export let opacity = 1;\n   export let lineType = 1;\n\n   /* sanity check of input parameters */\n   if (!Array.isArray(xValues) || !Array.isArray(yValues) || xValues.length != yValues.length) {\n      throw(\"AreaSeries: parameters 'xValues' and 'yValues' must be numeric vectors of the same length.\");\n   }\n\n   // compute ranges for x and y values\n   const xValuesRange = mrange(xValues, 0.05);\n   const yValuesRange = mrange(yValues, 0.05);\n\n   // get axes context and adjust axes limits\n   const axes = getContext('axes');\n   axes.adjustXAxisLimits(xValuesRange);\n   axes.adjustYAxisLimits(yValuesRange);\n\n   // get reactive variables needed to compute coordinates\n   const xLim = axes.xLim;\n   const yLim = axes.yLim;\n   const axesWidth = axes.width;\n   const axesHeight = axes.height;\n   const scale = axes.scale;\n\n   // reactive variables for coordinates of data points in pixels\n   $: y0 = axes.scaleY([0], $yLim, $axesHeight);\n   $: x = axes.scaleX(xValues, $xLim, $axesWidth);\n   $: y = axes.scaleY(yValues, $yLim, $axesHeight);\n   $: p = x !== undefined && y !== undefined ? x.map((v, i) => `${v},${y[i]}`).join(' ') : undefined;\n   $: areaStyleStr = `opacity:${opacity};fill:${fillColor};stroke:${lineColor};stroke-width: ${lineWidth}px;stroke-dasharray:${axes.LINE_STYLES[$scale][lineType - 1]}`;\n</script>\n\n{#if p !== undefined}\n   <g class=\"series lineseries\" style=\"{areaStyleStr}\" title=\"{title}\">\n   <polygon points=\"{x[0] + \",\" + y0 + \" \" + p + \" \" + x[x.length - 1] + \",\" + y0[0]}\"/>\n   </g>\n{/if}\n\n<style>\n</style>\n","<script>\n   import { max, mrange, subset, seq, rep, closestIndex } from \"mdatools/stat\";\n   import { Axes, XAxis, LineSeries, AreaSeries, Segments } from \"svelte-plots-basic\";\n\n   export let lineColor = \"#000000\";\n   export let areaColor = lineColor + \"40\";\n   export let statColor = \"#000000\";\n\n   export let x;\n   export let f;\n   export let crit = [];\n   export let tail = \"left\";\n\n   export let limX = mrange(x, 0.1);\n   export let limY = [0, max(f) * 1.2];\n   export let xLabel = \"\";\n   export let yLabel = undefined;\n   export let title = null;\n\n   let axLeft = [], axRight = [], afLeft = [], afRight = [];\n   let cxInd, cx, cf;\n\n   $: {\n      cxInd = crit.map(v => closestIndex(x, v) + 1);\n\n      cx = subset(x, cxInd);\n      cf = subset(f, cxInd);\n\n      if (tail === \"left\" || tail === \"both\") {\n         const indLeft = cxInd[0] >= 1 ? seq(1, (cxInd[0])) : [];\n         axLeft = subset(x, indLeft);\n         afLeft = subset(f, indLeft);\n      }\n\n      if (tail === \"right\" || tail === \"both\") {\n         const indRight = seq((cxInd.length > 1 ? cxInd[1] : cxInd[0]), x.length);\n         axRight = subset(x, indRight);\n         afRight = subset(f, indRight);\n      }\n   }\n</script>\n\n<!-- plot with population based CI and position of current sample proportion -->\n<Axes {limX} {limY} {xLabel} {yLabel} {title}>\n   <slot name=\"box\"></slot>\n\n   <!-- legend with statistics -->\n   <slot name=\"legend\"></slot>\n\n   <!-- area for left tail -->\n   {#if axLeft && axLeft.length > 1 && (tail === \"left\" || tail === \"both\")}\n      <AreaSeries xValues={axLeft} yValues={afLeft} lineColor=\"transparent\" fillColor={areaColor}/>\n   {/if}\n\n   <!-- area for right tail -->\n   {#if axRight !== undefined && axRight.length > 1 && (tail === \"right\" || tail === \"both\")}\n      <AreaSeries xValues={axRight} yValues={afRight} lineColor=\"transparent\" fillColor={areaColor}/>\n   {/if}\n\n   <!-- distribution curve -->\n   <LineSeries xValues={x} yValues={f} lineColor={lineColor} />\n\n   <!-- critical values -->\n   {#if cx.length > 0}\n   <Segments xStart={cx} xEnd={cx} yStart={rep(0, cf.length)} yEnd={cf} lineColor={statColor} />\n   {/if}\n\n   <slot></slot>\n   <slot name=\"yaxis\"></slot>\n   <XAxis slot=\"xaxis\" ></XAxis>\n</Axes>\n\n","<script>\n   import { seq, dnorm, rep, mean, sd, max, mrange } from 'mdatools/stat';\n   import { Axes, XAxis, LineSeries, Segments,  TextLegend, ScatterSeries, AreaSeries } from 'svelte-plots-basic';\n   import { formatLabels } from '../../shared/graasta';\n\n   export let popMean;\n   export let popSD;\n   export let sample;\n   export let popColor;\n   export let popAreaColor;\n   export let sampColor;\n   export let limX = [80, 120];\n\n   // left position of the legend\n   $: left = limX[0] + 0.75 * (limX[1] - limX[0]);\n\n   // parameters of PDF curve\n   $: popX = seq(popMean - 3.5 * popSD, popMean + 3.5 * popSD, 100);\n   $: popY = dnorm(popX, popMean, popSD);\n\n   // sample statistics\n   $: sampY = rep(max(popY) * 0.05, sample.length);\n   $: sampMean = mean(sample);\n\n   // limits for y-axis\n   $: limY = mrange(popY, 0.01);\n\n   // text values for legend\n   $: labelsStr = formatLabels([\n      {name: \"Sample mean\", value: mean(sample).toFixed(1)},\n      {name: \"Sample sd\", value: sd(sample).toFixed(1)}\n   ])\n</script>\n\n<Axes title={`Population: µ = ${popMean}, σ = ${popSD.toFixed(1)}`} xLabel={\"Chloride in water, [mg/L]\"} {limX} {limY}>\n\n   <slot></slot>\n\n   <!-- population distribution and mean  -->\n   <LineSeries xValues={popX} yValues={popY} lineColor={popColor} />\n   <AreaSeries xValues={popX} yValues={popY} lineColor={\"transparent\"} fillColor={popAreaColor}  />\n   <Segments xStart={[sampMean]} xEnd={[sampMean]} yStart={[0]} yEnd={[max(popY)]} lineColor={sampColor} lineType={3} />\n\n   <!-- sample points and mean  -->\n   <ScatterSeries xValues={sample} yValues={sampY} borderWidth={2} markerSize={1.25} faceColor={\"transparent\"} borderColor={sampColor} />\n   <Segments xStart={[popMean]} xEnd={[popMean]} yStart={[0]} yEnd={[max(popY)]} lineColor={popColor} lineType={2} />\n\n   <!-- sample statistics -->\n   <TextLegend textSize={1.15} {left} top={max(popY) * 0.90} dx=\"0\" elements={labelsStr} />\n\n   <XAxis slot=\"xaxis\"></XAxis>\n</Axes>\n\n","<script>\n   import {seq, dnorm, rep, mean, max} from 'mdatools/stat';\n   import {LineSeries, Segments, TextLabels, ScatterSeries, AreaSeries} from \"svelte-plots-basic\";\n\n   // shared components\n   import DistributionPlot from \"../../shared/plots/DistributionPlot.svelte\";\n   import MeanPopulationPlot from \"../../shared/plots/MeanPopulationPlot.svelte\";\n\n   export let popH0Mean;\n   export let popMean;\n   export let popSD;\n   export let sample;\n   export let colorsPop;\n   export let colorsH0;\n\n\n   const limX = [80, 120];\n   const xLabel = \"Chloride in water, [mg/L]\";\n\n\n   // size of population and axes plus coordinates of the points\n   $: popX = seq(popMean - 3.5 * popSD, popMean + 3.5 * popSD, 100);\n   $: popY = dnorm(popX, popMean, popSD);\n\n   $: popH0X = seq(popH0Mean - 3.5 * popSD, popH0Mean + 3.5 * popSD, 100);\n   $: popH0Y = dnorm(popH0X, popH0Mean, popSD);\n\n   $: sampY = rep(max(popY) * 0.05, sample.length);\n   $: sampMean = mean(sample);\n\n   $: title = `Population: µ = ${popMean}, σ = ${popSD.toFixed(1)}`;\n   $: limY = [0, max(popY) * 1.1];\n</script>\n\n<MeanPopulationPlot {popMean} {popSD} {sample} popColor={colorsPop.line} popAreaColor={colorsPop.area} sampColor={colorsPop.sample}>\n\n   <LineSeries xValues={popH0X} yValues={popH0Y} lineColor={colorsH0.line} />\n   <AreaSeries xValues={popH0X} yValues={popH0Y} lineColor={\"transparent\"} fillColor={colorsH0.area} />\n   <Segments xStart={[popH0Mean]} xEnd={[popH0Mean]} yStart={[0]} yEnd={[max(popY)]} lineColor={colorsH0.line} lineType={2} />\n\n   <TextLabels xValues={[popH0Mean]} yValues={[max(popH0Y)]} labels={[\"H0\"]} pos={3} faceColor={colorsH0.stat} />\n   <TextLabels xValues={[popMean]} yValues={[max(popY)]} labels={[\"Reality\"]} pos={3} faceColor={colorsPop.stat} />\n\n</MeanPopulationPlot>\n\n<!-- <DistributionPlot x={popX} f={popY} {title} {xLabel} {limX} {limY} lineColor={colorsPop.line} areaColor={colorsPop.area}\n   crit={[popMean]} statColor=\"transparent\" tail=\"both\">\n\n   <TextLegend textSize={1.15} x={85} y={max(f) * 1.55} pos={2} dx=\"1.30em\" elements = {[\n         \"sample mean: \" + sampMean.toFixed(2),\n         \"sample sd: \" + sampSD.toFixed(2),\n   ]} />\n\n   <Segments xStart={[popMean]} xEnd={[popMean]} yStart={[0]} yEnd={[max(popY)]} lineColor={colorsPop.line} lineType={2} />\n\n   <LineSeries xValues={popH0X} yValues={popH0Y} lineColor={colorsH0.line} />\n   <AreaSeries xValues={popH0X} yValues={popH0Y} lineColor={\"transparent\"} fillColor={colorsH0.area} />\n   <Segments xStart={[popH0Mean]} xEnd={[popH0Mean]} yStart={[0]} yEnd={[max(popY)]} lineColor={colorsH0.line} lineType={2} />\n\n   <TextLabels xValues={[popH0Mean]} yValues={[max(popH0Y)]} labels={[\"H0\"]} pos={3} faceColor={colorsH0.stat} />\n   <TextLabels xValues={[popMean]} yValues={[max(popY)]} labels={[\"Reality\"]} pos={3} faceColor={colorsPop.stat} />\n\n   <ScatterSeries xValues={sample} yValues={sampY} borderWidth={2} markerSize={1.2} faceColor={\"transparent\"} borderColor={colorsPop.sample} />\n   <Segments xStart={[sampMean]} xEnd={[sampMean]} yStart={[0]} yEnd={[max(popY)]} lineColor={colorsPop.sample} lineType={3} />\n\n</DistributionPlot> -->\n","<script>\n   import { mrange, max } from \"mdatools/stat\";\n   import { TextLegend } from \"svelte-plots-basic\";\n\n   // graasta shared components\n   import DistributionPlot from '../../shared/plots/DistributionPlot.svelte';\n   import { formatLabels } from \"../../shared/graasta.js\";\n\n   export let x;\n   export let f;\n   export let crit;\n   export let tail;\n   export let pValue;\n   export let alpha;\n   export let clicked;\n\n   export let showLegend = true;\n   export let H0LegendStr = \"\";\n   export let xLabel = \"\";\n\n   export let reset = false;\n   export let limX = mrange(x, 0.1);\n   export let limY = null;\n\n   export let mainColor = \"#b0b0b0\";\n   export let testFailColor = \"#ff8866\";\n\n   let nSamples = 0;\n   let nSamplesBelowAlpha = 0;\n\n   $: lineColor = pValue < alpha ? testFailColor : mainColor;\n   $: areaColor = lineColor + \"40\";\n   $: statColor = lineColor + \"90\";\n\n   $: limYLocal = limY === null ? [0, max(f) * (showLegend ? 1.45 : 1.2)] : limY;\n\n   // cumulative statistics\n   $: {\n      clicked;\n\n      // reset statistics if sample size, population proportion or a test tail has been changed\n      if (reset) {\n         nSamples = 0;\n         nSamplesBelowAlpha = 0;\n      }\n\n      // count number of samples taken for the same test conditions and how many have p-value < 0.05\n      nSamples = nSamples + 1;\n      nSamplesBelowAlpha = nSamplesBelowAlpha + (pValue < alpha);\n   }\n\n   // text values for stat table\n   $: labelsStr = formatLabels([\n      {\n         name: H0LegendStr + \", p\",\n         value: `<tspan ${pValue < alpha ? \"fill=\" + testFailColor : \"\"}>${pValue.toFixed(3)}</tspan>`\n      },\n      {\n         name: `# samples p < ${alpha}`,\n         value:  `${nSamplesBelowAlpha}/${nSamples} (${(100 * nSamplesBelowAlpha/nSamples).toFixed(1)}%)`\n      }\n   ]);\n</script>\n\n<!-- plot with population based CI and position of current sample proportion -->\n<DistributionPlot {x} {f} {xLabel} {crit} {tail} {lineColor} {areaColor} {statColor} {limX} limY={limYLocal} >\n   <slot></slot>\n   <slot name=\"legend\">\n   {#if showLegend}\n      <TextLegend textSize={1.15} left={limX[0]} top={max(f) * 1.35} dx=\"0.5em\" dy=\"1.35em\" elements={labelsStr} />\n   {/if}\n   </slot>\n</DistributionPlot>\n\n\n","<script>\n   import { seq, dt } from \"mdatools/stat\";\n   import TestPlot from \"../../shared/plots/TestPlot.svelte\";\n\n   export let testRes;\n   export let showLegend = true;\n   export let H0LegendStr = \"\";\n   export let xLabel = \"\";\n   export let limX = undefined;\n   export let limY = undefined;\n   export let mainColor = \"#808080\";\n   export let reset;\n   export let clicked;\n\n   const signs = {\"both\": \"=\", \"left\": \"≥\", \"right\": \"≤\"};\n\n   // PDF curve for sampling distribution\n   $: t = seq(-10, 10, 300)\n   $: x = t.map(v => v * testRes.se + testRes.effectExpected);\n   $: f = dt(t, testRes.DoF);\n\n   // critical values\n   $: dp = Math.abs(testRes.effectObserved - testRes.effectExpected)\n   $: crit = testRes.tail === \"both\" ? [testRes.effectExpected - dp, testRes.effectExpected + dp] : [testRes.effectObserved];\n\n   $: H0LegendStr = testRes.test === \"Two sample t-test\" ?\n      `H0: µ1 – µ2 = 0` :\n      `H0: µ ${signs[testRes.tail]} ${testRes.effectExpected.toFixed(2)}`;\n</script>\n\n<TestPlot\n   {x} {f} {crit} {showLegend} {mainColor} {xLabel} {H0LegendStr} {limX} {limY} {reset} {clicked}\n   pValue={testRes.pValue}\n   alpha={testRes.alpha}\n   tail={testRes.tail}\n>\n<slot></slot>\n</TestPlot>\n","<script>\n   import {pt, tTest1, seq, max, dt, qt} from \"mdatools/stat\";\n   import {LineSeries, TextLegend, Segments} from 'svelte-plots-basic';\n\n   // shared components\n   import { formatLabels } from \"../../shared/graasta.js\";\n   import TTestPlot from \"../../shared/plots/TTestPlot.svelte\";\n\n   export let popMean;\n   export let popH0Mean;\n   export let popSD;\n   export let sample;\n   export let tail;\n   export let colorsPop;\n   export let reset;\n   export let clicked;\n\n   // constant parameters\n   const signs = {\"both\": \"=\", \"left\": \"≥\", \"right\": \"≤\"};\n   const alpha = 0.05;\n   const mainColor = \"#a0a0a0\";\n   const xLabel = \"Expected sample mean, m\";\n   const limX = [85, 115];\n\n   // run t-test\n   $: testRes = tTest1(sample, popH0Mean, 0.05, tail)\n\n   // statistics for current sample\n   $: sampSize = sample.length;\n   $: popSE = popSD / Math.sqrt(sampSize);\n\n   // PDF curve for sampling distribution (real)\n   $: t = seq(-10, 10, 300);\n   $: xr = t.map(v => v * popSE + popMean);\n   $: fr = dt(t, sampSize - 1);\n\n   // power of test and corresponding PDF\n   $: tCrit = qt(tail === \"left\" ? alpha : 1 - alpha, sampSize - 1);\n   $: critMean = popH0Mean + tCrit * popSE;\n   $: power = tail === \"right\" ? 1 - pt(critMean - popMean, sampSize - 1) : pt((critMean - popMean) / popSE, sampSize - 1);\n\n   // string for H0 hypothesis\n   $: H0LegendStr = `H0: µ ${signs[tail]} ${popH0Mean.toFixed(1)}`;\n</script>\n\n<TTestPlot {mainColor} {clicked} {reset} {testRes} {H0LegendStr} {limX} {xLabel} >\n   <LineSeries xValues={xr} yValues={fr} lineColor={colorsPop.sample + \"a0\"} />\n   <Segments xStart={[testRes.effectObserved]} xEnd={[testRes.effectObserved]}\n      yStart={[0]} yEnd={[max(fr)]} lineColor={colorsPop.sample} lineType={2} />\n   <TextLegend textSize={1.15} top={max(fr) * 1.05} dx=\"1.5em\" dy=\"2.7em\" left={85}\n      elements={formatLabels([{name: \"power\", value: power.toFixed(3)}])} />\n</TTestPlot>\n\n","<script>\n   import {rnorm} from 'mdatools/stat';\n\n   // shared components\n   import {default as StatApp} from \"../../shared/StatApp.svelte\";\n   import { colors } from \"../../shared/graasta.js\";\n\n   // shared components - controls\n   import AppControlArea from \"../../shared/controls/AppControlArea.svelte\";\n   import AppControlButton from \"../../shared/controls/AppControlButton.svelte\";\n   import AppControlSwitch from \"../../shared/controls/AppControlSwitch.svelte\";\n   import AppControlRange from \"../../shared/controls/AppControlRange.svelte\";\n\n   // local components\n   import PopulationPlot from \"./PopulationPlot.svelte\";\n   import TestResults from \"./TestResults.svelte\";\n\n   // colors for population\n   const colorsPop = {\n      line: colors.plots.POPULATIONS[0],\n      area: colors.plots.POPULATIONS_PALE[0],\n      sample: colors.plots.SAMPLES[0],\n      stat: colors.plots.SAMPLES[0]\n   };\n\n   // colors for H0\n   const colorsH0 = {\n      line: \"#c0c0c0\",\n      area: \"#c0c0c020\",\n      stat: \"606060\"\n   };\n\n   // size of population and vector with element indices\n   const popH0Mean = 100;\n\n   // variable parameters\n   let popMean = 105;\n   let popSD = 3;\n   let sampSize = 5;\n   let sample = [];\n   let tail = \"right\";\n\n   let sampSizeOld = sampSize;\n   let popSDOld = popSD;\n   let popMeanOld = popMean;\n   let tailOld = tail;\n   let reset = false;\n   let clicked;\n\n   // when sample size or population SD changed - reset statistics and take new sample\n   $: {\n      if (sample && (tailOld !== tail || sampSizeOld !== sampSize || popSDOld !== popSD || popMean !== popMeanOld)) {\n         reset = true;\n         sampSizeOld = sampSize;\n         popSDOld = popSD;\n         popMeanOld = popMean;\n         tailOld = tail;\n         takeNewSample()\n      } else {\n         reset = false;\n      }\n   }\n\n   function takeNewSample() {\n      sample = rnorm(sampSize, popMean, popSD);\n      clicked = Math.random();\n   }\n\n   // take first sample\n   takeNewSample()\n</script>\n\n<StatApp>\n   <div class=\"app-layout\">\n\n      <!-- plot for population individuals  -->\n      <div class=\"app-population-plot-area\">\n         <PopulationPlot {popMean} {popH0Mean} {popSD} {sample} {colorsPop} {colorsH0}  />\n      </div>\n\n      <!-- confidence intervals and statistic table -->\n      <div class=\"app-test-plot-area\">\n         <TestResults {clicked} {reset} {popMean} {popH0Mean} {popSD} {sample} {tail} {colorsPop} />\n      </div>\n\n      <!-- control elements -->\n      <div class=\"app-controls-area\">\n         <AppControlArea>\n            <AppControlSwitch id=\"tail\" label=\"Tail\" bind:value={tail} options={[\"left\", \"right\"]} />\n            <AppControlRange id=\"popMean\" label=\"Real mean (µ)\" bind:value={popMean} min={95} max={105} step={1} decNum={0} />\n            <AppControlRange id=\"popSD\" label=\"Sigma (σ)\" bind:value={popSD} min={2} max={4} step={0.1} decNum={1} />\n            <AppControlSwitch id=\"sampleSize\" label=\"Sample size\" bind:value={sampSize} options={[5, 10, 20, 40]} />\n            <AppControlButton id=\"newSample\" label=\"Sample\" text=\"Take new\" on:click={takeNewSample} />\n         </AppControlArea>\n      </div>\n\n   </div>\n\n   <div slot=\"help\">\n      <h2>Power of test and Type II errors</h2>\n      <p>\n         This app is similar to <code>asta-b207</code> where you played with one-sample t-test. However, in this case\n         you can emulate situations when H0 is not true, meaning the true population mean, µ, is different from\n         what you expect by setting H0. The possibilities for H0 are the same, depending on a tail, you have the\n         following options — \"left\": µ ≥ 100 mg/L, and \"right\": µ ≤ 100 mg/L. But now you can\n         also change the real population mean and set it to be smaller or larger than 100 mg/L.\n      </p>\n      <p>\n         Try to do this and check how often you will be able to reject H0 (in this case we work with significance\n         level 0.05, so we reject H0 when p-value is below this value). A probability to reject wrong H0 is called a\n         <strong>power of test</strong>. And the situation when you can not reject it is called <strong>Type II</strong>\n         error or false negative. The probability to get Type II error is always opposite to the power of test, e.g.\n         if power is 80% you have 20% chance to make a Type II error.\n      </p>\n      <p>\n         The power of any test depends on several things. First of all it is the test itself — different methods have\n         different power. Second, it depends on the <strong>size of effect</strong> — difference between H0 mean and the real\n         population mean (H1). E.g. if H0 assumes that µ ≤ 100 and the real µ = 105, this difference is 5. Finally, power also\n         depends on standard deviation of your population as well as on the sample size. The last has very important consequence\n         — the smaller effect you want to detect, the larger sample size shpuld be.\n      </p>\n   </div>\n</StatApp>\n\n<style>\n\n.app-layout {\n   width: 100%;\n   height: 100%;\n   position: relative;\n   display: grid;\n   grid-template-areas:\n      \"pop testplot\"\n      \"pop controls\"\n      \"pop .\";\n   grid-template-rows: max(250px, 30%) 1fr min-content;\n   grid-template-columns: 65% 35%;\n}\n\n\n.app-population-plot-area {\n   grid-area: pop;\n   box-sizing: border-box;\n   height: 100%;\n   width: 100%;\n   padding-right: 20px;\n}\n\n.app-test-plot-area {\n   grid-area: testplot;\n}\n\n.app-controls-area {\n   padding-top: 20px;\n   grid-area: controls;\n}\n\n</style>","import App from './App.svelte';\n\nconst app = new App({\n\ttarget: document.getElementById(\"graasta-app-container\"),\n});\n\nexport default app;"],"names":["noop","run","fn","blank_object","Object","create","run_all","fns","forEach","is_function","thing","safe_not_equal","a","b","component_subscribe","component","store","callback","$$","on_destroy","push","callbacks","unsub","subscribe","unsubscribe","create_slot","definition","ctx","$$scope","slot_ctx","get_slot_context","tar","src","k","assign","slice","update_slot","slot","slot_definition","dirty","get_slot_changes_fn","get_slot_context_fn","slot_changes","lets","undefined","merged","len","Math","max","length","i","get_slot_changes","slot_context","p","append","target","node","appendChild","insert","anchor","insertBefore","detach","parentNode","removeChild","destroy_each","iterations","detaching","d","element","name","document","createElement","svg_element","createElementNS","text","data","createTextNode","space","empty","listen","event","handler","options","addEventListener","removeEventListener","attr","attribute","value","removeAttribute","getAttribute","setAttribute","set_data","wholeText","set_input_value","input","set_style","key","important","style","setProperty","toggle_class","toggle","classList","current_component","set_current_component","get_current_component","Error","createEventDispatcher","type","detail","e","createEvent","initCustomEvent","custom_event","call","getContext","context","get","dirty_components","binding_callbacks","render_callbacks","flush_callbacks","resolved_promise","Promise","resolve","update_scheduled","add_render_callback","add_flush_callback","flushing","seen_callbacks","Set","flush","update","pop","has","add","clear","fragment","before_update","after_update","outroing","outros","group_outros","r","c","check_outros","transition_in","block","local","delete","transition_out","o","globals","window","globalThis","global","destroy_block","lookup","bind","index","props","bound","create_component","mount_component","customElement","on_mount","m","new_on_destroy","map","filter","destroy_component","make_dirty","then","fill","init","instance","create_fragment","not_equal","parent_component","on_disconnect","Map","skip_bound","ready","ret","rest","hydrate","nodes","Array","from","childNodes","children","l","intro","SvelteComponent","[object Object]","this","$destroy","indexOf","splice","$$props","obj","$$set","keys","getPValue","pfun","crit","tail","params","min","x","n","Number","POSITIVE_INFINITY","NEGATIVE_INFINITY","mean","s","sum","variance","biased","y","mx","my","cov","sd","sqrt","seq","isInteger","step","out","abs","pow","round","log10","v","EPSILON","mrange","margin","mn","dnorm","mu","sigma","isArray","A","PI","frac","df","exp","qnorm","Infinity","q","res","log","dt","t","dof","gamma","pt","integrate","qt","tan","sign","rep","nx","j","subset","indices","f","acc","eps","oldfs","w","fs","h","q4","q2","tol","mid","left","right","z","sin","showHelp","location","hash","colors","POPULATIONS_PALE","POPULATIONS","SAMPLES","STAT_NAME","STAT_VALUE","formatLabels","labels","labelsStr","errormsg","id","label","old_blocks","get_key","dynamic","list","destroy","create_each_block","next","get_context","old_indexes","new_blocks","new_lookup","deltas","child_ctx","set","will_move","did_move","first","new_block","old_block","new_key","old_key","option","toFixed","decNum","dispatch","sliderElement","sliderContainer","isDragging","computeValue","tmpValue","getRelativePosition","sliderRect","getBoundingClientRect","parentRect","minX","maxX","width","clientX","subscriber_queue","writable","start","stop","subscribers","new_value","run_queue","invalidate","subscriber","niceNum","localRange","exponent","floor","fraction","niceFraction","getScale","height","limX","limY","title","xLabel","yLabel","multiSeries","AXES_MARGIN_FACTORS","small","medium","large","clipPathID","random","axesWrapper","axesMargins","xLim","yLim","scale","isOk","adjustAxisLimits","lim","newLim","adjustedLim","scaleX","doSizeScale","$isOk","margins","scaleY","setContext","addXAxisMargins","addYAxisMargins","adjustXAxisLimits","some","adjustYAxisLimits","getAxisTicks","ticks","maxTickNum","range","tickSpacing","tickMin","ceil","tickMax","LINE_STYLES","LABELS_MARGIN","TICK_NUM","ro","ResizeObserver","entries","entry","cr","contentRect","observe","$scale","$yLim","$xLim","isNaN","cpx","$width","cpy","$height","Colors","AXIS_LINE","AXIS_TICK","WHITE","BLACK","GRAY","MIDDLEGRAY","LIGHTGRAY","DARKGRAY","PRIMARY","PRIMARY_TEXT","tickLabels","showGrid","tickMode","axisLineStyleStr","gridLineStyleStr","axes","axesWidth","axesHeight","$axesWidth","$axesHeight","dy","tickNum","ticksX","ticksY","xStart","xEnd","yStart","yEnd","lineColor","lineType","lineWidth","x1","x2","y1","y2","lineStyleStr","xValues","yValues","pos","faceColor","borderColor","borderWidth","textSize","dx","textStyleStr","top","elements","marker","markerSize","markers","markerSymbol","xValuesRange","yValuesRange","join","fillColor","opacity","y0","areaStyleStr","cxInd","cx","cf","areaColor","statColor","axLeft","axRight","afLeft","afRight","reduce","prev","curr","closestIndex","indLeft","indRight","popMean","popSD","sample","popColor","popAreaColor","sampColor","popX","popY","sampY","sampMean","line","area","stat","popH0Mean","colorsPop","colorsH0","popH0X","popH0Y","pValue","alpha","clicked","showLegend","H0LegendStr","reset","mainColor","testFailColor","nSamples","nSamplesBelowAlpha","limYLocal","testRes","signs","both","se","effectExpected","DoF","dp","effectObserved","test","tValue","errMargin","ci","tTest1","sampSize","popSE","xr","fr","tCrit","critMean","power","sampSizeOld","popSDOld","popMeanOld","tailOld","takeNewSample","rnorm","getElementById"],"mappings":"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"}